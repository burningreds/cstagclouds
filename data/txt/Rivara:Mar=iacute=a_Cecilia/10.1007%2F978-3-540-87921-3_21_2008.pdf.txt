Accurate Interpolation of Terrain Surfaces from
Over-Sampled Grid Data

Narc´ıs Coll1, Marit´e Guerrieri1, Maria-Cecilia Rivara2, and J. Antoni Sellar`es1

1 Institut d’Inform`atica i Aplicacions - Universitat de Girona - Spain
{coll,mariteg,sellares}@ima.udg.edu(cid:2)
2 Department of Computer Science - Universidad de Chile - Chile

mcrivara@dcc.uchile.cl

Summary. For grid terrain data, we propose a Lepp-surface triangulation method
that starts with a coarse initial triangulation of the input data, and incrementally adds
data points that reduce the worst edge approximation error in the mesh. The method
generalizes a previous Lepp-centroid method in two dimensions as follows: for the edge
E, having highest error in the mesh, one or two points close to (one or two) terminal
edges associated to E, are inserted in the mesh. The edge error is computed by adding
the triangle approximation errors of the two triangles that share E, while each triangle
error in L2-norm is computed by using a curvature tensor (good approximation of the
surface) at a representative point associated to both triangles. The method produces
triangular approximations that capture well the relevant features of the terrain surface
by naturally producing well-shaped triangles.

1 Introduction

Techniques for the eﬃcient and timely management of huge terrain grid data
produced by satellites have been intensively developed in the last ten years.
Problems related with storage requirements, real-time rendering, data transmission,
 and visualization arise when dealing with these huge data sets. Data representation 
methods that minimize the data size by modeling well the important
features of the terrain are highly desirable.

For visualization purposes, a fast and eﬃcient large scale rendering with minimal 
memory and hardware requirements is always desirable, since the grid data
set is usually too large to be displayed as a whole. Two main approaches have
been mainly used to eﬃciently deal with the rendering task: the use of diﬀerent
levels of detail (LODs) depending on the view focus, and the reduction of the
data size without loosing visual representation. View dependent LOD methods
display the surfaces with adaptive resolution depending on the distance to the
view focus [7, 17]. Data reduction methods basically consider two alternative
strategies for the treatment of grid data, top-down approach [2, 4, 10, 14, 15, 23]
and bottom-up approach [6, 9, 11]. The top-down algorithms, start with a few

(cid:2) Authors partially supported by the Spanish Ministerio de Educaci´on y Ciencia under

grant TIN2007-67982-C02-02.

352

N. Coll et al.

triangles and incrementally add vertices until obtaining a triangulation that accomplishes 
requirements previously established. This kind of process is known
as reﬁnement process. The second strategy starts with a mesh of the whole data
and deletes vertices or edges and sometimes moves vertices to a new better location 
until it achieves the desired requirements. These methods have been called
decimation or simpliﬁcation. The vertices added or moved in both strategies can
belong to the initial data set or can be extrapolated from them. Diﬀerent criteria
to ﬁnish the process have been used: number of elements, faces or vertices, error
estimation between the initial and ﬁnal model, element quality, etc.

For numerical simulations, additional constraints need also to be taken into
account. The triangles of the ﬁtting triangulated surface must be reasonably
good-shaped (with bounded smallest angle) which guarantees the convergence of
the numerical method [24]. A triangulation of a terrain surface can be built either
by using only the xy-coordinates of the input points, or the 3D information of
the input points. In the latter case it is called a data-dependent triangulation [5].
When the ﬁtting surface is created from a triangulation in the xy-plane, usually
the Delaunay triangulation is used since this maximizes the minimum angle.
However, having well-shaped triangles in the xy-plane does not guarantee wellshaped 
triangles on the the ﬁtting surface. Moreover, it is also known that when a
data-dependent triangulation is used to ﬁt a triangulated surface by minimizing
the L2 norm of the diﬀerence between the original and the approximated surfaces,
long and skinny triangles can be obtained throughout the ﬁtting process [18].

Figure 1 shows two possible triangulations of a half cylinder. The triangulation
of Figure 1(a) minimizes the L2 error, while the triangulation in Figure 1(b) was
obtained with our method that considers the L2 norm error and produces wellshaped 
triangles. Even when the ﬁrst triangulation approximates the surface
with less mean error (2.9e-05) than the second one (0.1), the second triangulation
is more desirable for numerous applications requiring of the use of numerical
methods.

In this paper we center on the problem of ﬁtting a data-dependent triangulation 
with a small number of triangles to a set of grid data points so that the
triangles are well-shaped and the L2 error remains low. Note that the decimation

(a)

(b)

Fig. 1. Comparison of two possible triangulations of a half cylinder surface with the
same quantity of ﬁnal vertices. In (a) the triangulation minimizes the L2 error and in
(b) the triangulation tries to maximize the quality of the triangles.

Accurate Interpolation of Terrain Surfaces

353

strategy centers on the elimination of biggest possible number of input data. On
the contrary, our goal is to obtain an accurate approximation by progressively
adding the smallest possible number of input data points.

1.1 Our Contribution
We consider a ﬁnite set V of grid data from a terrain surface F . The output is
an interpolating data-dependent triangulation (piecewise linear surface deﬁned
by a set of triangles) F whose vertices belong to a subset V ⊂ V . Out method
selects relevant points of V in such a way that: 1) F ﬁts well the original surface
F ; 2) the triangles of F , when possible, are well-shaped; 3) the number of points
in V (triangles of F ) remains low.

The proposed method estimates the edge approximation error as the sum of
the L2 error of the two triangles that share the edge by using a curvature tensor
that locally approximates the surface at each point of the model. The algorithm
gives more importance to the L2 metric but when it is possible the aspect-ratio of
the elements is taken also into account, achieving in this way an approximation
of the terrain with good quality elements. This is the main diﬀerence of our
algorithm with previous works in this area [2, 6, 10, 11].

The remaining part of this paper is organized as follows. Basic concepts necessary 
to understand the proposed method like linear interpolation, surface curvature 
and the Lepp Delaunay method are introduced in Section 2. Section 3
details the theoretical tools needed to approximate a terrain from a grid: edge error,
 point insertion, two lepps strategy and surface-midpoint or surface-centroid
selection. In Section 4 we describe the algorithm that integrates the diﬀerent
tools. In section 5 we discuss empirical testing as well as the advantages of our
method. The document ﬁnishes with same conclusions and future work issues.

2 Preliminaries

Regular grids are widely used techniques for modeling terrain surfaces because of
their simple structure and the availability of satellite technology to get the data.
A disadvantage of this structure is that this uses more information than necessary
to represent the irregularity of the terrain. Irregular triangulations obtained by
sampling of irregularly spaced relevant points over the terrain surface are more
adequate to adaptively represent the terrains. In this way density of the sample
points can be adapted to the local variation in elevation: high density is only
needed in regions where the elevation varies a lot.

In the following sections we introduce the theoretical concepts we need to

develop our approximation methods.

2.1 Linear Interpolation
Given a function F (x, y), (x, y) ∈ R2, and a set V of n arbitrary points
(xi, yi) ∈ R2, the Linear Interpolation consist of constructing a piecewise
linear interpolation function F (x, y) such that

354

N. Coll et al.

F (xi, yi) = F (xi, yi) , i = 1, . . . , n .

The common method is to construct a triangulation T of V and to deﬁne
F T (x, y) by

F T (x, y) =

F Tk(x, y) ,

(cid:2)

Tk

where Tk is a triangle of the triangulation T and F Tk(x, y) is the function with
value 0 outside Tk and inside Tk is equal to the unique linear polynomial function
deﬁned by the values of F at the three vertices of Tk. Since for ﬁxed V the quality
of the interpolation depends on the speciﬁc triangulation T , T has to be chosen
in an optimal manner.

The Lp norm of a function f(x, y) is deﬁned by
|f(x, y)|p dxdy

(cid:4)f(cid:4)Lp =

(cid:3)(cid:4)

(cid:5) 1

p

.

R2

Thus, the triangulation T minimizing

(cid:4)F − F T(cid:4)Lp

is the best triangulation to obtain a good linear interpolation of a function
F (x, y).

An expression for the L2 error for a quadratic function F with hessian H(F )
on a single triangle Tk with vertices v1, v2 and v3 was computed by Nadler [16]:

(cid:4)

|F − F Tk

|2 dxdy =

E2(F, F Tk) =
where |Tk| is the area of Tk and

Tk

|Tk|
180

(cid:6)
(d1 + d2 + d3)2 + d2

(cid:7)

1 + d2

2 + d2
3

,

di =

1
2

(vi+1 − vi)T H(F )(vi+1 − vi) .

From this expression Nadler proved that, when the number n of points goes
to inﬁnity, the orientation of the triangles for best L2 interpolation is given by
the eigenvectors of the hessian matrix, while their relative size in each principal
direction is given by the reciprocal square root of the absolute value of the corresponding 
eigenvalue. Later Rippa [18] indicated how to construct the triangulation 
T for best Lp interpolation of a quadratic function F with det(H(F )) > 0 as
follows. Let λ1, λ2 be the eigenvalues of the hessian H(F ), and e1, e2 the corresponding 
eigenvectors. Consider also the transformation (x, y) =
e2.
The optimal triangulation is obtained from the Delaunay triangulation of the
transformed set of input points V . Given an edge e = v1v3 adjacent to triangles
(cid:5)v1v2v3, (cid:5)v3v4v1, the Delaunay criterion replaces e by the edge e
(cid:2) = v2v4 if
and only if

∠v1v2v3 + ∠v3v4v1 > ∠v2v3v4 + ∠v4v1v2 .
(cid:2)) coordinates is
(cid:2)
This condition of the Delaunay criterion applied to the (x
equivalent to the same condition applied to the (x, y) coordinates by computing 
the angles using the metric with eigenvalues |λ1|, |λ2| and corresponding
eigenvectors e1, e2.

e1+y

(cid:2)
x

(cid:8)

λ2
λ1

, y

(cid:2)

Accurate Interpolation of Terrain Surfaces

355

2.2 Surface Curvature
Let S ⊂ R3 be a smooth surface. Given a point p ∈ S, let t be a unit vector
in the tangent plane at p and let n be the unit normal vector at p. The normal
curvature kn(t) is the curvature of the planar curve that results from intersecting
S with the plane through p spanned by n and t. The minimal normal curvature
k1 and the maximal normal curvature k2 are called principal curvatures. The
associated tangent vectors t1 and t2 are called principal directions and are always
perpendicular to each other (if k1 = k2, it is suﬃcient to pick two arbitrary
orthogonal tangent vectors). The normal curvature function kn(t) is a quadratic
form and satisﬁes

kn(t) = cos2(θ)k1 + sin2(θ)k2 ,

where θ is the angle between t and t1.

The curvature tensor T is the symmetric 3× 3 matrix with the eigenvalues k1,
k2, 0 and the corresponding eigenvectors t1, t2, n. Then, the normal curvature
can be computed by

kn(t) = tT T t .

When surfaces are approximated by using polygonal meshes, the goal is to
compute approximations of the previous concepts directly from the mesh data.
Many methods have been proposed to this purpose. The general idea of the
techniques is to compute discrete diﬀerential properties as spatial averages over
a local neighborhood of a point p on the mesh. The size of the local neighborhood 
critically aﬀects the stability and accuracy of the discrete operators. A
complete survey of all the proposed methods and a robust statistical estimation
of curvature on sampled surfaces can be found in [12]. In our approach the curvature 
tensor is approximated by a quadratic patch ﬁtted with the least-squares
technique.

2.3 Lepp Delaunay Methods for Quality Triangulation

The following concepts were introduced and used in references [19, 21, 22]. An
edge E is called a terminal edge in a triangulation if E is the longest edge of
every triangle that shares E, while the triangles that share E are called terminal
triangles. Note that in 2-dimensions either E is shared by two terminal triangles
t1, t2 if E is an interior edge, or E is shared by a single terminal triangle t1 if E
is a boundary (constrained) edge. See Figure 2 where edge AB is an interior terminal 
edge shared by two terminal triangles t2, t3, while edge CD is a boundary
terminal edge with associated terminal triangle t3.
For any triangle, the longest edge propagating path of t0, called Lepp(t0), is
the ordered sequence {tj}N+1
, where tj is the neighbor triangle on a longest
edge of tj−1, and longest-edge (tj) > longest-edge (tj−1), for j=1,... N. Edge E
= longest-edge(tN+1) = longest-edge(tN) is a terminal edge and this condition
determines N. Consequently either E is shared by a couple of terminal triangles
(tN , tN+1) if E is an interior edge, or E is shared by a unique terminal triangle
tN with boundary (constrained) longest edge. See Figure 2.

0

356

N. Coll et al.

t 0

t 1

A

t 2

t 3

(a)

B

*
t0

t1

t 3

t 2

D

C

(b)

Fig. 2. (a) AB is an interior terminal edge shared by terminal triangles (t2, t3) associated 
to Lepp(t0) ={t0, t1, t2, t3}; (b) CD is a boundary terminal edge with unique
terminal triangle t3 associated to Lepp(t

0, t1, t2, t3}
∗

0) = {t
∗

Lepp-midpoint and Lepp-centroid algorithms work essentially in the same
way. For any general (planar straight line graph) input data, and a quality
threshold angle θ, the algorithm constructs constrained Delaunay triangulations
that have all angles at least θ as follows: for every bad triangle t with smallest
angle less than θ, a Lepp-search is used to ﬁnd an associated convex terminal
quadrilateral formed by the union of two terminal triangles which share a local 
longest edge (terminal edge) in the mesh. Then, associated to this terminal
quadrilateral, a point p is selected for point insertion, and Delaunay inserted in
the mesh. The process is repeated until the triangle t is destroyed in the mesh. In
the case of Lepp-midpoint algorithm, p is selected as the terminal edge midpoint,
while for the Lepp-centroid algorithm the centroid of this terminal quadrilateral
is computed. In [20] it has been proved that the centroid version produces triangulations 
both with average smallest angles greater than those obtained with
the midpoint version, and with bigger smallest edges without suﬀering of a rare
looping case associated to the midpoint method.

3 Terrain Approximation from Grid Data Points

Consider a set V of size n of grid data of a terrain surface F . Given a ﬁxed size
data n (cid:6) n, we want to construct a triangulation F over a subset V ⊂ V of size
n such that F ﬁts well to F . We base our approach on an iterative reﬁnement
0 of a very small
methods. These methods take as input a triangulated mesh F
subset of V and compute a sequence of meshes, F
, i = 1, 2, . . ., by successive
i is a related point of
insertions of new vertices. The new vertex of a mesh F
i−1. In the following sections we
the worst element, edge or face, of the mesh F
present the concepts required by our reﬁnement method: the error associated
to each edge based on the L2 norm, the point insertion mechanism used to
improve the ﬁtting of the approximated surface to the original surface or to
obtain triangles with good aspect-ratio, and the two lepps strategy in order to
determine the data points, surface-midpoints or surface-centroids, to be selected
and inserted into the triangulation F .

i

Accurate Interpolation of Terrain Surfaces

357

3.1 Edge Error

Given a point p on F , we can approximate the neighborhood of F around p by
a surface patch of the form

x(u, v) =

⎞
⎠ ,

u
v

1
2(k1u2 + k2v2)

⎛
⎝

(cid:3)

(cid:5)

.

k1 0
0 k2

using the frame coordinates with origin at p and axes determined by the principal
directions t1, t2 and the surface normal n at p. Then, locally, the surface F is a
quadratic function F (u, v) = 1

2(k1u2 + k2v2) with hessian as follows:

In the canonical R3 frame coordinates the quadratic form deﬁned by this hessian
coincides with the curvature tensor.
v deﬁnes a local interpolation error for a triangle t = (cid:5)v1v2v3
(cid:7)

Given an input vertex v, let Tv be the curvature tensor at v. Then, each vertex

(cid:6)
(d1 + d2 + d3)2 + d2

1 + d2

2 + d2
3

,

E2(t, v) =

|t|
180

where |t| is the area of the projection of t onto the tangent plane at v and

di =

1
2

(vi+1 − vi)T Tv(vi+1 − vi) .

For a given edge e adjacent to triangles te and t

(cid:2)
e we consider the grid data
point ce whose projection onto the xy-plane is the closest data point to the
centroid of the quadrilateral determined by union of the projections onto the xy-
(cid:2)
plane of te and t
e among the projections of input points in V . The interpolation
error of the edge e is deﬁned by

E2(e) = E2(te, ce) + E2(t

(cid:2)
e, ce) .

The curvature tensor Tce needed to compute E2(e), as discussed in
Section 2.2, is approximated by a quadratic patch ﬁtted with a least-squares
technique. The size of the neighborhood of ce is taken proportionally to the
length of the shortest edge of triangles te and t

(cid:2)
e.

3.2 Point Insertion

When a new point p is selected for insertion in the triangulation, a simple valid
mesh is obtained by joining p with vertices of the triangle whose xy-projection
contains the xy-projection of p. Then, a sequence of edge ﬂips are used either
for error improvement or for triangle quality improvement as follows:

358

N. Coll et al.

(i) if the error of one of the two conﬁgurations is far bigger than the error associated 
to the other conﬁguration, the conﬁguration of less error is selected.
(ii) if both conﬁgurations have approximately the same error, the conﬁguration

of better angles on the terrain surface is selected.

Notice that:
• triangles with small angles can be obtained even in regions with low curvature
• vertices need to be well ﬁtted by the surface patch deﬁned by the local

by only applying this strategy,

curvature tensor in order to properly apply the error criterion.

Consequently, adjustment and planarity measures are needed for an accurate
point insertion. Following sections are dedicated to deﬁne these measures and to
specify how the edge ﬂipping operator works.

Adjustment and planarity measures

For each triangle t of area A(t) adjacent to an edge e let
• A(t) be the area of the triangle determined by the projection of vertices of t
onto the surface patch deﬁned by the local curvature tensor at ce,
• A(t) be the area of the projection of t onto the tangent plane at ce.
Note that A(t) ∼= A(t) when t is well ﬁtted by the local surface patch, A(t) ≤ A(t)
and A(t) ∼= A(t) when t is within a region with low curvature. We deﬁne the
adjustment measure of t by

Ad(t, e) =

|A(t) − A(t)|

A(t)

,

and the planarity measure by

P l(t, e) = A(t) − A(t)

A(t)

.

Consequently, the adjustment measure of e is deﬁned by
e, e)} ,
(cid:2)

Ad(e) = max{Ad(te, e), Ad(t

and the planarity measure by

P l(e) = max{P l(te, e), P l(t

e, e)} .
(cid:2)

Edge ﬂipping operator

We say that an edge e = v1v3 is 2D-ﬂippable if the xy-projections of its two
adjacent triangles te = (cid:5)v1v2v3, t

e = (cid:5)v3v4v1 form a convex quadrilateral.
(cid:2)

Accurate Interpolation of Terrain Surfaces

359

Now we specify when a 2D-ﬂippable edge e is replaced by the edge e

First we compute the adjustment measures of e and e
measures is considered unacceptable, i.e.:

(cid:2) = v2v4.
(cid:2). If at least one of these

max{Ad(e), Ad(e
(cid:2) only when

(cid:2)

)} > 1 ,

edge e is replaced by edge e

Ad(e) > Ad(e

(cid:2)

) .

Otherwise, we compute the planarity measures and the edge errors of e and e
When the edges are within a low curved region, i.e.:
)} < 2 ,

max{P l(e), P l(e

(cid:2)

(cid:2).

or when the edge errors are similar, i.e.:

(cid:2))|

|E2(e) − E2(e
max{E2(e), E2(e(cid:2))} < 3 ,
(cid:2) only when e

edge e is replaced by edge e

(cid:2) improves the triangle quality, i.e.:

∠v1v2v3 + ∠v3v4v1 > ∠v2v3v4 + ∠v4v1v2 .

On the contrary, e is replaced by edge e

(cid:2) if e
E2(e) > E2(e

(cid:2) improves the edge error, i.e. when
(cid:2)
) .

By varying the thresholds 1, 2 and 3 we can prioritize the adjustment,
planarity and L2 error measures. For all the results in this paper, we use 1 = 1.0,
2 = 0.2 and 3 = 0.2

We say that a non boundary edge e is called 3D-ﬂippable when the angle

criterion can be applied to it.

3.3 Two Lepps Strategy
Our approach is based on destroying edges with higher error by inserting one or
two points close to (one or two) associated terminal edges. In this way we create
well-shaped triangles, like the Lepp Delaunay methods do. The three possible
(cid:2)
cases for each processing bad edge e with adjacent triangles te and t
e are as
follows:
1. Edge e is terminal (see Figure 3(a)).
2. Edge e is the longest edge for te but not for t

(cid:2)
e (o viceversa). In this case we
(cid:2) (see Figure 3(b)).
(cid:2)
3. Edge e is not the longest edge for both te and t
e. In this case we use the lepps
(cid:2)
2. Figure 3(c)
of triangles te and t
(cid:2)
shows the two lepps used for ﬁnding e
2 (in order to make clear how
the method works, only interior triangles and insertion of midpoints are
considered).

(cid:2)
e for ﬁnding a terminal edge e
(cid:2)
1 and e

(cid:2)
e for ﬁnding two terminal edge e

use the lepp of triangle t

(cid:2)
1 and e

For the three cases, we insert a point inside the terminal quadrilateral deﬁned
by the associated terminal edges e, e

(cid:2), e

(cid:2)
1, e

(cid:2)
2.

360

N. Coll et al.

te

t(cid:9)

e

e

te

e

t(cid:9)

e

e(cid:9)

1

t(cid:9)

e

te

e

e(cid:9)

2

(a)

(b)

(c)

Fig. 3.
edge of te but not of t

(a) Special case where e is terminal. (b) Special case where e is the longest

(cid:3)
e (or viceversa). (c) The two lepp for edge e.

3.4 Surface-Midpoint or Surface-Centroid Selection

In this section we determine the point to be inserted for each reached terminal
edge e. We denote by πe the vertical plane containing e and by Fe the intersection
between the surface F and πe.

The surface-midpoint sme is the point of Fe equidistant from the endpoints
vi and vj of e. The point sme can be computed as the intersection between F
and the line contained in πe, orthogonal to e and passing through the point
(vi + vj)/2. Since in the common case this computation can not be done exactly,
the point sme can be approximated by a bipartition algorithm.

Given four points p1, p2, p3, p4 in a plane, the centroid of the quadrilateral
p1p2p3p4 is deﬁned by (p1 + p2 + p3 + p4)/4 or equivalently by ((p1 + p3)/2 +
(p2 + p4)/2)/2. We deﬁne the surface-centroid sce of an edge based on the last
(cid:2) be the edge determined by two vertices of the triangles adjacent
expression. Let e
to e not contained in e. The point sce is deﬁned as the surface midpoint of the
edge determined by sme and sme(cid:2).

Our method inserts the surface-midpoint when e is a non 3D-ﬂippable edge,
and the surface-centroid when e is a 3D-ﬂippable edge. After the point insertion
the link edges of the point are tested to be ﬂipped with the edge-ﬂip operator
in a similar way as in Lawson [13] algorithm.

4 Lepp-Surface Reﬁnement Algorithm

In what follows we explain the details of our algorithm summarized in Algorithm
1. The process starts with a triangulation F of a subset of representative points
of the real terrain. Then, new points of the real terrain are progressively added
and triangulated using our algorithm until a predetermined number of vertices
is inserted. The set of representative points is composed by a reduced subset of
boundary points and some singular interior points which represent peaks, valleys,
passes, etc. The algorithm iterates over the set of edges E sorted in decreasing
order of approximation error. For each processing edge ef the two lepps strategy
is applied, and one or two terminal edges are obtained. If a terminal edge e is

Accurate Interpolation of Terrain Surfaces

361

v = Select-Point(t1, t2, ef)
Insertion of v in F

Consider processing ef the worst edge of E
Let ti, i = 1, 2 the two adjacent triangles of ef
if longest edge of t1 and t2 is equal to ef then

Algorithm 1. Lepp-surface refinement algorithm
1. Input = Grid data V , number of desired ﬁnal points n
2. Output = Irregular triangulation F
3. Select a small set of points of V and construct a surface triangulation F
4. Find E = the set of edges of F in descendent order by error
5. while (Number of vertex of F is less than n) do
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
end if
20.
Update E
21. end while

Use lepp(ti) for ﬁnding terminal triangles ta, tb and terminal edge ei
v = Select-Point(ta, tb, ei)
Insertion of v in F

if longest edge of ti is not equal to ef then

end if
end for

for i = 1, 2 do

else

Algorithm 2. Select Point (t1, t2, e)
1. if (second longest edge of t1 is not constrained and second longest edge of t2 is not

boundary) or e is boundary then

else

end if

for j = 1,2 do

if e is 3D-ﬂippable then

Select p equal to surface centroid sce

Select p equal to surface midpoint sme

2.
3.
4.
5.
6.
7. else
8.
9.
10.
11.
12.
13. end if
14. Select v equal to the closest vertex to p in V
15. RETURN v

end if
end for

if

tj is not null and has constrained second longest edge e
Select p equal to surface midpoint sme∗

∗

then

3D-ﬂippable, we select the point p as the surface centroid sce, otherwise we select
p as the surface midpoint sme (see Algorithm 2). Next the closest input vertex
v to p in V is determined and inserted to F . The determination of v has a low
computational cost because of the subjacent grid data input. Since each vertex
insertion changes the triangulation, the list of edges E needs to be updated.

362

N. Coll et al.

5 Results

In this section we present empirical testing performed to evaluate the practical 
behavior of our method. The software was implemented in C++ language
and using Qt libraries, to real terrain data (Cervino, Kilimanjaro, Como lake,
Maggiore Lake, and Dolomiti). All our test problems were run with threshold
parameters 1 = 1.0, 2 = 0.2 and 3 = 0.2(see Section 3.2).

We compare our method with the simpliﬁcation method of QSlim [8] which
is a widely known decimation algorithm that starting with the original surface,
iteratively collapses edges from the model by minimizing the surface error of the
approximation by using a quadric error metric at each vertex.

Table 1. Number of triangles and vertices in the original model and in the triangulation
obtained with the Lepp-surface and the QSlim methods

Model

Initial
model
Vertices Triangles Vertices Triangles Vertices

Lepp-surface
triangulation

triangulation

QSlim

Cervino

Kilimanjaro

9801
9801

949
940

505
505

948
939

508
502

Table 2. L2 norm errors computed by using Mesh1.3 software. Minim, maxim, and
mean errors are presented for triangulations of the same size obtained with Lepp-surface
method and QSlim method.

Lepp-surface method QSlim method

Model Min. Max. Mean Min. Max. Mean
Error Error Error Error Error Error
1.40 0.13
0.84 0.07

1.93
0.74

0.2
0.1

Cervino

Kilimanjaro

0
0

0
0

Table 3. Distribution of the minimum angles obtained with Lepp-surface method and
QSlim method

Model

Cervino

Kilimanjaro

◦
< 15
6
0

Lepp-surface method
Angles
Mean
◦
◦
angle Quartile < 15
< 20
45
22
0
50

◦
< 25
60
9

127 40.31
31
42.50

34.55
38.45

◦
< 30

1st

Angles

◦
< 20
128
122

◦
< 25
245
241

QSlim method

◦
< 30

Mean
angle Quartile

1st

402 32.90
431 32.23

24.68
24.74

Table 4. Distribution of the minimum angles and error approximation obtained applying 
a smoothing post-processing

Laplacian smoothing

HC-Laplacian smoothing

Model Max. Mean Mean

1st Max. Mean Mean

1st

Cervino

33.5
Kilimanjaro 1.10 0.21 39.98 33.77

Error Error angle quartile Error Error angle quartile
2.56 0.43 40.05

1.71 0.35 37.56 30.97
0.85 0.17 37.81 30.77

Accurate Interpolation of Terrain Surfaces

363

Table 5. Distribution of the minimum angles and error approximation obtained with
Lepp-surface method for diﬀerent models

Model

Vertices
original Triangles Vertices
model
810000
Como Lake
Dolomiti
810000
Maggiore lake 810000

15985
15974
15957

8105
8105
8105

◦
< 15
38
31
44

Lepp-surface method

Angles

◦
< 20
290
277
259

◦
< 25
915
842
765

◦
< 30
2078 40.40
1993 40.39
1750 40.76

Mean
1st Max. Mean
angle Quartile error error
0.57 0.001
0.9
0.002
0.64 0.0009

34.74
34.67
35.70

(a)

(b)

Fig. 4. Cervino mountain in column (a) and Kilimanjaro mountain in column (b).
By rows from top to down, original model, reﬁnement and simpliﬁcation.

For both triangular approximations, we have used the freely available Mesh1.3
[1] package to estimate the L2 approximation error between the the triangular
approximation computed and the grid data. The L2 error is expressed as a
percentage over the length of the bounding-box diagonal of the model.

364

N. Coll et al.

The half cylinders presented in the introduction in Figure 1 were obtained
using QSlim (Figure 1(a)) and our approach (Figure 1(b)). As can be appreciated
in this example our approach obtains triangles with better quality meanwhile
the L2 error is nearly the same as in QSlim. Both examples contain 100 vertices
over a sample of 4950 points.

We have used real terrain test data corresponding to Cervino and Kilimanjaro
mountains both to compare the Lepp-surface and the QSlim methods, and for
illustrating the the ability of our method for modeling complex terrain features.
The comparison performed between the Lepp-surface and the QSLIM methods,
is illustrated in Tables 1, 2, 3 and Figures 4, 5 for the Cervino and Kilimanjaro
mountains. Table 1 summarizes the number of elements of the original and of
the computed models, while Table 2 summarizes the errors associated to the
results of Table 1. In addition, Table 3 and Figure 5 show the minimun angle
distribution for the resulting triangulations obtained with the Lepp surface and
QSlim methods.

In order to test the behavior of our method in presence of sharp features we
have multiplied the original highs of the terrain two times, except Kilimajaro
model.

(a)

(b)

Fig. 5. Minimum angle distribution for the Lepp-surface (ﬁrst row) and QSlim (second
row) triangulations for Cervino mountain in column (a) and Kilimanjaro mountain in
column (b)

Accurate Interpolation of Terrain Surfaces

365

(a)

(b)

(c)

Fig. 6. Como lake in column (a), Dolomiti in column (b) and Maggiore lake in column
(c). By rows from top to down, original model and reﬁnement (1%).

These results show that the reﬁnement process achieves the main goals pro-
posed: 1) the approximation of a terrain surface considering only original grid
data; 2) with triangles of good aspect ratio. The error obtained with the reﬁnement 
process is comparable with that obtained with a simpliﬁcation process,
as it is shown in Table 2 and Figure 4. The statistical study of the minimum
angle allows us to take several favorable conclusions to our method. As it can
be appreciated in the histograms of Figure 5 the distribution of the minimum
angles in reﬁnement process is better than when a simpliﬁcation process is applied.
 Table 3 shows that the mean minimum angle, the quantity of triangles
with angles less than 15◦, 20◦, 25◦ and 30◦, and the ﬁrst quartile obtained with
the reﬁnement are better than with the simpliﬁcation.

The quality of the triangles can be optimized in post-processing being the
Laplacian smoothing the commonly used technique. This technique lacks motivation 
because the input grid data is not respected and may not even remain a
valid triangulation. The freely available software MeshLab [3] oﬀers the Laplacian 
and the HC-Laplacian [25] smoothing techniques. We have applied these
techniques to the simpliﬁed surfaces of Cervino and Kilimanjaro examples (see

366

N. Coll et al.

(a)

(b)

Fig. 7. Detail of the Como lake. In (a) the original model and in (b) the reﬁned model
(5%).

Table 4). In error approximation as well as in angle quality our method gives
better results than the considered post-processing techniques.

Table 5 presents results obtained applying Lepp-surface method to other mod-
els: Como lake, Maggiore Lake and Dolomiti. Here, error approximation and statistical 
data of angles are shown for each model. This table is complemented by
Figure 6 in which views of original models and their reﬁnement can be compared.
As can be appreciated in this ﬁgures in spite of the lower quantity of points used
in the reﬁnement (1% of the original set) the main features of the terrains can
be distinguished. The algorithm takes about 9 seconds in generating this models
in an Intel Pentium 3.00 GHz with 1.00 GB of RAM.

Finally, to illustrate that local details are preserved Figure 7 shows a detail
both of the original data and of the Lepp-surface approximation for the Como
Lake with 5% of the original data set points with a total running time of about
60 seconds.

6 Conclusions and Future Work

We have presented a reﬁnement method that interpolates grid input data based
on estimating the L2 error by using the curvature tensor and a two lepp strategy
in order to create a well-shape triangulation. The L2 metric is prioritized but
when it is possible the aspect-ratio of the triangles is taken also into account,
achieving in this way an irregular triangulation of the terrain with good quality
elements that ﬁts well the original input data.

The method has been tested on several models giving very good results in the
approximation of terrain surfaces with sharp features. The main goals pursued
in this research, that is, good error approximation and good aspect-ratio of the
triangles were achieved.

The basic ideas of the method presented in this paper can be easily adapted
to work with irregular terrain input data, and generalized to deal with input
data obtained by using 3D scanners.

8. Garland, M.: Quadric-based polygonal

surface simpliﬁcation, Ph.D. thesis,

ics State of The Art Report (1999)

Carnegie Mellon University (1999)

Accurate Interpolation of Terrain Surfaces

367

References

1. Aspert, N., Santa-Cruz, D., Ebrahimi, T.: Mesh: Measuring errors between surfaces
using the hausdorﬀ distance. In: Proc. of the IEEE International Conference in
Multimedia and Expo., pp. 705–708 (2002)

2. Bertram, M., Barnes, J.C., Hamann, B., Joy, K.I., Pottmann, H., Wushour, D.:
Piecewise optimal triangulation for the approximation of scattered data in the
plane. Computer Aided Geometric Design 17(8), 767–787 (2000)

3. Cignoni, P., Corsini, M., Ranzuglia, G.: Meshlab: an open-source 3d mesh processing 
system. ERCIM News (73), 45–46 (2008)

4. DeFloriani, L., Magillo, P., Puppo, E.: Variant: A system for terrain modeling at

variable resolution. GeoInformatica 4(3), 287–315 (2000)

5. Dyn, N., Levin, D., Rippa, S.: Data dependent triangulations for piecewise linear

interpolation. IMA Journal of Numerical Analysis 10, 137–154 (1990)

6. Frey, P.J., Borouchaki, H.: Geometric surface mesh optimization. Computing and

Visualization in Science 1(3), 121–133 (1998)

7. Garland, M.: Multiresolution modeling: Survey & future opportunities. Eurograph9.
 Garland, M., Heckbert, P.: Surface simpliﬁcation using quadric error metrics. In:
SIGGRAPH 1997: Proceedings of the 24th annual conference on Computer graphics 
and interactive techniques, pp. 209–216 (1997)

10. Garland, M., Heckbert, P.-S.: Fast polygonal approximation of terrains and height

ﬁelds, Tech. Report CMU-CS-95-181 (1995)

11. Hoppe, H., DeRose, T., Duchamp, T., McDonald, J., Stuetzle, W.: Mesh optimization.
 Computer Graphics 27, 19–26 (1993)

12. Kalogerakis, E., Simari, P., Nowrouzezahrai, D., Singh, K.: Robust statistical estimation 
of curvature on discretized surfaces. In: SGP 2007: Proceedings of the ﬁfth
Eurographics symposium on Geometry processing, Eurographics Association, pp.
13–22 (2007)
13. Lawson, C.-L.: Software for C1 surface interpolation. In: Rice, J.R. (ed.) Mathematical 
Software III, pp. 161–194 (1977)

14. Lindstrom, P., Pascucci, V.: Visualization of large terrains made easy. In: Proceedings 
of IEEE Visualization 2001, pp. 363–370, 574 (2001)

15. Lindstrom, P., Pascucci, V.: Terrain simpliﬁcation simpliﬁed: a general framework
for view-dependent out-of-core visualization. IEEE Transactions on Visualization
and Computer Graphics 8(3), 239–254 (2002)

16. Nadler, E.: Piecewise linear best L2 approximation on triangulations. In: Chui,

C.K., et al. (eds.) Approximation Theory V, pp. 499–502 (1986)

17. Pajarola, R., Gobbetti, E.: Survey on semi-regular multiresolution models for interactive 
terrain rendering. The Visual Computer 23(8), 585–605 (2007)

18. Rippa, S.: Long and thin triangles can be good for linear interpolation. SIAM

Journal on Numerical Analysis 29(1), 257–270 (1992)

19. Rivara, M.-C.: New longest-edge algorithms for the reﬁnement and/or improvement 
of unstructured triangulation. International Journal for Numerical Methods
in Engineering 40, 3313–3324 (1997)

20. Rivara, M.-C., Calderon, C.: Lepp terminal centroid method for quality triangu-
lation: A study on a new algorithm. In: Chen, F., J¨uttler, B. (eds.) GMP 2008.
LNCS, vol. 4975, pp. 215–230. Springer, Heidelberg (2008)

368

N. Coll et al.

21. Rivara, M.-C., Hitschfeld, N., Simpson, R.-B.: Terminal edges delaunay (small
angle based) algorithm for the quality triangulation problem. Computer-Aided
Design 33, 263–277 (2001)

22. Rivara, M.-C., Palma, M.: New lepp algorithms for quality polygon and volume
triangulation: Implementation issues and practical behavior. 220, 543–562 (1997)
23. R¨ottger, S., Heidrich, W., Slussallek, P., Seidel, H.-P.: Real-time generation of
continuous levels of detail for height ﬁelds. In: Proceedings of 1998 International
Conference in Central Europe on Computer Graphics and Viaualization, pp. 315–
322 (1998)

24. Shewchuk, J.-R.: What is a good linear element? interpolation, conditioning, and
quality measures. In: Proceedings of the 11th International Meshing Roundtable
(2002)

25. Vollmer, J., Mencl, R., Mˆoller, H.: Improved laplacian smoothing of noisy surface

meshes. Computer Graphics Forum (Eurographics 1999) 18(3), 131–138 (1999)

