3
1
0
2

 

p
e
S
7

 

 
 
]

R
G
.
s
c
[
 
 

1
v
7
1
9
1

.

9
0
3
1
:
v
i
X
r
a

Zahir: a Object-Oriented Framework for Computer Graphics

Eduardo Graells-Garrido and Mar´ıa Cecilia Rivara

Department of Computer Science

University of Chile

Santiago, Chile

Abstract

In this article we present Zahir, a framework for experimentation in Computer Graphics that provides
a group of object-oriented base components that take care of common tasks in rendering techniques and
algorithms, specially those of Non Photo-realistic Rendering (NPR). These components allow developers
to implement rendering techniques and algorithms over static and animated meshes. Currently, Zahir
is being used in a Master’s Thesis and as support material in the undergraduate Computer Graphics
course in University of Chile.

1 Introduction

In this article we present a framework for Computer Graphics named Zahir. This framework is currently

in development and its lifespan covers a year and a half. It was conceived when we realized that we needed

a tool to experiment with algorithms in Computer Graphics.

The implementation of graphic techniques sometimes requires operations that are not part of the

algorithm itself. This is natural, as the techniques can be very complex. When a developer needs to

implement a technique, he has the following alternatives: 1) develop it from scratch, 2) use a graphics

engine and provide only the minimal conﬁguration and source code needed, and 3) use one or more libraries

to support the development. The best choice depends on the context, for example, a student wants to

learn how the technique works, so it would choose between the ﬁrst and third option, while a developer for

a commercial project needs a tested and fast solution like the second option.

Considering that situation, we propose Zahir as a framework for experimentation in Computer Graphics

that provides a group of base components that take care of the most common tasks in techniques and

algorithms, specially those of Non Photo-realistic Rendering (NPR). Having this group of base components

allows developers to implement and experiment with the required techniques.

Contributions: The main contribution of our work is the design and implementation of Zahir, because

it allows development of rendering techniques that are not implemented in common rendering engines,

specially non photo-realistic rendering algorithms. Also, as Zahir is open source, it can be used as a tool

by anyone.

Outline. This article is structured as follows: Section 2 discusses similar engines/frameworks. Section

3 contains the fundamental design and implementations details. Section 4 reviews the current usage of

1

Zahir. Section 5 discusses who should use Zahir, limitations and future work, and ﬁnally Section 6 shows

our ﬁnal conclusions for this article.

2 Related Work

There are two types of frameworks/applications similar to Zahir: graphic engines and NPR applications.

Graphic Engines. There are many rendering engines that can do traditional (photo-realistic) rendering
in a optimal way (in terms of performance and image quality), such as OGRE 1, OpenSG 2 and
OpenSceneGraph 3, all of them open source. They are mature solutions for rendering, with many years of
development. They are very good solutions for a developer which needs to feed his data into the engine

and just get them rendered. This is the common escenario, but in some cases that is not enough, as we

may need adjacency and connectivity information (which may be available, but it’s not as ﬂexible or fast

as we would like) that is not present in those engines. Also, they don’t have mesh processing capabilities,

or have very limited algorithms, thus limiting the posibilities in rendering techniques, specially those from

NPR.

Non Photo-realistic Rendering Applications. The inspiration for the initial version of Zahir was

the software Real Time Suggestive Contours [2] (RTSC). RTSC renders line drawings from 3D surfaces in

a beautiful and optimal way. However, because it’s a demonstration program, it’s limited to static white

objects (the models don’t load any material or texture information). Those limitations inspired us to start

working on a more ﬂexible framework.

Another similar tool is FreeStyle [7]. FreeStyle is a stylized line-renderer for 3D models. It’s diﬀerent

from RTSC, because while RTSC extracts contours as iso-curves from surfaces, FreeStyle extracts silhouette

and crease edges. The extracted edges are connected and stylized using procedures deﬁned by the user. This

software produces pretty pictures and is very customizable, but is not suited for interactive applications.

On the other hand, it’s very ﬂexible and it can be used by artists because the styling can be written in the

Python programming language.

3 Zahir: Fundamentals

Zahir has the following goals:

• Provide a high-level abstraction of the rendering pipeline, by having a group of base components that

take care of low-level tasks and implementation details.

• Ease the implementation of rendering techniques, by implementing behavior common to many

rendering techniques.

1http://www.ogre3d.org
2http://www.opensg.org/
3http://www.openscenegraph.org/

2

• Complain with the following principles: eﬃciency, robustness and extensibility, by using eﬃcient
and robust tools, and having an extensible design through object-orientation expressed in design

patterns [5] and generic programming.

To reach these goals, we use libraries that share the same principles. The main library used by Zahir

is OpenMesh [1], which provides a half-edge data-structure for polygonal meshes. We also integrate the
matrix library Eigen2 4 and the numerical library OpenNL 5. We use OpenGL [12] as graphical API and
Cg [4] as shading language. This allows us to be portable across platforms and be compliant with the

principles mentioned.

3.1 Design Components

Zahir is composed by three components, shown on Figure 1. The ﬁrst one is the Topology Component,

which contains classes for static models, vertex animated models and skinned models through vertex

blending. The second is the Algorithms Component, which contains classes that process the mesh. The

third component is the Visualization Component, which takes input from the previous components and

displays them on screen. Each component uses diﬀerent libraries: in Topology we need OpenMesh and

Eigen2, both of them integrated (thanks to generic programming) to provide eﬃcient and robust mesh

data structures; in Algorithms we need OpenNL, because some operations require a numerical solver; in

Visualization we need OpenGL and Cg to render the input (such as surfaces, lines and images) in 2D and

3D.

Figure 1: The base components of Zahir and the libraries used by them.

4http://eigen.tuxfamily.org/
5http://alice.loria.fr/index.php/software.html

3

3.2 Topology

Figure 2 illustrates the design of the Topology Component. The main class, Surface, inherits from a
triangular mesh in OpenMesh and has several graphic and mesh attributes such as material information,
bounding sphere and feature size. The animated surfaces are a specialization of the Surface class,
supporting two types of animation:

• Vertex Animated Surfaces, that have keyframes that represent the mesh in diﬀerent times. To
animate (or deform) the mesh in a certain time, we interpolate the mesh from two keyframes. Each

keyframe holds its own vertex positions and vertex normals, but the mesh structure is the same for

all keyframes. Keyframes can be grouped in animations, and the interpolation between keyframes

can be linear or cubic (using a Catmull-Rom interpolation).

• Skinned Surfaces, or vertex blended meshes. We have only one mesh, which represents the surface
in the bind-pose position. This mesh has a skeleton associated, and when this skeleton moves, the

mesh is deformed accordingly. The skeleton is represented as a hierarchical tree of bones, where each

vertex in the mesh is associated to one or more bones.

Figure 2: Classes of the Topology Component in Zahir.

Both approaches share the same mesh structure and graphical attributes. Each subclass decorates the

main class with the extra attributes (such as keyframes or the skeleton itself). This class hierarchy implies

that we see animated meshes as an extension of static meshes, where in a time t we can assume that the

mesh is static. This implies that before rendering or processing the mesh for time t we need to calculate

the mesh deformation. We compute the deformation on the CPU, which is slower than GPU methods but

allows us to be more ﬂexible at the implementation of rendering techniques.

The surface hierarchy is mirrored by a hierarchy of data loaders that deﬁne factory methods and abstract

factories to build concrete surfaces. For example, a Wavefront OBJ data loader is a implementation
of the SurfaceLoader abstract factory, while a Quake II MD2 data loader is a implementation of the
VertexAnimatedLoader abstract factory, which is also a subclass of SurfaceLoader. This design allows
us to decouple the surface data from the process of reading the surface data from a data source.

4

3.3 Algorithms

Figure 3: Classes of the Algorithms Component in Zahir.

The Algorithms Component, shown in Figure 3 contains operations over the mesh. The operations

that modify the mesh in some way are called intrusive. Currently we have two intrusive operations: the

estimation of curvature and curvature derivatives at each vertex of the mesh, based on the algorithm by

Rusinkiewicz [11], and Lapped Textures [9], an algorithm that segments the mesh in patches and performs

a local parameterization on each patch according to a vector ﬁeld deﬁned on the surface. Both of them

work only on static meshes: their application on animated surfaces is a open problem.

The operations that extract information from the mesh without modifying it are called non-intrusive.

Currently, Zahir has one operation of this kind: the extraction of contours from a mesh, based on a contour
deﬁnition (class Contour). We deﬁne a contour by specifying a function for evaluation at each vertex of
the mesh. After the function is evaluated, we loop over the edges of the mesh ﬁnding the iso-curves of

level 0 by looking for edges whose vertices have opposite signs on the evaluation. If a edge has a level 0

point, we iterate through its 1-ring of edges to seek more points of the same iso-curve. The extraction is
speciﬁed by the interface ContourGenerator and implemented by the class MeshTraversal. A extracted
contour is expressed as a set of polylines (class Polyline).

We have two contours deﬁned in Zahir: silhouettes[8] and Suggestive Contours [3]. Both are viewdependant 
contours, which means that after changes in the viewpoint or in the 3D scene the contours

must be extracted again.

3.4 Visualization

The Visualization Component, shown in Figure 4, takes input from the previous components to produce

an image on the screen using OpenGL and Cg. The classes contained in this component can be grouped

in three kinds of renderers: surface renderers, line renderers and image renderers.

3.4.1 Surface and Image Renderers

The SurfaceRenderer is the base class for the group of surface renderers. It deﬁnes a basic OpenGL
renderer for the base class of the Topology Component, Surface. Because at the time of rendering we

5

Figure 4: Classes of the Visualization Component in Zahir.

treat any surface as a static one, for animated surfaces we need an update to the mesh (calculate the

deformation) previously to rendering.

The class hierarchy follows two design patterns. The ﬁrst one is decorator, because each subclass

decorates its parent class with rendering parameters and options. Since the rendering pipeline is almost

independent from the rendering technique or style, this behavior is attractive for the developer, as the only

thing he needs to do to create new techniques is to specify the parameters and properties of the technique.

This is specially ﬂexible thanks to the surface properties mechanism of OpenMesh.

The other pattern is composite. We needed a way to treat single-pass and multi-pass techniques in the

same way. Since sometimes a pass in a multi-pass technique is already a single-pass technique, this design

allows us to create small renderers that can be assembled to create more complex ones.

(a) Toon Shading

(b) Toon Shading

(c) Gooch Shading

Figure 5: Surface renderers applied to a static mesh.

Currently, we have the following techniques implemented: Phong Shading, Gooch Shading [6] and Toon
Shading [8], shown in Figure 5. There is also a render to texture renderer (FBORenderer), that receives
another surface renderer and stores its result in a texture.

The group of image renderers contains only one class, ImageRenderer. This class takes a input texture
and draws a quad with the texture applied. Optionally, it can apply a fragment program using Cg. This

6

allows us to implement image processing techniques or image space algorithms when used in conjunction
with the FBORenderer.

3.4.2 Line Renderers

The group of line renderers take the extracted contours by the Algorithms Component and displays them
on screen. It has two classes: LineRenderer, the base class, and Spline, a subclass that decorates the
base renderer with a cubic interpolator. Figure 6 shows a coarse mesh with silhouettes and suggestive

contours extracted. The Figure shows how diﬀerent suggestive contours look by using direct polyline

rendering (left), Catmull-Rom interpolation (center) and B-Spline interpolation (right).

(a) No Interpolation

(b) Catmull-Rom

(c) B-Spline

Figure 6: Gooch Shading with Silhouettes and Suggestive Contours. The three images show Suggestive
Contours with diﬀerent line renderers: the base renderer (left), the spline renderer with Catmull-Rom
interpolation (center), the spline renderer with B-Spline interpolation (right).

3.5 Rendering Loop

Figure 7 shows a rendering loop for an arbitrary surface in a typical application. We ﬁrst take a input

mesh, select a surface renderer if needed, then select the contours to extract and render both surface and

lines. Finally, before starting the loop again, update the mesh (according to user input and time passed) if

needed. As can be seen in the diagram, each step refers to the base class of its corresponding group. In

this way, we can add new behaviour just by adding subclasses, allowing more ﬂexibility in the application

at the cost of runtime polymorphism.

4 Current Usage

A framework needs users to ﬁll its purpose. A framework without users doesn’t make sense, and that’s

why we are encouraging the use of Zahir in our university. The current usage for our framework can be

divided in experimentation and teaching.

7

Figure 7: Rendering loop for an arbitrary Surface, considering both surface and line renderers.

4.1 Experimentation

One of the purposes of Zahir is the experimentation with rendering techniques and mesh algorithms. This

experimentation includes the implementation of known techniques and the investigation of new ones.

Currently we are implementing a non photo-realistic rendering technique called Realtime Hatching [10]

in a Master’s Thesis. Although there is no real experimentation by just implementing the hatching, by

ﬁnishing its implementation we will have the possibility to experiment with the algorithm in animated

surfaces, something that hasn’t been done in object-space yet.

4.2 Teaching

During the year 2008 we have used Zahir as a optional support tool for student projects and homeworks

in the Computer Graphics undergraduate course in University of Chile. The response has been great, as

some students used the framework as a basis for their projects. Since Zahir implements many concepts

of the course program, it serves as a reference implementation for many concepts even if the students

decide not to use it as a main library in their projects. Figure 4.2 shows three example projects from

8

the Spring semester in 2008. The ﬁrst (left) used the interpolation classes of Zahir, the second (center)

used the surface and image renderers to display a simple terrain and a combat aeroplane, and the third

(right) implemented diﬀerent renderers such as normal map and depth map to apply border detection in

image-space.

Figure 8: Example projects from undergraduate students of the Computer Graphics course in University
of Chile.

5 Discussion

In Section 3 we mentioned similar applications. Should we use Zahir instead of them? The answer

depends on the user, but probably they are better alternatives in a typical scenario (to develop a computer

graphics application) considering how young Zahir is. However, there’s a niche of opportunity in some

use cases, mainly in those related to non photo-realistic rendering and experimentation. This is because

common rendering engines don’t provide means to perform operations on meshes, establishing limits on the

implementation of object-space techniques because of the lack of other information than vertex positions,

normals and materials.

Who should use Zahir? Zahir should be used by computer graphics students or enthusiasts seeking

for a base library to work. We have designed Zahir in a way to be ﬂexible for many diﬀerent uses, in

particular experimentation, because it allows the users to work directly in their ideas and problems without

obstacles like object loading from ﬁle and rendering setup.

Limitations and Future Work: Apart from the typical limitations of new software libraries (like lack

of documentation and code examples), Zahir has a important limitation that can be a barrier for some

users: it is useful to implement rendering techniques and mesh algorithms, but not to specify them using a

script language or conﬁguration ﬁles. Also, while we support three kinds of surfaces, currently we don’t

support many ﬁletypes or formats to load data from external programs.

Future work should address these limitations, by creating renderers that take input from conﬁguration

ﬁles (possibly in XML) and data loaders for formats such as COLLADA or Blender. In terms of functionality

and features, we plan to put emphasis on the eﬃciency principle of Zahir: the libraries included in the

framework are eﬃcient by themselves, but to operations using them we have given priority to robustness

and ﬂexibility. Also, in the future we plan to move some calculations to the GPU to improve performance

in operations such as contour extraction.

9

6 Concluding Remarks

We have presented a framework for computer graphics named Zahir. Zahir is a young framework with

many limitations to adress in the future, but we have already identiﬁed use cases where it stands well.

Zahir has an object oriented design, expressed through known design patterns, which makes it ﬂexible to

add new behavior such as rendering techniques and operations over meshes. Since we were inspired by

non photo-realistic rendering tools, our work is biased to this kind of applications, but we also support

traditional rendering.

We have tested the framework with undegraduate students, having good results. This approach has

allowed us to receive feedback from potentially “early adopters” and, when their projects end well, add

their contributions to the framework, making it more feature complete and allowing it to grow.

References

[1] M. Botsch, S. Steinberg, S. Bischoﬀ, and L. Kobbelt. Openmesh-a generic and eﬃcient polygon mesh

data structure. OpenSG Symposium, 2002, 2002.

[2] Doug DeCarlo, Adam Finkelstein, and Szymon Rusinkiewicz. Interactive rendering of suggestive

contours with temporal coherence. In NPAR ’04: Proceedings of the 3rd international symposium on

Non-photorealistic animation and rendering, pages 15–145, New York, NY, USA, 2004. ACM.

[3] Doug DeCarlo, Adam Finkelstein, Szymon Rusinkiewicz, and Anthony Santella. Suggestive contours

for conveying shape. In SIGGRAPH ’03: ACM SIGGRAPH 2003 Papers, pages 848–855, New York,

NY, USA, 2003. ACM.

[4] R. Fernando and M.J. Kilgard. The Cg Tutorial: The Deﬁnitive Guide to Programmable Real-Time

Graphics. Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA, 2003.

[5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design patterns: elements of reusable object-oriented

software. 1995.

[6] Amy Gooch, Bruce Gooch, Peter Shirley, and Elaine Cohen. A non-photorealistic lighting model for

automatic technical illustration. In SIGGRAPH ’98: Proceedings of the 25th annual conference on

Computer graphics and interactive techniques, pages 447–452, New York, NY, USA, 1998. ACM.

[7] St´ephane Grabli, Emmanuel Turquin, Fr´edo Durand, and Fran¸cois Sillion. Programmable style for

npr line drawing. In Rendering Techniques 2004 (Eurographics Symposium on Rendering). ACM

Press, june 2004.

[8] Adam Lake, Carl Marshall, Mark Harris, and Marc Blackstein. Stylized rendering techniques for

scalable real-time 3d animation. In NPAR ’00: Proceedings of the 1st international symposium on

Non-photorealistic animation and rendering, pages 13–20, New York, NY, USA, 2000. ACM.

[9] Emil Praun, Adam Finkelstein, and Hugues Hoppe. Lapped textures. In SIGGRAPH ’00: Proceedings

of the 27th annual conference on Computer graphics and interactive techniques, pages 465–470, New

York, NY, USA, 2000. ACM Press/Addison-Wesley Publishing Co.

10

[10] Emil Praun, Hugues Hoppe, Matthew Webb, and Adam Finkelstein. Real-time hatching.

In

SIGGRAPH ’01: Proceedings of the 28th annual conference on Computer graphics and interactive

techniques, page 581, New York, NY, USA, 2001. ACM.

[11] Szymon Rusinkiewicz. Estimating curvatures and their derivatives on triangle meshes. In Symposium

on 3D Data Processing, Visualization, and Transmission, 2004.

[12] D. Shreiner, M. Woo, J. Neider, and T. Davis. The OpenGL Programming Guide (Red Book), 2003.

11

