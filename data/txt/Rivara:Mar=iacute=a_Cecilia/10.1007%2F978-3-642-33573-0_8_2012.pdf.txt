A Study on Size-Optimal Longest Edge
Reﬁnement Algorithms

Carlos Bedregal and Mar´ıa-Cecilia Rivara

Department of Computer Science, University of Chile
{cbedrega,mcrivara}@dcc.uchile.cl

Mesh generation and reﬁnement are widely used in applications that require
a decomposition of geometric objects for processing. Longest edge reﬁnement
algorithms seek to obtain a better decomposition over selected regions of
the mesh by the division of its elements. Until now, these algorithms did
not provide theoretical guarantees on the size of the triangulation obtained.
In this paper we present a study of the computational cost of longest edge
bisection algorithms for 2-dimensional mesh reﬁnement and our developments
in the theoretical analysis of such algorithms.

1 Introduction

Mesh generation is widely used in many applications that require a decomposition 
of geometric objects for processing, discretizing the continuous domain
into a mesh typically composed of triangles or quadrilaterals in two dimensions,
 and tetrahedra or hexahedra in three dimensions. Mesh reﬁnement
techniques seek to obtain either a better, ﬁner decomposition of the input
(or a region of interest) in order to track smaller features of the mesh geometry,
 or to obtain a quality locally reﬁned mesh as required by the application.
These applications are found in the areas of computational geometry, computer 
graphics, mechanical engineering, solid modeling, image processing,
geographical information systems, and numerical simulation among others,
making the problem an interdisciplinary topic.

Historically, initial algorithms for mesh generation have been developed by
engineers, who were usually satisﬁed with the results obtained for their speciﬁc 
domains. Later, computational geometry researchers became interested
in designing algorithms that oﬀer mathematical guarantees on the generation
of satisfying meshes [22].

Since, in practice, the time required to process a geometric object depends
on the size and quality of its decomposition, an initial goal of the mesh
generation and reﬁnement is to produce size-optimal meshes that conform to
the geometry of the domain and satisfy the constraints on the shape and size

122

C. Bedregal and M.-C. Rivara

of its elements. A second goal is to produce locally reﬁned meshes according
to an associated application, such as ﬁnite element analysis. Algorithms that
oﬀer theoretical guarantees on the shape and size of the mesh produced are
thus desirable.

Longest-edge reﬁnement algorithms for triangulations in two dimensions
were specially designed to work well with numerical techniques such as adaptive 
ﬁnite element methods and multigrid algorithms [14, 15], ensuring the
construction of good-quality irregular and nested triangulations. Longest edge
bisection algorithms proposed by Rivara [14, 16, 17] perform a local reﬁnement 
maintaining the geometric quality of the triangulation and increasing
the area covered by nearly equilateral triangles. These algorithms oﬀer guarantees 
on the minimum angle lower bound and on the number of non-similar
triangles generated.

In this paper we present our recent results on the study of the computational 
cost of longest edge bisection algorithms. We focus on the behaviour
of the algorithm when propagating the reﬁnement to a neighbor triangle,
bounding the number of points produced in order to maintain a conforming
triangulation. The paper is organized as follows: Section 2 discusses the previous 
work in the area of mesh reﬁnement techniques, Section 3 describes the
longest edge bisection algorithm and its properties, Section 4 presents our
analysis of the algorithm based on the number of point it produces; ﬁnally,
Section 5 summarizes our results and current state of the research.

2 Previous Work

Most applications working with unstructured meshes require the mesh to be
conforming and to have good “quality.” A mesh is said to be conforming
if adjacent elements intersect only at either a common edge or a common
vertex or an entire face. Because of the domain constraints on shapes and
sizes of the elements, a mesh with a good geometry quality is also desirable.
The quality of a mesh is given by some measure of shape, such as a bound
on the aspect ratio of all the triangles or a bound on their internal angles. A
commonly used measure is the minimum angle α [19]. For example, elements
with “ideal” shape are typically those nearly equilateral and equiangular for
non-anisotropic applications.

A mesh generation algorithm must also consider the size of its output
since Steiner points (vertices which are not part of the input) are generally
added in order to achieve the shape bound. Adding too many points could
have a negative eﬀect on the performance of the application. Then, a mesh is
considered size-optimal if the number of elements is within a constant factor
of the minimum number in any mesh of the input oﬀering the same shape
bound.

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

123

2.1 Mesh Reﬁnement

Existing methods for generation and reﬁnement of triangular and tetrahedral 
meshes in 2and 
3-dimensions can be roughly classiﬁed as partitioning
methods and Delaunay-based methods [19]. Partitioning methods reﬁne the
mesh by dividing some selected elements of the mesh. Baker et al. [1] proposed 
the ﬁrst algorithm to give shape guarantees on the triangulation. This
work was later extended by Bern et al. [3] and Melissaratos and Souvaine
[11], using quadtrees to oﬀer both shape and size guarantees. Delaunay-based
methods, on the other hand, maintain a Delaunay triangulation during the
reﬁnement, adding new points to the mesh that ensure the quality of the
elements [6, 19, 7, 21]. Extensive research on practical mesh generation has
been also performed. See e.g. [2, 5, 10].

Our study will focus on longest edge triangulation reﬁnement algorithms.
A triangulation is a decomposition of the input into simplices (triangles and
tetrahedrals), that meet at shared edges. Unstructured meshes are easier
to generate with algorithms using simplicial elements [4]. A study on nonsimplicial 
meshes (using quadrilateral and hexahedral elements) can be found
in the survey by Schneiders [20].

Longest edge bisection algorithms [14] are partitioning methods suitable
for the triangulation reﬁnement problem. Given a conforming, non-degenerate
triangulation with acceptable quality (e.g. angles greater than or equal to an
angle α) of a polygonal region, the triangulation reﬁnement problem consists
in the construction of a locally reﬁned triangulation with a desired resolution
such that the smallest (or the largest) angle is bounded. For this paper, we
decompose the triangulation reﬁnement problem into the following two sub-
problems:

(P1) Triangle reﬁnement problem: given a quality acceptable triangulation 
τ (of a polygonal region D) composed by Nτ triangles, all with
angles greater than or equal to an angle α, and given a target triangle
t ∈ τ , construct a conforming triangulation τ(cid:2)
such that t has been
reﬁned once while maintaining the quality of the triangulation.

(P2) Local reﬁnement problem: given a quality acceptable triangulation
τ (of a polygonal region D) composed by Nτ triangles, all with angles
greater than or equal to an angle α, and given a set of target triangles 
Sref ⊆ τ , construct a conforming triangulation τ(cid:2)
such that every
t ∈ Sref has been reﬁned once, and the quality of the triangulation is
preserved.

The local reﬁnement problem can be considered as a generalization of the
triangle reﬁnement problem, while the triangulation reﬁnement problem can
be seen as the iterative solution of the local reﬁnement problem, with triangle
set Sref containing triangles over a subregion of D that do not satisfy the
resolution parameter.

Longest edge bisection algorithms perform an iterative longest edge bisection 
on the target triangles – and some of their neighbors – in order to

124

C. Bedregal and M.-C. Rivara

produce a conforming reﬁned mesh. Additional to the non-degeneracy properties 
of the iterative longest edge bisection of triangles, they oﬀer guarantees
on the minimum angle lower bound and on the number of non-similar triangles 
generated [17].

These algorithms have been used for developing software for partial diﬀerential 
equations [12], generalized for 3-dimensional reﬁnement [13], applied
on ﬁnite element methods [10], and adapted to multithread parallelization
[18].

3 Longest Edge Bisection Algorithms

A longest edge reﬁnement algorithm works as follows: at each step of the
process the algorithm receives an input conforming triangulation of acceptable 
geometric quality and a set of triangles to be reﬁned; after performing a
longest edge bisection of the selected triangles (and some of their neighbors)
it then outputs a reﬁned conforming triangulation. Algorithm 1 describes the
original longest edge bisection algorithm proposed by Rivara [14].

Algorithm 1. Longest edge bisection algorithm
Input: A quality triangulation τ and a set Sref of triangles to be reﬁned
Output: A quality triangulation τ (cid:2)

such that each t ∈ Sref has been reﬁned

while Sref (cid:3)= ∅ do
for each t in S do

Bisect t by the longest edge midpoint Q
Find t(cid:2)
, neighbor of t containing point Q
if t(cid:2)

became non-conforming then

Add t(cid:2)

to Sref

end if
end for
end while

A practical drawback of Algorithm 1 is the management of intermediate
non-conforming triangulations, which mainly depend on how the set Sref is
processed. Rivara introduced the Lepp-bisection algorithm [16], an elegant
and eﬃcient improvement on the original algorithm. The main contributions
of this algorithm are the concepts of propagation paths and terminal edges,
making it possible to navigate through the set Sref performing local bisections 
of pairs of triangles, also maintaining the mesh valid during the whole
reﬁnement process. An advantage over Delaunay-based reﬁnement methods
is their robustness, as bisection algorithms do not depend on complex computations.


Empirical evaluations on longest edge bisection algorithms have been previously 
performed [9, 23, 18].

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

125

3.1 Lepp-Bisection Algorithm
An edge E is called a terminal edge in triangulation τ if E is the longest
edge of every triangle that shares E, and the triangles sharing E are called
terminal triangles [17]. For the 2-dimensional scenario, if E is shared by two
terminal triangles then E is an interior edge; if E is shared by a single terminal
triangle then E is a boundary or constrained edge. Figure 1 illustrates these
concepts.

(cid:3)(cid:4)

(cid:3)(cid:5)

(cid:1)

(cid:1)(cid:7)

(cid:1)(cid:2)

(cid:1)(cid:4)

(cid:1)(cid:3)

(cid:6)

(cid:5)

(b)

(cid:3)(cid:6)

(cid:2)

(cid:3)(cid:7)

(a)

Fig. 1. (a) AB is an interior terminal edge shared by terminal triangles {t2, t3}
of Lepp(t0) = {t0, t1, t2, t3}; (b) CD is a boundary terminal edge with terminal
triangle {t7} of Lepp(t4) = {t4, t5, t6, t7}

0

For any triangle t0 in τ , the longest edge propagating path of t0, Lepp(t0), is
the ordered sequence {tj}N +1
, where tj is the neighbor triangle on the longest
edge of tj−1, and longest edge(tj) > longest edge(tj−1), for j = 1, . . . , N .
Edge E = longest edge(tN +1) = longest edge(tN ) is an interior terminal
edge in τ and this condition determines N . Therefore, either E is shared by
the couple of terminal triangles (tN , tN +1) if E is an interior edge in τ , or
E is shared by a unique terminal triangle tN with boundary (constrained)
longest edge.

The Lepp-bisection algorithm [17] for the triangle reﬁnement problem can
be simply described with two basic steps: starting from an initial triangle
t0, it ﬁrst ﬁnds Lepp(t0), reaching its two terminal triangles tN and tN +1
which share terminal edge E; then, the longest edge bisection is done by
the midpoint of E – reﬁning triangles tN and tN +1. This process is repeated
until initial triangle t0 is reﬁned. Algorithm 2 presents a generalization of the
algorithm for the local reﬁnement problem.

Figure 2 illustrates the Lepp-bisection reﬁnement process. Terminal triangles 
of Lepp(t0) are t2 and t3, which are bisected on their longest edge (Fig.
2(a)). Lepp(t0) is recomputed with terminal triangle t1 and triangle t(cid:2)
2 (a
sub-triangle of t2). These triangles are then reﬁned and a last computation
of Lepp(t0) occurs, with terminal triangle t0 and triangle t(cid:2)
1 (a sub-triangle
of t1). This ﬁnal bisection reﬁnes starting triangle t0 (Fig. 2(b)). Since the
reﬁnement process starts at the terminal triangles (stopping at the starting
triangle) we can say that the Lepp-bisection algorithm works backwards.

126

C. Bedregal and M.-C. Rivara

Algorithm 2. Lepp-bisection algorithm
Input: A quality triangulation τ and a set Sref of triangles to be reﬁned
Output: A quality triangulation τ (cid:2)

such that each t ∈ Sref has been reﬁned

for each t in Sref do

while t remains in τ do

Find Lepp(t), terminal triangles t1, t2 and terminal edge l. Triangle t2 can
be null for boundary l
Select point (P, t1, t2, l)
Perform (longest edge) bisection by P of triangles t1, t2
Update Sref

end while

end for

(cid:4)(cid:5)

(cid:1)

(cid:3)

(a)

(cid:2)

(cid:1)

(cid:2)

(cid:5)

(cid:4)

(cid:3)

(b)

Fig. 2. Reﬁning triangle t0 of triangulation in Fig. 1(a) with Lepp(t0) =
{t0, t1, t2, t3}: (a) ﬁrst vertex 1 is added by the bisection of the terminal triangles
sharing edge AB; (b) ﬁnal triangulation

3.2 Properties of the Bisection Algorithms

The main properties of the longest edge algorithms can be summarized as
follows [14]:

Lemma 1. The iterative and arbitrary use of the algorithms only produces
triangles whose smallest interior angles are always greater than or equal to
α/2, where α is the smallest interior angle of the initial triangulation. Furthermore 
every triangle generated is similar to one of a ﬁnite number of
reference triangles.

Lemma 2. Longest edge reﬁnement algorithms always terminate in a ﬁnite
number of steps with the construction of a conforming triangulation.

Lemma 3. Any triangulation τ generated by means of the iterative use of
the algorithms satisﬁes the following smoothness condition: for any pair of
side-adjacent triangles t1, t2 ∈ τ (with respective diameters h1, h2), it holds
max(h1,h2) ≥ k > 0, where k depends on the smallest angle of the initial
that
triangulation.

min(h1,h2)

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

127

Lemma 4. For any triangulation τ , the global iterative application of the algorithm 
(the bisection of all the triangles in the preceding iteration) covers, in
a monotonically increasing form, the area of τ with quasi-equilateral triangles
(with smallest angles ≥ π/6).

Proof of Lemma 2 is based on the facts that (1) the propagation of the
reﬁnement moves toward bigger triangles of the mesh, and (2) every mesh
has bounded smallest angle. The smoothness property of Lemma 3 follows
from the bound on the smallest angle of Lemma 1. Lemma 4 refers to the
generation of more equilateral triangles with every iteration, also isolating
the worst angles.

3.3 Similarity Classes of Triangles

The study by Gutierrez et al. [8] on the complexity of the bisection of a triangle 
introduced a classiﬁcation of triangles based on the number of non-similar
triangles produced by the iterative bisection of a triangle. This study deﬁned
six main similarity classes of triangles considering the possible geometric positions 
where vertex C of a triangle t(ABC) may lie (see Fig. 3). Then, for
any triangle t, the number of iterative bisections performed until no further
non-similar triangles are generated is O(α−1), where α is the smallest angle
of t.

(cid:1)

(cid:2)(cid:1)

(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)

(cid:2)

(cid:1)(cid:2)

(cid:3)

(cid:4)

Fig. 3. Regions deﬁning the classes of triangles t(ABC). Virtual vertex C lies in
one of the regions deﬁning a triangle t with AB ≥ BC ≥ CA.

It is proved in [8] that the iterative bisection of Class I triangles will generate 
at most four non-similar triangles (Lemma 2 in [8]). Figure 4 shows a
Class I triangle t(ABC) and the triangles generated after ﬁve bisections. The
initial bisection generates two non-similar triangles t1(ADC) and t2(BCD).
The bisection of t1 generates one non-similar triangle, t1,1(DCH), because
t1,2(ADH) is similar to initial triangle t. The bisection of t1,1 generates triangles 
t1,1,1(CHF ) and t1,1,2(HDF ), which are similar to triangles t1 and t2

128

C. Bedregal and M.-C. Rivara

respectively. Finally, iterative bisections on t2 generate only one non-similar
triangle, t2,1(CDE).

It is also proved in [8] that for triangles of Classes II to VI, some new nonsimilar 
triangles are produced until triangles of Class I are created, which
ﬁnishes the creation of new triangles. Note that for some of these cases the
bisection of triangle t(ADC) in Fig. 4 needs to be performed either on the
edge CD or AD, while the bisection of t2,1(CDE) can be performed on edge
CE.

(cid:3)

(cid:4)

(cid:7)

(cid:5)

(cid:1)

(cid:6)

(cid:2)

Fig. 4. Iterative bisections on a Class I triangle

The analysis of longest edge bisection reﬁnement algorithms, described in
Sec. 4, uses a similar classiﬁcation to estimate the number of bisections needed
to obtain a conforming reﬁned mesh, speciﬁcally, the number of bisections
needed to obtain “good” triangles on diﬃcult regions.

4 Analysis of the Longest Edge Bisection Algorithm

Consider that the algorithm introduces a number of Nref new mandatory
points needed to achieve the required triangle resolution, and a number of
Nprop new propagation points required for the mesh to remain valid. The
computational cost of the algorithm will depend on (1) N = Nref + Nprop,
the number of new points inserted into the mesh, and (2) the cost of inserting
these points. For (1), Nref is bounded by the reﬁnement parameters, so our
study will focus on bounding Nprop. For (2), using appropriate data structures
that allow easy access to a triangle’s neighborhood information, the cost of
insertion becomes linear in N , independently of the size of the triangulation
and the number of iterations performed [14].

In the rest of the section we analyze the number of new points (and tri-
angles) generated by the longest edge bisection algorithm. We start with an
analysis of the number of points inserted by the propagation of reﬁning a
single triangle; then we extend the results to the local reﬁnement problem
and the case of iterative reﬁnement around a vertex.

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

129

4.1 Reﬁning a Non-conforming Triangle

Our goal is to analyze the behavior of the original longest edge bisection algorithm 
described in Algorithm 1 over individual triangles. Considering that
the algorithm consistently selects the longest edge of a triangle for non-unique
longest edges, the order in which set Sref is processed does not aﬀect the output 
of the algorithm. This also ensures that the original bisection algorithm
and the Lepp-bisection algorithm obtain the same results. To study the reﬁnement 
propagation we will analyze the behavior of the iterative bisection
on a triangle t ∈ Sref in order to get a conforming triangulation; according
to Algorithm 1, we will consider that the next triangles t∗
to be reﬁned are
the ones generated by the bisection of the last triangle.
angle t(cid:2)
three scenarios of Fig. 5:
Case 1: Q lays on the longest edge of t(cid:2)

After the bisection of a target triangle t, whenever a non-conforming triis 
produced, the mesh is made conforming according to one of the

. This case is trivial since t and t(cid:2)
share the longest edge. The bisection of t(cid:2)
by the midpoint of l is enough
to obtain a valid mesh (see Fig. 5(a)). This case is analogous to reﬁning
the two terminal triangles of the Lepp.

Case 2: Q lays on the second longest edge of t(cid:2)

, inserting point Q1 and splitting t(cid:2)

. In this case a second bisection 
is required to obtain a valid mesh. The ﬁrst bisection corresponds to
the longest edge bisection of t(cid:2)
in two
triangles. Consider t(cid:2)
1 as the non-conforming triangle containing Q. Since
Q lays on the longest edge of t(cid:2)
1 (which corresponds to Case 1), the mesh
is made conforming by bisecting t(cid:2)
1 by the midpoint of l (see Fig. 5(b)).
. This case is more complex to solve
as the number of points inserted inside t(cid:2)
will depend on the triangle’s
similarity class (see Fig. 5(c)). The number of points inserted in t(cid:2)
is
bounded by O(log 1

α ), where α represents the smallest angle of t(cid:2)

Case 3: Q lays on the smallest edge of t(cid:2)

. 1

For Cases 1 and 2, triangle t(cid:2)
is made conforming independently of the tri-
angle’s similarity class. The analysis of Case 3 is further described in Sec.
4.2.

4.2 Reﬁning Triangles by the Smallest Edge

When a non-conforming triangle is produced after adding a point on its
smallest edge (as described in Case 3 of Sec. 4.1), the triangulation is made
valid after performing a few additional longest edge bisections inside the nonconforming 
triangle, i.e. until the hanging point is connected using one of the
new edges.

The number of bisections (and triangles) required to obtain a conforming
triangle can be determined by the similarity class [8] of the triangle being
processed, as described by the following lemma.

1 Our logarithms are base 2.

130

C. Bedregal and M.-C. Rivara

(cid:3)

(cid:1)

(cid:5)

(cid:2)

(cid:4)

(a) Case 1

(cid:2)

(cid:3)

(cid:6)

(cid:1)

(cid:2)

(cid:4)

(cid:1)

(cid:4)

(cid:3)

(cid:3)(cid:5)

(b) Case 2

(c) Case 3

(cid:5)

Fig. 5. Longest edge bisection of triangle a t(ABC) producing non-conforming
neighbor triangle t(cid:2)
; (b) AB is the second
longest edge of t(cid:2)

(ADB): (a) AB is the longest edge of t(cid:2)

; (c) AB is the smallest edge of t(cid:2)

Lemma 5. In order to make valid a non-conforming triangle (with smallest
angle α) when a point is hanging at the midpoint of its smallest edge, the
number of new points (and triangles) produced by the longest edge bisection
algorithm is:

(1) For a Class I triangle it produces 3 triangles and 1 new point.
(2) For a Class II triangle it produces 6 triangles and 3 new points.
(3) For a Class III triangle it produces at most 6 + 3k triangles and 3 + 2k

points, for a constant k = (cid:5)log( π

6α )/ log( 3

2 )(cid:6).

(4) Class IV triangles behave no worse than Class III triangles.
(5) Class V and Class VI triangles present the same behavior as Class I

triangles.

Proof. Consider a triangle t(ABC), with smallest angle α and AB ≥ BC ≥
CA, and point Q located at the midpoint of its smallest edge CA making
the triangle non-conforming. Also consider point Q1 inserted after the ﬁrst
bisection of t by the midpoint of its longest edge AB, producing triangles

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

131

(cid:3)

(cid:4)

(cid:6)(cid:5)

(cid:1)

(cid:6)(cid:7)

(cid:4)(cid:5)

(cid:2)

Fig. 6. Non-conforming triangle t(ABC) produced by the introduction of point Q
on its smallest edge CA. Triangles t1(AQ1C) and t2(CQ1B) are obtained after the
initial longest edge bisection of t.

t1(AQ1C) and t2(CQ1B), where t1 is the non-conforming triangle containing
point Q (see Fig. 6). Then, for each similarity class we can prove that:
1. Class I (AQ1 ≤ CQ1 ≤ CA): Edge CA becomes the longest edge of
triangle t1, so the longest edge bisection on t1 is enough to make the
triangulation valid, while triangle t2 remains unaﬀected (see Fig. 7(a)).
In total, one new point is produced.
2. Class II (AQ1 ≤ CA ≤ CQ1): Triangle t1 belongs to Class I, so two
bisections are performed on it. Point Q2 inserted on edge CQ1, making
neighbor triangle t2 non-conforming. Since AQ1 = Q1B ≤ CQ1, point
Q2 is aﬀecting the second longest edge of t2 (recall Case 2), two extra
bisections are needed to make the triangulation valid (see Fig. 7(b)). In
total, three new points are produced.
3. Class III (CA ≤ AQ1 ≤ CQ1): Triangle t1 will either belong to Class I,
II or III (see Fig. 7(c)). For Classes I and II the number of bisections and
points produced inside t1 is constant as described above. In either case
point Q2 is inserted on edge CQ1, making triangle t2 non-conforming.
Since CQ1 is again the second longest edge of t2 (corresponding to Case
2), two bisections are required to make the triangulation valid. On the
other hand, if t1 still belongs to Class III, it is iteratively bisected until
a Class I or II triangle is produced which contains Q in no more than
2 )(cid:6) steps. Consider i the number of steps performed, in the
(cid:5)log( π
i-th iteration triangle ti
1, aﬀecting the second longest edge
2. Since AQ1 = Q1B ≤ CQ1, two bisections on ti
of neighbor ti
2 are needed
to make the triangulation valid. This 2-bisection pattern is repeated on
2 )(cid:6) new
each tj
points are produced.
4. Class IV (CA, CQ1 ≤ AQ1): Triangle t1 could still belong to Class IV,
6α )(cid:6) iterative bisections, the non-conforming
but after no more than (cid:5)log( π
triangle containing Q will either belong to Class I, II, III, V or VI (see
Fig. 7(d)). Considering i the number of steps until producing a Class I, V
or VI triangle containing Q, additional bisections are propagated on each
tj
2 for j = 1, . . . , i only if there was a triangle tj
1 that belonged to Class II
or III, otherwise no propagation is required. Although this class should

2, for j = 1, . . . , i − 1. Finally, at most 3 + 2(cid:5)log( π

6α )/ log( 3

6α )/ log( 3

1 inserts point Qi

132

C. Bedregal and M.-C. Rivara

(cid:3)

(cid:4)

(cid:5)

(cid:1)

(cid:1)(cid:2)

(cid:1)(cid:7)

(cid:1)

(cid:1)

(cid:4)(cid:5)

(a) Classes I, V and VI

(cid:2)

(cid:3)

(cid:1)(cid:6)

(b) Class II

(cid:3)

(cid:4)

(cid:4)(cid:6)

(cid:4)(cid:7)

(cid:8)(cid:5)

(cid:4)(cid:5)

(c) Class III

(cid:3)

(cid:6)(cid:5)

(cid:4)

(cid:2)

(cid:1)

(cid:4)(cid:5)

(d) Class IV

(cid:4)

(cid:2)

Fig. 7. Behaviour of the longest edge bisection algorithm for each similarity class
when a point Q is aﬀecting the smallest edge of non-conforming triangle t(ABC)

not perform worse than Class III, for an α close to 0 the propagation
could produce an extra point in each step, so the number of new points
would be bounded by O(log
5. Class V and VI (CQ1 ≤ AQ1 ≤ CA): The behavior for these triangles
is the same as in Class I since the aﬀected edge CA becomes the longest
(cid:8)(cid:9)
edge of t1.

( π
6α )).

2

Note that the number of new triangles produced is one more than the number
of bisections performed. Thus, for the triangle reﬁnement problem the algorithm 
performs k = O(log 1
α0 ) bisections on each triangle reﬁned by propagation,
 with α0 the smallest angle of the triangles aﬀected. Considering m the
number of triangles eﬀectively reﬁned, the longest edge reﬁnement algorithm
produces O(km) new points. Working with quality acceptable triangulations,
the value of k becomes negligible.
For |Sref| > 1, the local reﬁnement problem, consider M = Mref + Mprop
the number of triangles eﬀectively reﬁned, where Mref = |Sref| is the number 
of triangles initially selected for reﬁnement, and Mprop is the number of
triangles reﬁned due to propagation. The following lemma summarizes the
cost of the algorithm for the local reﬁnement problem.

Lemma 6. A longest edge bisection reﬁnement algorithm inserts at most
O(kM ) new points into a triangulation with smallest angle α0, where M
is the number of triangles eﬀectively reﬁned and k = O(log 1

α0 ).

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

133

The algorithm produces the most points when the reﬁnement propagates to
the smallest edge of the neighbor triangle as discussed in Sec. 4.1. Then, the
(cid:8)(cid:9)
proof of the lemma follows from Lemma 5.
For a quality acceptable triangulation the value of k is negligible, and the
number of new points produced becomes linear in M . For example, in a
triangulation with α0 ≥ π/6 the algorithm inserts at most 3M new points,
since no triangle belongs to Classes III or IV. On the other hand, if we allow
Class III or IV triangles in the triangulation, for example with α0 ≥ π/18,
these triangles could not be iteratively reﬁned more than three times.

In the worst possible scenario, the propagation aﬀects every triangle of a
bad quality triangulation (e.g. a triangulation covered by spikes of Class III
or IV triangles), so every triangle of the triangulation is reﬁned during a ﬁrst
iteration. It is important to note that the algorithm produces Class I, V and
VI triangles to solve hanging points in non-conforming triangles. The eﬀect
of this is that “better” quality triangles tend to cover the propagation path,
so future iterations would be processed faster and their propagations reduced
as the smallest angles are isolated.

When multiple hanging points are inserted over the same edge (e.g., due
to the iterative bisection of Class III or IV triangles), the algorithm processes
non-conforming neighbor solving the hanging points in the same order they
were produced. Again, as better triangles are produced in this area, solving
the following hanging points would insert a constant number of new points.

4.3 Iterative Reﬁnement around a Vertex

Iterative reﬁnement of the mesh reduces the number of bisected triangles
since the propagation is reduced. The area covered by aﬀected triangles is also
reduced. In practice, the number of triangles reﬁned by propagation is less
than ﬁve. Additionally, iterative reﬁnement produces more quasi-equilateral
triangles (isolating the bad triangles), so non-conforming issues are solved
more quickly.

This is related to the fractal property, observed after successive iterations
of the reﬁnement around a vertex. After a number of iterations the algorithm
performs repetitive patterns of bisections – called fractals – as it gets “closer”
to the vertex being reﬁned. In this sense, the iterative reﬁnement maintains
a locality on the new triangles generated, reducing the propagation in each
iteration. The following lemma address the fractal property as stated in [17].

Lemma 7. For any vertex Q, use the algorithm to repeatedly reﬁne each triangle 
of vertex Q. Then after a ﬁnite number of triangle reﬁnements around
Q, a ﬁxed angle molecule is obtained (the angles of vertex Q are not partitioned 
if the reﬁnement follows). In addition, further reﬁnement around Q
reproduces the same fractal geometry.

The proof of the lemma is given by the fact that if the mesh has smallest
angles greater than or equal to α, then vertex Q is shared by at most 2π/α

134

C. Bedregal and M.-C. Rivara

triangles. Then, from the results of Sec. 3.3 we can note that the number
of non-similar triangles is ﬁnite, so after a ﬁnite number of partitions the
(cid:8)(cid:9)
triangle geometry around vertex Q is reproduced.
Consider triangle t with α1, α2 and α3 the biggest, second biggest and smallest 
angle of t respectively. The speed by which the fractal property is observed
inside t will depend on the angle in which Q is located:
•

If Q corresponds to the smallest angle α3, iterative reﬁnement will generate 
a zig-zag pattern toward the vertex (see Fig. 8(a)). This happens
because every two bisections, the triangle containing Q is similar to t.
If Q corresponds to the biggest angle α1 or second biggest angle α2,
iterative reﬁnement will split the triangles into smaller ones, until the
new triangles starts generating the aforementioned zig-zag pattern (see
Fig. 8(c) and Fig. 8(b)).

•

(cid:1)(cid:2)

(cid:1)(cid:2)

(cid:1)(cid:2)

(a)

(b)

(c)

Fig. 8. Examples of the fractal property after the iterative reﬁnement over a vertex
Q: (a) over the smallest angle; (b) over the second biggest angle; (c) over the biggest
angle

The current stage of our research is focused on using the results of Lemma
5 in Sec. 4.2 to bound the cost of the iterative reﬁnement around a vertex.
Based on Lemma 7, our hypothesis is that the propagation is reduced in each
iteration until the work of reﬁning the triangles around the vertex becomes
constant (i.e., the fractal pattern appears). Since only initial iterations would
propagate to more triangles, an amortized cost analysis would be required to
establish the cost of the algorithm.

5 Conclusions and Future Work

In this paper we presented a new study on the size optimality of the longest
edge bisection algorithm for the reﬁnement of triangulations in two dimensions.
 In practice, longest edge algorithms for iterative reﬁnement perform
well, reﬁning only a constant number of triangles in order to maintain a
conforming triangulation. These algorithms currently oﬀer guarantees only
on the shape of the output triangulation, so our study aimed to establish a
theoretical bound on its size.

A Study on Size-Optimal Longest Edge Reﬁnement Algorithms

135

The study was based on the behavior of the algorithm propagation. When
propagating to the longest edge of a neighbor triangle, the propagation stops.
For the second longest edge, propagation moves in only one direction. We focused 
the analysis on the non-trivial scenario where propagation moves to
the smallest edge of a triangle, as it might insert more points. Even for this
scenario, the number of points produced by the algorithm remains within a
constant factor of the number of mandatory points required by the application.
 This factor will depend on the smallest angle in the triangulation.

Currently we are working on a tighter bound on the size of the propagation
produced by the reﬁnement. Our hypothesis is that iterative reﬁnement reduces 
the propagation to a constant factor, corresponding to fractal patterns,
so that the cost associated with the propagation would be amortized.

We are also working on a more detailed classiﬁcation of the triangles based
on the behavior of the propagation. For example, there are triangles from
sub-regions of Class IV that behave similarly to Class I triangles.

For future work we plan to extend the results to the vertex reﬁnement
problem introduced in Sec. 4.3. The analysis of this problem is similar to
the iterative reﬁnement of bad quality triangles reviewed in Sec. 4.2. We
also plan to extend these theoretical results to other longest-edge reﬁnement
algorithms such as Lepp-Delaunay [16].

References

1. Baker, B.S., Grosse, E., Raﬀerty, C.S.: Nonobtuse triangulation of polygons.

Discrete & Computational Geometry 3, 147–168 (1988)

2. Baker, T.: Automatic mesh generation for complex three-dimensional regions
using a constrained delaunay triangulation. Engineering with Computers 5,
161–175 (1989), doi:10.1007/BF02274210

3. Bern, M., Eppstein, D., Gilbert, J.: Provably good mesh generation. Journal of

Computer and System Sciences 48(3), 384–409 (1994)

4. Bern, M.W., Eppstein, D.: Mesh generation and optimal triangulation. In: Du,
D.-Z., Hwang, F.K.-M. (eds.) Computing in Euclidean Geometry. Lecture Notes
Series on Computing, vol. 1, pp. 23–90. World Scientiﬁc (1992)

5. Borouchaki, H., George, P.L.: Aspects of 2-d delaunay mesh generation. International 
Journal for Numerical Methods in Engineering 40(11), 1957–1975
(1997)

6. Chew, L.P.: Constrained delaunay triangulations. In: Proceedings of the Third
Annual Symposium on Computational Geometry, SCG 1987, pp. 215–222.
ACM, New York (1987)

7. Edelsbrunner, H.: Triangulations and meshes in computational geometry. Acta

Numerica 9, 133–213 (2000)

8. Gutierrez, C., Gutierrez, F., Rivara, M.-C.: Complexity of the bisection method.

Theoretical Computer Science 382(2), 131–138 (2007)

9. Jones, M.T., Plassman, P.E.: Computational results for parallel unstructured

mesh computations. Technical report, Knoxville, TN, USA (1994)

10. Jones, M.T., Plassmann, P.E.: Adaptive reﬁnement of unstructured ﬁniteelement 
meshes. Finite Elements in Analysis and Design 25(1-2), 41–60 (1997)

136

C. Bedregal and M.-C. Rivara

11. Melissaratos, E.A., Souvaine, D.L.: Coping with inconsistencies: a new approach
to produce quality triangulations of polygonal domains with holes. In: Proceedings 
of the Eighth Annual Symposium on Computational Geometry, SCG 1992,
pp. 202–211. ACM, New York (1992)

12. Muthukrishnan, S.N., Shiakolas, P.S., Nambiar, R.V., Lawrence, K.L.: Simple 
algorithm for the adaptive reﬁnement of three dimensional problems with
tetrahedral meshes. AIAA Journal 33(5), 928–932 (1995)

13. Nambiar, R.V., Valera, R.S., Lawrence, K.L., Morgan, R.B., Amil, D.: An algorithm 
for adaptive reﬁnement of triangular element meshes. International
Journal for Numerical Methods in Engineering 36(3), 499–509 (1993)

14. Rivara, M.-C.: Algorithms for reﬁning triangular grids suitable for adaptive
and multigrid techniques. International Journal for Numerical Methods in Engineering 
20(4), 745–756 (1984)

15. Rivara, M.-C.: Design and data structure of fully adaptive, multigrid, ﬁniteelement 
software. ACM Transactions on Mathematical Software 10(3), 242–264
(1984)

16. Rivara, M.-C.: New longest-edge algorithms for the reﬁnement and/or improvement 
of unstructured triangulations. International Journal for Numerical Methods 
in Engineering 40(18), 3313–3324 (1997)

17. Rivara, M.-C.: Lepp-bisection algorithms, applications and mathematical properties.
 Applied Numerical Mathematics 59(9), 2218–2235 (2009)

18. Rivara, M.-C., Rodriguez, P., Montenegro, R., Jorquera, G.: Multithread parallelization 
of lepp-bisection algorithms. Applied Numerical Mathematics 62(4),
473–488 (2012)

19. Ruppert, J.: A delaunay reﬁnement algorithm for quality 2-dimensional mesh

generation. Journal of Algorithms 18(3), 548–585 (1995)

20. Schneiders, R.: Quadrilateral and Hexahedral Element Meshes. In: Thompson,
J., Soni, B., Weatherill, N. (eds.) Handbook of Grid Generation. CRC Press
(1999)

21. Shewchuk, J.R.: Delaunay reﬁnement algorithms for triangular mesh generation.
 Computational Geometry: Theory and Applications 22(1-3), 21–74 (2002)
22. Shewchuk, J.R.: Unstructured mesh generation. In: Naumann, U., Schenk, O.
(eds.) Combinatorial Scientiﬁc Computing, ch. 10, pp. 259–298. CRC Press
(2011)

23. Su´arez, J.P., Plaza, A., Carey, G.F.: The propagation problem in longest-edge

reﬁnement. Finite Elements in Analysis and Design 42(2), 130–151 (2005)

