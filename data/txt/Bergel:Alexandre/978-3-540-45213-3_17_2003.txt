Classboxes: A Minimal Module Model

Supporting Local Rebinding

Alexandre Bergel, St´ephane Ducasse, and Roel Wuyts

Software Composition Group, University of Bern

Bern, Switzerland

{bergel,ducasse,wuyts}@iam.unibe.ch

Abstract. Classical module systems support well the modular development 
of applications but do not oﬀer the ability to add or replace
a method in a class that is not deﬁned in that module. On the other
hand, languages that support method addition and replacement do not
provide a modular view of applications, and their changes have a global
impact. The result is a gap between module systems for object-oriented
languages on one hand, and the very desirable feature of method
addition and replacement on the other hand. To solve these problems
we present classboxes, a module system for object-oriented languages
that provides method addition and replacement. Moreover, the changes
made by a classbox are only visible to that classbox (or classboxes that
import it), a feature we call local rebinding. To validate the model,
we have implemented it in the Squeak Smalltalk environment, and
performed experiments modularising code.

Keywords:
class extension, selector namespace

language design, method lookup, modules, smalltalk,

1 Modules in the Presence of Extensibility

The term module is overloaded. We follow the deﬁnitions of Modular Smalltalk
[16] and Szyperski [12].

Modules are program units that manage the visibility and accessibility
of names. A module deﬁnes a set of constant bindings between names
and objects [16]. A module is a capsule containing (deﬁnitions of) items.
The module draws a strong boundary between items deﬁned inside it and
items deﬁned outside other modules [12].

A class extension is a method that is deﬁned in another source packaging
entity (for example, a Java package or an Envy application [9]) than the class it
is deﬁned for. There exist two kinds of class extension: a method addition adds
a new method, while a method replacement replaces an existing method.

Classical module systems, like those of Modula-2[17], Modula-3 [1], Oberon2 
[8], Ada [13], or MzScheme’s [4] do not support class extensions. Numerous

L. B¨osz¨orm´enyi and P. Schojer (Eds.): JMLC 2003, LNCS 2789, pp. 122–131, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

Classboxes: A Minimal Module Model Supporting Local Rebinding

123

object-oriented programming languages, such as Java, C++, and Eiﬀel [7] lack
this facility. However, it is widely used in those languages that support it, such as
Smalltalk[16] and GBeta [3]. In “Capsules and Types in Fresco” A. Wills reports
that in the goody library1 goodies-lib@cs.man.ac.uk 73% of the ﬁles modify
existing classes, and 44% deﬁne no new classes at all [14]. Even if these ﬁgures
should be tempered due to the fact that goodies are not industrial applications,
these numbers reﬂect that class extensions are not an anecdotical mechanism.
There is some ongoing research that explores the introduction of class extensions
to Java (for example OpenClasses [2], Keris [18] or MixJuice [5]), which is another
indication that this is quite an important concept.

Languages supporting class extensions such as Smalltalk or Flavors do not
oﬀer the notion of modules. In these languages the changes are globally visible
and impact the whole system. Even in module systems that support class extensions 
(Modular Smalltalk [16]), changes are visible to everyone after they have
been applied.

To summarise, module systems exist for languages that do not support class
extensions on the one hand, and languages exist that support class extensions but
not modules on the other hand. The Classbox model provides modules that fully
support class extensions, and these extensions are only visible to the classbox
that deﬁned them. Outside the classbox the system runs unchanged. This is
accomplished by redeﬁning the method lookup mechanism to take classboxes
into account, so that the desired method is executed.

For validation we implemented this system in Squeak, an open-source
Smalltalk environment, and implemented some small applications. Section 3 describes 
one of these examples, an application to check dead links on a web page.
Classboxes are used to extend an existing system with a visitor and to replace
existing system code.

The rest of the paper is structured as follows. Section 2 presents an overview
of the Classbox model. In Sect. 3 we illustrate the model by showing the implementation 
of an application to check for dead links on web pages. Section 6
concludes the paper.

2 Overview of the Classbox Model

This section describes the semantics of the Classbox model. The next section
illustrates the semantics and usage on a concrete case-study highlighting its
unique features.
Classbox Contents. A classbox consists of imports and deﬁnitions:

– An import is either a class import (stating explicitly from which classbox
the class is imported, called the parentbox) or a classbox import (i.e., that
imports every class from the imported classbox).

– A deﬁnition can be a class deﬁnition or a method deﬁnition. A method deﬁnition 
declares the class that a method belongs to, the name of the method,
and the implementation of the method.

1 A goody is a small application provided without warranty or support.

