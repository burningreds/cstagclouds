Supporting Language Interoperability by

Dynamically Switched Behaviors(cid:63)

Jan Kurˇs1, Jan Vran´y1, and Alexandre Bergel2

1Software Engineering Group,

Faculty of Informatics,

Czech Technical Universtity in Prague
{kursjan, jan.vrany}@fit.cvut.cz

2Pleiad Lab, Department of Computer Science (DCC)

University of Chile, Chile

http://bergel.eu

V. Sn´aˇsel, J. Pokorn´y, K. Richta (Eds.): Dateso 2011, pp. 73–84, ISBN 978-80-248-2391-1.

SupportingLanguageInteroperabilitybyDynamicallySwitchedBehaviors?JanKurˇs1JanVran´y1AlexandreBergel21SoftwareEngineeringGroup,FacultyofInformatics,CzechTechnicalUniverstityinPrague{kursjan,jan.vrany}@fit.cvut.cz2PleiadLab,DepartmentofComputerScience(DCC)UniversityofChile,Chilehttp://bergel.euAbstract.Softwareprogramsareoftenwritteninmorethanoneprogramminglanguageastheemergenceofdomainspeciﬁclanguagestestiﬁes.Languagein-terpretersareeasilyembeddableandperformancesareusuallysatisfactory.How-ever,inter-languageinteractionremainsaﬁeldtarnishedbypoorperformances.Thereasonisthatalienobjectsarewrapped,implyingtheuseofexpensivefor-wardingandconvertingmechanism.Weproposetorepresentalienobjectsasthesetofdifferentstatesandbehaviorsitmayhavebymovingbetweenlanguages,thusavoidingwrappingandconversion.WehavevalidatedoursolutiononintegrationofJavaandSmalltalkprogramminglanguages.Keywords:ProgrammingLanguage,VirtualMachine,ObjectTransitions,Java,Smalltalk1IntroductionThelastdecadehasseentheadventofdomainspeciﬁclanguagesandsupportformultilanguages.Commonexecutionplatforms,includingtheJVMand.Net,arenowadaysﬁttoexecuteprogramswritteninmorethanoneprogramminglanguage.Whereastheexecutionmechanismneededtointerprettheselanguagesarefairlywellaccepted[7,10],thewaylanguagesinteractandexchangesvaluesstillremainsanopentopic.Thelargemajorityofembeddedlanguagesconvertorwrapobjectswhentheycrossthelanguageboundary[12].Whenanobjectispassedfromonelanguageinterpretertoanother,itiseitherconvertedorwrapped:valueslikeintegers,ﬂoats,booleans,charac-ters,andstringsaremerelyconvertedwhiletheremainingobjectsaresimplywrapped.Whereasobjectsconversionandwrappingisagloballyacceptedamongdomainspeciﬁclanguagesandscriptinglanguages,itisthesourceofseveralproblemsandlim-itations.ConsideraplainJavadictionaryproducedbyaJavaprogram.Thisdictionaryisrepresentedasaninstanceofjava.util.HashMap.AJRubyinterpreterwillconsiderthis?ThispaperwaspartiallysupportedbyinternalCTUgrant–SGS201174

Jan Kurˇs, Jan Vran´y, Alexandre Bergel

objectasawrappedalienobject.Allcallsdoneonthisobjectimpliesaconversionorwrappingofitsargumentsandadelegationbythewrappertotherealobjects.SendingtheJRubymessageput(”One”,1)totheJavadictionaryconvertstheJRubystring”One”andtheJRubyinteger1intotheircorrespondingJavavalues.Delegatingmessageshasacostwhichissigniﬁcantwhenintensivelyuse.Asecondproblemisaboutobjectidentity.WhenthisJavadictionaryispassedasecondtimetoJRuby,ithastobewrappedusingthesamewrapperthatwasusedfortheﬁrsttime.Abijectivemappingbetweenalienobjectsandwrappershastobeenforced.Thewrapperusedthesecondtimehastobephysicallythesamethantheﬁrstwrapper(i.e.,havingthesamepointer).Again,thiscomesatafairlyhighcostincaseofintensiveobjectpassing.Insteadofrepresentingaliensobjectsasawrapperinthehostlanguage,weproposetoextendthedeﬁnitionofanobjectasasetofcontextualizedvariablelayoutsandbehaviourdeﬁnition.TheproposedapproachhasbeenvalidatedonSmalltalk/Xprogrammingenviron-mentthatrunscodeinSmalltalkandJavaprogramminglanguages.Wehavemodi-ﬁedmetaobjectprotocolsinSmalltalk/Xinordertoimplementproposedapproachef-ﬁciently.Thecontributionsofthispaperare:identiﬁcationoftheproblemsassociatedwithobjectscrossingthelanguageboundary;introductionofanewapproachofmovingob-jectsbetweenlanguages;descriptionofaprototypeimplementation.Thepaperisorga-nizedasfollows:TheSection2introducessimplecodeanddescribesproblemscausedbylanguageinteraction.OursolutionisdescribedinSection3andtheimplementationisoutlinedinSection4.TheSection5discusses,howourapproachsolvestheproblemsfromtheSection2andwhatarethelimitationsofourapproach.2Problem2.1ExampleConsidercodeinFigure1andFigure2thatdemonstratesinteractionofJavaandSmalltalklanguages.InFigure1,thereisamethodsayHellothatselectslanguageaccordingtothelocaleandprintappropriategreeting.ThesayHellomethodexpectsamapwithtranslationstobepassedasaparameter.InFigure2,thereisaSmalltalkcodethatprintsgreetingusingtheJavacodeshowninFigure1.TheSmalltalkcreatesatranslationsasaninstanceofclassDictionaryandtheninvokessayHellomethodtoprintthegreeting.DuringtheinvocationofsayHellomethodonaninstanceofMultilanguage-HelloWorldclass,aninstanceofSmalltalkDictionaryispassedtoJavamethodthatexpectsaninstanceofjava.lang.Map.Inthatcase,wesaythattheSmalltalkobjectcrossedthelanguageboundary.2.2ProblemdescriptionTheproblemisthattheDictionarycannotbeusedasparameterofsayHellomethoddirectly–itisadifferentobjectfromcompletelydifferenttypehierarchywith2Supporting Language Interoperability by Dynamically Switched Behaviors

75

differentsetofmethods.Yetweintuitivelyfeel,thattheDictionaryisSmalltalkequivalentofjava.util.Map.Bothareusedtostorevaluesunderarbitrarykey.publicclassMultilanguageHelloWorld{publicvoidsayHello(HashMapdictionary){Stringkey=getLocale().getLanguage();System.out.println(dictionary.get(key));}}Fig.1.JavaclassMultilanguageHelloWorldthatcanprintgreetingsaccordingtothelocale.greetings:=Dictionarynewat:’en’put:’HelloWorld’;at:’cs’put:’Ahojsvˇete’.MultilanguageHelloWorldnewsayHello(greetings).Fig.2.SmalltalkcodeinteractingwithJavaobject-MultilanguageHelloWorldIfwewanttoletJavaandSmalltalkcodefromFigure1andFigure2interactsmoothly,therearetwobasicapproaches;First,donotcreateaninstanceofDic-tionary–createaninstanceofjava.lang.HashMapclassfromtheverybegin-ning.Orsecond,ifnecessary,createanewHashMapobjectandcopydatafromtheDictionarytotheHashMap.Intheﬁrstcase,theremayariseproblemwhentheobjectcreationisnotunderourcontrol.Forexample,ifthetranslationmappingisobtainedfromathird-partylibrarywhichcannotbemodiﬁed.Thesecondapproachistimeconsumingandhashighermemoryrequirements.Wehavetotakecareabouttheobjectidentityaswell:ifwecreatedanewobjecteverytimetheobjectispassedfromSmalltalktoJava,multipleJavaHashMapswouldrepresentthesameSmalltalkDictionary.Moreover,datashouldbekeptinsync:ifsomethingchangedintheJavaHashMap,weshouldupdatetheSmalltalkDictionaryobject.Usageofaproxy[6]objectisthird,moreadvancedapproach.Theproxyeliminatesproblemswithdatasynchronization.Neverthelessproblemswithidentityremainsandwehavetomapproxiestotheirsubjectswhichcausesextraperformanceandmemoryoverhead.376

Jan Kurˇs, Jan Vran´y, Alexandre Bergel

3OursolutionAsmentionedbefore,ourapproachrepresentssingleobjectinvariouslanguagesbytheonlyonephysicalobjectwithdynamicallychangedbehaviour.Objectbehaviourinspe-ciﬁclanguageisdescribedbyastructurethatwecallbehaviourobject.Inotherwords,thebehaviourobjectdescribesbehaviourofgivenobjectinscopeofgivenlanguage.Inmostoflanguages,thebehaviourobjectisitsclass,inprototypelanguagesthebehaviorobjectmightberepresentedbyobjectmap[3].Anyphysicalobjectmaybeassoci-atedwithasmanybehaviourobjectsasisthenumberoflanguagesinwhichtheobjectisused.Wheneveranobjectcrosseslanguageboundarywedynamicallychangeabe-haviourobjectaccordingtotheactuallanguage.ThegreetingsobjectfromFigure2wouldhavetwobehaviourobjectsassociated–oneforSmalltalklanguagerepresentingtheDictionaryclassandoneusedinJavarepresentingthejava.util.Map.Nextimportantpartofourapproachisamappingofanobjectstate.Wewillcallanorderedsetofobjectﬁeldsasanobjectlayout.Aprimaryobjectlayoutisthenanobjectlayoutdeﬁnedbythelanguagewheretheobjectwasinstantiated.Wewillcallasetofobjectﬁeldsandtheirrespectivevaluesasanobjectstate–anobjectstateisanobjectlayoutwithvalues.Similarly,aprimaryobjectstateisastateoftheobjectwithprimarylayout.Anymethodinanylanguagemaychangeanobjectstate.Unfortunately,eachbehaviourobjectmayrequiredifferentobjectlayout.Becausewesharethesamephysicalobjectamonglanguages,amappingfunctionhastomapprimaryobjectstatetodesiredobjectstateandviceversa.TheideaofsharedbehaviourandmappedstateisdepictedinFigure3.Intheup-perleft-handcornerthereisaphysicalobjectjava.lang.Stringcomposedofbehaviourandstate.Intheupperright-handcornerthereisasimilarstructureforSmalltalkString.Inthebottom,thereisacomposedobject–onephysicalobjectwithboth,SmalltalkandJavabehaviour.Thebehaviourissimplyadded,thestatehastobemappedfromSmalltalktoJava.Wewilldescribeourapproachmoreformallynow.Let’shaveavirtualmachineVMwhichisabletointerpretnativelanguageL1andalienlanguageL2.Let’shaveaprogramP1writteninL1andaprogramP2writteninL2.P2interactswithP1.Asaninputparameter,P1expectsanobjectO1withbehaviourdescribedbyabehaviourobjectB1.P2createsanobjectO2withaprimarylayoutA2=f21,f22,...,f2nandwithbehaviourdescribedbyabehaviourobjectB2.TheobjectlayoutA2withvaluesisanobjectstateS2.B2differsfromB1.B1expectsanobjecttohavealayoutA1=f11,f12,...,f1m.TheobjectlayoutA1withvaluesisanobjectstateS1.WewanttouseO2inP1asO1.AnexamplecouldbeﬁndinFigure1,Figure2anddescribedinSection2.1.WeneedtodeﬁnemappingfromS2toS1.Suchmappinghastosatisfytworequire-ments.First,anappropriatevaluehastobedeterminedfromS2whenthevalueofaﬁeldf∈A1isneeded.Second,S2hastobeupdatedaccordinglywhenaﬁeldf∈A1isbeingset.IfthelayoutsofA1andA2areidentical,themappingistriviallyidentitymapping.IfitisnotpossibletomapS2toS1,O1andO2couldnotbeconsideredtobeequivalentinL1andL2–theyhavetoolittleincommon.Intherestofcases,themappinghastobespeciﬁedexplicitly.4Supporting Language Interoperability by Dynamically Switched Behaviors

77

smalltalk::StringSTATE MAPPING: smalltalk -> javaIn file: java/lang/String.classjava.lang.Stringsmalltalk::StringIn file:String.stJava specificobject layoutSmalltalk specificobject layoutIn file:String.stIn file: java/lang/String.classSmalltalk specificobject layoutJava behaviourSmalltalk behaviourSmalltalk stateJava stateJava behaviourSmalltalk behaviourSmalltalk stateExplicitly defined+Fig.3.Onephysicalobjectwithmultiplebehaviours(inthebottom)is(inthetop).Thebehaviourisadded,thestateismapped.Itisalsonecessarytoprovidemappingthatmapslanguagesandbehaviourobject,i.e.,thattheobjectO1withbehaviourofB1inlanguageL1willbeassociatedwithbehaviourB2inlanguageL2andviceversa.WheneveramessageissenttoO2fromL1(L2respectively),amessageselectorwillbelookedupinB1(B2respectively).Duringaprogramexecution,varioussituationsmayoccur:–WhenamethodiscalledonO2fromP1,themethodislookedupinB1.–Whenaﬁeldf∈A1ofO1isbeingreadfromP1andA2istheprimaryobjectlayout,thenthemappingfromS1toS2isusedtocomputethevalueoffbasedonS2.–Whenaﬁeldf∈A1ofO1isbeingsetfromP1andA2istheprimaryobjectlayout,themappingfromS1toS2isusedandtheS2isupdated.–WhentheobjectO2ispassedfromP2passedtoP1(O2crossesthelanguageboundary),B1isassignedtoO2.–WhentheobjectO2ispassedfromP1backtoP2,B2isassignedtoO2again.578

Jan Kurˇs, Jan Vran´y, Alexandre Bergel

4ImplementationWehavevalidatedoursolutiononJavaandSmalltalkprogramminglanguages.WeuseSmalltalk/XvirtualmachinetointerpretJavaandSmalltalklanguage.Weemploymetaobjectprotocol[11]thatisimplementedinSmalltalk/XVM[14]tochangemethodandﬁeldlookupsemantics.WeusestandardSmalltalkclassasabehaviourobjectforSmalltalkobjects.WeusespecialSmalltalkobjectsimilartoJavaclassasabehaviourobjectforJavaobjects.Essentially,someobjectshavetwoclasses–oneforSmalltalkandsecondforJava.Wemodiﬁedmethodlookupinordertoreﬂectanexistenceofmultiplebehaviourobjectsperobjectasfollows:Lookup>>lookupMethodForSelector:selectorfor:receiverwithArguments:argArrayOrNilcontext:context|behaviour|behaviour:=receiverbehaviourObjectFor:contextlanguage.behaviourlookupMethodForSelector:selectorwithArgumets:argArrayOrNil.!Object>>behaviourObjectFor:languageˆObjectRegisterinstancegetCorrespondingClassOf:selfprimaryBehaviourObjectinLanguage:language.!Object>>primaryBehaviourObjectˆselfclass!Lookupobject,whichisresponsibleforlookupofappropriatemethodforfoursomeselector,receiver,argumentarray,contextandwhichiscalledbe-foreeachmessagesend,delegatesthelookuptothebehaviourobject.Behaviourobjectknowsappropriatemethodlookupalgorithmandwhichmethodsareavailableincurrentcontext.Behaviourobjectdependsonactuallanguage.Furthermorewemodiﬁedﬁeldaccessorfunctionstobeabletoapplymappingbe-tweendifferentstatesasfollows:Lookup>>getFieldForFieldName:fieldNamefor:receivercontext:context|behaviourprimaryBehaviour|behaviour:=receiverbehaviourObjectFor:contextlanguage.primaryBehaviour:=receiverprimaryBehaviourObject.ˆStateMappinginstancegetFieldNamed:fieldNamefromBehaviour:behaviourtoBehaviour:primaryBehaviourforObject:receiver.!6Supporting Language Interoperability by Dynamically Switched Behaviors

79

Lookupobject,whichisresponsibleforaccessinginstancevariablesandwhichiscalledbeforeeachﬁeldaccess,delegatesexecutiontothemappingobject,whichwilldeter-mineparticularﬁeldvaluefromprimaryobjectstate.Lastbutnotleast,weintroducedglobalmap,wheretheequivalenttypesmayberegisteredtogetherwiththestatemappingfunctionsasfollows:ObjectRegister>>addBehaviour:behavirouObjectto:primaryBehaviourObject|behaviourObjectCollection|behaviourObjectCollection:=selfat:primaryBehaviourObject.behaviourObjectCollectionadd:behavirouObject.!Ademonstrationofoursolution’sabilitiesisdepictedinFigure4andFigure5.Equiv-alentcodesandoutputsinotherlanguageswillbedescribedlaterinSection6whichcomparesourimplementationwithanotherones.SOURCE:string:=’Smalltalkstring’.smalltalkInfoinfo:string.//stringclass//stringhashjavaInfoinfo:string.//string.getClass()//string.hashCode()javaequals:stringand:string//string1==string2OUTPUT:infofromSmalltalkworldclass:Stringclasshash:197479768infofromJavaworldclass:java.lang.Stringhash:7110656objectequals:trueFig.4.AninteractionofSmalltalkStringwithJavacode.IntheFigure4thereisacodewhichsendsSmalltalkstringto(i)Smalltalkobject,(ii)toJavaobjectand(iii)comparesthesameinstancesofthestringinJavaenvi-ronment.Theﬁgureisdividedintotwoparts.Thereisasourceintheleftandout-putintheright.ThesmalltalkInfo’smethodinfoprintsaclassandhashcodeofaparameter.ItdemonstrateshowdoesobjectlooklikeinSmalltalkcontext.ThejavaInfovariableispointertotheclasswritteninJavaandcompiledtotheJavabytecode.ThejavaInfo’smethodinfoprintsaclassandhashcodeofaparameteraswell.ItdemonstrateshowdoesobjectlooklikeinJavacontext.ThejavaInfo’smethodequalscomparesidentityofparametersandprintstrueifobjectsareiden-tical,falseotherwise.Itdemonstratesthatthesameobjecthasthesameidentityinalienlanguage.Asyoucansee,theStringobjecthasappropriateclassandhashinbothofthelanguages.TheFigure5isdividedintotwopartsaswell–sourceintheleftandoutputintheright.ThesmalltalkInfo’smethodinfoisthesameasinFigure4.Itprintsclassandhashcodeofaparameter.ThejavaInfo’smethodinfo(Objecto)printsa780

Jan Kurˇs, Jan Vran´y, Alexandre Bergel

SOURCE:set:=HashSetnewwith:1with:6.smalltalkInfoinfo:set.//info(Objecto)javaInfoinfo:set.//info(Sets)javaInfoinfoSet:set.//info(Sets)javaInfoinfoHashSet:set.OUTPUT:infofromSmalltalkworldclass:HashSetclasshash:6537216info(Objecto)fromJavaworldclass:java.util.HashSethash:6537216infoSet(Sets)fromJavaworldclass:java.util.HashSethash:6537216infoHashSet(HashSets)from...class:java.util.HashSethash:6537216Fig.5.IntractionofSmalltalkobjectwithJavacode.classandhashcodeofaparameter–itdemonstratesthatSmalltalkobjectmaybehan-dledasJavaobjecteventhoughjava.lang.ObjectisnotanywhereinSmalltalkclasshierarchy.ThejavaInfo’smethodinfo(Sets)demonstratesthatSmalltalkobjectmaybehandledasJavainterface.ThejavaInfo’smethodinfo(HashSets)demonstratesthatSmalltalkobjectmaybehandledasordinaryJavaclass.5DiscussionIncaseanobjectissharedbetweenmultiplelanguagesanditsbehaviourisdynamicallychangedaccordingtotheactuallanguage,followingproblemsarenaturallysolved:ObjectidentityTheobjectidentityisbasedonanobjectpointercomparison.Sincewerepresentobjectsbythesamepointerincomputermemory,noproblemarises.ExplicitcopyIfthereisnosupportforautomaticobjectconversionsbetween,pro-grammershavetotakeextracarewhilepassingobjectacrossthelanguagebound-ary.Itmayhappenthatanalienobjectwithinappropriatebehaviourwillbeusedthatmayriseanexception.Theerrormaybepreventedbyexplicitcallofacon-versionmethod.Ontheotherhand,ifthebehaviourischangedautomatically,theworkwithalienobjectsistransparent–theylooklikenativeobjects.Noextracarehastobetakenwhilepassingobjectacrossthelanguageboundary.DatasynchronizationIfobjectshastobecopiedwhilecrossingthelanguagebound-ary,synchronizationofdatahastobeensured.Oursolutionworkwiththesamedatasoitisnotadealanymore.MemoryoverheadObjectcopyimpliesmemoryoverheadsincealldataaredupli-cated.Proxyobjectsmaybelight-weightedastonotconsumetoomuchmemory,neverthelessduetonecessitytopreserveanidentity,anextramemoryisconsumedby(global)mappingsofobjectstotheirrespectiveproxies.Suchamappingisnot8Supporting Language Interoperability by Dynamically Switched Behaviors

81

onlymemoryconsumingbutalsorequiresproxiestobeweak-referenced.Weakreferencesaffectsgarbagecollectorperformancesinceallweakreferencesmustbetreatedspecially.Inoursolution,objectsaresharedbetweenmultiplelanguagesandsothememoryisnotoccupiedredundantly.Behaviourobjectsdoesnotcauseanymemoryoverheadaswell,sincetheyarealreadypresentinparticularlanguages.Questionsregardingthereﬂectivefacilitiesmayarise.ObjectclassObjectclasscouldbeobtainedbysendingappropriatemethod(classinSmalltalk,getClass()inJava).Thereturnvalueismetaobjectwhichkeepsinformationaboutmethods,ﬁelds,subclasses,superclassandothers.Itcouldbesaidthatthereturnvalueisthebehaviourobject(insomeform)currentlyassociatedwiththegivenobject.Ourtechniquedoesnotaffectthisfunctionality.Foreachlanguage,appropriateobjectrepresentingtheclassisreturned.Fromthepointofanyparticularlanguage,anobjecthasoneclass.ObjectsuperclassObjectsuperclassisstoredinitsbehaviourobject.Sincethecor-rectbehaviourobjectisalwaysreturned,askingitforasuperclasswillreturnacorrespondingsuperclassinscopeofgivenlanguage.SupersendsSincetheproblemshasnotaroseinpreviouscase,itisnotproblemtoinvokesupersend.NeverthelessifY2extendsX2inlanguageL2(withobjectlayoutsAY2andAX2)andY1existsinlanguageL1(withobjectlayoutAY1)andY1isusedinlanguageL2asY2,theY1mustprovidemappingfromAB1toAB2∪AA2.Inotherwords,Y1mustprovidemappingtothecompleteobjectlayoutofY2–includingsuperclasses.5.1ImplementationlimitationsThereareseveralpossibleimplementationsofourapproach.WehavechosentoproﬁtfrommetaobjectprotocolimplementedinSmalltalk/XasdescribedinSection4.An-othersuitablemetaobjectprotocolisprovidedbyDynamicLanguageRuntime[5]frame-workbuiltontopofCommonLanguageRuntime[13].Unfortunately,itisnotpossibletointegrateC#andIronRuby[2]orIronPython[1]thisway,becauseexistingC#doesnotuseDynamicLanguageRuntime.InSmalltalk,anothertechniqueslikedoesNotUnderstand:hookandJavabyte-codeinstrumentationcouldbeused.ThedoesNotUnderstand:hookallowsme-thodlookupcustomization,butthistechniquenegativelyinﬂuencesperformance.Thebytecodeinstrumentationmaybeusedtoreplacemethodcallinbytecodebyanotherroutineinbytecodethattakesmultiplebehaviourobjectsintotheaccount.Thegetﬁeldandsetﬁeldbytecodeinstructionsmaybereplacedbysimilarroutinethattakestatemappingintotheaccount.6RelatedWork6.1JRubyJRuby[4]isanimplementationofRubylanguagerunningontopofJavaVirtualMa-chine.Generally,JRubyobjectsmayinteractwithJavacode.Neverthelessthereare982

Jan Kurˇs, Jan Vran´y, Alexandre Bergel

some“painpoints”.IncaseofStrings,theymaybesharedbetweenJRubyandJavawithoutanylimitations.AclassofaStringobjectchangesappropriately,ahashcodeiscomputedcorrectlyandanidentityispreserved.ThisdemonstratescodedepictedinFigure6.SOURCE:string="rubystring"rubyInfo.info(string)//string.class//string.hashjavaInfo.info(string)//string.getClass()//string.hashCode()javaInfo.equals(string,string)//string1==string2OUTPUT:infofromRubyworldclass:Stringhash:250737224infofromJavaworldclass:java.lang.Stringhash:916834583objectequals:trueFig.6.InteractionofRubyStringwithJavacode.ThecodeinFigure6iswritteninRubywhichinteractswithJava.ThecodeisequivalenttothecodeinFigure4whichiswritteninSmalltalk.Regardingstrings,thereisnodifferencebetweenabilitiesofJRubyandoursolution.Generally,JRubyobjectsmaybeusedasaparameterwhenevertheparameterisjava.lang.ObjectbecauseJRubyobjectsinheritfromjava.lang.Object.Moreover,JRubyobjectmaybeusedasaparameterofJavamethodincasetheparam-eterisJavainterfaceandtheRubyobjectimplementstheinterface.Yet,ifaJavamethodexpectsstandardobject(subtypeofjava.lang.Object),exceptionisraised.ThisdemonstratesacodedepictedinFigure7.ThecodeinFigure7iswritteninRubywhichinteractswithJava.ThecodeisequivalenttothecodeinFigure5whichiswritteninSmalltalk.Sourceisintheleft,outputisintheright.Asyoucansee,JRubyallowstopassRubyobjecttomethods,whichexpectsjava.lang.ObjectandJavainterface,butnotHashSet.Ourim-plementationallowstopassSmalltalkobjecttoanyofthemethods.6.2JythonJython[9]isanimplementationofPythonlanguagerunningontopofJavaVirtualMa-chine.JythonobjectsmayinteractwithJavacode,buttherearesome“painpoints”aswell.IncaseofStrings,theymaybesharedbetweenJythonandJavawithoutlimita-tions.Aclassofanobjectischangedappropriately,ahashcodeiscomputedcorrectlyandanidentityispreserved.ThisdemonstratescodedepictedintheFigure8.ThereisacodewritteninJythonwhichinteractswithJavaobjectsintheFigure8.ThecodeiscodeequivalenttothecodeinFigure4whichiswritteninSmalltalk.Sourceisintheleft,outputisintheright.Again,regardingstrings,thereisnodifferencebetweenabilitiesofJython,JRubyandoursolution.10Supporting Language Interoperability by Dynamically Switched Behaviors

83

set=Set[1,3,4,11]rubyInfo.info(set)//info(Objecto)javaInfo.info(set)//infoSet(Sets)javaInfo.infoSet(set)//infoHashSet(HashSeths)javaInfo.infoHashSet(set)infofromrubyworldclass:Sethash:24118174info(Objecto)class:org.jruby.RubyObjecthash:24118174infoSet(Sets)class:....InterfaceImplhash:21279119infoHashSet(HashSeths)cannotconvertclassorg.jruby.RubyObjecttojava.util.HashSetFig.7.InteractionofRubyobjectwithJavacode.SOURCE:string="jythonstring"jythonInfo.info(string)//string.__class__//string.__hash__()javaInfo.info(string)//string.getClass()//string.hashCode()javaInfo.equals(string,string)//string1==string2OUTPUT:infofromJythonworldclass:<type’str’>hash:1857618127infofromjavaworldclass:java.lang.Stringhash:1857618127objectequals:trueFig.8.InteractionofJythonStringwithJavacode.Yet,itisnoteasytouseJythonobjectasparameterofJavamethod.ThereisamechanismcalledObjectFactoryintheJythonbook[8]butitrequireslotsofcodeoverhead.Themechanismcannotbeusedinallusecases.Generally,itisnotpossi-bletopassJython’sImmutableSetinstanceintotheJavamethodexpectingeitherjava.util.Setorjava.util.HashSet.Thisisadifferencebetweenoursolu-tionandJython,sinceoursolutionisnotlimitedintheseusecases.7ConclusionInthispaperwehavepresentedadynamicbehaviourswitchingmechanismtosupportlanguageinteroperability.Whenanobjectispassedfromoneprogramminglanguagetoanother,itsbehaviourisdynamicallyswitchedtowhattheotherlanguageexpects,allowingprogrammerstoworkwithalienobjectsinanaturalway.Thesamephysicalobjectisusedinalllanguages,thereforethereisnoruntimeoverheadcausedbycopying1184

Jan Kurˇs, Jan Vran´y, Alexandre Bergel

objectsandbymaintainingobjectidentity.Amappingfromclassinonelanguagetocorrespondingclassintheotherlanguageisprovidedbyuseraswellasamappingofobjectstate.References1.IronPython,August2010.http://ironpython.net/.2.IronRuby,August2010.http://ironruby.net/.3.CraigChambers,DavidUngar,andElginLee.AnefﬁcientimplementationofSELF—adynamically-typedobject-orientedlanguagebasedonprototypes.InProceedingsOOPSLA’89,ACMSIGPLANNotices,volume24,pages49–70,October1989.4.CharlesNutteret.al.JRubyProject,August2010.http://jruby.org/.5.BillChilesandAlexTurner.DynamicLanguageRuntime,August2010.http://dlr.codeplex.com/wikipage?title=Docs%20and%20specs.6.ErichGamma,RichardHelm,JohnVlissides,andRalphE.Johnson.Designpatterns:Abstractionandreuseofobject-orienteddesign.InOscarNierstrasz,editor,ProceedingsECOOP’93,volume707ofLNCS,pages406–431,Kaiserslautern,Germany,July1993.Springer-Verlag.7.KrisGybels,RoelWuyts,St´ephaneDucasse,andMajaD’Hondt.Inter-languagereﬂection–aconceptualmodelanditsimplementation.JournalofComputerLanguages,SystemsandStructures,32(2-3):109–124,July2006.8.JoshJuneau,JimBaker,VictorNg,LeoSoto,andFrankWierzbicki.JythonBookv1.0documentation,March2010.http://www.jython.org/jythonbook/en/1.0/.9.Jython,February2011.www.jython.org.10.JevgeniKabanovandReinRaudj¨arv.EmbeddedtypesafedomainspeciﬁclanguagesforJava.InPPPJ’08:Proceedingsofthe6thInternationalSymposiumonPrinciplesandPracticeofProgramminginJava,pages189–197,Modena,Italy,2008.ACM.11.GregorKiczales,JimdesRivi`eres,andDanielG.Bobrow.TheArtoftheMetaobjectProto-col.MITPress,1991.12.JacobMatthewsandRobertBruceFindler.Operationalsemanticsformulti-languagepro-grams.SIGPLANNot.,42(1):3–10,2007.13.E.MeijerandJ.Gough.Technicaloverviewofthecommonlanguageruntime,2000.14.JanVran´y.Supportingmultiplelanguagesinvirtualmachines.Dissertationthesis,CzechTechnicalUniversity,December2010.12