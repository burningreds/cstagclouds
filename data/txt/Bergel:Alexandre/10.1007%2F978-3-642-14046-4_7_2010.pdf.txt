Visualizing and Assessing a Compositional

Approach of Business Process Design

Sebastien Mosser1, Alexandre Bergel2, and Mireille Blay–Fornarino1

1 University of Nice Sophia – Antipolis
Cnrs, I3s Laboratory, Modalis team
{mosser,blay}@polytech.unice.fr

Sophia Antipolis, France

2 Department of Computer Science (DCC)

University of Chile, Santiago, Chile

www.bergel.eu

Abstract. In the context of Services Oriented Architecture (Soa), complex 
systems are realized through the design of business–driven processes.
Since the design of a complete process can be complex, composition tools
such as aspects and features propose to deﬁne large systems by composing 
smaller artifacts, easier to understand. But these techniques shift the
system complexity into the deﬁnition of composition directives able to
build it. At composition time, process designers need support to assist
them and assess their designed systems. We propose in this article a
set of visualizations to represent compositions of business–processes and
then identify patterns and categorizations. We use the Adore framework 
as the underlying process composition platform. We validate this
work by visualizing and assessing a Car Crash Crisis Management system 
(CCCMS, a comparison referential for Aspect Oriented Modeling
techniques). We use these visualizations to assess the Cccms realization.

Note for the proceeding reader: this paper makes use of colors. Although not
mandatory for its understanding, an online (colored) version of this paper will
ease the reading.

1 Introduction

An application that follows the Service Oriented Architecture paradigm (Soa,
[1]) is an assembly of services that realizes business processes. Business processes
are deﬁned by business specialists and typically involve many services that are
composed in a variety of ways. Furthermore, the need to extend a Soa application 
with new business features (to follow market trends) arises often in practice.
In the technological context of Web Services, business processes can be implemented 
as orchestrations of services [2]. Existing tools and formalisms related to
business processes (e.g. Bpmn notation [3], Bpel industrial language [4]) use a
design–in–the–large approach and do not intrinsically provide language constructions 
and frameworks to support the introduction of new features into existing

B. Baudry and E. Wohlstadter (Eds.): SC 2010, LNCS 6144, pp. 90–105, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010

Visualizing and Assessing a Compositional Approach

91

processes. Using these technology, one can deﬁne “composition of services” to
reify business–process and then visualize such entities [5].

In this paper, we address the “composition of process” problematic, i.e., the
composition of existing composition of service to obtain more complex process at
the end. New paradigms such as aspects [6] and features [7] model application in
terms of composing smaller units. Assuming that a complex system is diﬃcult to
understand by humans, they propose to reduce the complexity by deﬁning several
smaller artifacts instead of a single and large one. They identify and encapsulate
parts of models that are relevant to a particular concern. A same feature may be
shared and integrated into several processes simultaneously. These artifacts are
then composed to produce the expected system. These approaches help taming
the complexity of business processes design [8,9]. As a consequence, the intrinsic
complexity of the system is shifted into the composition directives used to build
it. When a system involves many processes, it is necessary to have a holistic
point of view on features, compositions and business processes to grasp it. In
this paper we examine visualization method to tackle complexity of compositions
at the application level.

The paper makes the following contributions and innovations:

– a number of visualizations dedicated to support designers when they deﬁne

business processes using a compositional approach.

– beneﬁts and design weakness are revealed using a number of patterns to

– scalability of the approach is sketched by using a very large case study as

assess compositions quality.

running example.

We motivate this contribution by presenting in section 2 our running example.
 Visualizations used to represent and assess compositions are then described
in Section 3. Section 4 brieﬂy presents implementation details. We propose a
discussion on the approach beneﬁts (associated to interesting perspectives) in
Section 5. Finally, Section 6 describes an overview of related work, and Section
7 concludes this paper.

2 Running Example: Realizing a CCCMS Using ADORE

This section presents the running example used to validate the visualization
approach defended in this paper. It also presents the composition framework we
used to realize this example, and highlights our identiﬁed needs of visualization.

2.1 Case Study: A Car Crash Crisis Management System

In Kienzle et al. [10], authors propose a common case study (a Crisis Management 
System, Cms) to compare existing Aspect Oriented Modeling approaches
between each other. We consider this case study as a reference, and use it as a
running example to illustrate the problematic tackled in this paper and the contribution 
we made. According to the deﬁnition given by this case study, a Cms

92

S. Mosser, A. Bergel, and M. Blay–Fornarino

is “a system that facilitates coordination of activities and information ﬂow between 
all stakeholders and parties that need to work together to handle a crisis”.
Many types of crisis can be handled by such systems, including terrorist attacks,
epidemics, accidents. To illustrate the case study, they provide an instance of a
Cms in the context of car accidents. They deﬁne this system as the following:

“The Car Crash CMS ( Cccms) includes all the functionalities of general
crisis management systems, and some additional features speciﬁc to car
crashes such as facilitating the rescuing of victims at the crisis scene and
the use of tow trucks to remove damaged vehicles.”
The requirement document deﬁnes ten use cases, described using textual scenario.
 Each scenario deﬁnes ﬁrst a main success scenario which represents the
normal ﬂow of actions to handle a crisis (e.g., retrieve witness identity, contact
ﬁremen located near to the crash location). Then, a set of extensions are described 
to bypass the normal ﬂow when speciﬁc actions occurs (e.g., witness
provides fake identiﬁcation, ﬁremen are not available for a quick intervention).

2.2 Composition Framework: ADORE
The Adore framework deﬁnes a compositional approach to support complex
business processes modeling, using the orchestration of services paradigm. Models 
describing business–driven processes (abbreviated as orchestrations, deﬁned
as a set of partially ordered activities) are composed with process fragments (deﬁned 
using the same formalism) to produce a larger process. Fragments realize
models of small behavior and describe diﬀerent aspects of a complex business
process. Adore thus allows a business expert to model these concerns separately
and then compose them.

Using Adore, designers can deﬁne composition units (abbreviated as compo-
sition) to describe the way fragments should be composed with orchestrations.
The merge algorithm used to support the composition mechanism [11] computes
the set of actions to be performed on the orchestration to automatically produce 
the composed process. Implementation details, environment screenshots
and video demonstrations are available on the project web site1.

We proposed in our previous work [12] a realization of the Cccms system
using Adore. We realized all the use cases main scenarios as orchestration of
services, and extensions as fragments to be integrated into these orchestrations.
The complete set of designed models (12 orchestrations & 24 fragments, representing 
1216 activities scheduled by 895 relations in terms of implementation) is
available on the Cccms realization web page2.

2.3 Need for Visualization Techniques
When developing a large system, designers handle a large set of initial orchestrations,
 and a large set of fragments to apply in these orchestrations. Adore

1

2

http://www.adore-design.org
http://www.adore-design.org/doku/examples/cccms/

Visualizing and Assessing a Compositional Approach

93

tackles the complexity of integrating fragments into orchestrations, at the activity 
level. We depict in Fig. 1 an extract of the Cccms case study (authentication
use case, #2.10). The composition algorithm identify several uniﬁcation (represented 
using dashed lines) between an initial orchestration (which realize the
“main success scenario”) and a fragment (realizing a business extension). Such
a detailed and focused view of composition is not scalable to support the design
of large system (non-functional concerns introduction in the Cccms raises the
number of uniﬁcation to more than a thousand).

Fig. 1. Detailed visualization of a composition (at the activity level)

Visualization techniques of large data set such as ﬁsh–eye [13] can tame the
readability problems, but do not reduce the amount of details visualized in this
representation. When designing a complete set of business processes using a
compositional approach, the objectives of designers are to retrieve a holistic
representation of the involved entities to understand easily what they are doing.
Such a global visualization is needed at both design and analysis time.
Design Phase. When building a complete system using a compositional approach,
 designer needs to understand at a coarse–grained level the interactions
between the diﬀerent composition entities they are manipulating. At this step, a
designer focuses on the fragments in terms of impact (e.g., “the fragment throws
a fault”) instead of their detailed behavior (e.g., “when a resource takes too
much time to reach the crisis location, a timeout fault must be thrown”).
Analysis Phase. After the composition directives execution, a composed system 
is obtained. At this step, critical points in the composed system need to
be manually identiﬁed, for example to design unit tests. This step focuses on
the comparison between the intrinsic complexity of the original entities and the
composed result.

3 Visualizing Compositions Using Mondrian

We describe in this section the polymetrics view techniques, used to deﬁne three
diﬀerent visualizations of compositions. These visualizations are then described
and applied to the Cccms example.

94

S. Mosser, A. Bergel, and M. Blay–Fornarino

The common objective of these three visualizations is to provide dashboards
to designers. Composition dashboards are graphical representations meant to
help designers to (i) get a scalable and global overview of the compositions
present in an orchestration-based application, (ii) identity abnormal composition
and (iii) facilitate the comprehension of a large composition by categorizing
compounds. The idea of these dashboards is to enable a better comparison of
elements constituting a program structure and behavior.

3.1 Polymetric Views Technique Description

The visualizations we propose are based on polymetric view [14]. A polymetric
view is a lightweight software visualization technique enriched with software
metrics information. It has been successfully used to provide “software maps”
intended to help software comprehension and visualization. Figure 2 illustrates
the principle of polymetric view.

width property

color

property

height
property

edge width and 
color properties

X property

Y

property

Fig. 2. Principle of polymetric view

Given two-dimensional nodes representing entities, we can map up to 5 metrics
on the node characteristics: position properties X and Y , height property, width
property and color property:

– Size. The width and height of a node can render two measurements. We
follow the intuitive notion that the wider and the higher the node, the bigger
the measurements its size is telling.

– Color. The color interval between white and black may render one measurement.
 The convention that is usually adopted [15] is that the higher the
measurement the darker the node is. Thus light gray represents a smaller
metric measurement than dark gray.

– Position. The X and Y coordinates of the position of a node may reﬂect two

other measurements.

Visualizing and Assessing a Compositional Approach

95

3.2 Fragments Dashboard (Design Phase)

This visualization represents all the fragments (as square) involved in a system,
focusing on their impact. We have identiﬁed several impact properties represented 
as boxes: (i) hooked variable modiﬁcation, (ii) exception throw, (iii)
fault handling, (iv) initial process execution inhibition and ﬁnally (v) restricted
process inhibition. To illustrate this visualization, we instantiated it on the Cccms 
example (Fig. 3). It represents the 24 fragments deﬁned to answer to the
diﬀerent use–cases extensions deﬁned in the requirements.

Fig. 3. Fragments dashboard instantiated on the Cccms example

Interpretation. Based on the graphical representation obtained in this view,
we have identiﬁed 7 diﬀerent fragment categories, grouped into 3 main families:
business extensions (B), fault handling (F) and control–ﬂow inhibition (I).
– Business extensions (B): The white fragments only enrich existing process
with new additional behavior. They do not modify the initial logic of the
business process, and only add new features to enrich it.
– Fault handler (F): Yellow boxes represent fault handling property. There
are several ways to deal with a fault when it occurs in a process: (i) doing
a re–throw (green property) to customize the fault, (ii) bypassing the fault
(by modifying data to handle the problem, blue property) locally and (iii)
handling the fault by using a business-driven reaction (no other property).

96

S. Mosser, A. Bergel, and M. Blay–Fornarino

– Control–ﬂow inhibition (I): The red property represents the inhibition of
an activity and its followers in a business process. The pink property is a
restriction of the red one, since the fragment only inhibits the followers of
an activity. Correlated with the fault thrower property (green color), we
can identify precondition (activity inhibition & throw) and postcondition
(followers inhibition & throw) checker. The pink–only fragments represents
“dangerous” fragments, which inhibit several activities using a non–standard
behavior. A deep understanding of the business–domain is necessary to grasp
their behavior properly. The timeout fragment is a typical example of this
kind of fragments: instead of “simply” throwing an exception when the system 
detects that a resource takes too much time to reach the crisis location,
the Cccms business model asks to stop whatever the system was doing and
urgently inform a human coordinator able to decide what to do to counterbalance 
the situation.

Consequently, this view helps designers to perform a coarse–grained identiﬁcation 
of their critical fragments. We have shown this criticality by explaining the
pink–only fragments in the previous paragraph. Other dangerous color scheme
are green–only (error throwing in parallel with legacy activities) and red–only
(control–ﬂow inhibition with a business–driven reaction).

3.3 Composition Dashboard (Design Phase)

The previously deﬁned view helps designer to understand the diﬀerent fragments
used in a system. We focus now on the composition visualization deﬁned between
fragments and business processes. The composition dashboard visualization represents 
business processes as rectangles, and fragment using the 4 squares pattern 
previously deﬁned. A link between two entities means that they are used
together in a composition. The Cccms case study instance of this visualization
is depicted in Fig. 4. It represents the 24 fragments and their application on the
11 orchestrations used to realize the use cases.
Interpretation. This visualization helps the designer to understand the depicted 
system in a holistic way. We identify the following composition categories:
– Orphans (O): Orphans orchestrations are never involved in a composition
(e.g., executeMission and execSupObMission). Their identiﬁcation helps
to detect forgotten composition directives in a complex system. In the Cccms 
context, they realize very basic use cases which do not deﬁne any scenario 
extensions. As a consequence, there is no fragment associated to these
entities.
– Lack of Fault–handlers (Lf ): yellow–tagged fragments represent fault handlers.
 This visualization allows designers to easily identify a composition
which does not involve any fault handler. The lack of fault handling in a process 
may leads to uncaught fault and jeopardize the behavior of the global
system. It can also detect very basic processes which cannot fail.

Visualizing and Assessing a Compositional Approach

97

Fig. 4. Composition dashboard instantiated on the Cccms example

– Conditioned behaviors (C): Several fragments realize precondition (red &
green) and postcondition (pink & green) checkers. Processes involved in a
composition which relies on such checkers must be considered as a good
candidate for integration test deﬁnition.
– Cross-cutting / Shared concern (S): We can easily identify two shared fragments 
in this case study. The ﬁrst one is a precondition checker (“is the user
authenticated?”), and the second one is a business driven preoccupation (“rehandle 
the crisis due to a change of external circumstances”). They clearly
represent preoccupations which cross-cuts several scenarios. Their identiﬁcation 
helps to identify cross–cutting concerns and can drive system testing
and re–engineering.
– Critical / Dangerous behavior (D): Thanks to the fragments dashboard, the
pink–only fragments were identiﬁed as critical (with other color scheme).
Such fragments can inhibit the execution of a process subpart without using
usual mechanism (e.g. fault throwing) to counter–balance their inhibition.
As a consequence, orchestrations enriched using these fragments will require
a speciﬁc attention from the designer.
– Fragment composed on other fragments (F oF): We can notice that several
fragments are also composed with other fragments. This view lets designer
identify such compositions and helps to grasp a semantic link between fragments 
when discovering an unknown system.

98

S. Mosser, A. Bergel, and M. Blay–Fornarino

This view lets us identify business–driven processes (using white–only frag-
ments) from technical ones. Technical processes deal with precondition and postcondition 
checking, and do not involve any business driven fragment. On the
contrary, high–level business processes rely on business–driven fragments to
change the initial control–ﬂow. It produces a dichotomy between technical processes 
(assignIntRes, authUser, resolveCrisis) and business–driven processes 
(the others). Based on this categorization, we can notice two things in
the context of the Cccms:

– Categorizing the resolveCrisis process as technical seems weird as it corresponds 
to the main use case of the Cccms. But the scenario realized through
this process is clearly technical (i.e., opening a crisis case, asking partners to
handle this crisis, closing the case when the crisis is ended) and does not involve 
any business–driven logic (realized in the other processes, which really
handle the crisis).

– We can notice the captureWitnessReport process, which involves fragments
dealing with postcondition checking, fault–handling and business–driven extension 
in the same composition. As a consequence, this process is both
technical and business–driven. This process is critical in terms of Cccms
business–domain: it realizes the retrieval of car crash witness information in
a report and drives the trigger of speciﬁc missions according to this report.
As a consequence, it does not fulﬁll a single objective and it uses very different 
fragments to achieve its complete behavior. This process can be then
considered as a subsystem in the Cccms context.

Moreover, this visualization supports designers when debugging their compositions.
 This view identiﬁes in a user–friendly way forgotten composition
(through orphans processes) and the lack of fault handler/checker.

3.4 Composition Zoom (Design Phase)

When multiple fragments are composed with a process, designers need to restrict
their visualization on the system to focus on a given composition. This zoomed
visualization opens the orchestration box, describing where the fragments are
integrated into the initial process. To emphasize the scalability of this visualization,
 we use the handleAWorker process, which is the biggest composition in
this case study. The obtained instance is represented in Fig. 5.

Interpretation. This visualization supports a focus on a speciﬁc composition
and facilitates navigations throughout the orchestration set. Based on this representation,
 we can easily identify the following concerns in a given composition:
– Isolated activities (I): some activities are not involved in any composition.
They represent technical activities which do not interfere with the realized
scenario. In this particular example, they implement initial message reception,
 ﬁnal response sending and other technical activities.

Visualizing and Assessing a Compositional Approach

99

Fig. 5. Composition zoom instantiated on the handleAWorker process

– Shared activities (Sa): this visualization lets us clearly identify when several
fragments are applied at the same location to a business process (i.e. a6 and
a7 activities). Adore supports the automatic composition of these fragments
into a merged one. However one may need to visualize them simultaneously
to understand the merged behavior. In this example, fragments applied to
a6 deal with the non–arrival of a resource at the crisis location. Focusing
only on these 3 fragments helps to support the design of the system: are
all the non–arrival reasons handled by the process? Are these fragments
semantically conﬂicting?

– Shared Fragments: this view lets the designer identify shared (i.e. used several 
times) fragments for a given composition. Such fragments usually represent 
cross-cutting concerns. The fact that a fragment is shared with other
artifacts gives extra–information when working on its composition:
(cid:129) Multiple / Shared targets (St): this fragment is related to others processes.
 This information is a ﬁne–grained version of the “shared concern”
one (from composition dashboard), linking a process activity to others
processes through the use of a common fragment. It can drive the exploration 
of an unknown system by following such links from a process to
another one.
(cid:129) Multiple / Shared usage (Su): this fragment is a factorized enrichment
of the initial scenario. As a consequence, it represents a chronic situation
which requires special attention when testing and debugging the system.
When a fragment is merged several times in the same process, it may
introduce redundant activities in the ﬁnal composition result. This view
helps to understand the origin of such redundancy.

3.5 Complexity Dashboard (Analysis Phase)

When building a system using a compositional approach, the fragments added
into the legacy business process enrich the initial behavior. It is interesting to
visualize the diﬀerences between the initial and composed processes to identify

100

S. Mosser, A. Bergel, and M. Blay–Fornarino

composition families. We use several indicators to model business process complexity 
(inspired by the ones deﬁned by Vanderfesten et. al, [16]). In this view,
we use the following indicators to represent the system. The complete Cccms
system is represented in Fig. 6.

– width: The width of a process represents the maximum number of activities

concurrently executed in the control–ﬂow.

– height: The height of a process represents the maximal length of the process.
– maze: The maze of a process represents the number of diﬀerent paths available 
in the process. We map the maze indicator to the color dimension of
the polymetric view.

Fig. 6. Complexity dashboard instantiated on the Cccms example

Interpretation. Using this visualization, designers identify composition families,
 in terms of process complexity evolution (denoted as Δi, where i is a business
process indicator).

– Δw (width expansion): When the composed process is larger than the initial
one, it implies that several activities are executed in parallel of the initial
behavior. Such an intensive parallelism is resource-consuming, and may be
deployed on speciﬁc high–performance servers. As a consequence, designers 
are able to identify from this visualization processes requiring a speciﬁc 
attention about performances after composition. In this example, the
handleSupObsMissions process is a typical case of Δw. Fragments used in

Visualizing and Assessing a Compositional Approach

101

this composition introduce several notiﬁcations and interactions with other
systems (e.g., national crisis management center, internal message bus) done
concurrently to the initial scenario.

– Δh (height expansion): The augmentation of a process height induces an
execution control–ﬂow longer than the initial one. The composition impacts
the process execution time and the quality of service is then identiﬁed using
this visualization. In the execRescMission composition, the fragment introduces 
an interaction with an external system (retrieving victim’s medical
history before starting the health-care process).

– Δm (maze expansion): A dark color identiﬁes a complex process, deﬁning
a lot of diﬀerent paths in its control ﬂow. A contrast change between an
initial process and its composed result indicates that the activities deﬁned
in this process are more connected between each others. In the Cccms example,
 the captureWitnessReport process is enriched with several small
fragments. According to their impact properties, these fragments deal with
condition checking and fault handling. As a consequence, the composed process 
contains a lot of new paths (e.g. fault bypass) available during the
execution of the process. One should pay attention to the possible semantic
interactions introduced by such a composition (e.g the process handles two
(cid:3) but does not deﬁne what to do if these two faults happens
faults f and f
at the same time).

Based on the previously explained Δi expansions, we identify three critical

situations identiﬁable in this visualization:
– Global Expansion (G): This phenomenon is identiﬁed by an expansion of
all the Δi indicators. The handleAMission process illustrates this global expansion.
 This strongly indicates that the process designer should particularly
focus on this process when designing test, as its apparent initial simplicity
hides a very complex process once composed.
– Initial Process Absorption (A): A process is absorbed by an extension when
the composition output looks like the absorber in terms of complexity. Semantically,
 it often highlights a requirement granularity problem, where the
behavior deﬁned as scenario extensions is more complex than the initial
scenario. The requestExtRes process illustrates this phenomenon, as it is
absorbed by the degradedRes fragment. In this case, the system initially requires 
an external resource, and the extension deﬁnes all the actions to be
performed when such a resource is not fully available to handle this particular
crisis.
– Resonant Composition (R): Resonance is a particular case of the Δm expansion.
 It indicates a lot of interactions between activities in fragments and
process, resulting into a labyrinthine process after composition. Designers
should handle these processes by taking care of their inherent complexity,
focusing on test design and condition checking. The handleAWorker process
is a typical example of such a resonance.

102

S. Mosser, A. Bergel, and M. Blay–Fornarino

4 Implementation and Validation

Composition engine implementation. The concrete Adore engine (process representation 
& composition algorithm) is implemented as a set of logical rules,
using the Prolog language. To make Adore interoperable with other tools, we
provide an export mechanism, based on Xml. Adore internal representation of
orchestrations and business indicators can be exported as Xml documents.

Visualization engine implementation. Our composition dashboards are rendered
using Mondrian3, an agile visualization engine. For the purpose of the experiment,
 Mondrian operates directly on a metamodel that reiﬁes all the notions
introduced in this paper4.

Validation. The Adore framework was used in ﬁve diﬀerent case studies5, from
a simple proof of concept to real-life systems. Business domain handled in these
case studies are very diversiﬁed (e.g., integer arithmetic, web 2.0 folksonomies,
information broadcasting inside academic institution). Visualization techniques
presented here were applied with success to these ﬁve examples. We present the
Cccms example in this paper because of its pertinence to describe the approach
(important set of processes leads to a scalability challenge).

5 Discussions and Perspectives

The visualization techniques described in this paper really helps the design of a
very large system when using a compositional approach. Considering compositions 
of processes as ﬁrst class entities, we provide to designers a framework able
to support their design process. Based on these techniques, we identify chronic
fragment patterns and sketch a categorization of these entities. Moreover, when
analyzing the composed result, we identify critical points where process extensions 
interact violently with initial behavior. These critical points are easily identiﬁable 
using our graphical representation, and may leads to design weaknesses
detection. Assuming the fact that the design ﬁts the described requirements,
such points can then highlight client requirements weaknesses.

In this paper, we voluntarily focus our visualization work on composition definitions.
 Our goal is to “understand” a system deﬁned by composition, and support 
the designer during the design process. We never addressed performances
visualization. In an Soa realized using orchestrations of Web Services, partnerships 
between services and processes is a key point for performance measurement.
The invocation of an external partner costs a lot (in terms of data exchanged
over the network). Even if Adore proposes a simple visualization of process
partners, a Mondrian visualization of the global choreography of services [2]
helps the designer to easily identify bottlenecks and dangerous patterns in the
designed system.

3

http://www.moosetechnology.org/tools/mondrian
http://www.moosetechnology.org/tools/adore

4
5 Details here: http://www.adore-design.org/doku/examples/start

Visualizing and Assessing a Compositional Approach

103

Deﬁning a software using composition techniques often leads to conﬂicting situations 
[17,18]. Adore deﬁnes a set of conﬂict detection rules to identify conﬂicts
in the composed processes. For the same reasons that Adore raw visualizations
do not scale large system representations (too detailed data), designers retrieve
from the framework a lot of details concerning the diﬀerent conﬂicts detected
by the application of detection rules over their models. The composition zoom
visualization helps designers to identify interaction niche (e.g. shared activities),
and then tend to reduce the scope of informations handled by the designer. Even
if conﬂict detection mechanisms can be used to automate the detection of conﬂict,
 pragmatic conﬂicts6 will always need an intervention of the designer to be
handled properly. Consequently the deﬁnition of a Mondrian visualization to
support conﬂict resolution will support the global approach and helps designers
during the composition process.

6 Related Work

The Aspect Visualizer is a visualization-based tool contained in AspectJ Development 
Tool (AJDT7). Source ﬁles are represented as rectangles, and lines are
colored according to its corresponding advices. This visualization is of a great
use when one wants to know which aspects is involved in the deﬁnition of a particular 
class. However, it tells little about the kind of composition mechanism
used an essential requirement for understanding aspect-based applications.

Pfeiﬀer and Gurd address the problematic of aspect visualization [19] (using
treemaps [20]) to provide a very abstract visualization of aspect oriented programs,
 based on a hierarchical organization of visualized entities (e.g., package,
class). The counter balance of treemaps is that it provides little help when relations 
between elements have their importance, as this is the case in our work. We
also propose in this work an intermediate representation, focused on fragment
(advice) semantic and independent of any hierarchical relation between entities.
Moreover, the use of polymetrics views let us map process metrics to visualized
entities.

Fabry et al. [21] addressed the issue of visualizing large amount of aspects related 
hooks (join point shadows) in the base code. AspectMaps enable one to understand 
a large amount of code bases and permit drilling down to one single join
point using a selective structural zooming. AspectMaps diﬀers from composition
dashboards essentially on the level of the analysis realized. The AspectMaps tool
essentially operates on source code of the base system and its related aspects.
Composition dashboards deals essentially with business processes.

All the visualizations presented in this paper are polymetric views. This visualization 
mechanism has been essentially used to assess software source code [22].
Using polymetric views to assess a software process models has not been considered 
so far. However, a number of related research eﬀorts are presented below.

6 Which are induced by the business domain (e.g., fault exclusion, overlapped condi-

tions).
http://www.eclipse.org/ajdt

7

104

S. Mosser, A. Bergel, and M. Blay–Fornarino

Assessing and visualizing inter software component dependencies and relationships 
has received a great attention from the software comprehension community.
For example, D’Ambros et al. [23] visualize how bugs are related to software components.
 A number of visualizations are providing, ranging from tree maps to
complex graph-like structures, on which diﬀerent layouts are applied.

Byelas and Telea [24] proposed a technique based on “splat texture” that
identity areas in a software architecture. The idea is to ﬁll a contoured area
using this texture. This representation is eﬃcient when dealing with scalability.
Their approach is complementary to our, and may be well combined.

7 Conclusions

The composition mechanisms as such deﬁned in the Adore framework help
designers to build business process. Visualization techniques can then be used to
graphically represent the compositions, and support designers when they assess
their systems.

In this paper, we propose three visualizations intended to support designers’
understanding of processes compositions. These representations allow designers
to easily identify graphical patterns in their composition, and then identify key–
points in the resulting composed systems. These key–points are intended to
be used in several diﬀerent ways (e.g., to deﬁne unit tests, to catch designers
attention on a dangerous situation). We illustrate the scalability of the approach
by visualizing the Cccms system. This large system was initially deﬁned to be a
comparison referential for Aom techniques. The diﬀerent visualizations described
in this paper are scalable enough to let us represent in an understandable way
all the artifacts of this case study.

We focus our work on static visualization of compositions as ﬁrst–class entities.
 An interesting perspective of this work is to deﬁne new representation dealing 
with composition conﬂict detection (e.g., conﬂict highlighting) or business–
process partnerships (e.g., execution bottleneck).

References

1. MacKenzie, M., Laskey, K., McCabe, F., Brown, P., Metz, R.: Reference Model
for Service Oriented Architecture 1.0. Technical Report wd-soa-rm-cd1, OASIS
(February 2006)

2. Peltz, C.: Web Services Orchestration and Choreography. Computer 36(10) (2003)
3. White, S.A.: Business Process Modeling Notation (BPMN). IBM (May 2006)
4. OASIS: WS Business Process Exec. Lang. 2.0. Technical report, OASIS (2007)
5. Pautasso, C., Alonso, G.: Visual composition of web services. In: HCC, pp. 92–99.

IEEE Computer Society, Los Alamitos (2003)

6. Douence, R.: A Restricted Deﬁnition of AOP. In: European Interactive Workshop

on Aspects in Software (EIWAS) (September 2004)

7. Liu, J., Batory, D., Lengauer, C.: Feature Oriented Refactoring of Legacy Applications.
 In: Int. Conf. on Soft. Engineering (ICSE), Shanghai, China (May 2006)

Visualizing and Assessing a Compositional Approach

105

8. Karastoyanova, D., Leymann, F.: Bpel’n’aspects: Adapting service orchestration
logic. In: ICWS 2009: Proceedings of the 2009 IEEE International Conference on
Web Services, Washington, DC, USA, pp. 222–229. IEEE Computer Society, Los
Alamitos (2009)

9. Charﬁ, A., Mezini, M.: Ao4bpel: An aspect-oriented extension to bpel. World Wide

Web 10(3), 309–344 (2007)

10. Kienzle, J., Guelﬁ, N., Mustaﬁz, S.: Crisis Management Systems. In: A Case Study
for Aspect-Oriented Modeling. Requirements document for TAOSD special issue,
McGuill University & University of Luxembourg (September 2009)

11. Mosser, S., Blay-Fornarino, M., Riveill, M.: Web Services Orchestration Evolution:
A Merge Process For Behavioral Evolution. In: Morrison, R., Balasubramaniam,
D., Falkner, K. (eds.) ECSA 2008. LNCS, vol. 5292, pp. 35–49. Springer, Heidelberg
(2008)

12. Mosser, S., Blay-Fornarino, M., France, R.: Workﬂow Design using Fragment Composition 
Crisis Management System Design through ADORE. Transactions on
Aspect-Oriented Software Development (TAOSD), 1–34 (2010) (submitted)

13. Sarkar, M., Brown, M.H.: Graphical Fisheye Views of Graphs. In: CHI 1992: Proc.
of the SIGCHI Conf. on Human Factors in Computing Sys., pp. 83–91. ACM, New
York (1992)

14. Lanza, M., Ducasse, S.: Polymetric views—a lightweight visual approach to reverse

engineering. Trans. on Soft. Engineering (TSE) 29(9), 782–795 (2003)

15. Gˆırba, T., Lanza, M.: Visualizing and characterizing the evolution of class hierarchies.
 In: WOOR 2004 (5th ECOOP W. kshp. on OO Reengineering) (2004)

16. Vanderfesten, I., Cardoso, J., Mendling, J., Reijers, H.A., Van Der Aalst, W.M.:
Quality Metrics for Business Process Models. BPM and Workﬂow Handbook, 179–
190 (2007)

17. Barais, O., Lawall, J., Le Meur, A.F., Duchien, L.: Safe Integration of New Concerns 
in a Software Architecture. In: 13th Annual IEEE International Conference
on Engineering of Computer Based Systems (ECBS 2006), Potsdam, Germany,
March 2006. IEEE, Los Alamitos (2006)

18. Szyperski, C.: Independently Extensible Systems – Software Engineering Potential
and Challenges. In: Proceedings of the 19th Australian Computer Science Conference,
 Melbourne, Australia (1996)

19. Pfeiﬀer, J.H., Gurd, J.R.: Visualisation-based tool support for the development of
aspect-oriented programs. In: AOSD 2006: Proceedings of the 5th International
Conference on Aspect-Oriented Software Development, pp. 146–157. ACM, New
York (2006)

20. Balzer, M., Deussen, O., Lewerentz, C.: Voronoi treemaps for the visualization of
software metrics. In: SoftVis 2005: Proceedings of the 2005 ACM Symposium on
Software Visualization, pp. 165–172. ACM Press, New York (2005)

21. Fabry, J., Kellens, A., Ducasse, S.: Aspectmaps: A scalable visualization of join

point shadows. Tr/dcc-2010-2, University of Chile (April 2010)

22. Lanza, M., Marinescu, R.: Object-Oriented Metrics in Practice. Springer, Heidelberg 
(2006)

23. D’Ambros, M., Lanza, M.: Visual software evolution reconstruction. J. Softw.

Maint. Evol. 21(3), 217–232 (2009)

24. Byelas, H., Telea, A.C.: Visualization of areas of interest in software architecture
diagrams. In: SoftVis 2006: Proceedings of the 2006 ACM Symposium on Software
Visualization, pp. 105–114. ACM, New York (2006)

