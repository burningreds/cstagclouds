IC2D: Interactive Control and Debugging

of Distribution

Fran¸coise Baude, Alexandre Bergel, Denis Caromel,

Fabrice Huet, Olivier Nano, and Julien Vayssi`ere

INRIA Sophia Antipolis, CNRS - I3S - Univ. Nice Sophia Antipolis,

BP 93, 06902 Sophia Antipolis Cedex, France

First.Last@inria.fr

Abstract. Within the trend of object-based distributed programming,
we present a non-intrusive graphical environment for remote monitoring
and steering, IC2D: Interactive Control and Debugging of Distribution.
Applications developped using the 100% Java ProActive PDC (Parallel,
Distributed and Concurrent) computing library are monitored for ‘free’
by IC2D. As those targetted applications can run on any distributed
runtime support ranging from multiprocessor workstations, clusters, to
grid-based infrastructures (through the Globus toolkit), IC2D turns out
to be a grid-enabled programming environment.

Keywords: distributed computing, metacomputing, active object, migration,
 graphical visualisation, debugging, monitoring, steering, objectoriented.


1 Introduction

The results we present in this paper capitalise on research performed over the last
few years on the ProActive PDC (Parallel Distributed and Concurrent) library
[4]. ProActive is a library for concurrent, distributed and mobile computing in
Java. As ProActive is a 100% Java application, applications built using it can
run on any kind of machine (workstations, multiprocessors servers, clusters, etc)
and under any operating system, provided that there exists an implementation
of the Java virtual machine for the platform in question.

In this paper we describe IC2D, which is a graphical environment for monitoring 
and steering applications built using ProActive. It enables the programmer
to dynamically visualise the inner workings of a ProActive application at runtime 
and also allows the user to interactively control the mapping of tasks onto
machines, either upon creation or at migration time. The underlying motivation
is to help users to deploy, monitor and control ProActive computations running
on either kind of distributed platforms including grids.

Section 2 provides some background on ProActive. Then, in section 3, we
present the main features that IC2D brings to ProActive applications. We then
provide a comparison with related work in section 4.

S. Margenov, J. Wasniewski, and P. Yalamov (Eds.): ICLSSC 2001, LNCS 2179, pp. 193–200, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001

194

F. Baude et al.

2 Distributed and Mobile Active Objects with ProActive

As ProActive is built on top of standard Java APIs1, it does not require any
modiﬁcation to the standard Java execution environment, nor does it make use
of a special compiler, preprocessor or modiﬁed virtual machine.

The model of distribution and activity that we present in this section is
part of a larger eﬀort to improve simplicity and reuse in the programming of
distributed and concurrent object systems [2,3].

2.1 Base Model

A distributed or concurrent application built using ProActive is composed of a
number of medium-grained entities called active objects. Each active object has
its own thread of control and is granted the ability to decide in which order
to serve the incoming method calls that are automatically stored in a queue of
pending requests. Method calls sent to active objects are always asynchronous
with transparent future objects and synchronisation is handled by a mechanism
known as wait-by-necessity.

The ProActive library provides a way to migrate any active object from any
JVM to any other one. This is done through a MigrateTo(...) primitive which
can either be called from the object itself or through a method call from another
active object.

2.2 Mapping Active Objects

A Node is an object deﬁned in ProActive whose aim is to host several active
objects. It provides an abstraction for the physical location of a set of active
objects. An active object can be bound to a node either at creation time or as
the result of a migration. As active objects execute within Java Virtual Machines,
 there is actually a simple way to think about nodes: nodes can be seen
as entry points to JVMs. If the programmer does not need or want to explicitly
work with nodes, a default node is created on each JVM and active objects are
automatically bound to it.

In order to name and handle nodes in a simple manner in the entire ProActive 
system, each node must be labelled with a name. This name is usually an
URL that consists of the machine hostname and a string (e.g. //sakuraii/Node1).
This URL is then registered with rmiregistry. Active objects, just like nodes,
can also be named in order to be registered and subsequently located. An additional 
way to register and locate nodes or active objects is to use the Lookup
Service of Jini [5]. New participants will then be able to dynamically discover
nodes or active objects, and join an on-going ProActive computation. These various 
means of registering and locating are of uttermost interest for collaborative
distributed applications for instance.

1 Java RMI [15], the Reﬂection API [14],...

