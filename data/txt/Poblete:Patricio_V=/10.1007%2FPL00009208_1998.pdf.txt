Algorithmica (1998) 21: 37–71

Algorithmica

© 1998 Springer-Verlag New York Inc.

The Analysis of Linear Probing Hashing with Buckets1

A. Viola2 and P. V. Poblete3

Abstract. We present the ﬁrst exact analysis of a linear probing hashing scheme with buckets of size b. From
the generating function for the Robin Hood heuristic we obtain exact expressions for the cost of successful
searches. For a full table, with the help of Singularity Analysis, we ﬁnd the asymptotic expansion of this
cost up to O..bm/¡1/. We conclude with a new approach to study certain recurrences that involve truncated
exponentials. A new family of numbers that satisﬁes a recurrence resembling that of the Bernoulli numbers is
introduced. These numbers may prove helpful in studying recurrences involving truncated generating functions.

Key Words. Hashing, Linear probing, Buckets, Analysis of algorithms.

1. Motivation. We present an exact analysis of the average cost of a successful search
in a hash table in which conﬂicts are resolved by linear probing [38] on buckets of size b.
Linear probing is the simplest collision resolution scheme for open addressing hash
tables and uses the cyclic probe sequence h.K /; h.K /C1; : : : ; m¡1; 0; 1; : : : ; h.K /¡1,
assuming the table slots are numbered from 0 to m¡ 1. Linear probing works reasonably
well for tables that are not too full, but as the load factor increases, its performance
deteriorates rapidly.

The ﬁrst published analysis of linear probing was done by Konheim and Weiss [32].
However, this algorithm was ﬁrst analyzed by Knuth in 1962 [26], [43], who stated that
this analysis had a strong inﬂuence in the structure of his series The Art of Computer
Programming. A different approach to the analysis of this hashing scheme, based on the
application of ballot theorems, was presented by Mendelson and Yechiali [34]. These
analyses do not consider the issue of several elements ﬁtting onto a single page. Hence,
in our terminology, they deal only with buckets of size 1.
Let 9m;n denote the number of probes in a successful search of a hash table of size
m containing n C 1 elements (assuming all elements in the table are equally likely to be
searched). If we assume that the hash function, h, takes each value in 0¢¢¢ m ¡ 1 with
equal probability, then for b D 1 we know from [26] and [19] that

(1)

E[9m;n] D 1

2

.1 C Q0.m; n//;

1 This research was supported in part by the Natural Sciences and Engineering Research Council of Canada
under Grant No. A8237, the Information Technology Research Centre of Ontario, and FONDECYT(Chile)
under Grants 1940271 and 1960881. This work was done while the ﬁrst author was at the University of
Waterloo.
2 Pedeciba Informatica, Casilla de Correo 16120, Distrito 6, Montevideo, Uruguay. viola@ﬁng.edu.uy.
3 Department of Computer Science, University of Chile, Casilla 2777, Santiago, Chile. ppoblete@dcc.uchile.cl.

Received November 1996; revised March 1997. Communicated by J. D´ıaz and M. J. Serna.

(cid:181)

¶

38

(2)

E[9m;ﬁm] D 1
p
2
E[9m;m¡1] D
2…m
4

where Q0.m; n/ DP

1 C 1
1 ¡ ﬁ
C 1
3

(3)

i‚0

C 1
48

¡

1

r
(cid:181)
2.1 ¡ ﬁ/3m
C O
2…
m

¶
C O

;

1
m

.ni =mi /, and ni D n.n ¡ 1/¢¢¢ .n ¡ i C 1/.

(cid:181)

¶

;

1
m2

A. Viola and P. V. Poblete

0 • ﬁ < 1;

C b¡1X

jD1

p
2…
4
p

C

2…
48

For general b, Blake and Konheim [1] studied the asymptotic behavior of the algorithm 
as the number of records and buckets tend to inﬁnity with their ratio remaining
constant. Mendelson [33] derived exact formulae for the problem, but only solved them
numerically. Knuth in [26] studies the problem for nonfull tables.

In this paper we present an exact analysis of Robin Hood linear probing hashing [4],
[5] with buckets of size b. By a Robin Hood collision resolution we mean that if several
elements are contending for the same location, priority goes to the one farthest along in
its probe sequence. It is well known [38] that in a hash table accessed by linear probing
the average number of probes for a successful search is independent of the collision
resolution strategy used. Indeed, this is true for any set of keys. So, our analysis solves
the open problem presented by D. Knuth in question 6.4.56[M48] in [26].
Our main result is an explicit expression for E[9m;n] and a proof that

bE[9m;bm¡1] D

.bm/1=2 C 1

3

1

.1 ¡ T .e.2…i=b/ j¡1//

.bm/¡1=2 C O..bm/¡1/;

where i D p¡1, and T .z/ is the tree function which satisﬁes T .z/ D zeT .z/.

This paper is structured as follows. In Section 2 the Robin Hood heuristic is introduced,
and in Section 3 the mathematical background is presented. We follow in Sections 4 and
5 with the derivation of exact formulae for the cost of successful searches and in Section 6
with the asymptotic analysis for successful searches in a full table. Finally, in Section 7
we introduce a new family of numbers that can prove helpful in studying recurrences
involving truncated generating functions, and in Section 8 we present the conclusions
and future work.

2. Robin Hood Linear Probing. When a new record moves to an occupied location
in an open addressing hash table, the usual solution is to let the incoming key try again
in some other bucket. Thus, the standard collision resolution strategy can be called
“First-Come-First-Served.” Operating in the context of double hashing, Celis et al. [4],
[5] deﬁned the Robin Hood heuristic, under which each collision occurring on each
insertion is resolved in favor of the record that is farthest away from its home bucket.
We focus on the same heuristic but in the context of linear probing (as did Carlsson et
al. in [3] for buckets of capacity one).

Figure 1 shows the result of inserting records with the keys 36, 77, 24, 79, 56, 69, 49,
18, 38, 97, 78, 10, 58, 29, 30, and 16 in a table with ten buckets of size two, and with
hash function h.x/ D x mod 10, and resolving collisions by linear probing using the
Robin Hood heuristic.

The Analysis of Linear Probing Hashing with Buckets

39

Fig. 1. A Robin Hood linear probing hash table.

Fig. 2. The table after inserting 58.

When there is a collision in bucket i and this bucket is full, then the record that has
probed the least number of buckets, probes bucket .i C 1/ mod m. In the case of a tie,
we (arbitrarily) move the record whose key has the largest value.

Figure 2 shows the partially ﬁlled table after inserting 58. When we want to insert
29, bucket 9 is full. Both keys in bucket 9 are in their second probe position, and 29 is
in its ﬁrst, so it has to try bucket 0. At bucket 0, all three keys are in their second probe
position. Then we arbitrarily choose 69, the key with the largest value, to probe bucket
1. At bucket 1, both 69 and 79 are in their third probe bucket, while 10 is in its second.
So, 10 has to move to bucket 2, where it is inserted. Figure 3 shows the table after
inserting 29.

The following properties are easily veriﬁed:

and wrapping around. In our example, k D 6 (the second slot of the third bucket).

† At least one record is in its home bucket.
† The keys are stored in nondecreasing order by hash value, starting at some location k
† If a ﬁxed rule is used to break ties among the candidates to probe their next probe
bucket (e.g., by sorting these keys in increasing order), then the resulting table is
independent of the order in which the records were inserted [4].

3. Mathematical Background

3.1. Preliminaries. Given a function F .x1; : : : ; xn; z/ we use the following operators:

Uz F .x1; : : : ; xn; z/ D F .x1; : : : ; xn; 1/

.unit/

and

z F .x1; : : : ; xn; z/ D @ k F .x1; : : : ; xn; z/
Dk

@zk

If X is an integer-valued random variable and pk · Pr[X D k], then the probability

.differentiation/:

Fig. 3. The table after inserting 29.

generating function of the sequence pk is deﬁned by

X

k‚0

5.z/ D

pkzk :

A. Viola and P. V. Poblete

We use the following well-known properties of the probability generating functions:

E[X] D UzDz5.z/;
Var[X] D UzD2

z

5.z/ C E[X] ¡ E[X]2;

If f .z/ DP

i‚0 fi zi , then [zi ] f .z/ denotes fi .

where E[X] and Var[X] are the expected value and the variance of X, respectively.

P
Given a sequence fi , we deﬁne its exponential generating function (egf) as F .z/ D
i‚0 fi .zi =i!/. In our analyses we use an important convolution formula for egf’s. If
F .z/ and G.z) are the egf’s for the sequences fi and gi , then H .z/ D F .z/G.z/ is the
egf for the sequence

40

(4)
(5)

(6)

We list here some useful properties of the binomial coefﬁcients [22] that will be used in
our analysis. Let i; j; k be integers and r real. Then

(cid:181)

X

¶

i
k

k

fk gi¡k :

¶

;

k

(cid:181)
k ¡ r ¡ 1
(cid:181)
¶(cid:181)
¶
D .¡1/k
r ¡ k
(cid:181)
¶
D
j ¡ k
r ¡ 1
(cid:181)
k ¡ 1
r ¡ 1
i

D .¡1/i

D r
k

r
k

;

¶

;

:

k > 0;

hi D
¶
(cid:181)
¶
¶(cid:181)
¶
(cid:181)
(cid:181)
¶

r
k
j
k
r
k
r
k

(cid:181)

r
j

.¡1/k

(7)

(8)

(9)

(10)

X

k•i

Following the notation presented in [22], given a predicate P we use P to represent a
function that takes the value 1 if P is true and 0 otherwise.

3.2. The Poisson Transform. There are two standard models that are extensively used in
the analysis of hashing algorithms: the exact ﬁlling model and the Poisson ﬁlling model.
Under the exact ﬁlling model, we have a ﬁxed number of keys, n, that are distributed
among m locations, and all mn possible arrangements are equally likely to occur.

Under the Poisson model, we assume that each location receives a number of keys that
is Poisson distributed with parameter x, and is independent of the number of keys going
elsewhere. This implies that the total number of keys, N , is itself a Poisson distributed
random variable with parameter mx:
Pr[N D n] D e

n D 0; 1; : : : :

¡mx .mx/n

;

n!

This model was ﬁrst considered in hashing analysis by Fagin et al. [10] in 1979.

The Analysis of Linear Probing Hashing with Buckets

41

It is generally agreed that the Poisson model is simpler to analyze than the exact ﬁlling
model. The main difference is the fact that in the Poisson model, the number of keys in
each location is independent of the number of keys in other places. This is not the case
in the exact ﬁlling model. Gonnet and Munro in [20], observed that these models are
deeply related. They showed that the results from one model can be transformed into
the other, and that this transformation can be inverted. They used the Poisson transform
to study the linear probing sort algorithm.

Consider a hash table of size m with n elements, in which conﬂicts are resolved by
open addressing using some heuristic. Let P be a property (e.g., cost of a successful
search) of a random element of the table, and let fm;n be the result of applying a linear
operator f (e.g., an expected value) to the probability generating function of P that was
found using the exact ﬁlling model. Then Fm .x/, the result of computing the same linear
operator f to the probability generating function of P computed using a model with m
random independent Poisson distributed objects each with parameter x, is

Fm .x/ D

Pr[N D n] fm;n D e

¡mx

(11)
We may use (11) to deﬁne Pm[ fm;nI x], the Poisson transform (also called the Poisson
generating function [11], [23]) of fm;n, as

fm;n:

n‚0

n‚0

n!

.mx/n

Pm[ fm;nI x] D Fm .x/ D e

¡mx

(12)
If Pm[ fm;nI x] has a MacLaurin expansion in powers of x, then we can retrieve the
original sequence fm;n by the following inversion theorem [20]:

fm;n:

n‚0

n!

If Pm[ fm;nI x] DP

k‚0 am;k x k, then fm;n DP

k‚0 am;k .nk =mk /.

THEOREM 1.

X

X

X

.mx/n

This theorem is easily proved by multiplying each side of (12) by emx (or its power
series), and equating the powers of x on both sides. So we can study a hashing problem
under the more convenient model, and then transfer the results to the other by using the
Poisson transform or its inverse.

A more detailed presentation of this transform can be found in [45] and [39].

4. Linear Probing Sort. To analyze Robin Hood linear probing with buckets, we ﬁrst
have to discuss some ideas presented in [3] and [20].
For b D 1, when the hash function is order preserving (that is, if x < y, then
h.x/ < h.y/), a variation of the Robin Hood linear probing algorithm can be used to
sort [20], by successively inserting the n records in an initially empty table. In this case,
instead of letting the excess records from the rightmost bucket of the table wrap around
to bucket 0, we can use an overﬂow area consisting of buckets m, mC1, etc. The number
of buckets needed for this overﬂow area is an important performance measure for this
sorting algorithm.

In this section we study the average number of records that overﬂow when the buckets
have capacity b. Then, in Section 5, we show how this analysis is related to the study of
the cost of successful searches in the Robin Hood linear probing algorithm.

42

A. Viola and P. V. Poblete

4.1. Some Preliminaries. We deﬁne Qm;n;d as the number of ways of inserting n records
in a table with m buckets of size b, so that a given (say the last) bucket of the table contains
more than d empty slots. The subscript b will be omitted, since it is a ﬁxed parameter.
There cannot be more empty slots than the size of the bucket so Qm;n;d D 0 if d ‚ b. For
each of the mn possible arrangements, the last bucket has zero or more empty slots, and
so Qm;n;¡1 D mn. Observe that Qm;n;0 gives the number of ways of inserting n records
into a table with m buckets, so that the last bucket is not full. For notational convenience,
we deﬁne Q0;n;d D n D 0 . In [33] Mendelson proves
THEOREM 2. For 0 • d • b ¡ 1, and m > 0,

(cid:181)

¶

n
j

8><>: nX

jD0
0

Qm;n;d D

Qm¡1; j;d

(0 • n < bm -d);
(n ‚ bm-d).
P

It does not seem possible to ﬁnd a closed formula for Qm;n;d. However, as we shall see,
b¡1
dD0 Qm;n;d. The following
for the average cost of a successful search we only require
theorem tells us that this sum is surprisingly simple.

THEOREM 3.

b¡1X

dD0

Qm;n;d D bmn ¡ nmn¡1

.0 • n • bm/:

PROOF. Let Pm;n; j D .Qm;n; j¡1 ¡ Qm;n; j /=mn. Pm;n; j is the probability of inserting n
records in a table with m buckets of size b so that the last bucket of the table contains
exactly j empty slots. Then, since Qm;n;b D 0,
bX

As a consequence, we ﬁnd the following identity:

Pm;n; j :

jDdC1

Qm;n;d D mn
b¡1X

Qm;n;d D mn

dD0

bX

j Pm;n; j :

jD1

The last sum gives the expected number of empty slots in a given bucket. There is an
average of n=m records in each bucket of capacity b. Therefore the expected number of
empty slots in a given bucket is b ¡ n=m, and the theorem is proved.

P
dD0 Qm;n;d for 0 • n • bm.
b¡1

We will need the exponential generating function of

This is easily obtained using Theorem 3 since

b¡1X

Qm;d .x/ D bmX

b¡1X

(13)

dD0

Qm;n;d

dD0

nD0

x n
n!

.bmn ¡ nmn¡1/

x n
n!

:

D bmX

nD0

The Analysis of Linear Probing Hashing with Buckets

43

Fig. 4. From the n keys inserted, n ¡ k of them go to the last bucket.

4.2. Analysis of the Overﬂow Area. Let wm;n;k be the probability that k records go to
the overﬂow area when n keys are inserted in a table with m buckets, each with capacity
b. Since b is a given parameter, this subscript is omitted. We also deﬁne ˜m;n.z/ to be
its probability generating function.
The records inserted in the table can be divided into two sets, as shown in Figure 4. The
hash table can be seen as a concatenation of two tables of size m ¡ 1 and 1, respectively.
If n ¡ k ‚ b, then n ¡ k ¡ b records go to the overﬂow area as a consequence of
being inserted in the last bucket of the table. To this number we have to add the records
that go to the overﬂow area when k records are inserted in the table of size m ¡ 1. Then,
for this case, the probability generating function for the number of records that overﬂow
is ˜m¡1;k .z/zn¡k¡b.

Therefore, as a ﬁrst approximation

(cid:181)

¶(cid:181)

n
k

X

0•k•n

¶n¡k

¶k(cid:181)

1
m

˜m¡1;k .z/zn¡k¡b;

m ¡ 1
m

(14)

˜m;n.z/ »
¢
¡

n
k

since there are
the probability that any record hashes to a given bucket is 1=m.

ways of choosing the n ¡ k records that hash to the last bucket, and
However, we need a correction term because when n ¡ k < b there is no overﬂow
caused by the records inserted in the last bucket of the table. In such a case we have the
following correction term:

X

(15)

0•i <b¡.n¡k/

wm¡1;k;i .1 ¡ ziCn¡k¡b/:

Then, by (14) and (15), we have the following recurrence for the probability generating

44

function of the size of overﬂow:

˜m;n.z/ D

X
ˆ

0•k•n
£

¶k(cid:181)

(cid:181)

¶(cid:181)

n
k

m ¡ 1
m

˜m¡1;k .z/zn¡k¡b C

¶n¡k
X

1
m

0•i <b¡.n¡k/

A. Viola and P. V. Poblete

!

:

wm¡1;k;i .1 ¡ ziCn¡k¡b/

As a consequence of this correction term, the values of wm;n;i for 0 • i < b have to be
studied separately. So, the ﬁrst bucket of the overﬂow area is analyzed with a different
approach.
4.3. First Bucket of the Overﬂow Area. Let Dm;n;r · Qm;n;b¡r¡1 ¡ Qm;n;b¡r be the
number of ways of inserting n records in a table of size m so that the last bucket has
exactly r records, for 0 • r • b. Also deﬁne Cm;n;r · mnwm;n;r . We want to ﬁnd Cm;n;r
for 0 • r < b.

THEOREM 4.

(16)

Cm;n;r D DmC1;n;r ¡ rX

jD1

(cid:181)

¶

n
j

Cm;n¡ j;r¡ j :

PROOF. Cm;n;r can ﬁrst be approximated by DmC1;n;r . However, we do not want any
record to hash to bucket m. This situation should be considered when 1 • r • b.
For a ﬁxed j with 1 • j • r, Cm;n¡ j;r¡ j counts the number of ways of inserting
n ¡ j records in a table of size m, such that r ¡ j records go to overﬂow. Since there
should be r records in the overﬂow area, then j records would have to hash to bucket
¢
¡
m (the ﬁrst bucket of the overﬂow area), and this situation does not happen since the
hash function only takes values in the range 0¢¢¢ m ¡ 1. There are
different ways of
choosing these j records. So, for a ﬁxed j, the number of forbidden conﬁgurations is
n
j

Cm;n¡ j;r¡ j . Then the lemma is proven by letting j vary from 1 to r.

¡

¢

n
j

As a solution of (16), we have

THEOREM 5.

PROOF. By Theorem 4, we have

¶

DmC1;n¡ j;r¡ j :

(cid:181)

n
j

jD0

.¡1/ j
(cid:181)

Cm;n;r D rX
DmC1;n;r D rX
DmC1;n;r D nX

(cid:181)

jD0

jD0

¶

¶

n
j

n
j

Cm;n¡ j;r¡ j ;

Cm;n¡ j;r¡ j :

and since Cm;n¡ j;r¡ j and DmC1;n¡ j;r¡ j both vanish when j > r (because 0 • r ¡ j • b),
then

(17)

The Analysis of Linear Probing Hashing with Buckets

NCm .z/ ·P

For a ﬁxed r, let NCm;n¡ j · Cm;n¡ j;r¡ j and NDmC1;n¡ j · DmC1;n¡ j;r¡ j . Also deﬁne

NCm;n.zn=n!/ and NDmC1.z/ ·P
NDmC1;n.zn=n!/. Then, by (17),
¶
(cid:181)
NDmC1;n D nX
n‚0
NCm;n¡ j :

n‚0

45

n
j

jD0

This identity is directly translated into an equation in their respective exponential generating 
functions as

If (18) is solved for NCm .z/, and then we consider the coefﬁcient of zn=n! on both sides,

the following inverse relation is obtained:

(18)

and so

NDmC1.z/ D ez NCm .z/:
¶

(cid:181)

.¡1/ j

n
j

NCm;n D nX
¶
(cid:181)

jD0

NDmC1;n¡ j ;
(cid:181)

.¡1/ j

jD0

Cm;n;r D nX
.¡1/ j
¶(cid:181)
(cid:181)
X
ˆ

n
k

0•k•n
£

m ¡ 1
m

n
j

jD0

DmC1;n¡ j;r¡ j D rX
¶n¡k(cid:181)
¶k
X

1
m

˜m¡1;n¡k .z/zk¡b C

.1 ¡ ziCk¡b/

0•i <b¡k

COROLLARY 6.
˜m;n.z/ D

¶

n
j

DmC1;n¡ j;r¡ j :

¶

(cid:181)

iX
.¡1/ j

jD0

n ¡ k
j

Dm;n¡k¡ j;i¡ j
.m ¡ 1/n¡k

!

:

In this section we use the Poisson

4.4. Distribution of the Size of the Overﬂow Area.
transform to ﬁnd E[˜m;n]. We deﬁne
X
Rm;n.z/ · ˜m;n.z/
Rm .x; z/ ·

Rm;n.z/x n;

mn
n!

;

n‚0

X

and

(19)

Wm .x; z/ · e

¡mx

˜m;n.z/

.mx/n

n!

n‚0
First we will ﬁnd ai ; i ‚ 0; that satisfy

UzDzWm .x; z/ D Pm[E[˜m;n]I x] D

D Pm[˜m;n.z/I x]:
X

ai x i ;

i‚0

46

and then, by Theorem 1,

(20)

A. Viola and P. V. Poblete

X

i‚0

ai

ni
mi

:

E[˜m;n] D

By Corollary 6, and the deﬁnition of Rm;n.z/,

(21)

Rm;n.z/ D 1
zb
C 1
n!

(cid:181)

Rm¡1;n¡k .z/

¶ X

zk
k!
.1 ¡ ziCk¡b/

n
k

0•k•n

0•i <b¡k

¶

(cid:181)

iX
.¡1/ j

jD0

n ¡ k
j

Dm;n¡k¡ j;i¡ j :

We ﬁrst concentrate on the last sum of (21). The following lemma will be useful for this
purpose.

X
X

0•k•n

‘X
.¡1/k
¶(cid:181)

kD0

(cid:181)

n
k

¶

n ¡ k
‘ ¡ k

n
k

¶

¶(cid:181)
n ¡ k
‘ ¡ k
(cid:181)

D

n
‘

¶ ‘X

kD0

D ‘ D 0 :
¶
(cid:181)

.¡1/k
(cid:181)

LEMMA 7.

PROOF. By (8), we have

(cid:181)

‘X
.¡1/k

D ‘ D 0 :

‘
k

kD0
(cid:181)
If s D i C k, then
X

1
n!

0•k•n

.1 ¡ ziCk¡b/

n
k
D 1
n!
D 1
n!

¶ X

¶
iX
n ¡ k
.¡1/ j
(cid:181)
s¡kX
j
jD0
.¡1/ j
.1 ¡ zs¡b/
(cid:181)
¶
(cid:181)
s¡kX
X
.¡1/ j

¶ X
(cid:181)
X
X
¢ D 0 because n ‚ 0. Moreover, if n > s, when s < k • n, the sum

Dm;n¡k¡ j;i¡ j
n ¡ k
j
n ¡ k
j

0•i <b¡k
n
k
0•s<b
.1 ¡ zs¡b/

0•s<b

0•k•n

¡
Actually, the upper bound of the sum indexed by k may be s instead of n. If n < s, when
n < k • s,
indexed by j is 0, because s ¡ k < 0. If we use Lemma 7 and deﬁne ‘ D k C j, then
X

X

Dm;n¡k¡ j;s¡k¡ j :

Dm;n¡k¡ j;s¡k¡ j

¶
¶

0•k•n

(cid:181)

¶

n
k

jD0

jD0

n
k

s¡kX
.¡1/ j
(cid:181)
¶
X

jD0

n
k

0•k•s

¶

(cid:181)
n ¡ k
s¡kX
j
.¡1/ j

jD0

¶

(cid:181)

Dm;n¡k¡ j;s¡k¡ j
n ¡ k
j

Dm;n¡k¡ j;s¡k¡ j

(22)

1
n!

0•s<b

.1 ¡ zs¡b/
X

D 1
n!

0•s<b

n
k
0•k•n
.1 ¡ zs¡b/

The Analysis of Linear Probing Hashing with Buckets

X
X

0•k•s

¶

¶

(cid:181)

(cid:181)
sX
n ¡ k
.¡1/‘¡k
‘X
‘ ¡ k
.¡1/k

n
k
.¡1/‘ Dm;n¡‘;s¡‘

‘Dk

kD0

47

¶

(cid:181)

¶(cid:181)
Dm;n¡‘;s¡‘
n ¡ k
‘ ¡ k

n
k

D 1
n!
D 1
n!
D 1
n!

.1 ¡ zs¡b/

.1 ¡ zs¡b/

0•‘•s
.1 ¡ zs¡b/Dm;n;s :

So, by (21), (22), and the deﬁnition of Dm;n;s we can write

¢

¡

1 ¡ zs¡b

X
X
.1¡zs¡b/.Qm;n;b¡s¡1¡ Qm;n;b¡s /
X

0•s<b

Dm;n;s

.1 ¡ z

¡s /.Qm;n;s¡1 ¡ Qm;n;s /

0•s<b

(23)

Rm;n.z/D 1
zb
D 1
zb
D 1
zb
D 1
zb

C 1
n!
C 1
n!
C 1
n!

Rm¡1;n¡k .z/

zk
k!

Rm¡1;n¡k .z/

zk
k!

Rm¡1;n¡k .z/

Rm¡1;n¡k .z/

zk
k!

zk
k!

where Vm;n.z/ denotes the sum indexed by s. If

0<s•b
C Vm;n.z/;
X

Vm;n.z/x n;

n‚0

0•s<b

X
X
X

0•s<b

0•s<b

X
X
X
X

0•k•n

0•k•n

0•k•n

0•k•n

(24)

then

(25)

Vm .x; z/ D
ˆ
X
nX
X

n‚0

kD0
.xz/k
k!

!

zk
k!

x n C Vm .x; z/

Rm¡1;n¡k .z/

X

Rm¡1;n¡k .z/x n¡k C Vm .x; z/

n‚k

k‚0
zb Rm¡1.x; z/ C Vm .x; z/:

Rm .x; z/ D 1
zb
D 1
zb
D exz

Since (25) is a linear recurrence with R0.x; z/ D 1, we ﬁnd by iteration

(26)

Rm .x; z/ D emxz
zbm
Finally, by the deﬁnition of Wm .x; z/,

(27)

Pm[˜m;n.z/I x] D e

¡mx Rm .x; z/

e.m¡k/xz
zb.m¡k/ Vk .x; z/:

D emx.z¡1/

zbm

¡kx e.m¡k/x.z¡1/

zb.m¡k/ Vk .x; z/:

e

C mX

kD1

C mX

kD1

(30)

UzDz Vk .x; z/ D

s.Qk;s¡1.x/ ¡ Qk;s .x//

As a consequence,
(29)
and, by (13),

D

(cid:181)

Finally, since

(31)

UzDz

e.m¡k/.z¡1/x
zb.m¡k/

x n
n!
0<s•b
.1 ¡ z
.1 ¡ z

¡s /.Qk;n;s¡1 ¡ Qk;n;s /

.1 ¡ z
X
¡s /
¡s /.Qk;s¡1.x/ ¡ Qk;s .x//:

.Qk;n;s¡1 ¡ Qk;n;s /

x n
n!

n‚0

0<s•b

Vk .x; 1/ D 0;
X
X

Qk;s .x/ D bkX
(cid:181)

jD0

0<s•b

¶

.bk j ¡ jk j¡1/

x j
j!

:

zb.m¡k/C1

e.m¡k/.z¡1/x .m ¡ k/.xz ¡ b/

D Uz
D .m ¡ k/.x ¡ b/;
bkX
.bk j ¡ jk j¡1/

¡kx

¶

x j
j!

:

48

A. Viola and P. V. Poblete

We now study Vk .x; z/. From its deﬁnition,
Vk;n.z/x n

Vk .x; z/ D

(28)

X

n‚0

X
X
X
X

n‚0

0<s•b

0<s•b

D

D

D

then, by (19), (27), (29), (30), and (31),

Pm[E[˜m;n]I x] D m.x ¡ b/ C mX
mX

(32)
This sum can be further simpliﬁed. If n D i C j, then

kD1

e

jD0

¡kx

jD0

bkX
.bk j ¡ jk j¡1/
D mX
X
.¡1/i
.kx/i
X
D mX
i!
.¡1/n x n
D mX
X
n!
.¡1/n x n
mX
X
n!

n‚0

kD1

kD1

kD1

i‚0

n‚0
.¡1/n x n
n!

D

n‚0

kD1

x j
j!

jD0

.bk j ¡ jk j¡1/
(cid:181)
¶
.¡1/ j
¶
(cid:181)

bkX
min.n;bk/X
bkX
jD0
.¡1/ j
n
bkX
j
.¡1/ j

jD0
kn¡1

n
j

jD0

x j
j!

kn¡ j .bk j ¡ jk j¡1/
n
j
kn¡ j .bk j ¡ jk j¡1/
(cid:181)
¶

.bk ¡ j /:

e

kD1

(33)

(34)

:

n
j

49

n
j

jD0

¶

¶

(cid:181)

¶

(cid:181)

X

D .¡1/bk

n ¡ 1
bk

Therefore, from (34),

The Analysis of Linear Probing Hashing with Buckets

To continue the simpliﬁcation, we require an identity that is a special case of (10):

¢ D 0, and so min.n; bk/ can be substituted by bk as the
¡
Step (33) needs some justiﬁcation when n < bk, since it may cause problems when
n < j • bk. In this range,
upper bound of the sum indexed by j.
bkX
.¡1/ j
(cid:181)
ˆ
ˆ
ˆ
(cid:181)
(cid:181)

¡ bkX
.¡1/ j j
bkX
.¡1/ j
bk¡1X
.¡1/ j

(cid:181)
(cid:181)
n
j
n ¡ 1
(cid:181)
j ¡ 1
n ¡ 1
(cid:181)
j
n ¡ 2
(cid:181)
bk ¡ 1

¶
¶
jD0
¡ n
¶
¶
C n

¶!
¶!
¶¶

¶!

¶¶

kn¡1

n‚0

n‚0

n‚0

kD1

kD1

kD1

kD1

jD0

jD0

jD0

jD1

jD0

D

D

n
j

n
j

n
j

bk

bk

bk

D

D

D

jD0

n‚0

n‚0

kn¡1

kn¡1

kn¡1

kn¡1

(cid:181)
(cid:181)
(cid:181)

.bk ¡ j /
bkX
.¡1/ j
bkX
.¡1/ j
bkX
(cid:181)
.¡1/ j

mX
.¡1/n x n
X
n!
X
X
X
X
X
X
X

kD1
.¡1/n x n
n!
.¡1/n x n
n!
.¡1/n x n
n!
.¡1/n x n
n!
.¡1/n x n
n!
.¡1/n x n
n!
.¡1/n x n
n!
.¡1/n x n
n!
D bm ¡ mx C

bkX
.¡1/ j
mX
mX
mX
n
mX
j
n ¡ 1
¶
(cid:181)
C n.¡1/bk¡1
bk.¡1/bk
mX
bk
n ¡ 2
¶
(cid:181)
.¡1/bk .n ¡ 1/
mX
bk ¡ 1
n ¡ 2
(cid:181)
(cid:181)
.¡1/bkC1kn¡1
mX
bk ¡ 1
¶
.¡1/bkC1kn¡1
.¡1/bk¡1
mX
bk ¡ n
(cid:181)
mX
X
bk ¡ 1
bk ¡ n
.¡1/n x n
bk ¡ 1
n!
X
mX
.¡1/n x n
Pm[E[˜m;n]I x] D
n!
(cid:181)
¶
mX
X

bk ¡ n
bk ¡ 1
¶

bk ¡ n
bk ¡ 1
¶

kn¡1

kn¡1

kn¡1

kn¡1

(cid:181)

(cid:181)

(cid:181)

n‚2

n‚2

n‚0

n‚0

n‚0

n‚0

kD1

kD1

kD1

kD1

kD1

kD1

D

D

D

;

¡ n.¡1/bk
¶¶

where (35) holds by (7). Finally, from (32) and (36),

(35)

(36)

n ¡ 2
bk ¡ 1

Moreover, by (20),

¶

:

(37)

(38)

E[˜m;n] D

.¡1/i
mi

n
i

ki¡1

kD1

bk ¡ i
bk ¡ 1

:

i‚2

50

A. Viola and P. V. Poblete

It is important to note that, for b D 1, the following identity can be used [22], [24], [27]
to calculate the inner sum:

rX
.¡1/k

kD0

(cid:181)

¶

r
k

‰

(cid:190)

s
r

Following the notation of [22]
a consequence we ﬁnd

E[˜m;n] D

denotes the Stirling numbers of the second kind. As
.¡1/iC1

(39)

(40)

(41)

(42)

;

r; s ‚ 0;

r; s are integers.

s
r

i‚2

ni
mi

'
“
ks D .¡1/rr!
X
X
X
X
(cid:181)

ni
mi

ni
mi

i‚2

i‚2

D

D

D

i‚2
D 1
2

kD1

(cid:181)
¶
mX
i ¡ 2
(cid:181)
¶
.¡1/kki¡1
mX
k ¡ 1
i ¡ 1
‰
.¡1/kki
k
kD1
.¡1/i¡1.i ¡ 1/!
i
i ¡ 1
i .i ¡ 1/

(cid:190)

i!

.¡1/iC1
i! .i ¡ 1/
.¡1/iC1
i! .i ¡ 1/

1

¶
.i ¡ 1/!

i! .i ¡ 1/

ni
mi
Q0.m; n/ ¡ 1 ¡ n
m

;

2

as was derived in [3] and [20]. Note that (9) is needed to derive (40). Furthermore, the
step going from (40) to (41) involves the identity (39) with s D i and r D i ¡ 1, but also
the fact that the range of the inner sum can be changed from k D 1¢¢¢ m to k D 0¢¢¢ i ¡1
because i • n • m and then all summands with k ‚ i are 0, and because for k D 0 this
summand is also 0.

5. Analysis of Robin Hood Linear Probing.
In this section we ﬁnd the average cost
of a successful search for a random record in a hash table with m buckets of size b that
contains n C 1 records. Without loss of generality, we search for a record that hashes to
bucket 0. Moreover, since the order of the insertion is not important, we assume that this
record was the last one inserted.

If we look at the table after the ﬁrst n records have been inserted, all the records that
hash to bucket 0 (if any) will be occupying contiguous buckets, near the beginning of
the table. The buckets preceding them will be occupied by records that wrapped around
from the right end of the table, as can be seen in Figure 1. The key observation here
is that those records are exactly the ones that would have gone to the overﬂow area.
Furthermore, it is easy to see that the number of records in this overﬂow area does not
change when the records that hash to bucket 0 are removed.

Let 9m;n.y/ be the probability generating function for the cost of a successful search
for a random record that hashes to 0 in a table with m buckets of capacity b that contains
n C 1 records. As before, the subscript b will be omitted, since it is a given constant.

The cost of retrieving a record that hashes to 0 can be divided into two parts.

† The number of records (k) that wrap around the table. In other words, the size of the
† The number of records (i C 1) that hash to bucket 0.

overﬂow area.

The Analysis of Linear Probing Hashing with Buckets

51

So the cost of (separately) retrieving all records that hash to bucket 0 is represented by
the generating function

iX

y

rD0

b.kCr /=bc:

y

The y outside the sum, denotes that the cost is at least 1 (the ﬁrst bucket). The exponent
of y in the sum represents the fact that to retrieve the .r C 1/st record that hashes to 0,
the k records that go to overﬂow plus the ﬁrst r records that hash to 0, have to be probed.
Since the buckets have size b, we have to divide this cost by b. Hence 1 C b.k C r /=bc
is the number of buckets probed to retrieve the .r C 1/st record that hashes to bucket 0.
Therefore, the cost of retrieving a random record that hashes to 0, given that k records
overﬂow from the end of the table and i C1 records hash to 0, has the generating function

iX

rD0

y
i C 1

b.kCr /=bc:

y

iX

rD0

k C r
b

If the table contains n C 1 records and i C 1 of them hash to bucket 0, then only the
remaining n ¡ i records that hash to buckets 1 through m ¡ 1 inﬂuence the size of
the overﬂow area. Remember from Section 4 that wm¡1;n¡i;k is the probability that k
records overﬂow when we insert n ¡ i records in a table of size m ¡ 1 (as bucket 0 is
not considered). Then X

iX

wm¡1;n¡i;k

k‚0

y
i C 1

rD0

b.kCr /=bc

y

represents the cost of retrieving a random record that hashes to 0, given that i C 1 of
different
them hash to this bucket. We now need to average over all i. There are
possibilities to choose the i records that hash to 0 (besides the last one inserted), and the
probability of a record hashing to 0 is 1=m. Finally, we ﬁnd the generating function

n
i

(cid:181)

¶(cid:181)

n
i

y

¶i(cid:181)
(cid:181)
nX

1
m

iD0

m ¡ 1
¶
m
n C 1
i C 1

¶n¡iX

k‚0
.m ¡ 1/n¡i

X

k‚0

wm¡1;n¡i;k

y
i C 1

wm¡1;n¡i;k

iX
iX

rD0

rD0

b.kCr /=bc

y

b.kCr /=bc:

y

9m;n.y/ D nX

iD0

(43)

¡

¢

D

.n C 1/mn
(cid:181)

n C 1
i C 1

E[9m;n] D nX
¶
nX

(cid:181)

iD0

(cid:181)„
5.1. Average Cost of a Successful Search. The expected number of buckets inspected
on a successful search is E[9m;n] D UyDy9m;n.y/. Then, by (43),
iX

X

¶

¶

”

wm¡1;n¡i;k

k‚0

rD0

k C r
b

C 1

:

As a ﬁrst approximation, we can use the relation x ¡ 1 < bxc • x, and therefore

.m ¡ 1/n¡i
.n C 1/mn
X

(44)

iD0

.m ¡ 1/n¡i
.n C 1/mn

n C 1
i C 1
< E[9m;n]

wm¡1;n¡i;k

k‚0

52

(45)

Since
by

P
(cid:181)
nX

iD0

• nX

iD0

(cid:181)

¶
n C 1
i C 1

X

k‚0

.m ¡ 1/n¡i
.n C 1/mn

wm¡1;n¡i;k

(cid:181)

iX

rD0

A. Viola and P. V. Poblete

¶

:

k C r
b

C 1

k‚0

wr;s;k D 1 for any r and s, the difference between (45) and (44) is bounded
¶
n C 1
i C 1

wm¡1;n¡i;k D nX

.m ¡ 1/n¡i
.n C 1/mn

.i C 1/

iX

X

rD0

k‚0

(cid:181)
¶
n C 1
(cid:181)
¶
nX
i C 1
n
i

iD0

.m ¡ 1/n¡i
.n C 1/mn
.m ¡ 1/n¡i D 1:

To analyze the lower bound (44), we ﬁrst study the inner sum

iD0
D 1
mn

(cid:181)

b

X
D
k‚0
D i C 1
D i C 1
X
.m ¡ 1/n¡i
.n C 1/mn
.m ¡ 1/n¡i

k‚0

b

.m ¡ 1/n¡i

mn

mn

¶
C i .i C 1/
X

2b

wm¡1;n¡i;k

k
b

.i C 1/

kwm¡1;n¡i;k C i .i C 1/

X
k‚0
E[˜m¡1;n¡i ] C i .i C 1/

2b

;

2b

wm¡1;n¡i;k

k‚0

¶

(cid:181)

iX
k C r
wm¡1;n¡i;k
b
rD0
E[˜m¡1;n¡i ] C i .i C 1/
i C 1
¶
2b
b
n ¡ 1
i ¡ 1

nX

(cid:181)

E[˜m¡1;n¡i ] C n
2b
E[˜m¡1;n¡i ] C n
2bm

iD1

:

.m ¡ 1/n¡i

mn

X

k‚0

wm¡1;n¡i;k

iX

rD0

k C r
b

and so

(46)

(cid:181)

nX

iD0

¶
n C 1
.m ¡ 1/n¡i
(cid:181)
¶
D nX
.n C 1/mn
i C 1
n C 1
(cid:181)
¶
nX
i C 1
¶
(cid:181)
n
nX
i

iD0
D 1
b
D 1
b

iD0

n
i

iD0

(47)

1
bmn

nX

iD0
D 1
bmn
D 1
bmn

n
i

¶
(cid:181)
nX
X

iD0

j‚2

In order to study the ﬁrst sum in (46), we use (38), and so

¶

¶
(cid:181)
(cid:181)
.m ¡ 1/n¡i E[˜m¡1;n¡i ]
X
n ¡ i
.m ¡ 1/n¡i
¶
(cid:181)
mX
j

j‚2

n
i

.¡1/ j .m ¡ 1/n¡ j

n
j

kD1

.¡1/ j
(cid:181)
.m ¡ 1/ j
bk ¡ j
bk ¡ 1

k j¡1

(cid:181)

mX
¶ n¡ jX

kD1

k j¡1

(cid:181)

iD0

bk ¡ j
¶
bk ¡ 1
n ¡ j
i

¶

1

.m ¡ 1/i

¶(cid:181)

(cid:181)

bk ¡ j
bk ¡ 1

1 C 1

m ¡ 1

¶n¡ j

53

k j¡1

The Analysis of Linear Probing Hashing with Buckets

mX
¶
kD1
bk ¡ j
bk ¡ 1

(cid:181)
.¡1/ j .m ¡ 1/n¡ j
mX

k j¡1

kD1

¶

n
j
.¡1/ j
m j

(cid:181)
¶

X
(cid:181)
X

j‚2
n
j

j‚2

E[˜m;n]:

D 1
bmn

D 1
b
D 1
b

b

E[˜m;n]

C n
2bm

< E[9m;n] • E[˜m;n]

Then, by (44), (45), (46), and (47) we have the following bounds:
C n
2bm

(48)
Nevertheless, we can give an exact expression for a full table (n D bm ¡ 1). Every real
number x can be written as x D bxc + fxg, where fxg denotes the fractional part of x
[22]. The bounds given in (48) are based on the approximation of b.k C r /=bc made in
(44) and (45). This term appears after taking derivatives in (43) with respect to y. We
could have replaced the exponent of y in (43) by

C 1:

b

„

”

(49)

1 C

k C r
b

D 1 C k C r

b

¡

k C r
b

‰

(cid:190)

:

When the table is full, we can give an interpretation for the coefﬁcient of y

When we take derivatives, the upper bound (45) is obtained from the ﬁrst two addends
of the right-hand side of (49).
f.kCr /=bg
in (43). The cost of searching for a random record in the table can be divided into two
parts. The ﬁrst is the number of buckets we have to probe. We add one to the cost every
time a new bucket is probed. The second part is the location of the record inside the
bucket. In our model we do not consider this cost, and this is the discrepancy we have
from .k C r /=b (total cost of the two parts) and b.k C r /=bc (cost of the ﬁrst part). Since
the table is full, the record to be searched has the same probability (1=b) of being in any
position inside its bucket. Therefore, for the special case of a full table, the probability
generating function for the second part is

y j=b
b

D b ¡ 1

2b

:

j
b2

jD0

Gm;bm¡1.y/ D b¡1X
UyDyGm;bm¡1.y/ D b¡1X
¶

jD0

X

.m ¡ 1/bm¡1¡i

and, therefore,

(50)

So, we have proven

bm¡1X

(cid:181)
bm
i C 1

LEMMA 8.

1

bmbm

iD0

(cid:190)

‰

iX

rD0

k C r
b

D b ¡ 1

2b

:

wm¡1;bm¡1¡i;k

k‚0

54

A. Viola and P. V. Poblete

The most notable feature of Lemma 8 is that this sum is independent of m. Now, we

can use it to prove

THEOREM 9.

E[9m;bm¡1] D 1
b

(cid:181)

X

i‚2

bm ¡ 1

i

¶

.¡1/i
mi

(cid:181)

ki¡1

mX

kD1

bk ¡ i
bk ¡ 1

¶

C m ¡ 1

2bm

C 1:

PROOF. We have to subtract (50) from the upper bound given in (48) for n D bm ¡ 1.
Then

E[9m;bm¡1] D E[˜m;bm¡1]

b

The theorem follows after using (38).

C 1:

C m ¡ 1

2bm

It is important to note that when b D 1, Theorem 9 and (42) can be used to obtain

E[9m;m¡1] D 1

2

.1 C Q0.m; m ¡ 1//;

as we already know by (1).

As a corollary, we can improve the bounds given in (48).

COROLLARY 10.

E[˜m;n]

b

C n
2bm

C 1 ¡ b ¡ 1

2b

• E[9m;n] • E[˜m;n]

b

C n
2bm

C 1:

6. Asymptotic Analysis. We now consider the asymptotic behavior of E[9m;bm¡1].
Because of Theorem 9, we know that, to this end, we only need the asymptotic behavior
of E[˜m;bm¡1]. This asymptotic analysis is presented in Sections 6.2 and 6.3, and uses
several important mathematical tools that are introduced in Section 6.1.

6.1. Mathematical Tools.

6.1.1. Singularity Analysis. There exist fairly synthetic and powerful methods that
permit us to extract the asymptotic form of the coefﬁcients of some complicated generating 
functions directly from their singularities. These methods originated in the work
of Darboux in the last century [37]. We use the Singularity Analysis approach proposed
by Flajolet and Odlyzko [16], [36], [14].

Their main idea is to show that it is sufﬁcient to determine local asymptotic expansions
near a singularity, since such expansions can be “transferred” to coefﬁcients. A detailed
presentation of this method can be found in [16] and [17]. This technique applies to
algebraic-logarithmic functions whose singular expansions involve fractional powers
and logarithms. One of the important features of the method is that it requires only local
asymptotic properties of the function to be analyzed. Therefore, it is very suitable for
functions that are only indirectly accessible through functional equations.

The Analysis of Linear Probing Hashing with Buckets

55

One of their results that we will use is

‰

THEOREM 11 [16], [15]. Let f .z/ be a function analytic in a domain

D D

…
2
where s, s1, and · are positive real numbers, s1 > s, and 0 < · < …=2. Assume that,
with (cid:190) .u/ D uﬁ lnﬂ .u/ and ﬁ 62 f0;¡1;¡2; : : :g, we have

z : jzj • s1;jArg.z ¡ s/j >
(cid:181)

¡ ·

¶

;

f .z/ » (cid:190)

1

1 ¡ z=s

z ! s within D:

as

(cid:190)

Then the Taylor coefﬁcients of f(z) satisfy

[zn] f .z/ » s

¡n

(cid:190) .n/
n0.ﬁ/

:

6.1.2. Generalizations of the Tree Function. This function is deﬁned implicitly by
T .z/ D zeT .z/. It appears in problems related to the counting of rooted labeled trees [18],
[13], [29], [28], [21], [46]. A standard application of the Lagrange Inversion Formula
[18], [21], [46] shows that we can write T .z/ as

T .z/ D

X

k‚1

kk¡1
k!

zk :

gy;q .z/ D

X

.y C k/kCq

X

f p.z/ D

kkC p
k!

zk

Following the notation presented in [7], we deﬁne

and

k‚1

(51)
When p D 0 it is convenient to begin the summation for f p.z/ at k D 0 rather than
k D 1, so that the constant coefﬁcient is 1. Therefore, the tree function T .z/ is f¡1.z/.
The two most important identities we need are [7]
D

k‚0

k!

1

zk :

(52)

and

¡ 1

1 ¡ T .z/

zDzT .z/ D T .z/
1 ¡ T .z/
(cid:181)

¶y

gy;0.z/ D

T .z/

1

1 ¡ T .z/
(53)
If we notice that zDz f p.z/ D f pC1.z/, then, by iteration of (52), we can write the
functions f p.z/ as combinations of powers of 1=.1 ¡ T .z//.

z

:

With the help of the Implicit Function Theorem [9], and the functional equation that

deﬁnes T .z/, it is shown in [17] and [7] that
LEMMA 12. The function T .z/ has a dominant singularity at z0 D 1=e, and its singular
expansion at z0 is

T .z/ D 1 ¡ –.z/ C 1

–.z/2 ¡ 11

–.z/3 C 43

–.z/4 C O.–.z/5/;

3

72

540

where –.z/ D p

2 ¡ 2ez.

56

A. Viola and P. V. Poblete

(cid:181)

p
…nnC.s¡1/=2
0.s=2/2.s¡1/=2

Therefore we are able to ﬁnd asymptotic expansions for the family of generating

functions f p.z/ and qq;y.z/ by using Theorem 11, (52), and (53).

If we use the Stirling formula and the binomial theorem, we ﬁnd that [7]

1 C 3s2 ¡ 6s C 2

C O

n! [zn]–¡s .z/ »

24n

(54)
Equation (54) is valid for all values of s, provided we deﬁne 1= 0.¡k/ D 0, for any
positive natural number k.

6.1.3. Multisection of Series. Let A.z/ DP
b > 0 and 0 • p < b. Therefore, we want Ab; p.z/ DP
k‚0 ak zk. Sometimes, we do not want the
generating function of ak, but rather the generating function of abkC p, for some ﬁxed
Let r D e2…i=b, where i D p¡1. That is, r is a primitive bth root of unity. Then we

k‚0 abkC pzbkC p.

:

(cid:181)

¶¶

1
n2

can write [8], [42]

or, equivalently, X

(55)

k‚0

b¡1X
Ab; p.z/ D 1
b
b¡1X

jD0

¡ pj A.r j z/

r

abkC pzbkC p D 1
b

e

jD0

¡.2…i=b/ pj A.e.2…i=b/ j z/:

Therefore, if we know local asymptotic expansions for A.z/ near its dominant singularities,
 then, by (55), we can use singularity analysis to ﬁnd the asymptotics of abkC p,
when k goes to inﬁnity.

6.2. The Exponential Generating Function. We will ﬁrst ﬁnd an exponential generating 
function for E[˜m;bm¡1]. As we shall see, this generating function is related to
some variations of the tree function. Then we use multisection of series to express this
generating function as a combination of known series. Finally, in Section 6.3 we use the
method of singularity analysis [16] to ﬁnd the desired asymptotics.

First we require the following technical lemma.

R vc¡1

dvc¡2 ¢¢¢R v2

.c ¡ 1/!.
PROOF. The proof is by induction on c. If c D 2, then
I .vc¡1/ dvc¡1. Then

v

R v2

v dvc¡1

LEMMA 13. Let I .vc/ DR vc
induction step, we have I .vc/ DR vc
Z vc
I .vc/ D
(cid:181)
X

v

.vc¡1 ¡ v/c¡2

dvc¡1 D .vc ¡ v/c¡1
.c ¡ 1/!
(cid:181)
mX
By (38), and using (7), we can express E[˜m;bm¡1] as follows:
.¡1/bk¡1ki¡1

.c ¡ 2/!
¶

E[˜m;bm¡1] D

bm ¡ 1

v

:

.¡1/i
mi

kD1

i‚2

i

¶

i ¡ 2
bk ¡ 1

v dv1. Then I .vc/ D .vc ¡ v/c¡1=

v dv1 D .v2 ¡ v/. For the

57

¶

(cid:181)

The Analysis of Linear Probing Hashing with Buckets

X
D ¡b
¶
(cid:181)
X

i‚2

mX
.¡1/bk .bk/i¡1
(cid:181)

kD1

i

bm ¡ 1

.¡1/i
.bm/i
mX
More generally, we will ﬁnd the exponential generating function of
.¡1/bk .bk/i¡cCd
¶
(cid:181)

As usual, we omit the subscript b. If we denote

.n C a/n¡i .¡1/i

Ba;c;d;n ·

(56)

kD1

i‚c

n
i

(cid:181)
i ¡ 2
bk ¡ 1
¶

i ¡ c
bk ¡ 1

¶

:

:

Ai;d · .¡1/i

i

bk ¡ 1

;

mX
.¡1/bk .bk/iCd
¶
(cid:181)
X

kD1

then the outer sum in (56) can be rewritten as

and so

(57)

(58)

The ﬁrst goal is to ﬁnd an exponential generating function for Ba;c;d;n:

Ba;c;d;n D

n
i

i‚c

.n C a/n¡i Ai¡c;d

Ba;c;d .z/ D

ˆX

E[˜m;bm¡1] D
X
X
X

n‚c

i‚c

i‚c

D

Ai¡c;d

D

Ai¡c;d

n
i

!

¡b
.bm/bm¡1 B1;2;1;bm¡1:
(cid:181)
¶
.n C a/n¡i Ai¡c;d
X
zn¡i
.n C a/n¡i
X
.n ¡ i /!
.n C i C a/n zn
n!

zi
i!

zi
i!

n‚i

zn
n!

:

n‚0

i‚c

X
(cid:181)
(cid:181)

i‚c
T .z/

z

z

T .z/

D

D

¶a
¶a

Z

¶aCi
X
X

i‚c

zi
i!

z

1

1 ¡ T .z/

1

1 ¡ T .z/

1 ¡ T .z/
T .z/i

Ai¡c;d

i!
T .z/iCc
.i C c/!

:

Ai;d

i‚0

Z vc¡1

Z v1

¢¢¢

0

0

If T .z/ is the tree function and we use (53) with y D i C a, then the inner sum of (58)
can be simpliﬁed as follows:
Ba;c;d .z/ D

Ai¡c;d

(cid:181)

T .z/

(59)

1

Then, if we denote the exponential generating function of Ai;d by Ad .z/, and use
Lemma 13, (59) tells us that, for d > 0,

Ba;c;d .z/ D

(60)

T .z/

z

1

1 ¡ T .z/

T .z/

dvc¡1

0

Ad .v/ dv

(cid:181)

¶a

Therefore, by (60), we have to ﬁnd Ad .z/. By the deﬁnition of Ai;d,

58

(cid:181)
(cid:181)
(cid:181)

D

D

D

Ad .z/ D

D

A. Viola and P. V. Poblete

I .vc¡1/ dvc¡1

Ad .v/ dv

Ad .T .u//Du T .u/ du:

zi
i!
.bk/i¡bk

T .z/

T .z/

T .z/

z

z

z

¶a
¶a
¶a
ˆ
X
X
X

k‚1

i‚0

z

0

0

0

v

1

1

1

T .z/

T .z/

T .z/

Z
Z
Z

Z
Ad .v/ dv
.T .z/ ¡ v/c¡1
.T .z/ ¡ T .u//c¡1

.c ¡ 1/!
.c ¡ 1/!
(cid:181)

1 ¡ T .z/
1 ¡ T .z/
1 ¡ T .z/
X
.¡1/bk .bk/iCd
X
bk ¡ 1
.¡z/i¡bk
X
.i ¡ bk C 1/!
.¡z/i¡1
.bk/i¡1
X

¶!

i‚bk¡1

i‚0

zbk

i!

i

.¡bkz/i

.¡1/i

zbk

.bk/bkCd

k‚1
.bk/bkCd
.bk ¡ 1/!
X
.bk ¡ 1/!
zbk
X
.bk/!
X

.bk/bkCd

zbk
.bk/!
.bk/bkCd
.bk/!

k‚1

k‚1

.ze

k‚1

.bk/bkCde

i!

i‚0
¡bkz

D

k‚1
D ¡ 1
z
D ¡ 1
z
D ¡ 1
z

However, in (60) we do not need Ad .z/ but rather Ad .T .z//. Since T .z/e

¡T .z/ D z then

We have a case of multisection of series. By (51), we are dealing with a b-section of
fd .z/. So, if we deﬁne r · e2…i=b as a bth root of unity, then by (55) for p D 0 we have

¡z/bk :

X

k‚1

Ad .T .z// D ¡ 1
T .z/

.bk/bkCd
.bk/!

zbk :

fd .r j z/:

b¡1X
¶a

jD0

1

1 ¡ T .z/

Ad .T .z// D ¡ 1
bT .z/
(cid:181)
b¡1X

1

Z
b.c ¡ 1/!

T .z/

jD0

z

£

z

.T .z/ ¡ T .u//c¡1 fd .r j u/

Du T .u/
T .u/

du:

0

(61)

(62)

So, (60) can be rewritten as

Ba;c;d .z/ D ¡

Since we are only interested in E[˜m;bm¡1], we only need to deal with (62) in the special
case where a D 1, c D 2, and d D 1, because of (57). However, several other interesting
cases can be derived from (62) that can be studied in a similiar way.

59

‚

The Analysis of Linear Probing Hashing with Buckets

•

‚

•

Since f1.z/ D zDz[zDzT .z/], (52) can be applied twice, and so
¡ 1

f1.z/ D zDz

1

(63)

1 ¡ T .z/

T .z/
1 ¡ T .z/
D

D zDz
T .z/

D zDzT .z/
.1 ¡ T .z//2

Therefore, (61) can be rewritten as

:

.1 ¡ T .z//3
b¡1X

T .r j z/

.1 ¡ T .r j z//3

:

jD0

Finally, by putting (62) and (64) together we obtain

B1;2;1.z/ D ¡ 1
b

A1.T .z// D ¡ 1
bT .z/
¶

(cid:181)
£ b¡1X
(cid:181)

jD0
C 1
b

Z

T .z/

1

z
z

0

1 ¡ T .z/
.1 ¡ T .u//
¶
Z
b¡1X

z

T .z/

z

jD0

0

T .r j u/

.1 ¡ T .r j u//3

Du T .u/
T .u/

du

T .r j u/

.1 ¡ T .r j u//3

Du T .u/
T .u/

du:

¡

¢
.1 ¡ T .r j u//3

r j u

T

T .u/

z

0

r j z

Z
Z
Z

D

du
u
du
u

Z

Moreover, the ﬁrst integral in (65) can be simpliﬁed by using (52):

(66)

z

.1 ¡ T .u//

T .r j u/

.1 ¡ T .r j u//3

Du T .u/
T .u/

du D

0

.1 ¡ T .u//3
Du T .u/
.1 ¡ T .u//2 du
¡ 1:
1
Furthermore, when j D 0, the second integral in (65) can also be simpliﬁed:

.1 ¡ T .r j z//

D

D

r j z

0

0

(64)

(65)

(67)

(68)

Finally, if we substitute (66) and (67) into (65), and use (52), then

z

0

Z
(cid:181)
(cid:181)
(cid:181)

T .z/

Du T .u/

.1 ¡ T .u//3 du D
¶
¶
¶

b¡1X
.1 ¡ T .z//2
Z
b¡1X
1 ¡ T .z/

1

1

z

z

T .z/

z

T .z/

z

jD1

0

¡ 1
2

:

1

2.1 ¡ T .z//2
¶

(cid:181)

T .z/

C 1
b

(cid:181)

z

1

1

¶
.1 ¡ T .z//
¡ 1

.1 ¡ T .r j z//
du

jD1
T .r j u/

.1 ¡ T .r j u//3

u.1 ¡ T .u//

:

B1;2;1.z/ D ¡ 1
2b
¡ 1
b
C 1
b

(cid:181)

¶

T .z/

z

¡ 1
2b

60

A. Viola and P. V. Poblete

p
6.3. Singularity Analysis. For simplicity, we do singularity analysis on ¡bz B1;2;1.z/.
Let r D e2…i=b be a bth root of unity and let z j D r
¡ j =e. Sometimes, depending on the
1 ¡ z=z j , by Lemma 12
context, z j will be also denoted by u j . Then if –j .z/ D 21=2
[7], [17], T .r j z/ admits the singular expansion at z D zj :
(69)
Since T .z/ is analytic at z D z j ; j 6D 0, then by (52)

T .r j z/ D 1 ¡ –j .z/ C 1

.z/ C O.–j .z/3/:

–2
j

3

(70)

T .z/ D T .zj / ¡

T .zj /

2.1 ¡ T .z j //

–j .z/2 C O.–j .z/4/:

First, we concentrate on the integral that appears in (68). For each j, the integrand has
two singularities, one at u j and the other u0.

Around u D u j , by (63) and (69)

f1.r j u/ D

T .r j u/

.1 ¡ T .r j u//3

D –j .u/¡3 C O.–j .u/¡1/:

Moreover, 1=u.1 ¡ T .u// is analytic at u j , because j > 0, and T .u/ has its only singularity 
at u0. Then

1

u.1 ¡ T .u//

D

1

u j .1 ¡ T .u j //

C O.–j .u/2/:

Therefore,

We also knowZ
Z

and

0

f1.r j u/
u.1 ¡ T .u//
Z
Z

du D

0

z

z

–j .u/¡3

u j

–j .u/¡1

z

du D
Then, around z D z j we have
T .r j u/

Z

u j

0

z

.1 ¡ T .r j u//3
(71)
Similarly, around u D u0, we ﬁnd

0

D

–j .u/¡3

u j .1 ¡ T .u j //

C O.–j .u/¡1/:

¡3=2.1 ¡ u=u j /¡3=2
2

u j

du D –j .z/¡1 ¡

z

¡1=2.1 ¡ u=u j /¡1=2
2

0

u j

du D ¡–j .z/ C

p

2

p

2:

du

u.1 ¡ T .u//

D –j .z/¡1
.1 ¡ T .z j //

C O.–j .z//:

and

1

1 ¡ T .u/

D –0.u/¡1 ¡ 2

3

C O.–0.z//

f1.r j u/ D

T .u¡ j /

.1 ¡ T .u¡ j //3

C O.–0.u/2/:

The Analysis of Linear Probing Hashing with Buckets

So we can conclude that, around z D z0,

Z

z

T .r j u/

(72)

.1 ¡ T .r j u//3
Finally, from (70), (71), and (72), we ﬁnd

0

du

u.1 ¡ T .u//

Z

b¡1X

T .z/

jD1

0

z

T .r j u/

.1 ¡ T .r j u//3

du

u.1 ¡ T .u//

The other addends of (68) can be studied by using (69) and (70). So

61

D O.–0.z//:
(cid:181)

T .zj /–j .z/¡1
.1 ¡ T .z j //

D b¡1X

¶
C O.–j .z//

6

jD1
CO.–0.z//:
¡ –0.z/¡1
¶
C O.–0.z// ¡ –0.z/¡1 C O.–0.z//
T .zj /–j .z/¡1
C O.–j .z//
(cid:181)
.1 ¡ T .z j //
T .zj /–j .z/¡1
–0.z/¡1 C b¡1X
.1 ¡ T .z j //

T .z¡ j /–0.z/¡1
¶
.1 ¡ T .z¡ j //
C O.–0.z//
C O.–j .z//

C b¡1X

C O.–0.z//:

T .z¡ j /–0.z/¡1
.1 ¡ T .z¡ j //

¡ 7

jD1

jD1

6

jD1

(73)

2

¡bz B1;2;1.z/ D –0.z/¡2
(cid:181)
C b¡1X
CO.–0.z// ¡ b¡1X

jD1

D –0.z/¡2

2

Once the asymptotic expansion (73) is obtained, we can ﬁnd the asymptotic expansion
of B1;2;1;n. In fact, by (57) we require the asymptotic expansion of ¡bB1;2;1;n=.n C 1/n.
Since z is a factor of the left-hand side of (73), we ﬁnd the asymptotic behavior of
n! [znC1]–0.z/¡s. Since n C 1 D bm, by (73) and (54) we arrive at
r
¶
THEOREM 14.
E[˜m;bm¡1] D 1
2

.1 ¡ T .e.2…i=b/ j¡1//

C b¡1X

T .e.2…i=b/ j¡1/

C 1
24

…
2bm

¡ 7
6

C O

1
bm

r

(cid:181)

bm…

2

:

jD1

Then, by Theorem 9, we obtain our main theorem.

THEOREM 15.

bE[9m;bm¡1] D

p
2…
4

C b¡1X

jD1

.bm/1=2 C 1

3

1

.1 ¡ T .e.2…i=b/ j¡1//

p

2…
48

C

.bm/¡1=2 C O..bm/¡1/:

As a particular case, when b D 1, we ﬁnd

E[9m;m¡1] D
as we already know from [26].

p
2…
4

m1=2 C 1
3

C

p

2…
48

¡1=2 C O.m

¡1/;

m

62

A. Viola and P. V. Poblete

7. A New Approach to the Study of Qm;n;d.
In this section we present a different
approach to the study of the numbers Qm;n;d, by introducing exponential generating
functions. In the process we deﬁne a new family of numbers that satisfy a recurrence
resembling that of the Bernoulli numbers. We feel that this approach may be helpful
in solving problems involving recurrences with truncated generating functions. So even
though no new results related to linear probing hashing with buckets are obtained, we
feel that this approach deserves a special study in its own right.

If A.z/ is the exponential generating function of ak, then we deﬁne

[A.z/]n · nX

ak

zk
k!

:

kD0

(74)

(75)

where Qm;d .z/ DP

(76)

where Td .z/ D P

By (6), Theorem 2 gives the following recurrence relation:

Q0;d .z/ D 1;
Qm;d .z/ D [ez Qm¡1;d .z/]bm¡d¡1

.m ‚ 1/;

Qm;d .z/ D£
(cid:181)

X

¶

n
k

n‚0 Qm;n;d .zn=n!/. The main problem is that we are dealing with
a recurrence that involves truncated generating functions. Our strategy is to ﬁnd an
exponential generating function Td .z/ such that

⁄

Td .z/emz

bm¡d¡1

.m ‚ 1/;

k‚0 Tk;d .zk =k!/, for some coefﬁcients Tk;d to be determined, and
independent of m. Again, b is an implicit parameter. Therefore, by (6) and assuming
(76),

(77)

Qm;n;d D

k‚0

Tk;dmn¡k

.0 • n < bm ¡ d/:

The intuition behind this idea is as follows. From (75), we obtain Qm;d .z/ by multiplying 
the truncated generating function Qm¡1;d .z/ by the series ez and then taking
only the ﬁrst bm ¡ d ¡ 1 terms of it. Moreover, Q0;d .z/ is the ﬁrst term of ez. It is
clear that without any truncations Qm;d .z/ would be emz. However, we have to consider
a correcting factor originated by these truncations and this is the reason for deﬁning
this generating function Td .z/. Then (76) gives a nonrecursive deﬁnition of Qm;d .z/ that
involves the truncated product of two series. The interesting aspect of this approach is
that Td .z/ does not depend on m. Furthermore, the only dependency on m is captured
in the well-known series that converges to emz. This section is devoted to the study of
some properties of the numbers Tk;d.

First, we show the following technical lemma:

LEMMA 16.

T0;d D 1;
Tk;d D 0

.1 • k • b ¡ d ¡ 1/:

The Analysis of Linear Probing Hashing with Buckets

63

PROOF.

Q1;n;d D

(cid:181)

¶

n
k

(cid:181)

¶

X
X
If m D 1, by Theorem 2
Q0;k;d D
¶
(cid:181)
X

k‚0

k‚0

n
k

Q1;n;d D

n
k

k‚0

and so by (77) the numbers Tk;d should satisfy

(78)

Tk;d

.0 • n • b ¡ d ¡ 1/:

k D 0 D 1

.0 • n • b ¡ d ¡ 1/

If n D 0, by (78), T0;d D 1.
up to n D b ¡ d ¡ 1, so is this induction proof.
(cid:181)

We prove the rest of the lemma by induction on n. Note that since (78) is valid only
For n D 1,

(cid:181)

¶

(cid:181)

¶

(cid:181)

¶

¶

Q1;1;d D

1
0

and so T1;d D 0.

Now, if we assume this lemma holds for up to n D k ¡ 1, then for n D k,

T1;d D 1

1
1

1
1

T0;d C
¶
(cid:181)
X

1
0

T1;d D
¶
(cid:181)

1 C
¶
(cid:181)

Tj;d D

k
j

1 C

k
0

k
k

Tk;d D 1

Q1;k;d D

and so Tk;d D 0.

j‚0

Since b.k C d/=bc D 0, for 0 • k • b ¡ d ¡ 1, as a consequence we obtain
(cid:181)
COROLLARY 17.X

”¶k¡ j

¶(cid:181)„

Tj;d D k D 0

.0 • k • b ¡ d ¡ 1/:

k
j

j

k C d
b

The numbers Tk;d satisfy some nice properties. The following can indeed be used as

a deﬁnition.

THEOREM 18.

¶(cid:181)„

(cid:181)

X

j

k
j

k C d
b

”¶k¡ j

Tj;d D k D 0 :

PROOF. When 0 • k • b ¡ d ¡ 1 the theorem holds by Corollary 17.

Let s D bm ¡ d and 0 • r • b ¡ 1, for m ‚ 1. By Theorem 2 we have

(cid:181)

QmC1;sCr;d D sCrX

kD0

s C r
k

(cid:181)

¶

Qm;k;d D s¡1X

kD0

s C r
k

¶

Qm;k;d

64

A. Viola and P. V. Poblete

(cid:181)
since Qm;k;d D 0 if k ‚ s. Then by (77) we obtain

(cid:181)

¶

If we manipulate the right-hand side of (79), and use (8), then

sCrX

kD0

(79)

(cid:181)

s¡1X

s C r
k

(80)

kD0

(cid:181)

sCrX

¶

s C r
k

(81)

kDs

s C r
j

Tj;d

jD0

s C r
k
¶

k
j

jD0

jD0

jD0

jD0

jD0

kD0

kX

s C r
k
¶
¶
¶

s C r
j
s C r
j
s C r
(cid:181)
j
s C r
j
¶

Tk;d .m C 1/sCr¡k D s¡1X
(cid:181)
¶
(cid:181)
Tj;dmk¡ j D s¡1X
(cid:181)
D s¡1X
(cid:181)
D s¡1X
¡ s¡1X
(cid:181)
Tk;d .m C 1/sCr¡k D ¡ s¡1X
(cid:181)
mk D s¡1X
sCr¡ jX
D s¡1X
D rX
D rX
(cid:181)
s C r
s C k

TsCk;d .m C 1/r¡k D ¡ rX

(cid:181)
s C r
(cid:181)
j
s C r
(cid:181)
j
s C r
(cid:181)
r ¡ k
s C r
s C k
¶

s C r ¡ j

s C r
j

kDs¡ j

kD0

kD0

jD0

jD0

jD0

k

kD0

¶

(cid:181)

kX

¶

k
j

Tj;dmk¡ j :
¶

s C r ¡ j
(cid:181)
k ¡ j
s C r ¡ j

jD0

(cid:181)
s¡1X
s¡1¡ jX

kD j

Tj;d

Tj;d

kD0

k
Tj;d .m C 1/sCr¡ j
(cid:181)
¶

sCr¡ jX

Tj;d

kDs¡ j

mk¡ j

¶

mk

¶

mk :

k

s C r ¡ j
¶

s C r ¡ j

(cid:181)

mk :

k

sCr¡ jX

kDs¡ j

Tj;d

¶
¶

mkCs¡ j

mkCs¡ j

s C r ¡ j
s C k ¡ j
s C r ¡ j
¶
r ¡ k
Tj;dmkCs¡ j
¶

Tj;dmkCs¡ j :

¶
¶
¶
¶

(cid:181)
(cid:181)

kD0

rX
rX
(cid:181)
(cid:181)

kD0
s C k
j
s C k
j

Tj;d

Tj;d

s¡1X
s¡1X

jD0

jD0

¶

(cid:181)

s¡1X

jD0

s C k
j

Tj;dmkCs¡ j :

After substituting the variable k by k C s on the left-hand side of (81), we obtain the
identity

rX

¶

(cid:181)
s C r
s C k

(82)

kD0

Now we prove the theorem by induction on r. Note that (82) is valid only if r • b ¡ 1.

So considering together (79) and (80),

By changing the variable k to k C s ¡ j on the right-hand side of (81) and then using (8)
s¡1X
we ﬁnd

¶

(cid:181)

¶

The Analysis of Linear Probing Hashing with Buckets

If r D 0 in (82), then

and so

(cid:181)

65

¶

s
j

Tj;dms¡ j

jD0

Ts;d D ¡ s¡1X
(cid:181)
¶
sX
(cid:181)

jD0

s
j

jD0

Tj;dms¡ j D 0:
¶

jD0

jDs

kD0

(83)

¶

s C i
j

Tj;dmiCs¡ j :

and therefore

(cid:181)

s¡1X

Tj;dmiCs¡ j D 0
¶

(cid:181)

By the induction hypothesis, suppose that, for 0 • i • r ¡ 1,

s C i
j

Tj;dmkCs¡ j

sCiX
Tj;dmiCs¡ j D ¡ sCiX
s C i
j
(cid:181)
¶
s C k
¶
(cid:181)
Tj;dmrCs¡ j C r¡1X
j
s C r
¶
(cid:181)
Tj;dmrCs¡ j C r¡1X
s C k
s C r
¶
(cid:181)
Tj;dmrCs¡ j C r¡1X
s C k
s C r
¶
(cid:181)
Tj;dmrCs¡ j C r¡1X
s C j
s C r
¶
(cid:181)
Tj;dmrCs¡ j C r¡1X
s C j
s C r
(cid:181)
¶
Tj;dmrCs¡ j ¡ sCr¡1X
s C j
s C r
¶
j
jDs
TsC j;d .m C 1/r¡ j
¶
Tj;dmrCs¡ j C r¡1X

(cid:181)
s C r
s C j

¶
(cid:181)
s¡1X
¡ rX
s C r
(cid:181)
D ¡ s¡1X
s C k
jD0
s C r
(cid:181)
D ¡ s¡1X
j
s C r
(cid:181)
D ¡ s¡1X
j
s C r
(cid:181)
D ¡ s¡1X
j
s C r
(cid:181)
D ¡ s¡1X
j
s C r
(cid:181)
D ¡ s¡1X
j
s C r
(cid:181)
C r¡1X
j
s C r
(cid:181)
D ¡ sCr¡1X
s C j
s C r
j

(cid:181)
(cid:181)

So for i D r, we can derive, for the left-hand side of (82),
¶
sCkX
¶
kX
¶
¶
¶
TsC j;d ..m C 1/r¡ j ¡ mr¡ j /
¶

¶
s C k
Tj;dmkCs¡ j
¶
j
s C k
TsC j;dmk¡ j
¶
(cid:181)
r¡1X
s C j
r ¡ j
¶
(cid:181)
r¡ j¡1X
k ¡ j
r ¡ j
k

mk¡ j

TsC j;d

TsC j;d

Tj;dmrCs¡ j
¶

TsC j;d .m C 1/r¡ j :

jD0

jD0

jD0

jD0

jD0

jD0

jD0

jD0

jDs

jD0

kD0

kD0

jD0

kD j

kD0

mk

jD0

jD0

jD0

66

A. Viola and P. V. Poblete

(cid:181)

¶

Tj;dmrCs¡ j

and so

s C r
j

Finally consider (82) and (83) together. Then

TsCr;d D ¡ sCr¡1X
¶
sCrX
Tj;dmrCs¡ j D 0:
(84)
„
„
Since k D s C r D bm ¡ d C r, then, since 0 • r • b ¡ 1,
D m:

s C r
j
”

bm C r

(cid:181)

”

jD0

jD0

D

n C d
b

(85)
Therefore, after putting (84) and (85) together, we have proved the theorem for bm ¡
d • k • b.m C 1/ ¡ d ¡ 1. Since this proof is valid for each m ‚ 1, the theorem
follows.

b

From Theorem 18 we can prove the following important lemma:

LEMMA 19.

(86)

Qm;n;d D

(cid:181)

¶

n
k

X

k‚0

bm¡dCrX

PROOF. By Theorem 18, for 0 • r • b ¡ 1, we have

Tk;dmn¡k
(cid:181)

bm ¡ d C r

.bm ¡ d • n < b.m C 1/ ¡ d/:
¶

Tj;dmbm¡dCr¡ j D 0:

jD0

j

The lemma follows easily, because, by Theorem 2, Qm;bm¡dCr;d D 0, for r ‚ 0.

Therefore, as a consequence we obtain

COROLLARY 20.

(87)

Qm;d .z/ D£

⁄

Td .z/emz

b.mC1/¡d¡1

.m ‚ 1/:

We can now show by induction that these numbers Tk;d indeed satisfy (76). The equality
holds for m D 1 by Lemma 16. If we assume that (76) holds for up to m ¡ 1, then by
(75) and Theorem 2 we have

(88)

Qm;d .z/ D [ez Qm¡1;d .z/]bm¡d¡1
b.m¡1/¡d¡1X

(cid:181)
¶
D [ez[Td .z/e.m¡1/z]b.m¡1/¡d¡1]bm¡d¡1
D

"ˆX

ˆX

!

zi
i!

i‚0

nD0

k‚0

Tk;d .m ¡ 1/n¡k

n
k

!

#

zn
n!

bm¡d¡1

The Analysis of Linear Probing Hashing with Buckets

67

!

#

zn
n!

bm¡d¡1

D

i‚0

"ˆX
D bm¡d¡1X
D bm¡d¡1X
D bm¡d¡1X

nD0

nD0

k‚0

nD0

zi
i!

¶

!
ˆX
(cid:181)
bm¡d¡1X
ˆX
n
¶
(cid:181)
¶X
(cid:181)
k
ˆX
Tk;d .m ¡ 1/ j¡k
(cid:181)
¶
(cid:181)
n¡kX
n ¡ k
!
ˆX
¶
(cid:181)
j

!
Tk;d .m ¡ 1/n¡k
¶

zn
n!
.m ¡ 1/n¡k¡ j

Tk;d

k‚0

k‚0

j‚0

n
j

n
k

j
k

jD0
Tk;dmn¡k

zn
n!

n
k
D [Td .z/emz]bm¡d¡1:

nD0

k‚0

!

zn
n!

Note that Lemma 19 is required at step (88) above, since (87) is not an immediate
consequence of Theorem 2 because the recursive deﬁnition of Qm;n;d is valid only up to
n D bm ¡ d ¡ 1.

From Theorem 18 we can derive a recurrence to generate the numbers Tk;d as follows:

Qm;n;d D bmn ¡ nmn¡1:

dD0

Since we have an identity of two polynomials on m, the theorem follows immediately.


There is also an inverse relation as follows.

THEOREM 22.

Tn;d D

(cid:181)

¶

n
k

X

k‚0

.¡1/n¡k Qm;k;dmn¡k

.n • b.m C 1/ ¡ d ¡ 1/:

A very curious property of these numbers is

THEOREM 21.

k
j

jD0

(cid:181)

b¡1X

T0;d D 1;

Tk;d D ¡ k¡1X

¶(cid:181)„
8<:b
Tk;d D
¶
(cid:181)
Qm;n;d D b¡1X
X
b¡1X

dD0

dD0

k‚0

n
k

¡1
0

b¡1X

dD0

PROOF. By (77) we have

and by Theorem 3 we know

”¶k¡ j

k C d
b

Tj;d

.k > 0/:

.k D 0/;
.k D 1/;
.k > 1/:
(cid:181)
X

k‚0

¶

mn¡k

b¡1X

dD0

Tk;d ;

n
k

Tk;dmn¡k D

68

A. Viola and P. V. Poblete

PROOF. By (76) and Lemma 19,

Qm;d .z/ D [Td .z/emz]b.mC1/¡d¡1

and therefore we ﬁnd the inverse relation

(89)

Td .z/ D [Qm;d .z/e

¡mz]b.mC1/¡d¡1:

After taking the coefﬁcient of zn=n! on both sides of (89), we obtain the claimed
result.

It is interesting to note that this inverse relation is independent of the value of m, as long
as n • b.m C 1/ ¡ d ¡ 1.
X

7.1. The Exponential Generating Function for Tk;0.
formula for T0.z/. By Theorem 18,

In this section we ﬁnd an implicit

”¶k¡ j

ˆX

¶(cid:181)„

!

(cid:181)

(90)
It is convenient to deﬁne k D bs C ‘ with 0 • ‘ • b ¡ 1. We study the left-hand side of
(90):

k‚0

Tj;0

j

D 1:

zk
k!

k
b

k
j

!

ˆX

X

(91)

k‚0

j

j‚0
The inner sum is a b-section of

‘D0

Therefore, if r is a bth root of unity,

b¡1X

X

‘D0

j‚0

k
j

k
b

”¶k¡ j
¶(cid:181)„
(cid:181)
(cid:181)
D b¡1X
X
X
X
D b¡1X

‘D0

s‚0

j

Tj;0

z j
j!

X

k‚ j¡‘

S.z/ D
X

s‚d. j¡‘/=be
z j
j!

Tj;0

1
b

z j
j!

j‚0

Tj;0

X
D b¡1X
X
b¡1X
b¡1X
X

‘D0
D 1
b
D 1
b

nD0

j‚0

nD0

Tj;0

Tj;0

j‚0

nD0

b¡1X
b¡1X
b¡1X

‘D0

‘D0

z j
j!

z j
j!

zk
k!
sbsC‘¡ j Tj;0

¶
Tj;0
bs C ‘
X

j

s‚d. j¡‘/=be

zbsC‘
.bs C ‘/!

.bs/bsC‘¡ j

.z=b/bsC‘¡ j
.bs C ‘ ¡ j /!

:

kkC‘¡ j

.z=b/kC‘¡ j
.k C ‘ ¡ j /!

:

.bs/bsC‘¡ j

.z=b/bsC‘¡ j
.bs C ‘ ¡ j /!

¡n.‘¡ j /S.r nz/

r

X
X

k‚ j¡‘

k‚0

¡n.‘¡ j /

¡n.‘¡ j /

r

r

kkC‘¡ j

.k C j ¡ ‘/k

.r nz=b/kC‘¡ j
.k C ‘ ¡ j /!
.r nz=b/k

:

k!

The Analysis of Linear Probing Hashing with Buckets

69

We now use (53) for the inner sum, and so

b¡1X

X

1
b

nD0

b¡1X
X

‘D0

Tj;0

¡n.‘¡ j /

r

X
.k C j ¡ ‘/k
(cid:181)
b¡1X

k‚0

¡n.‘¡ j /

.r nz=b/k

k!

T .r nz=b/

r nz=b

r

X

z j
j!

Tj;0

j‚0

‘D0

1

1 ¡ T .r nz=b/

1

1 ¡ T .r nz=b/

.bT .r nz=b// j

Tj;0

j!

j‚0
‘D0
..z=b/=T .r nz=b//b ¡ 1
.z=b/=T .r nz=b/ ¡ 1

1

¶ j¡‘
(cid:181)
b¡1X
1 ¡ T .r nz=b/
X

T .r nz=b/

z=b

¶‘

z j
j!

nD0

b¡1X
b¡1X
b¡1X

nD0

nD0

j‚0
D 1
b
D 1
b
D 1
b

Since T .z/ D zeT .z/, then .z=b/=T .r nz=b/ D r
have proved

Tj;0

j‚0

.bT .r nz=b// j

:

j!
¡nb D 1, we

¡ne

¡T .r n z=b/, and since r

THEOREM 23.

(92)

1
b

b¡1X

nD0

T0.bT .r nz=b//
1 ¡ T .r nz=b/

¡bT .r n z=b/ ¡ 1
e
r¡ne¡T .r n z=b/ ¡ 1

D 1:

When b = 1, then (92) simpliﬁes to

T0.T .z// D 1 ¡ T .z/;

and therefore T0;0 D 1, T1;0 D ¡1, and Tk;0 D 0; k ‚ 2, as we already know.

It would be very interesting to study (92) for other values of b.

8. Conclusions. We study the average cost for a successful search of a random element
in a linear probing hash table with buckets of size b. We obtain the generating function
for the Robin Hood heuristic, and then, for a full table, ﬁnd an asymptotic expansion up to
O..bm/¡1/. In Section 7 we introduce a new family of numbers that verify a recurrence
that resembles that of the Bernoulli numbers. These numbers may prove very helpful in
studying recurrences involving truncated generating functions.

As a future work, we would like to ﬁnd an exact expression for the variance, as well
as an asymptotic expansion when the table is full. It would also be interesting to study
the variance for other heuristics such as the standard FCFS or the LCFS approach.

It would be very interesting to understand the numbers Tk;d deﬁned in Section 7 better.
A development of a theory for them may help in studying other recurrences that involve
truncated generating functions. These numbers seem not to appear in The Encyclopedia
of Integer Sequences [44], although some special cases were handled by the Superseeker.
We would like to ﬁnd other problems in which these numbers appear.

Acknowledgments. We thank Bruce Richmond for suggesting several important ideas
related to the asymptotic analysis. We also thank Ian Munro for useful discussions and

70

A. Viola and P. V. Poblete

for his helpful comments on an earlier draft of this paper. We also thank the creators of
Maple [6]. Most of the formulae we have derived in this paper have been checked with
this system. Finally, we would like to thank an anonymous referee for several suggestions
that improved the presentation of this paper.

References

[1]

I. F. Blake and A. G. Konheim. Big buckets are (are not) better! Journal of the Association for Computing
Machinery, 24(4):591–606, October 1977.

[2] A. Broder. Two counting problems solved via string encodings. In A. Apostolico and Z. Galil, editors,
Combinatorial Algorithms on Words, pages 229–240. Volume 12 of NATO Advance Science Institute
Series. Series F: Computer and System Sciences. Springer-Verlag, New York, 1985.

[3] S. Carlsson, J. I. Munro, and P. V. Poblete. On linear probing hashing. Unpublished manuscript, 1987.
[4] P. Celis. Robin Hood Hashing. Ph.D. thesis, Computer Science Department, University of Waterloo,

April 1986. Technical Report CS-86-14.

[5] P. Celis, P.-˚A. Larson, and J. I. Munro. Robin Hood hashing. In Proceedings of the 26th IEEE Symposium

on the Foundations of Computer Science, pages 281–288, 1985.

[6] B. W. Char, K. O. Gedees, G. H. Gonnet, B. L. Leong, M. B. Monagan, and S. M. Watt. MAPLE V

Reference Manual. Springer-Verlag, New York, 1991.

[7] K. J. Compton and C. Ravishankar. Expected deadlock time in a multiprocessing system. Journal of the

Association for Computing Machinery, 42(3):562–583, 1995.

[8] L. Comtet. Advanced Combinatorics. Reidel, Dordrecht, 1974.
[9] M. A. Evgrafov. Analytic Functions. Dover, New York, 1978.
[10] R. Fagin, J. Nievergelt, N. Pippenger, and H. R. Stron. Extendible hashing—a fast access method for

dynamic ﬁles. ACM Transactions on Database Systems, 4(3):315–344, 1979.

[11] P. Flajolet, X. Gourdon, and P. Dumas. Mellin transforms and asymptotics: harmonic sums. Theoretical

Computer Science, 144(1–2):3–58, 1995.

[12] P. Flajolet, P. Grabner, P. Kirschenhofer, and H. Prodinger. On Ramanujan’s Q-function. Journal of

Computational and Applied Mathematics, 58(1):103–116, 1995.

[13] P. Flajolet, D. E. Knuth, and B. Pittel. The ﬁrst cycles in an evolving graph. Discrete Mathematics,

75:167–215, 1989.

[14] P. Flajolet and A. M. Odlyzko. The average height of binary trees and other simple trees. Journal of

Computer and System Sciences, 25:171–213, 1982.

[15] P. Flajolet and A. M. Odlyzko. Random mapping statistics. In J.-J. Quisquater and J. Vandewalle,
editors, Advances in Cryptology, pages 329–354. Volume 434 of Lecture Notes in Computer Science.
Springer-Verlag, Berlin, 1990. Proceedings of EUROCRYPT ’89, Houtalen, Belgium, April 1989.

[16] P. Flajolet and A. M. Odlyzko. Singularity analysis of generating functions. SIAM Journal on Discrete

Mathematics, 3(2):216–240, 1990.

[17] P. Flajolet and R. Sedgewick. The average case analysis of algorithms: complex asymptotics and generating 
functions. Research Report 2026, INRIA, Sept. 1993.

[18] P. Flajolet and R. Sedgewick. The average case analysis of algorithms: counting and generating functions.

Research Report 1888, INRIA, April 1993.

[19] G. H. Gonnet and R. Baeza-Yates. Handbook of Algorithms and Data Structures, second edition,

Addison-Wesley, Reading, MA, 1991.

[20] G. H. Gonnet and J. I. Munro. The analysis of linear probing sort by the use of a new mathematical

transform. Journal of Algorithms, 5:451–470, 1984.
I. P. Gouldon and D. M. Jackson. Combinatorial Enumeration. Wiley, New York, 1983.

[21]
[22] R. L. Graham, D. E. Knuth, and O. Patashnik. Concrete Mathematics. Addison-Wesley, Reading, MA,

1989.

[23] P. Jacquet and M. R´egnier. Trie partitioning process: limiting distributions. In P. Franchi-Zanetacchi,
editor, Proceedings of the 11th Colloquium on Trees in Algebra and Programming, Nice, March 1986,
pages 196–210. Volume 214 of Lecture Notes in Computer Science. Springer-Verlag, Berlin, 1986.

The Analysis of Linear Probing Hashing with Buckets

71

[24] D. E. Knuth. The Art of Computer Programming, Volume 1: Fundamental Algorithms. Addison-Wesley,

Reading, MA, 1968.

[25] D. E. Knuth. The Art of Computer Programming, Volume 2: Seminumerical Algorithms. AddisonWesley,
 Reading, MA, 1969.

[26] D. E. Knuth. The Art of Computer Programming, Volume 3: Sorting and Searching. Addison-Wesley,

Reading, MA, 1973.

[27] D. E. Knuth. Analysis of optimum chaching. Journal of Algorithms, 6:181–199, 1985.
[28] D. E. Knuth, S. Janson, T. Luczak, and B. Pittel. The birth of giant component. Random Structures and

Algorithms, 4:233–358, 1993.

[29] D. E. Knuth and B. Pittel. A recurrence related to trees. Proceedings of the American Mathematical

Society, 105:335–349, 1989.

[30] D. E. Knuth and G. S. Rao. Activity in an interleaved memory. IEEE Transactions on Computers,

24:943–944, 1975.

[31] D. E. Knuth and A. Sch¨onage. The expected linearity of a simple equivalence algorithm. Theoretical

Computer Science, 6:281–315, 1978.

[32] A. G. Konheim and B. Weiss. An occupancy discipline and applications. SIAM Journal on Applied

Mathematics, 6(14):1266–1274, 1966.

[33] H. Mendelson. Analysis of linear probing with buckets. Information Systems, 8(3):207–216, 1983.
[34] H. Mendelson and U. Yechiali. A new approach to the analysis of linear probing schemes. Journal of

[35]

the Association for Computing Machinery, 27:474–483, 1980.
J. W. Moon. Counting labelled trees. In Canadian Mathematical Monographs, volume 1. Canadian
Mathematical Congress, 1970.

[36] A. M. Odlyzko. Periodic scillations of coefﬁcients of power series that satisfy functional equations.

Advances in Mathematics, 44:180–205, 1982.

[37] F. W. J. Olver. Asymptotics and Special Functions. Academic Press, New York, 1974.
[38] W. W. Peterson. Addressing for random-access storage. IBM Journal of Research and Development,

1(2):130–146, 1957.

[39] P. V. Pobelete, A. Viola, and J. I. Munro. The Diagonal Poisson Transform and its application to the

analysis of a hashing scheme. Random Structures & Algorithms, 10(1–2):221–255, 1997.

J. Riordan. Combinatorial Identities. Wiley, New York, 1968.

[40] S. Ramanujan. Question 294. Journal of the Indian Mathematical Society, 3:128, 1911.
[41] S. Ramanujan. On question 294. Journal of the Indian Mathematical Society, 4:151–152, 1912.
[42]
[43] R. Sedgewick. Mathematical analysis of combinatorial algorithms. In G. Louchard and G. Latouche,
editors, Probability Theory and Computer Science, pages 123–205. Academic Press, New York, 1983.
[44] N. J. A. Sloane and S. Plouffe. The Encyclopedia of Integer Sequences. Academic Press, New York,

1995.

[45] A. Viola. Analysis of Hashing Algorithms and a New Mathematical Transform. Ph.D. thesis, Computer

Science Department, University of Waterloo, November 1995. Technical Report CS-95-50.

[46] H. S. Wilf. generatingfunctionology. Academic Press, New York, 1994.

