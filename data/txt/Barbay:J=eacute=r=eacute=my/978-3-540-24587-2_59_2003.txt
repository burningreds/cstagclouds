Deterministic Algorithm for the t-Threshold Set

Problem

J´er´emy Barbay1 and Claire Kenyon2

1 Department of Computer Science,

University of British Columbia,

201-2366 Main Mall, Vancouver, B.C.

V6T 1Z4 Canada

2 Laboratoire d’Informatique (LIX),

´Ecole Polytechnique,

91128 Palaiseau Cedex - France

Abstract. Given k sorted arrays, the t-Threshold problem, which is
motivated by indexed search engines, consists of ﬁnding the elements
which are present in at least t of the arrays. We present a new
deterministic algorithm for it and prove that, asymptotically in the
sizes of the arrays, it is optimal in the alternation model used to study
adaptive algorithms. We deﬁne the Opt-Threshold problem as ﬁnding
the smallest non empty t-threshold set, which is equivalent to ﬁnd the
largest t such that the t-threshold set is non empty, and propose a naive
algorithm to solve it.

Keywords: Adaptive algorithm, t-threshold-set, opt-threshold set.

1 Introduction

We consider search engines where queries are composed of k keywords, and
where each keyword is associated to a sorted array of references to entries in
some database. The answer to a t-threshold query is the set of references which
appear in at least t of the k arrays [3]. The answer to an opt-threshold query is
the non-empty set of references maximizing the number of arrays they appears
in. The algorithms studied are in the comparison model, where comparisons are
the only operations permitted on references.

The analysis of the complexity of those problems in the worst case, when only
the number of arrays k and their sizes n1, . . . , nk are ﬁxed, is trivial and does
not permit to distinguish between most algorithms. We propose a ﬁner analysis
using a diﬃculty measure δ on the instances: we analyze the complexity of the
problem in the worst case among instances of same number of arrays, size of
arrays, and diﬃculty. This type of analysis was already performed on adaptive
algorithms for the union problem [6], intersection problem [3,6], several sorting
problems [5,8,11], and for the computation of the convex hull [9].

The t-threshold problem has been studied before, as a generalization of the
intersection problem, but the algorithm was complicated and of complexity

T. Ibaraki, N. Katoh, and H. Ono (Eds.): ISAAC 2003, LNCS 2906, pp. 575–584, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

576

J. Barbay and C. Kenyon

(cid:1)

O(tδ log k log
i ni), which is not optimal because of the log k factor, and because 
when the arrays are of very diﬀerent sizes the complexity increases more
quickly than the lower bound [3]. Moreover this type of query is a parametrized
relaxation of the intersection, and is not quite practical for general purpose
search engines.

(cid:1)k

To answer those problems, in section 2, we give a simpler and better deterministic 
algorithm for t-Threshold, with time complexity O(δ
i=1 log(ni/δ+1) +
δk log(k − t + 1)), which is, asymptotically in the sizes of the arrays, optimal for
t ≥ k/2 (no lower bound is known for t < k/2). We also discuss the notion of the
opt-threshold set of an instance, deﬁned as the smallest non-empty threshold set,
or identically as the non empty t-threshold set with maximal t. This would permit 
opt-threshold queries, which seem more practical than conjunctive or even
t-threshold queries for a search engine. Finally in section 3, we present some
perspectives for the domain, and especially address the issue of the practical
testing of those algorithms.

2 t-Threshold
Let U be a totally ordered space. Let −∞ and +∞ be such that all elements of
U are strictly larger than −∞ and strictly smaller than +∞.
Deﬁnition 1 (Instance, Signature, t-Threshold Set [3, deﬁnition 4.1]).
An instance consists of k sorted arrays A1, . . . , Ak of sizes n1, . . . , nk, whose
elements come from U. Its signature is (k, n1, . . . , nk). An instance has signature
i ≤ ni
(cid:2)
at most (k, n1, . . . , nk) if it has signature (k
for all i ≤ k
(cid:2). The output of the t-Threshold problem is the set Tt(A1, . . . , Ak)
containing exactly the elements present in at least t arrays.

(cid:2)
(cid:2)
k(cid:1)) with k
1, . . . , n
, n

(cid:2) ≤ k and n

(cid:2)

Note that the 1-threshold set is the union of the arrays and that the k-threshold
set is their intersection.

Example 1. For instance the following set of arrays forms an instance of signature
(4, 5, 7, 6, 5) where the ﬁrst number corresponds to the number of arrays, and
the following numbers correspond to the sizes of those arrays. The 1-threshold
set is the union of all the arrays; the 2-threshold set is {3, 4, 5, 7, 10, 11}; the
3-threshold set is {5}; and the 4-threshold set is the intersection and is empty.

A = 3 4 5 6 7
B = 5 6 7 10 11 12 13
C = 0 1 2 10 11 14
D = 3 4 5 8 9

2.1 Algorithm

The algorithm that we propose here for the t-threshold set uses an unbounded
search algorithm, which looks for an element x in a sorted array A of unknown
size, starting at position init. It returns a value p such that A[p − 1]<x≤A[p],

