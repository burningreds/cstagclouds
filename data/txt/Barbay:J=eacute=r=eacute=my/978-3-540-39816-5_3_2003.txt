Optimality of Randomized Algorithms

for the Intersection Problem

J´er´emy Barbay

Department of Computer Science, University of British Columbia,

201-2366 Main Mall, Vancouver, B.C. V6T 1Z4 Canada

jeremy@cs.ubc.ca

Abstract. The “Intersection of sorted arrays” problem has applications in indexed 
search engines such as Google. Previous works propose and compare deterministic 
algorithms for this problem, and offer lower bounds on the randomized
complexity in different models (cost model, alternation model).
We reﬁne the alternation model into the redundancy model to prove that randomized 
algorithms perform better than deterministic ones on the intersection problem.
 We present a randomized and simpliﬁed version of a previous algorithm,
optimal in this model.
Keywords: Randomized algorithm, intersection of sorted arrays.

1 Introduction

We consider search engines where queries are composed of several keywords, each
one being associated with a sorted array of references to entries in a database. The
answer to a conjunctive query is the intersection of the sorted arrays corresponding to
each keyword. Most search engines implement these queries. The algorithms are in the
comparison model, where comparisons are the only operations permitted on references.
The intersection problem has been studied before [1, 4, 5], but the lower bounds
apply to randomized algorithms, when some deterministic algorithms are optimal. Does
it mean that no randomized algorithms can do better than a deterministic one on the
intersection problem?

In this paper we present a new analysis of the intersection problem, called the redundancy 
analysis, more precise and which permits to prove that for the intersection
problem, randomized algorithms perform better than deterministic algorithms in term
of the number of comparisons. The redundancy analysis also makes more natural assumptions 
on the instances: the worst case in the alternation analysis is such that an
element considered by the algorithm is matched by almost all of the keywords, while in
the redundancy analysis the maximum number of keywords matching such an element
is parametrized by the measure of difﬁculty.

We deﬁne formally the intersection problem and the redundancy model in Section 2.
We give in Section 3 a randomized algorithm inspired by the small adaptive algorithm,
 and give its complexity in the redundancy model, for which we prove it is optimal
in Section 4. We answer the question of the utility of randomized algorithm for the intersection 
problem in Section 5: no deterministic algorithm is optimal in the redundancy
model. We list in Section 6 several points on which we will try to extend this work.

A. Albrecht and K. Steinh¨ofel (Eds.): SAGA 2003, LNCS 2827, pp. 26–38, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

Optimality of Randomized Algorithms for the Intersection Problem

27

2 Deﬁnitions

In the search engines we consider, queries are composed of several keywords, and each
keyword is associated to a sorted array of references. The references can be, for instance,
 addresses of web pages, but the only important thing is that there is a total order
on them, i.e. all unequal pair of references can be ordered. To study the problem of
intersection, we hence consider any set of arrays on a totally ordered space to form an
instance [1]. To perform any complexity analysis on such instances, we need to deﬁne
a measure representing the size of the instance. We deﬁne for this the signature of an
instance.

Deﬁnition 1 (Instance and Signature). We consider U to be a totally ordered space.
An instance is composed of k sorted arrays A1, . . . ,Ak of positive sizes n1, . . . ,nk and
composed of elements from U.

The signature of such an instance is (k,n1, . . . ,nk). An instance is “of signature at
most” (k,n1, . . . ,nk) if it can be completed by adding arrays and elements to form an
instance of signature exactly (k,n1, . . . ,nk).

Example 1. Consider the instance of Figure 1, where the ordered space is the set of
positive integers: it has signature (7,1,4,4,4,4,4,4)

A = 9
B = 1 2 9 11
C = 3 9 12 13
D = 9 14 15 16
E = 4 10 17 18
F = 5 6 7 10
G = 8 10 19 20

A :
B : 1 2
C :
D :
E :
F :
G :

3

4

9
9
9
9

11

12 13

5 6 7

8

10
10
10

14 15 16

17 18

19 20

Fig. 1. An instance of the intersection problem: on the left is the array representation of the
instance, on the right is a representation which expresses better the structure of the instance,
where the abscissa of elements are equal to their value.

Deﬁnition 2 (Intersection). The Intersection of an instance is the set A1 ∩ . . . ∩ Ak
composed of the elements that are present in k distinct arrays.
Example 2. The intersection A∩ B∩ . . .∩ G of the instance of Figure 1 is empty as no
element is present in more than 4 arrays.

Any algorithm (even non-deterministic) computing the intersection must certify the
correctness of the output: ﬁrst, it must certify that all the elements of the output are
indeed elements of the k arrays; second, it must certify that no element of the intersection 
has been omitted by exhibiting some proof that there can be no other elements in
the intersection than those output. We deﬁne the partition-certiﬁcate as a proof of the
intersection.

