Succinct Encoding of Permutations: Applications to Text Indexing

S 915

A third direction for future work is to design succinct
representations of dynamic trees and graphs. There have
been some preliminary results by Munro et al. [10] on
succinctly representing dynamic binary trees, which have
been further improved by Raman and Rao [12]. It may
be possible to further improve these results, and there are
other related dynamic data structures that do not have succinct 
representations.

Experimental Results
Geary et al. [4] have engineered the implementation of
succinct ordinal trees based on balanced parentheses. They
have performed experiments on large XML trees. Their
implementation uses orders of magnitude less space than
the standard pointed-based representation, while supporting 
tree traversal operations with only a slight slowdown.

11. Munro, J.I., Rao, S.S.: Succinct representations of functions. In:
Díaz, J., Karhumäki, J., Lepistö, A., Sannella, D. (eds.): Proceedings 
of the 31st International Colloquium on Automata, Languages 
and Programming, pp. 1006–1015. Springer, Heidelberg 
(2004)

12. Raman, R., Rao, S. S.: Succinct dynamic dictionaries and trees.
In: Baeten, J.C.M., Lenstra, J.K., Parrow J., Woeginger, G.J. (eds.)
Proceedings of the 30th International Colloquium on Automata,
 Languages and Programming, pp. 357–368. Springer,
Heidelberg (2003)

13. Sadakane, K.: Compressed suffix trees with full functionality.
Theory Comput. Syst. (2007) Online first. http://dx.doi.org/10.
1007/s00224-006-1198-x

14. Weiner, P.: Linear pattern matching algorithms. In: Proceedings 
of the 14th Annual IEEE Symposium on Switching and Automata 
Theory, pp. 1–11. IEEE, New York (1973)

15. Yannakakis, M.: Four pages are necessary and sufficient for planar 
graphs. In: Hartmanis, J. (ed.) Proceedings of the 18th Annual 
ACM-SIAM Symposium on Theory of Computing, pp. 104–
108. ACM, New York (1986)

Cross References
(cid:2) Compressed Suﬃx Array
(cid:2) Compressed Text Indexing
(cid:2) Rank and Select Operations on Binary Strings
(cid:2) Succinct Encoding of Permutations: Applications to

Text Indexing
(cid:2) Text Indexing

Recommended Reading
1. Bernhart, F., Kainen P.C.: The book thickness of a graph.

J. Comb. Theory B 27(3), 320–331 (1979)

2. Chiang, Y.-T., Lin, C.-C., Lu, H.-I.: Orderly spanning trees with applications.
 SIAM J. Comput. 34(4), 924–945 (2005)

3. Chuang, R.C.-N., Garg, A., He, X., Kao, M.-Y., Lu, H.-I.: Compact
encodings of planar graphs via canonical orderings and multiple 
parentheses. Comput. Res. Repos. cs.DS/0102005 (2001)

4. Geary, R.F., Rahman, N., Raman, R., Raman, V.: A simple optimal
representation for balanced parentheses. Theor. Comput. Sci.
368(3), 231–246 (2006)

5. Grossi, R., Gupta, A., Vitter J.S.: High-order entropy-compressed
text indexes. In: Farach-Colton, M. (ed) Proceedings of the 14th
Annual ACM-SIAM Symposium on Discrete Algorithms, SIAM,
pp. 841–850, Philadelphia (2003)

6. Jacobson, G.: Space-efficient static trees and graphs. In: Proceedings 
of the 30th Annual IEEE Symposium on Foundations
of Computer Science, IEEE, pp. 549–554, New York (1989)

7. Lu, H.-I., Yeh, C.-C.: Balanced parentheses strike back. Accepted

to ACM Trans. Algorithms (2007)

8. Munro, J.I., Raman V.: Succinct representation of balanced
parentheses and static trees. SIAM J. Comput. 31(3), 762–776
(2001)

9. Munro, J.I., Raman, V., Rao, S.S.: Space efficient suffix trees. J. Algorithms 
39(2), 205–222 (2001)

10. Munro, J.I., Raman, V., Storm, A.J.: Representing dynamic binary
trees succinctly. In: Rao Kosaraju, S. (ed.) Proceedings of the
12th Annual ACM-SIAM Symposium on Discrete Algorithms,
SIAM, pp. 529–536, Philadelphia (2001)

Succinct Encoding of Permutations:
Applications to Text Indexing
2003; Munro, Raman, Raman, Rao
JÉRÉMY BARBAY1, J. IAN MUNRO2
1 Department of Computer Science, University of Chile,

Santiago, Chile

2 Cheriton School of Computer Science, University

of Waterloo, Waterloo, ON, Canada

Problem Definition
A succinct data structure for a given data type is a representation 
of the underlying combinatorial object that uses
an amount of space “close” to the information theoretic
lower bound together with algorithms that support operations 
of the data type “quickly.” A natural example is
the representation of a binary tree [5]: an arbitrary binary
tree on n nodes can be represented in 2n + o(n) bits while
supporting a variety of operations on any node, which include 
ﬁnding its parent, its left or right child, and return-
(cid:7)
(cid:8)
ing the size of its subtree, each in O(1) time. As there are
2n
/(n + 1) binary trees on n nodes and the logarithm of
n
this term1 is 2n (cid:2) o(n), the space used by this representation 
is optimal to within a lower-order term.

In the applications considered in this entry, the principle 
concern is with indexes supporting search in strings
and in XML-like documents (i. e., tree-structured objects
with labels and “free text” at various nodes). As it happens,
not only labeled trees but also arbitrary binary relations

1All logarithms are taken to the base 2. By convention, the iterated

logarithm is denoted by lg(i) n; hence, lg lg lg x is lg(3) x.

916 S

Succinct Encoding of Permutations: Applications to Text Indexing

Succinct Encoding of Permutations: Applications to Text Indexing, Figure 1
A permutation on f1; : : : ; 8g, with two cycles and three back pointers. The full black lines correspond to the permutation, the dashed
lines to the back pointers and the gray lines to the edges traversed to compute (cid:7)(cid:2)1(3)

over ﬁnite domains are key building blocks for this. Preprocessing 
such data structures so as to be able to perform
searches is a complex process requiring a variety of subordinate 
structures.
A basic building block for this work is the representation 
of a permutation of the integers f0; : : : ; n(cid:2)1g, denoted 
by [n]. A permutation (cid:13) is trivially representable in
ndlg ne bits which is within O(n) bits of the information
theoretic bound of lg(n!). The interesting problem is to
support both the permutation and its inverse: namely, how
to represent an arbitrary permutation (cid:13) on [n] in a succinct 
manner so that (cid:13) k(i) ((cid:13) iteratively applied k times
starting at i, where k can be any integer so that (cid:13)(cid:2)1 is the
inverse of (cid:13)) can be evaluated quickly.

Key Results
Munro et al. [7] studied the problem of succinctly representing 
a permutation to support computing (cid:13) k(i)
quickly. They give two solutions: one supports the operations 
arbitrarily quickly, at the cost of extra space; the other
uses essentially optimal space at the cost of slower evaluation.

Given an integer parameter t, the permutations (cid:13) and
(cid:13)(cid:2)1 can be supported by simply writing down (cid:13) in an array 
of n words of dlg ne bits each, plus an auxiliary array
S of at most n/t shortcuts or back pointers. In each cycle
of length at least t, every tth element has a pointer t steps
back. (cid:13)(i) is simply the ith value in the primary structure,
 and (cid:13)(cid:2)1(i) is found by moving forward until a back
pointer is found and then continuing to follow the cycle
to the location that contains the value i. The trick is in the
encoding of the locations of the back pointers: this is done
with a simple bit vector B of length n, in which a 1 indicates
that a back pointer is associated with a given location. B is
augmented using o(n) additional bits so that the number of
1’s up to a given position and the position of the rth 1 can

be found in constant time (i. e., using the rank and select
operations on binary strings [8]). This gives the location of
the appropriate back pointer in the auxiliary array S.

For example, the permutation (cid:13) = (4; 8; 6; 3; 5; 2; 1; 7)
consists of two cycles, (1; 4; 3; 6; 2; 8; 7) and (5) (Fig. 1).
For t = 3, the back pointers are cycling backward between
1, 6 and 7 in the largest cycle (there are none in the other
because it is smaller than t). To ﬁnd (cid:13)(cid:2)1(3), follow (cid:13) from
3 to 6, observe that 6 is a back pointer because it is marked
by the second 1 in B, and follow the second value of S to
1, then follow (cid:13) from 1 to 4 and then to 3: the predecessor
of 3 has been found. As there are back pointers every t elements 
in the cycle, ﬁnding the predecessor requires O(t)
memory accesses.

For arbitrary i and k, (cid:13) k(i) is supported by writing 
the cycles of (cid:13) together with a bit vector B marking 
the beginning of each cycle. Observe that the cycle
representation itself is a permutation in “standard form,”
call it (cid:3). For example, the permutation (cid:13) = (6; 4; 3; 5; 2; 1)
has three cycles f(1; 6); (3); (2; 5; 4)g and is encoded by
the permutation (cid:3) = (1; 6; 3; 2; 5; 4) and the bit vector
B = (1; 0; 1; 1; 0; 0). The ﬁrst task is to ﬁnd i in the rep-
resentation: it is in position (cid:3)(cid:2)1(i). The segment of the
representation containing i is found through the rank and
select operations on B. From this (cid:13) k(i) is easily determined 
by taking k modulo the cycle length and moving
that number of steps around the cycle starting at the position 
of i.

Other than the support of the inverse of (cid:3), all operations 
are performed in constant time; hence, the total time
depends on the value chosen for t.

Theorem 1 (Munro et al. [7]) There is a representation 
of an arbitrary permutation (cid:13) on [n] using at most
(1+ ")n lg n+ O(n) bits that can support the operation (cid:13) k()
in time O(1/"), for any constant " less than 1 and for any
arbitrary value of k.

Succinct Encoding of Permutations: Applications to Text Indexing

S 917

It is not diﬃcult to prove that this technique is optimal
under a restricted model of a pointer machine. So, for example,
 using O(n) extra bits (i. e., O(n/ lg n) extra words),
˝(lg n) time is necessary to compute both (cid:13) and (cid:13)(cid:2)1.
However, using another approach Munro et al. [7] demonstrated 
that the lower bound suggested does not hold in the
RAM model. The approach is based on the Benes network,
a communication network composed of switches that can
be used to implement permutations.

Theorem 2 (Munro et al. [7]) There is a representation 
of an arbitrary permutation (cid:13) on [n] using at most
dlg(n!)e + O(n) bits that can support the operation (cid:13) k() in
time O(lg n/ lg(2) n).

While this data structure uses less space than the other,
it requires more time for each operation. It is not known
whether this time bound can be improved using only O(n)
“extra space.” As a consequence, the ﬁrst data structure is
used in all applications. Obviously, any other solution can
be used, potentially with a better time/space trade-oﬀ.

Applications
The results on permutations are particularly useful for two
lines of research: ﬁrst in the extension of the results on permutation 
to arbitrary integer functions; and second, and
probably more importantly, in encoding and indexing text
strings, which themselves are used to encode sparse binary
relations and labeled trees. This section summarizes some
of these results.

Functions
Munro and Rao [9] extended the results on permutations
to arbitrary functions from [n] to [n]. Again f k(i) indicates 
the function iterated k times starting at i. If k is
nonnegative, this is straightforward. The case in which k
is negative is more interesting as the image is a (possibly 
empty) multiset over [n] (see Fig. 2 for an example).
Whereas (cid:13) is a set of cycles, f can be viewed as a set of
cycles in which each node is the root of a tree. Starting at
any node (element of [n]), the evaluation moves one step
toward the root of the tree or one step along a cycle (e. g.,
f (8) = 7; f (10) = 11). Moving k steps in a positive direction 
is straightforward; one moves up a tree and perhaps
around a cycle (e. g. f 5(9) = f 3(9) = 3) When k is negative 
one must determine all nodes of distance k from the
starting location, i, in the direction towards the leaves of
the trees (e. g., f (cid:2)1(13) = f1; 11; 12g, f (cid:2)1(3) = f4; 5g). The
key technical issue is to run across succinct tree representations 
picking oﬀ all nodes at the appropriate levels.

Theorem 3 (Munro and Rao [9]) For any ﬁxed ", there
is a representation of a function f : [n] ! [n] that takes
(1+")n lg n+O(1) bits of space, and supports f k(i) in O(1+
j f k(i)j) time, for any integer k and for any i 2 [n].

Text Strings
Indexing text strings to support the search for patterns is
an important general issue. Barbay et al. [2] considered
“negative” searches, along the following lines.
Deﬁnition 1 Consider a string S[1; n] over the alphabet
[l]. A position x 2 [n] matches a literal ˛ 2 [l] if S[x] = ˛.
A position x 2 [n] matches a literal ¯˛ if S[x] ¤ ˛. The set
f¯1; : : : ; ¯lg is denoted by [¯l].
Given a string S of length n over an alphabet of size l, for
any position x in the string, any literal ˛ 2 [l] [ [¯l] and
any integer r, consider the following operators:
(cid:7) string_rankS(˛; x): the number of occurrences of
˛ in S[1::x];
(cid:7) string_selectS(˛; r): the position of the rth occurrence 
of ˛ in S, or 1 if none exists;
(cid:7) string_accessS(x): the label S[x];
(cid:7) string_predS(˛; x): the last occurrence of ˛ in
(cid:7) string_succS(˛; r): the ﬁrst occurrence of ˛ in

S[1 : : : x], or 1 if none exists;
S[x : : :], or 1 if none exists.

Golynski et al. [4] observed that a string of length l on alphabet 
[l] can be encoded and indexed by a permutation
on [l] (which for each label lists the positions of all its oc-
currences) together with a bit vector of length 2l (which
signals the end of each sublist of occurrences corresponding 
to a label). For instance, the string ACCA on alphabet 
fA; B; C; Dg is encoded by the permutation (1; 4; 2; 3)
and the bit vector (0; 0; 1; 1; 1; 0; 0; 1). Golynski et al. were
then able to support the operators rank, select and access
in time O(lg(2) n), by using a value of t = lg(2) n in the encoding 
of permutation of Theorem 1.

This encoding achieves fast support for the search operators 
deﬁned above restricted to labels (not literals), with
a small overhead in space, by integrating the encodings of
the text and the indexing information. Barbay et al. [2] extended 
those operators to literals, and showed how to separate 
the succinct encoding of the string S, in a manner that
assumes we can access a word of S in a ﬁxed time bound,
and a succinct index containing auxiliary information useful 
to support the search operators deﬁned above.
Theorem 4 (Barbay et al. [2]) Given access to a label
in the raw encoding of a string S 2 [l]n in time f (n, l),
there is a succinct index using n(1 + o(lg l)) bits that supports 
the operators string_rankS, string_predS

918 S

Succinct Encoding of Permutations: Applications to Text Indexing

Succinct Encoding of Permutations: Applications to Text Indexing, Figure 2
A function on f1; : : : ; 13g, with three cycles and two nontrivial tree structures

and string_succS for any literal ˛ 2 [l] [ [¯l] in
O(lg(2) l (cid:3) lg(3) l (cid:3) ( f (n; t) + lg(2) l)) time, and the operator 
string_selectS for any label ˛ 2 [l] in O(lg(3) l (cid:3)
( f (n; t) + lg(2) l)) time.
The separation between the encoding of the string or of
an XML-like document and its index has two main advan-
tages:
1. The string can now be compressed and searched at the
same time, provided that the compressed encoding of
the string supports the access in reasonable time, as
does the one described by Ferragina and Venturini [3].
2. The operators can be supported for several orderings
of the string, for instance, induced by distinct traversals 
of a labeled tree, with only a small cost in space.
It is important, for instance, when those orders correspond 
to various traversals of a labeled structure, such
as the depth-ﬁrst and Depth First Uniary Degree Sequence 
(DFUDS) traversals of a labeled tree [2].

Binary Relations
Given two ordered sets of sizes l and n, denoted by [l] and
[n], a binary relation R between these sets is a subset of
their Cartesian product, i. e., R (cid:14) [l](cid:4)[n]. It is used, for
instance, to represent the relation between a set of labels
[l] and a set of objects [n].

Although a string can be seen as a particular case of
a binary relation, where the objects are positions and exactly 
one label is associated with each position, the search
operations on binary relations are diverse, including operators 
on both the labels and the objects. For any literal ˛,
object x and integer r, consider the following operators:
(cid:7) label_rankR(˛; x): the number of objects labeled ˛
(cid:7) label_selectR(˛; r): the position of the rth object
(cid:7) label_nbR(˛), the number of objects with label ˛;

preceding or equal to x;
labeled ˛ if any, or 1 otherwise;

ated with object x preceding or equal to label ˛;
object x, if any, or 1 otherwise;

(cid:7) object_rankR(x; ˛): the number of labels associ-
(cid:7) object_selectR(x; r): the rth label associated with
(cid:7) object_nbR(x): the number of labels associated with
(cid:7) table_accessR(x; ˛): checks whether object x is

object x;

associated with label ˛.

Barbay et al. [1] observed that such a binary relation, consisting 
of t pairs from [n] (cid:4) [l], can be encoded as a text
string S listing the t labels, and a binary string B indicating
how many labels are associated with each object. So search
operations on the objects associated with a ﬁxed label are
reduced to a combination of operators on text and binary
strings. Using a more direct reduction to the encoding of
permutations, the index of the binary relation can be separated 
from its encoding, and even more operators can be
supported [2].

Theorem 5 (Barbay et al. [2]) Given support
for
object_accessR in f (n; l ; t) time on a binary relation
formed by t pairs from an object set [n] and a label set [l],
there is a succinct index using t(1 + o(lg l)) bits that supports 
label_rankR for any literal ˛ 2 [l] [ [¯l] and
label_accessR for any label ˛ 2 [l] in O(lg(2) l (cid:3)lg(3) l (cid:3)
( f (n; l ; t) + lg(2) l)) time, and label_selectR for any
label ˛ 2 [l] in O(lg(3) l (cid:3) ( f (n; l ; t) + lg(2) l)) time.
To conclude this entry, note that a labeled tree T can be
represented by an ordinal tree coding its structure [6] and
a string S listing the labels of the nodes. If the labels are
listed in preorder (respectively in DFUDS order) the operator 
string_succS enumerates all the descendants (respectively 
children) of a node matching some literal ˛. Using 
succinct indexes, a single encoding of the labels and
the support of a permutation between orders is suﬃcient
to implement both enumerations, and other search operators 
on the labels. These issues, along with strings and laSuffix 
Array Construction

S 919

beled trees compression techniques which achieve the entropy 
of the indexed data, are covered in more detail in the
entries cited in (cid:2) Tree Compression and Indexing.

Keywords and Synonyms
Suﬃx sorting; Full-text index construction

Cross References
(cid:2) Compressed Suﬃx Array
(cid:2) Compressed Text Indexing
(cid:2) Rank and Select Operations on Binary Strings
(cid:2) Text Indexing

Recommended Reading
1. Barbay, J., Golynski, A., Munro, J.I., Rao, S.S.: Adaptive searching 
in succinctly encoded binary relations and tree-structured
documents. In: Proceedings of the 17th Annual Symposium
on Combinatorial Pattern Matching (CPM). Lecture Notes in
Computer Science (LNCS), vol. 4009, pp. 24–35. Springer, Berlin
(2006)

2. Barbay, J., He, M., Munro, J.I., Rao, S.S.: Succinct indexes for
strings, binary relations and multi-labeled trees. In: Proceedings 
of the 18th ACM-SIAM Symposium on Discrete Algorithms
(SODA), pp. 680–689. ACM, SIAM (2007)

3. Ferragina, P., Venturini, R.: A simple storage scheme for strings
achieving entropy bounds. In: Proceedings of the 18th ACMSIAM 
Symposium on Discrete Algorithms (SODA), pp. 690–695.
ACM, SIAM (2007)

4. Golynski, A., Munro, J.I., Rao, S.S.: Rank/select operations on
large alphabets: a tool for text indexing. In: Proceedings of
the 17th Annual ACM-SIAM Symposium on Discrete Algorithms
(SODA), pp. 368–373. ACM, SIAM (2006)

5. Jacobson, G.: Space-efficient static trees and graphs. In: Proceedings 
of the 30th IEEE Symposium on Foundations of Computer 
Science (FOCS), pp. 549–554 (1989)

6. Jansson, J., Sadakane, K., Sung, W.-K.: Ultra-succinct representation 
of ordered trees. In: Proceedings of the 18th ACM-SIAM
Symposium on Discrete Algorithms (SODA), pp. 575–584. ACM,
SIAM (2007)

7. Munro, J.I., Raman, R., Raman, V., Rao, S.S.: Succinct representations 
of permutations. In: Proceedings of the 30th International 
Colloquium on Automata, Languages and Programming
(ICALP). Lecture Notes in Computer Science (LNCS), vol. 2719,
pp. 345–356. Springer, Berlin (2003)

8. Munro, J.I., Raman, V.: Succinct representation of balanced
parentheses and static trees. SIAM J. Comput. 31, 762–776
(2001)

9. Munro, J.I., Rao, S.S.: Succinct representations of functions. In:
Proceedings of the International Colloquium on Automata, Languages 
and Programming (ICALP). Lecture Notes in Computer
Science (LNCS), vol. 3142, pp. 1006–1015. Springer, Berlin (2004)

Suffix Array Construction
2006; Kärkkäinen, Sanders, Burkhardt

JUHA KÄRKKÄINEN
Department of Computer Science, University of Helsinki,
Helsinki, Finland

Problem Definition
The suﬃx array [5,14] is the lexicographically sorted array
of all the suﬃxes of a string. It is a popular text index structure 
with many applications. The subject of this entry are
algorithms that construct the suﬃx array.
More precisely, the input to a suﬃx array construction 
algorithm is a text string T = T[0; n) = t0t1 (cid:3)(cid:3)(cid:3) tn(cid:2)1,
i. e., a sequence of n characters from an alphabet ˙. For
i 2 [0; n], let Si denote the suﬃx T[i; n) = ti ti+1 (cid:3)(cid:3)(cid:3) tn(cid:2)1.
The output is the suﬃx array SA[0; n] of T, a permutation
of [0; n] satisfying SSA[0] < SSA[1] < (cid:3)(cid:3)(cid:3) < SSA[n], where
< denotes the lexicographic order of strings.

Two speciﬁc models for the alphabet ˙ are considered.
An ordered alphabet is an arbitrary ordered set with constant 
time character comparisons. An integer alphabet is
the integer range [1; n]. There is also a result that holds for
any alphabet.

Many applications require that the suﬃx array is augmented 
with additional information, most commonly with
the longest common preﬁx array LCP[0; n). An entry
LCP[i] of the LCP array is the length of the longest common 
preﬁx of the suﬃxes SSA[i] and SSA[i+1]. The enhanced 
suﬃx array [1] adds two more arrays to obtain
a full range of text index functionalities.

Another related array, the Burrows–Wheeler transform
BWT[0; n) is often computed by suﬃx array construction 
using the equations BWT[i] = T[SA[i] (cid:2) 1] when
SA[i] ¤ 0 and BWT[i] = T[n (cid:2) 1] when SA[i] = 0.

There are other important text indexes, most notably
suﬃx trees and compressed text indexes, covered in separate 
entries. Each of these indexes have their own construction 
algorithms, but they can also be constructed eﬃciently 
from each other. However, in this entry, the focus is
on direct suﬃx array construction algorithms that do not
rely on other text indexes.

Key Results
The naive approach to suﬃx array construction is to use
a general sorting algorithm or an algorithm for sorting
strings. However, any such algorithm has a worst-case
time complexity ˝(n2) because the total length of the sufﬁxes 
is ˝(n2).

The ﬁrst eﬃcient algorithms were based on the doubling 
technique of Karp, Miller, and Rosenberg [8]. The
idea is to assign a rank to all substrings whose length is
a power of two. The rank tells the lexicographic order of

