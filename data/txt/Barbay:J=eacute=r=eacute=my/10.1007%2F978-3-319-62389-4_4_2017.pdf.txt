Depth Distribution in High Dimensions

J´er´emy Barbay1, Pablo P´erez-Lantero2, and Javiel Rojas-Ledesma1(B)

1 Departamento de Ciencias de la Computaci´on,

Universidad de Chile, Santiago, Chile

jeremy@barbay.cl, jrojas@dcc.uchile.cl

2 Departamento de Matem´atica y Ciencia de la Computaci´on,

Universidad de Santiago, Santiago, Chile

pablo.perez.l@usach.cl

Abstract. Motivated by the analysis of range queries in databases, we
introduce the computation of the Depth Distribution of a set B of
axis aligned boxes, whose computation generalizes that of the Klee’s
Measure and of the Maximum Depth. In the worst case over instances
of ﬁxed input size n, we describe an algorithm of complexity within
log n), using space within O(n log n), mixing two techniques pre-
O(n
viously used to compute the Klee’s Measure. We reﬁne this result and
previous results on the Klee’s Measure and the Maximum Depth for
various measures of diﬃculty of the input, such as the proﬁle of the input
and the degeneracy of the intersection graph formed by the boxes.

d+1

2

1 Introduction

Consider a set B of n axis-parallel boxes in R

Problems studied in Computational Geometry have found important applications 
in the processing and querying of massive databases [1], such as the computation 
of the Maxima of a set of points [2,4], or compressed data structures
for Point Location and Rectangle Stabbing [3]. In particular, we consider
cases where the input or queries are composed of axis-aligned boxes in d dimen-
sions: in the context of databases it corresponds for instance to a search for cars
within the intersection of ranges in price, availability and security ratings range.
d, for ﬁxed d. The Klee’s
Measure of B is the volume of the union of the boxes in B. Originally suggested
on the line by Klee [18], its computation is well studied in higher dimensions
[7–10,22], and can be done in time within O(nd/2), using an algorithm introduced
by Chan [10] based on a new paradigm called “Simplify, Divide and Conquer”.
The Maximum Depth of B is the maximum number of boxes overlapping at any
point, and its computational complexity is similar to that of Klee’s Measure’s,
converging to the same complexity within O(nd/2) [10].
Hypothesis. The known algorithms to compute these two measures are all strikingly 
similar. That would suggest a reduction from one to another, except that
those two measures are completely distinct: Klee’s measure is a volume whose
value can be a real number, while Maximum Depth is a cardinality whose value
c(cid:2) Springer International Publishing AG 2017
Y. Cao and J. Chen (Eds.): COCOON 2017, LNCS 10392, pp. 38–49, 2017.
DOI: 10.1007/978-3-319-62389-4 4

Depth Distribution in High Dimensions

39

is an integer in the range [1..n]. Is there any way to formalize the relationship 
between the computation of these two measures?
Our Results. We describe a ﬁrst step towards such a formalization, in the form of
a new problem, which we show to be intermediary in terms of the techniques
being used, between the Klee’s measure and the Maximum Depth, slightly
more costly in time and space, and with interesting applications and results of
its own.
We introduce the notion of the Depth Distribution of a set B of n axisd,
 formed by the vector of n values (V1, . . . , Vn), where Vi corparallel 
boxes in R
responds to the volume covered by exactly i boxes from B. The Depth Distribution 
of a set B can be interpreted as a probability distribution function (hence
the name): if a point p is selected from the union of the boxes in B uniformly
Vi), for
at random, the probability that p intersects exactly k boxes is (Vk/
all k ∈ [1..n].

(cid:2)n

i=1

2

The Depth Distribution reﬁnes both Klee’s measure and Maximum
Depth. It is a measure ﬁner than Klee’s Measure in the sense that the
Klee’s Measure of a set B can be obtained in time linear in the size n of B
by summing the components of the Depth Distribution of B. Similarly, the
Depth Distribution is a measure ﬁner than the Maximum Depth in the
sense that the Maximum Depth of a set B can be obtained in linear time by
ﬁnding the largest i ∈ [1..n] such that Vi (cid:3)= 0. In the context of a database,
when receiving multidimensional range queries (e.g. about cars), the Depth
Distribution of the queries yields valuable information to the database owner
(e.g. a car dealer) about the repartition of the queries in the space of the data,
to allow for informed decisions on it (e.g. to orient the future purchase of cars
to resell based on the clients’ desires, as expressed by their queries).

In the classical computational complexity model where one studies the worst
case over instances of ﬁxed size n, we combine techniques previously used
to compute the Klee’s Measure [10,22] to compute the Depth Distribulog 
n), using space within O(n log n) (in Sect. 3.1).
tion in time within O(n d+1
√
This solution is slower by a factor within O(
n log n) than the best known
algorithms for computing the Klee’s Measure and the Maximum Depth: we
show in Sect. 3.2 that such a gap might be ineluctable, via a reduction from the
computation of Matrix Multiplication.

In the reﬁned computational complexity model where one studies the worst
case complexity taking advantage of additional parameters describing the
diﬃculty of the instance [4,17,21], we introduce (in Sect. 4) new measures of
diﬃculty such as the proﬁle and the degeneracy of the intersection graph of
the boxes, and describe algorithms in these new models to compute the Depth
Distribution, Klee’s Measure and Maximum Depth of a set B.

After a short overview of the known results on the computation of the
Klee’s Measure and Maximum Depth (in Sect. 2), we describe in Sect. 3
the results in the worst case over instances of ﬁxed size. In Sect. 4, we describe
results on reﬁned partitions of the instance universe, both for Depth Distribution 
and for the previously known problems, Klee’s Measure and Maximum

40

J. Barbay et al.

Depth. We conclude in Sect. 5 with a discussion on discrete variants and further
reﬁnements of the analysis.

2 Background

The techniques used to compute the Klee’s Measure have evolved over time,
and can all be used to compute the Maximum Depth. We retrace some of the
main results, which will be useful for the deﬁnition of an algorithm computing
the Depth Distribution (in Sect. 3), and for the reﬁnements of the analysis for
Depth Distribution, Klee’s Measure and Maximum Depth (in Sect. 4).
The computation of the Klee’s Measure of a set B of n axis-aligned ddimensional 
boxes was ﬁrst posed by Klee [18] in 1977. After some initial progresses 
[6,15,18], Overmars and Yap [22] described a solution running in time
within O(nd/2 log n). This remained the best solution for more than 20 years
until 2013, when Chan [10] presented a simpler and faster algorithm running in
time within O(nd/2).

The algorithms described by Overmars and Yap [22] and by Chan [10], respectively,
 take both advantage of solutions to the special case of the problem where
all the boxes are slabs. A box b is said to be a slab within another box Γ if
b ∩ Γ = {(x1, . . . , xd) ∈ Γ | α ≤ xi ≤ β}, for some integer i ∈ [1..d] and some
real values α, β (see Fig. 1 for an illustration). Overmars and Yap [22] showed
that, if all the boxes in B are slabs inside the domain box Γ , then the Klee’s
Measure of B within Γ can be computed in linear time (provided that the
boxes have been pre-sorted in each dimension).

b2

Γ

b2

Γ

b1

b1

(a)

(b)

Fig. 1. An illustration in dimensions 2 (a) and 3 (b) of two boxes b1, b2 equivalent to
slabs when restricted to the box Γ . The Klee’s Measure of {b1, b2} within Γ is the
area (resp. volume) of the shadowed region in (a) (resp. (b)).

Overmars and Yap’s algorithm [22]

is based on a technique originally
described by Bentley [6]: solve the static problem in d dimensions by combining
a data structure for the dynamic version of the problem in d−1 dimensions with
a plane sweep over the d-th dimension. The algorithm starts by partitioning the

Depth Distribution in High Dimensions

41

2

space into O(nd/2) rectangular cells such that the boxes in B are equivalent to
slabs when restricted to each of those cells. Then, the algorithm builds a tree-like
data structure whose leaves are the cells of the partition, supporting insertion
and deletion of boxes while keeping track of the Klee’s Measure of the boxes.
Chan’s algorithm [10] is a simpler divide-and-conquer algorithm, where the
slabs are simpliﬁed and removed from the input before the recursive calls (Chan
[10] named this technique Simplify, Divide and Conquer, SDC for short). To
obtain the recursive subproblems, the algorithm assigns a constant weight of
2 i+j
to each (d-2)-face intersecting the domain and orthogonal to the i-th and jth 
dimensions, i, j ∈ [1..d]. Then, the domain is partitioned into two sub-domains
by the hyperplane x1 = m, where m is the weighted median of the (d-2)-faces
orthogonal to the ﬁrst dimension. This yields a decrease by a factor of 22/d in
the total weight of the (d-2)-faces intersecting each sub-domain. Chan [10] uses
this, and the fact that slabs have no (d-2)-face intersecting the domain, to prove
that the SDC algorithm runs in time within O(nd/2).

Unfortunately, there are sets of boxes which require partitions of the space
into a number of cells within Ω(nd/2) to ensure that, when restricted to each cell,
all the boxes are equivalent to slabs. Hence, without a radically new technique,
any algorithm based on this approach will require running time within Ω(nd/2).
Chan [10] conjectured that any combinatorial algorithm computing the Klee’s
Measure requires within Ω(nd/2) operations, via a reduction from the parameterized 
k-Clique problem, in the worst case over instances of ﬁxed size n. As a
consequence, recent work have focused on the study of special cases which can be
solved faster than Ω(nd/2), like for instance when all the boxes are orthants [10],
α-fat boxes [7], or cubes [8]. In turn, we show in Sect. 4 that there are measures
which gradually separate easy instances for these problems from the hard ones.
In the next section, we present an algorithm for the computation of the
Depth Distribution inspired by a combination of the approaches described
above, outperforming naive applications of those techniques.

3 Computing the Depth Distribution

We describe in Sect. 3.1 an algorithm to compute the Depth Distribution of
a set of n boxes. The running time of this algorithm in the worst case over ddimensional 
instances of ﬁxed size n is within O(n d+1
log n), using space within
O(n log n). This running time is worse than that of computing only the Klee’s
√
Measure (or the Maximum Depth) by a factor within O(
n log n): we argue
in Sect. 3.2 that computing the Depth Distribution is computationally harder
than the special cases of computing the Klee’s Measure and the Maximum
Depth, unless computing Matrix Multiplication is much easier than usually
assumed.

2

3.1 Upper Bound
We introduce an algorithm to compute the Depth Distribution inspired by
a combination of the techniques introduced by Chan [10], and by Overmars and

42

J. Barbay et al.

Yap [22], for the computation of the Klee’s Measure (described in Sect. 2).
As in the approaches mentioned previously, the algorithm partitions the domain
Γ into O(nd/2) cells where the boxes of B are equivalent to slabs, and then
combines the solution within each cell to obtain the ﬁnal answer. Two main
issues must be addressed: how to compute the Depth Distribution when the
boxes are slabs, and how to partition the domain eﬃciently.

We address ﬁrst the special case of slabs. We show in Lemma 1 that computing 
the Depth Distribution of a set of n d-dimensional slabs within a domain
Γ can be done via a multiplication of d polynomials of degree at most n.
Lemma 1. Let B be a set of n axis-parallel d-dimensional axis aligned boxes,
with d ≥ 2, that, when restricted to a domain box Γ , are equivalent to slabs.
The computation of the Depth Distribution (V1, . . . , Vn) of B within Γ can
be performed via a multiplication of d polynomials of degree at most n.
Proof. For all i ∈ [1..d], let Bi be the subset of slabs that are orthogonal to the ibe 
the Depth Distribution of the intervals
th dimension, and let
resulting from projecting Bi to the i-th dimension within Γ . We associate a
polynomial Pi(x) of degree n with each Bi as follows:
– let Γi be the projection of the domain Γ into the i-th dimension, and
– let V i

0 be the length of the region of Γi not covered by a box in Bi (i.e.,

, . . . , V i
n

(cid:3)

V i
1

(cid:4)

0 = (|Γi| − (cid:2)n

V i

(cid:2)n

– Pi(x) =

j=0

V i
j )); then
j=1
j · xj.
V i

Since any slab entirely covers the domain in all the dimensions but the one
to which it is orthogonal, any point p has depth k in B if and only if it has depth
j1 in B1, j2 in B2, . . . , and jd in Bd, such that j1 + j2 + . . . + jd = k. Thus, for
all k ∈ [0..n]:

which is precisely the (k + 1)-th coeﬃcient of P1(x) · P2(x) · . . . · Pd(x). Thus,
this product yields the Depth Distribution (V1, . . . , Vn) of B in Γ .
(cid:8)(cid:9)

Using standard Fast Fourier Transform techniques, two polynomials can be
multiplied in time within O(n log n) [12]. Moreover, the Depth Distribution
of a set of intervals (i.e., when d = 1) can be computed in linear time after
sorting, by a simple scan-line algorithm, as for Klee’s Measure [10]. Thus, as
a consequence of Lemma 1, when the boxes in B are slabs when restricted to a
domain box Γ , the Depth Distribution of B within Γ can be computed in
time within O(n log n).
Corollary 2. Let B be a set of n d-dimensional axis aligned boxes, whose intersections 
with Γ are slabs. The Depth Distribution of B inside Γ can be
computed in time within O(n log n).

Vk =

(cid:5)

0≤j1,...,jd≤n
j1+...+jd=k

(cid:6)

d(cid:7)

(cid:8)

V i
ji

,

i=1

Depth Distribution in High Dimensions

43

2

A naive application of previous techniques [10,22] to the computation of
Depth Distribution yields poor results. Combining the result in Corollary 2
with the partition of the space and the data structure described by Overmars
and Yap [22] yields an algorithm to compute the Depth Distribution running
log n), and using space within O(nd/2 log n). Similarly, if
in time within O(n d+1
the result in Corollary 2 is combined with Chan’s partition of the space [10], one
obtains an algorithm using space linear in the number of boxes, but running in
time within O(n d
2 )-factor for the reduction
in space usage of Overmars and Yap [22]).
We combine these two approaches into an algorithm which achieves the best
log n), and uses O(n log n)-
features of both: it runs in time within O(n d+1
space. As in Chan’s approach [10] we use a divide and conquer algorithm, but
we show in Theorem 3 that the running time is asymptotically the same as if
using the partition and data structures described by Overmars and Yap [22] (see
Algorithm 1 for a detailed description).

2 +1 log n) (i.e., paying an extra O(n 1

2

Algorithm 1. SDC-DDistribution(B, Γ, c, (V1, . . . , Vn))
Input: A set B of n boxes in R

d; a d-dimensional domain box Γ ; the number c of
boxes not in B but in the original set that completely contain Γ ; and a vector
(V1, . . . , Vn) representing the Depth Distribution computed so far.
1: if no box in B has a (d-2)-face intersecting Γ (i.e., all the boxes are slabs) then
of B within Γ using Lemma
2:

(cid:2)
V (cid:2)
1 , . . . , V (cid:2)
|B|

(cid:3)

Compute the Depth Distribution
for i ∈ [1..|B|] do

1
Vi+c ← Vi+c + V (cid:2)

i

3:
4:
5: else
6:
7:
8:
9:
10:
11:
12:
13:
14:

= B \ B0

Let B0 ⊆ B be the subset of boxes completely containing Γ
c ← c + |B0|
Let B(cid:2)
Let m be the weighted median of the (d-2)-faces orthogonal to x1
Split Γ into ΓL, ΓR by the hyperplane x1 = m
Rename the dimensions so that x1, . . . , xd becomes x2, . . . , xd, x1
Let BL and BR be the subsets of B(cid:2)
Call SDC-DDistribution(BL, ΓL, c, (V1, . . . , Vn))
Call SDC-DDistribution(BR, ΓR, c, (V1, . . . , Vn))

intersecting ΓL and ΓR respectively

Theorem 3. Let B be a set of n axis-parallel boxes in R
bution of B can be computed in time within O(n d+1
O(n log n).
Due to lack of space we defer the complete proof to the extended version [5].

d. The Depth Distrilog 
n), using space within

The bound for the running time in Theorem 3 is worse than that for the com-
√
putation of the Klee’s Measure (and Maximum Depth) by a factor within
O(
n log n), which raises the question of the optimality of the bound: we consider 
this matter in the next section.

2

44

J. Barbay et al.

3.2 Conditional Lower Bound

As for many problems handling high dimensional inputs, the best lower bound
known for this problem is Ω(n log n), which derives from the fact that the Depth
Distribution is a generalization of the Klee’s Measure problem. This bound,
however, is tight only when the input is a set of intervals (i.e., d = 1). For
higher dimensions, the conjectured lower bound of Ω(nd/2) described by Chan
in 2008 [9] for the computational complexity of computing the Klee’s Measure
can be extended analogously to the computation of the Depth Distribution.
One intriguing question is whether in dimension d = 2, as for Klee’s Measure,
 the Depth Distribution can be computed in time within O(n log n).
We argue that doing so would imply breakthrough results in a long standing
problem, Matrix Multiplication. We show that any instance of Matrix
Multiplication can be solved using an algorithm which computes the Depth
Distribution of a set of rectangles in the plane. For this, we make use of the
following simple observation:
Observation 1. Let A,B be two n×n matrices of real numbers, and let Ci denote
the n × n matrix that results from multiplying the n × 1 vector corresponding
to the i-th column of A with the 1 × n vector corresponding to the i-th row of
B. Then, AB =

We show in Theorem 4 that multiplying two n × n matrices can be done by
transforming the input into a set of O(n2) 2-dimensional boxes, and computing
the Depth Distribution of the resulting box set. Moreover, this transformation 
can be done in linear time, thus, the theorem yields a conditional lower
bound for the computation of the Depth Distribution.
Theorem 4. Let A, B be two n×n matrices of non-negative real numbers. There
is a set B of rectangles of size within O(n2), and a domain rectangle Γ , such that
the Depth Distribution of B within Γ can be projected to obtain the value of
the product AB.

(cid:2)n

Ci.

i=1

Intuitively, we create a gadget to represent each matrix Ci. Within the i-th
gadget, there will be a rectangular region for each component of Ci with the value
of that component as volume. We arrange the boxes so that two distinct regions
have the same depth if and only if they represent the same respective coeﬃcients
of two distinct matrices Ci and Ci(cid:2) (formally, they represent coeﬃcients (Ci)j,k
and (Ci(cid:2))j(cid:2),k(cid:2), respectively, such that i (cid:3)= i(cid:4), j = j(cid:4), and k = k(cid:4)). Due to lack of
space, we defer the complete proof to the extended version [5].
The optimal time to compute the product of two n× n matrices is still open.
It can naturally be computed in time within O(n3). However, Strassen showed in
1969 that within O(n2.81) arithmetic operations are enough [23]. This gave rise
to a new area of research, where the central question is to determine the value of
the exponent of the computational complexity of square matrix multiplication,
denoted ω, and deﬁned as the minimum value such that two n × n matrices can
be multiplied using within O(nω+ε) arithmetic operations for any ε > 0.

Depth Distribution in High Dimensions

45

The result of Theorem 4 directly yields a conditional lower bound on the
complexity of Depth Distribution: in particular, Depth Distribution in
dimension as low as two, can be solved in time within O(n log n), then Matrix
Multiplication can be computed in time within O(n2), i.e. ω = 2. However,
this would be a great breakthrough in the area, the best known upper bound to
date is approximately ω ≤ 2.37, when improvements in the last 30 years [11,16]
have been in the range [2.3728, 2.3754].

Corollary 5 (Conditional lower bound). Computing the Depth Distribution 
of a set B of n d-dimensional boxes requires time within Ω(n1+c), for some
constant c > 0, unless two n× n matrices can be multiplied in time O(n2+ε), for
any constant ε > 0.

The running time of the algorithm that we described in Theorem 3 can be
improved for large classes of instances (i.e. asymptotically inﬁnite) by considering
measures of the diﬃculty of the input other than its size. We describe two of
these improved solutions in the next section.

2

4 Multivariate Analysis
Even though the asymptotic complexity of O(n d+1
log n) is the best we know so
far for computing the Depth Distribution of a set of n d-dimensional boxes,
there are many cases which can be solved faster. Some of those “easy” instances
can be mere particular cases, but others can be hints of some hidden measures
of diﬃculty of the Depth Distribution problem. We show that, indeed, there
are at least two such diﬃculty measures, gradually separating instances of the
same size n into various classes of diﬃculty. Informally, the ﬁrst one (the proﬁle
of the input set, Sect. 4.1) measures how separable the boxes are by axis-aligned
hyperplanes, whereas the second one (the degeneracy of the intersection graph,
Sect. 4.2) measures how “complex” the interactions of the boxes are in the set
between them. Those measures inspire similar results for the computation of the
Klee’s Measure and of the Maximum Depth.

4.1 Proﬁle
The i-th proﬁle pi of a set of boxes B is the maximum number of boxes intersected
by any hyperplane orthogonal to the i-th dimension; and the proﬁle p of B is the
minimum p = mini∈[1..d]{pi} of those over all dimensions. D’Amore [13] showed
how to compute it in linear time (after sorting the coordinate of the boxes in
each dimension). The following lemma shows that the Depth Distribution
can be computed in time sensitive to the proﬁle of the input set.
Lemma 6. Let B be a set of boxes with proﬁle p, and Γ be a d-dimensional axisaligned 
domain box. The Depth Distribution of B within Γ can be computed
in time within O(n log n + np d−1

log p) ⊆ O(n d+1

2

2

log n).

46

J. Barbay et al.

Due to lack of space we defer the complete proof to the extended version [5].
The lemma above automatically yields reﬁned results for the computation of
the Klee’s Measure and the Maximum Depth of a set of boxes B. However,
applying the technique in an ad-hoc way to these problems yields better bounds:
Corollary 7. Let B be a set of boxes with proﬁle p, and Γ be a domain box.
The Klee’s Measure and Maximum Depth of B within Γ can be computed
in time within O(n log n + np d−2

log p) ⊆ O(nd/2 log n).

2

The algorithms from Lemma 6 and Corollary 7 asymptotically outperform
previous ones in the sense that their running time is never worse than previous
algorithms by more than a constant factor, but can perform faster by more than
a constant factor on speciﬁc families of instances.
An orthogonal approach is to consider how complex the interactions between
the boxes are in the input set B, analyzing, for instance, the intersection graph
of B. We study such a technique in the next section.

4.2

Intersections Graph Degeneracy

A k-degenerate graph is an undirected graph in which every subgraph has a
vertex of degree at most k [19]. Every k-degenerate graph accepts an ordering
of the vertices in which every vertex is connected with at most k of the vertices
that precede it (we refer below to such an ordering as a degenerate ordering).
In the following lemma we show that this ordering can be used to compute
the Depth Distribution of a set B of n boxes in running time sensitive to the
degeneracy of the intersection graph of B.
Lemma 8. Let B be a set of boxes and Γ be a domain box, and let k be the
degeneracy of the intersection graph G of the boxes in B. The Depth Distribution 
of B within Γ can be computed in time within O(n logd n + e + nk d+1
2 ),
where e ∈ O(n2) is the number of edges of G.
Proof. We describe an algorithm that runs in time within the bound in the
lemma. The algorithm ﬁrst computes the intersection graph G of B in time within
O(n logd n + e) [14], as well as the k-degeneracy of this graph and a degenerate
ordering O of the vertices in time within O(n + e) [20]. The algorithm then
iterates over O maintaining the invariant that, after the i-th step, the Depth
Distribution of the boxes corresponding to the vertices v1, v2, . . . , vi of the
ordering has been correctly computed.
For any subset V of vertices of G, let DDΓB (V ) denote the Depth Distribution 
within Γ of the boxes in B corresponding to the vertices in V . Also, for
i ∈ [1..n] let O[1..i] denote the ﬁrst i vertices of O, and O[i] denote the i-th vertex 
of O. From DDΓB (O[1..i-1]) (which the algorithm “knows” after the (i−1)-th
iteration), DDΓB (O[1..i]) can be obtained as follows: (i.) let P be the subset of
O[1..i-1] connected with O[i]; (ii.) compute DDO[i]B (P ∪ {O[i]}) in time within
O(k d+1
log k) using SDC-DDistribution (note that the domain this time is O[i]

2

Depth Distribution in High Dimensions

47

itself, instead of Γ ); (iii.) add to (DDΓB (O[1..i]))1 the value of (DDO[i]B (P ∪
O[i]))1; and (iv.) for all j = [2..k+1], substract from (DDΓB (O[1..i]))j−1 the
value of (DDO[i]B (P ∪ O[i]))j and add it to (DDΓB (O[1..i-1]))j.
O(k d+1

Since the updates to the Depth Distribution in each step take time within
(cid:8)(cid:9)

log k), and there are n such steps, the result of the lemma follows.

2

d+1

Unlike the algorithm sensitive to the proﬁle, this one can run in time within
2 ) complexity

O(n1+
of SDC-DDistribution for values of the degeneracy k within O(n1− 2
d ).

2 ) (e.g. when k = n), which is only better than the O(n d+1

Applying the same technique to the computation of Klee’s Measure and

Maximum Depth yields improved solutions as well:
Corollary 9. Let B be a set of boxes and Γ be a domain box, and let
k be the degeneracy of the intersection graph G of the boxes in B. The
Klee’s Measure and Maximum Depth of B within Γ can be computed in
2 ), where e ∈ O(n2) is the number of edges of G.
time within O(n logd n + e + nk d
Such reﬁnements of the worst-case complexity analysis are only examples and
can be applied to many other problems handling high dimensional data inputs.
We discuss a selection in the next section.

5 Discussion

The Depth Distribution captures many of the features in common between
Klee’s measure and Maximum Depth, so that new results on the computation 
of the Depth Distribution will yield corresponding results for those
two measures, and has its own applications of interest. Nevertheless, there is no
direct reduction from Klee’s measure or Maximum Depth to Depth Distribution,
 as the latter is computationally more costly, and clarifying further the
relationship between these problems will require ﬁner models of computation.
We discuss below some further issues to ponder about those measures.
Discrete variants. In practice, multidimensional range queries are applied to a
database of multidimensional points. This yields discrete variants of each of the
problems previously discussed [1,24]. In the Discrete Klee’s measure, the
input is composed of not only a set B of n boxes, but also of a set S of m points.
The problem is now to compute not the volume of the union of the boxes, but the
number (and/or the list) of points which are covered by those boxes. Similarly,
one can deﬁne a discrete version of the Maximum Depth (which points are
covered by the maximum number of boxes) and of the Depth Distribution
(how many and which points are covered by exactly i boxes, for i ∈ [1..n]).
Interestingly enough, the computational complexity of these discrete variants is
much less than that of their continuous versions when there are reasonably few
points [24]: the discrete variant becomes hard only when there are many more
points than boxes [1]. Nevertheless, “easy” conﬁgurations of the boxes also yield
“easy” instances in the discrete case: it will be interesting to analyze the discrete

48

J. Barbay et al.

variants of those problems according to the measures of proﬁle and k-degeneracy
introduced on the continuous versions.
Tighter Bounds. Chan [10] conjectured that a complexity of Ω(nd/2) is required
to compute the Klee’s Measure, and hence to compute the Depth Distribution.
 However, the output of Depth Distribution gives much more information 
than the Klee’s Measure, of which a large part can be ignored during
the computation of the Klee’s Measure (while it is required for the computation 
of the Depth Distribution). It is not clear whether even a lower bound
of Ω(nd/2+) can be proven on the computational complexity of the Depth
Distribution given this fact.

Funding. All authors were supported by the Millennium Nucleus “Information and
Coordination in Networks” ICM/FIC RC130003. J´er´emy Barbay and Pablo P´erezLantero 
were supported by the projects CONICYT Fondecyt/Regular nos 1170366 and
1160543 (Chile) respectively, while Javiel Rojas-Ledesma was supported by CONICYT-
PCHA/Doctorado Nacional/2013-63130209 (Chile).

References

1. Khamis, M.A., Ngo, H.Q., R´e, C., Rudra, A.: Joins via geometric resolutions: worstcase 
and beyond. In: Proceedings of the 34th ACM Symposium on Principles of
Database Systems (PODS), Melbourne, Victoria, Australia, 31 May–4 June, 2015,
pp. 213–228 (2015)

2. Afshani, P.: Fast computation of output-sensitive maxima in a word RAM. In: Proceedings 
of the Twenty-Fifth Annual ACM-SIAM Symposium on Discrete Algorithms 
(SODA), Portland, Oregon, USA, January 5–7, 2014, pp. 1414–1423. SIAM
(2014)

3. Afshani, P., Arge, L., Larsen, K.G.: Higher-dimensional orthogonal range reporting
and rectangle stabbing in the pointer machine model. In: Symposuim on Computational 
Geometry (SoCG), Chapel Hill, NC, USA, June 17–20, 2012, pp. 323–332
(2012)

4. Afshani, P., Barbay, J., Chan, T.M.: Instance-optimal geometric algorithms. J.

ACM (JACM) 64(1), 3:1–3:38 (2017)

5. Barbay, J., P´erez-Lantero, P., Rojas-Ledesma, J.: Depth distribution in high dimension.
 ArXiv e-prints (2017)

6. Bentley, J.L.: Algorithms for Klee’s rectangle problems. Unpublished notes (1977)
7. Bringmann, K.: An improved algorithm for Klee’s measure problem on fat boxes.

Comput. Geom. Theor. Appl. 45(5–6), 225–233 (2012)

8. Bringmann, K.: Bringing order to special cases of Klee’s measure problem. In:
Chatterjee, K., Sgall, J. (eds.) MFCS 2013. LNCS, vol. 8087, pp. 207–218. Springer,
Heidelberg (2013). doi:10.1007/978-3-642-40313-2 20

9. Chan, T.M.: A (slightly) faster algorithm for Klee’s Measure Problem. In: Proceedings 
of the 24th ACM Symposium on Computational Geometry (SoCG), College
Park, MD, USA, June 9–11, 2008, pp. 94–100 (2008)

10. Chan, T.M.: Klee’s measure problem made easy. In: 54th Annual IEEE Symposium
on Foundations of Computer Science (FOCS), Berkeley, CA, USA, 26–29 October,
2013, pp. 410–419 (2013)

Depth Distribution in High Dimensions

49

11. Coppersmith, D., Winograd, S.: Matrix multiplication via arithmetic progressions.
In: Proceedings of the 19th Annual ACM Symposium on Theory of Computing
(STOC), New York, USA, pp. 1–6. ACM (1987)

12. Cormen, T.H., Leiserson, C.E., Rivest, R.L., Stein, C.: Introduction to Algorithms,

3rd edn. MIT Press, Cambridge (2009)

13. d’Amore, F., Nguyen, V.H., Roos, T., Widmayer, P.: On optimal cuts of hyperrectangles.
 Computing 55(3), 191–206 (1995)

14. Edelsbrunner, H.: A new approach to rectangle intersections part I. J. Comput.

15. Fredman, M.L., Weide, B.W.: On the complexity of computing the measure of

Math. (JCM) 13(3–4), 209–219 (1983)
∪n
1 [ai; bi]. Commun. ACM (CACM) 21(7), 540–544 (1978)

16. Gall, F.L.: Powers of tensors and fast matrix multiplication. In: International Symposium 
on Symbolic and Algebraic Computation (ISSAC), Kobe, Japan, July 23–
25, 2014, pp. 296–303. ACM (2014)

17. Kirkpatrick, D.G., Seidel, R.: Output-size sensitive algorithms for ﬁnding maximal 
vectors. In: Proceedings of the First Annual Symposium on Computational
Geometry (SoCG), Baltimore, Maryland, USA, June 5–7, 1985, pp. 89–96 (1985)
1 [ai; bi] be computed in less than O(n log n) steps?

18. Klee, V.: Can the measure of ∪n

Am. Math. Mon. (AMM) 84(4), 284–285 (1977)

19. Lick, D.R., White, A.T.: k-Degenerate graphs. Can. J. Math. (CJM) 22, 1082–1096

(1970)

20. Matula, D.W., Beck, L.L.: Smallest-last ordering and clustering and graph coloring

algorithms. J. ACM (JACM) 30(3), 417–427 (1983)

21. Moﬀat, A., Petersson, O.: An overview of adaptive sorting. Aust. Comput. J. (ACJ)

24(2), 70–77 (1992)

22. Overmars, M.H., Yap, C.: New upper bounds in Klee’s measure problem. SIAM J.

Comput. (SICOMP) 20(6), 1034–1045 (1991)

23. Strassen, V.: Gaussian elimination is not optimal. Numer. Math. 13(4), 354–356

(1969)

24. Yildiz, H., Hershberger, J., Suri, S.: A discrete and dynamic version of Klee’s
measure problem. In: Proceedings of the 23rd Annual Canadian Conference on
Computational Geometry (CCCG), Toronto, Ontario, Canada, August 10–12, 2011
(2011)

