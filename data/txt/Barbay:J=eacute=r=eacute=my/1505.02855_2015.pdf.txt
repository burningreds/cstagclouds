5
1
0
2

 
t
c
O
2

 

 
 
]
S
D
.
s
c
[
 
 

2
v
5
5
8
2
0

.

5
0
5
1
:
v
i
X
r
a

Adaptive Computation of the Klee’s Measure

in High Dimensions

J´er´emy Barbay1, Pablo P´erez-Lantero2, and Javiel Rojas-Ledesma1(cid:63)

1 Departmento de Ciencias de la Computaci´on, Universidad de Chile, Chile

2 Escuela de Ingenier´ıa Civil Inform´atica, Universidad de Valpara´ıso, Chile.

jeremy@barbay.cl, jrojas@dcc.uchile.cl.

pablo.perez@uv.cl.

Abstract. The Klee’s Measure of n axis-parallel boxes in Rd is the
volume of their union. It can be computed in time within O(nd/2) in
the worst case. We describe three techniques to boost its computation:
one based on some type of “degeneracy” of the input, and two ones
on the inherent “easiness” of the structure of the input. The ﬁrst technique 
beneﬁts from instances where the Maxima of the input is of small
size h, and yields a solution running in time within O(n log2d−2 h +
hd/2) ⊆ O(nd/2). The second technique takes advantage of instances
where no d-dimensional axis-aligned hyperplane intersects more than k
boxes in some dimension, and yields a solution running in time within
O(n log n+nk(d−2)/2) ⊆ O(nd/2). The third technique takes advantage of
instances where the intersection graph of the input has small treewidth ω.
It yields an algorithm running in time within O(n4ω log ω+n(ω log ω)d/2)
in general, and in time within O(n log n + nωd/2) if an optimal tree decomposition 
of the intersection graph is given. We show how to combine
these techniques in an algorithm which takes advantage of all three conﬁgurations.


1

Introduction

The Klee’s Measure of a set of n axis-parallel boxes in Rd is deﬁned as
the volume of the union of the boxes in the set [8]. Its computation was ﬁrst
posed by Victor Klee in 1977 [20], who originally considered the measure for
intervals in the real line. Bentley [8] generalized the problem to d dimensions and
described an algorithm running in time within O(nd−1 log n). Several years later,
Overarms and Yap [23] described a solution running in time within O(nd/2 log n),
which remained essentially unbeaten for more than 20 years until 2013, when
Chan [12] presented an algorithm running in time within O(nd/2). We consider
that, additionally, a d-dimensional domain box Γ is given, making the objective
to compute the Klee’s Measure within Γ .
Some special cases of this problem have been studied, such as the Hypervolume 
problem, where boxes are orthants of the form {(x1, . . . , xd) ∈ Rd |
(cid:63) Corresponding Author

2

(x1 ≤ α1)∧ . . .∧ (xd ≤ αd)}, each αi being a real number, which can be solved
in time within O(nd/3 polylog n); and Cube-KMP [2,10], when the boxes are hypercubes,
 which can be solved in running time within O(n(d+1)/3 polylog n) [12].
Yildiz and Suri[26] considered k-Grounded-KMP, the case when the projection 
of the input boxes to the ﬁrst k dimensions is an instance of Hypervolume.
 They described an algorithm to solve 2-Grounded in time within
O(n(d−1)/2 log2 n), for any dimension d ≥ 3.

The best lower bound known for the computational complexity of the Klee’s
Measure problem in the worst case over instances of size n is within Ω(n log n),
so far tight only for dimensions one and two [16] as the best known upper bound
is O(nd/2) in dimension d. Chan [11] conjectured that no ‘purely combinatorial’
algorithm computing the Klee’s Measure in dimension d exists running in
time within O(nd/2−ε) for any ε > 0. He proved that if the d-dimensional Klee’s
Measure problem can be solved in time Td(n), then one can decide whether an
arbitrary n-vertex graph G = (V, E) contains a clique of size d in time within
O(Td(O(n2))). The current best combinatorial algorithm for ﬁnding k-cliques in
a graph, requires near-O(nk) time, and hence the conjecture.

In an adaptive analysis, the cost of an algorithm is measured as a function of,
not just the input size, but of other parameters that capture the inherent simplicity 
or diﬃculty of an input instance [1]. An algorithm is said to be adaptive if
“easy” instances are solved faster than the “hard” ones. There are adaptive algorithms 
to solve classical problems such as Sorting a permutation [22], Sorting
a multiset [5], computing the Convex Hull [19] of a set of points in the plane
and in 3-space, and computing the Maxima of a set of d-dimensional vectors [18].
There are also adaptive algorithms for the Maximum Weight Box problem [6],
of particular interest since, for any dimension d ≥ 2, the Maximum Weight
Box problem can be reduced to an instance of the Klee’s Measure problem
in 2d dimensions.
Even though the asymptotic complexity of O(nd/2) is the best known so far
for the Klee’s Measure problem [12], there are many cases which can be solved
in time within O(n lg n) (see Figures 1 and 3 for some examples). Some of those
“easy” instances can be mere particular cases, some others can be hints of some
hidden measures of diﬃculty of the Klee’s Measure problem.

Hypothesis: There are such diﬃculty measures that gradually separate instances 
of the same size n into various classes of diﬃculty; from easy ones solvable 
in time within O(n log n), to diﬃcult ones which the best known algorithm
solves in time within O(nd/2).

Results: We describe three techniques to boost the computation of the Klee’s
Measure on “easy” instances, and analyze each in the adaptive model. For each
technique, we identify a proper diﬃculty measure, which models the features
which the technique is taking advantage of. The ﬁrst technique is the simplest,
taking advantage of degenerated instances, while the second and third ones are
more sophisticated.

3

(a)

(b)

Fig. 1: Two ‘easy’ instances of the Klee’s Measure problem: red dashed boxes
in (a) can be removed without aﬀecting the Klee’s Measure within the domain
Γ , yielding a much smaller instance to solve; while the instance in (b) belongs
to the family of instances which intersection graph is a tree (a path in this
particular case), that can be solved in time within O(n log n) by a divide-andconquer 
algorithm.

The ﬁrst technique (described in Section 2) is related to a classical problem 
in Computational Geometry: the computation of the Maxima of a set of
vectors. A vector in a set T ⊂ Rd is called maximal if none of the remaining
vectors in T dominates it in every component. The Maxima of T (denoted by
M (T )) is the set of maximal elements in T . In 1985, Kirkpatrick and Seidel [18]
gave an output-size sensitive algorithm for this problem, running in time within
O(n logd−2 h), where h is the size of the Maxima. We extend the concept of
Maxima to the sets of boxes, and describe an algorithm computing the Klee’s
Measure in time within O(n log2d−2 h + hd/2) ⊆ O(nd/2), where h denotes the
size of the Maxima of the input set.

The second technique (described in Section 3) is based on the proﬁle k of the
input set, which D’Amore et al. [13] deﬁned as the minimum, over all dimensions
i, of the maximum number of boxes intersected by a same axis aligned hyperplane 
orthogonal to i. The algorithm described by Chan [12] to compute the
Klee’s Measure is in fact sensitive to a diﬃculty measure based on a slightly
weaker deﬁnition of the proﬁle. We improve on this by describing an algorithm to
compute the Klee’s Measure in time within O(n log n+nk(d−2)/2) ⊆ O(nd/2),
where k is the proﬁle of the input set.

The third technique (described in Section 4) is based on the treewidth of the
intersection graph of the input set. The intersection graph of a set of boxes is a
graph G where the vertices are the boxes, and where two boxes are connected
by an edge if and only if they intersect. The treewidth ω of a graph measures
how “close” the graph is to a tree. This technique yields a solution running in
time within O(n log n + nωd/2) if a tree decomposition of the intersection graph
of the input set is given; and a solution running in time within O(n4ω log ω +
n(ω log ω)d/2) if only the boxes are given.

Γx2x1x3Γx2x14

In Section 5, we discuss how to compare and combine these three techniques,

and in Section 6 we describe some potential directions for future work.

2 Maxima Filtering

Our ﬁrst technique considers the Maxima of the input set of boxes to take
advantage of instances where many boxes can be “ﬁltered out” in small time. A
box in a set B is called maximal if none of the remaining boxes in B completely
contains it. The Maxima M (B) of B is the set of maximal elements in B. One
can observe that, by deﬁnition, elements not in the Maxima of an input set
of the Klee’s Measure problem can be removed from the input set without
aﬀecting the value of the Klee’s Measure.

Algorithm 1 takes advantage of this fact to compute the Klee’s Measure

in time sensitive to the size of the Maxima of the input set.

Algorithm 1 maxima adaptive measure
Input: A d-dimensional domain box Γ , and a set of n d-dimensional boxes B
Output: The Klee’s Measure of B within Γ
1: Compute M (B), the Maxima of B
2: return SDC(Γ, M (B))

Overmars [24] showed that if the Maxima of a set of n d-dimensional
vectors can be computed in time Td(n), then the Maxima of a set of n boxes
can be computed in time within O(T2d(n)). To prove this, Overmars [24] expressed 
each box bi = [li,1, ui,1] × . . . × [li,d, ui,d] as a 2d dimensional vector
(cid:126)bi = (−li,1, ui,1, . . . ,−li,1, ui,d). Note that if bi, bj are boxes, then bi dominates
bj if and only if (cid:126)bi dominates (cid:126)bj. We use this result to show in Lemma 1 that
the Klee’s Measure can be computed in running time sensitive to the size of
Maxima of the input.
Lemma 1. Let B be a set of n boxes in Rd and Γ a d-dimensional box. The
Klee’s Measure of B within Γ can be computed in time within O(n(log h)2d−2+
hd/2), where h is the size of the Maxima M (B) of B.
Proof. Algorithm 1 achieves the bound given in the lemma: as a consequence
of Overmars’ result [24], the Maxima M (B) of B is computed in step one in
time within O(n log2d−2 h) using the output-size sensitive algorithm described by
Kirkpatrick and Seidel [18]; in the second step, the Klee’s Measure of M (B),
of size h, is computed in time within O(hd/2) using the algorithm proposed by
Chan [12]. The result follows.
(cid:117)(cid:116)

Note that in the bound from the Lemma 1, the base with exponent d/2 is h,
instead of n as in the bound O(nd/2) for the running time of SDC. In degenerated

5

instances, where h is signiﬁcantly smaller than n, the bound from Lemma 1 is
signiﬁcantly better than O(nd/2).

One way to further improve this result is to remove dominated elements
at each recursive call of Chan’s algorithm [12]: we discuss the diﬃculties in
analyzing this approach in Section 6. In the next section we describe another
boosting technique, which still reduces to Chan O(nd/2)’s algorithm, but is less
focused on degenerated instances.

3 Proﬁle-based Partitioning
The i-th proﬁle ki of a set of boxes B is deﬁned as the maximum number of boxes
intersected by any hyperplane orthogonal to the i-th dimension. The proﬁle k
of a set of boxes is deﬁned as k = mini∈[1..d]{ki}. D’Amore et al. [13] showed
how to compute it in linear time (after sorting the boxes in each dimension). We
make the observation that Chan’s algorithm [12] for this problem is adaptive
to a measure slightly diﬀerent to the proﬁle (and weaker than it); and improve
on this result by describing a technique which yields a solution sensitive to the
proﬁle of B.

3.1 Intrinsic Adaptivity of Chan’s Algorithm

The Simplify, Divide and Conquer algorithm (SDC for short) proposed by Chan [12]
to compute the Klee’s Measure, already behaves adaptively in the sense that
it runs faster on some large families of instances. Let the quasi-proﬁle κ of a set
of boxes be deﬁned as κ = max{ki | i ∈ [1..d]}, where ki denotes the i-th proﬁle.

Observation Let B be a set of boxes having quasi-proﬁle κ within a domain
box Γ . Algorithm SDC computes the Klee’s Measure of B within Γ in time
within O(n log n + nκ(d−2)/2)

The proof of this observation is quite technical and long. Since the result in
next section subsumes this one, and the analysis there is considerably simpler,
we omit the proof of this observation.

An example of the class of instances with small quasi-proﬁle is illustrated in
Figure 1b. In the next subsection, we describe a slightly modiﬁed version of the
algorithm SDC which runs in time sensitive to the proﬁle k of B rather than its
quasi-proﬁle κ, an improvement since k ≤ κ on all instances.

3.2 Proﬁle-based partitioning
Let B be a set of boxes with proﬁle k, and Γ a domain box. Given the proﬁle k of
B, Algorithm 2 splits Γ into m ∈ O(n/k) slabs Γ1 . . . Γm, such that the measure
of B within Γ is equal to the summation of the measures of B within Γ1, . . . , Γm,
respectively. The algorithm performs a plane sweep by one of the dimensions with
the smallest proﬁle and cuts the domain by a hyperplane every 2k endpoints.

6

Algorithm 2 split-domain
Input: A domain Γ , a set of n boxes B, and the proﬁle k of B
Output: A partition of Γ into m slabs, intersecting each one O(k) boxes.
1: let i be a dimension where the i-th proﬁle ki of B equals k
2: for j = 1, 2, . . . , m ∈ O(n/k) do
3:
4:
5:

let p ← (2k × j)-th endpoint of B within Γ
split Γ into {ΓL, ΓR} by the hyperplane xi = p
let Γj ← ΓL, and Γ ← ΓR

6: return {Γ1, . . . , Γm}

By computing the Klee’s Measure of B within each Γi, and summing up all
those values, one can compute the Klee’s Measure of B within Γ .
Each of the slabs into which Γ is divided in Algorithm 2 can intersect at most
O(k) boxes of B: by deﬁnition of the proﬁle, at most O(k) boxes can intersect
the boundaries of the slab, and since each slab contains at most 2k endpoints,
no more than O(k) boxes can completely lie in its interior. This can be used to
bound the running time of the computation of the Klee’s Measure of B.
Lemma 2. Let B be a set of n boxes in Rd, Γ be a d-dimensional domain box,
and k denote the proﬁle of B. The Klee’s Measure of B within Γ can be

computed in time within O(cid:16)

n log n + nk

d−2

2

(cid:17)

.

Proof. Using Algorithm 2, one can split the domain into O(n/k) slabs in linear
time after sorting the input. The measure within each slab can be computed in
time within O(kd/2) using the algorithm SDC. The result follows.
(cid:117)(cid:116)

Note that again in the bound from Lemma 2, the value with d in the exponent
is the proﬁle k∗, instead of the size of the set n. Over instances with small proﬁle
k∗ (like the ones in the class illustrated in Figure 1b), the bound from Lemma 2
is signiﬁcantly better than the upper bound O(nd/2) for the running time of
SDC. In the next section, we describe a technique, based on the treewidth of the
intersection graph of the input set, a measure that captures how “close” a graph
is to a tree. This technique takes advantage of inputs where the intersection
graph is of small treewidth.

4

Intersection Graph’s Treewidth

In instances such as the one described in Figure 1b, where the intersection graph
is a tree, a minor variant of SDC performs in time within O(n log n) independently
of the dimension d. The concept of treewidth was discovered independently several 
times under diﬀerent names (for a nice introduction, see Sections 10.4 and
10.5 of Kleinberg and Tardos’ book [21]). Many graph problems that are NPhard 
for general graphs can be solved in polynomial time for graphs with small
treewidth. For example, Arnborg and Proskurowski [4] showed that for most

7

NP-hard problems that have linear time algorithms for trees, there are algorithms 
solving them in time linear in the size of the graph but exponential or
super-exponential in the treewidth. They illustrated the idea with classical optimization 
problems involving independent sets, dominating sets, graph coloring,
Hamiltonian circuits and network reliability.

In this section we describe how to generalize this behavior to instances with
a more general intersection graph, taking advantage of the treewidth [21] of this
intersection graph. We recall the deﬁnition and some basic results on treewidth
in Section 4.1, to apply them to the computation of the Klee’s Measurein
Section 4.2.

4.1 Preliminaries

The most widely used treewidth deﬁnition, based on tree decompositions, was
introduced by Robertson and Seymour [25].
Deﬁnition 1. A tree decomposition of a graph G = (V, E) is a pair ({Xi|i ∈
I}, T = (I, F )), with {Xi|i ∈ I} a family of subsets of V and T a tree, such that:

– (Edge coverage) for all (cid:104)u, v(cid:105) ∈ E, there is an i ∈ I with u, v ∈ Xi, and
– (Coherence) if v ∈ Xi ∩ Xj, then for all k in the simple path from i to j in

i∈I Xi = V ,

– (Node coverage)(cid:83)

T we have v ∈ Xk.

One refers to the elements of I as nodes, and to the elements of V as vertices.
The width of a tree decomposition ({Xi|i ∈ I}, T = (I, F )) is maxi∈I |Xi| − 1.
A tree decomposition of G is called optimal if its width is the minimum width
among all tree decompositions of G. The treewidth ω of a graph G is the width
of an optimal decomposition of itself. (see Figure 2 for an illustration of tree
decompositions and treewidth).

Fig. 2: Tree decomposition: (a) a set of boxes; (b) the intersection graph of the
set; and (c) an optimal tree decomposition of the graph, with treewidth ω = 2

If Ti is a sub-graph of T , we use Vi to denote the vertices associated with the

nodes in Ti, and GVi to denote the sub-graph of G induced by Vi.

1,2,3,4,5,65,6,5,6,7,82156374812345678(a)(b)(c)8

[21] Let k be a node of T and suppose that T − k has compoProperty 
1.
nents T1, T2, . . . , Td. Then, the sub-graphs GV1\Xk , GV2\Xk , . . . , GVd\Xk have no
vertices in common, and there are no edges between them.

A tree decomposition ({Xi | i ∈ I}, T = (I, F )) is nonredundant if there is
no edge (cid:104)i, j(cid:105) in T such that Xi ⊆ Xj. There is a simple procedure to make any
tree decomposition be nonredundant without aﬀecting the width: if there is an
edge (cid:104)i, j(cid:105) in T such that Xi ⊆ Xj, one can contract the edge by ‘folding’ the
node i into j; by repeating this process as often as necessary, one ends up having
a nonredundant tree decomposition.

Property 2.
has at most n nodes.

[21] Any nonredundant tree decomposition of an n-vertex graph

It is NP-hard to determine the treewidth of a given graph. Furthermore, there
is no known algorithm to compute a constant-factor approximation of an optimal
tree decomposition in polynomial time. The best polynomial time approximation 
algorithms for tree decompositions are a O(ω log
ω)-factor approximation
algorithm running in time within nO(1) described by Feige et al. [15]; and a
O(ω log ω)-factor approximation algorithm running in time within (n4ω log ω)
described by Amir [3]. If the treewidth is known to be constant, then a (3ω + 4)-
approximation can be computed in time within O(2O(ω)+n log n), and a (5ω+4)-
approximation can be computed in time within O(2O(ω) + n), using two algorithms 
described by Bodlaender et al. [9] respectively.

√

4.2 An algorithm sensitive to the intersection graph’s treewidth

Here we describe an algorithm which beneﬁts from instances that have an intersection 
graph with small treewidth. We will say that a set of boxes has treewidth
ω if its intersection graph has treewidth ω.

Intuitively, consider a set of n boxes with a tree T as intersection graph. Its
Klee’s Measure can be computed in a divide-and-conquer fashion: reduce the
problem to two sub-problems by dividing the intersection graph, via a vertex
removal, into two sub-trees T1, T2 of roughly equal sizes; solve each problem
independently; and then combine their solutions. Since the intersection graph is
a tree, one can always ﬁnd a vertex v that divides the tree into two forests of size
at most (cid:98)n/2(cid:99); by adding v back to both forests we obtain T1, T2 of size at most
(cid:100)(n + 1)/2(cid:101). The Klee’s Measure of the original instance is the sum of the
Klee’s Measure of each sub-instance minus the measure of their intersection,
which is the volume of the box (vertex) used to split. This procedure yields an
algorithm running time within O(n log n).

This procedure can be extended to the computation of the Klee’s Measure
of an instance of tree width ω, given a tree decomposition T of its intersection
graph. The following lemma shows how the solutions of two sub-problems can
be combined into the general solution. If t is a node of T , we denote by Bt the
subset of the boxes of B corresponding to the vertices within Xt.

9

empty sub-forests F1 and F2. Let TL = F1 ∪ {t}, TR = F2 ∪ {t}, BL =(cid:83)
and BR = (cid:83)

Lemma 3. Let T be a tree decomposition of the intersection graph of a set of
boxes B, and t be a node of T such that, when removed, T is split into two nonBl,

Br. Then, TL and TR are tree decompositions of BL and BR
respectively; and the Klee’s Measure of B equals the Klee’s Measure of BL
plus the Klee’s Measure of BR minus the Klee’s Measure of Bt.

r∈TR

l∈TL

Proof. By Property 1 we know that F1 and F2 share no vertices, and there is
no edge between them. Hence, no box corresponding to a vertex in a node from
F1 can intersect a box corresponding to a vertex in a node from F2. Therefore,
the intersection between BL and BR is Bt. This, and the fact that the volume of
(cid:83)BR equals the Klee’s Measure of BL plus the
a box (i.e., the Klee’s Measure of a box) is a Lebesgue measure, proves that
the Klee’s Measure of BL
Klee’s Measure of BR minus the Klee’s Measure of Bt. The result follows.(cid:117)(cid:116)

Using this lemma, we can apply the procedure described above for trees to
general tree decompositions, as in Algorithm 3. Lemma 4 provides an upper
bound for the running time of this new solution.

Algorithm 3 tw measure
Input: A domain box Γ , and set of n boxes B in Rd, and an ρ-node tree decomposition 
T of the intersection graph of B
Output: The Klee’s Measure of B within Γ
1: if ρ = 1 then
2:
3:
4:

let t ← the only node in T
if the measure of t has not being computed before then

measures[t] ← SDC(Γ,Bt)

5:
6: else
7:

8:
9:
10:

return measures[t]
Find a node t ∈ T that when removed splits T into two sub-forests
{F1, F2} of sizes at most (cid:100)ρ/2(cid:101)
let T1 ← F1 ∪ {t}, T2 ← F2 ∪ {t}
t∈TR
return tw measure(Γ,BL, TL) + tw measure(Γ,BR, TR) − measures[t]

Let BL ←(cid:83)

Bt, BR ←(cid:83)

t∈TL

Bt

Lemma 4. Let B be a set of n d-dimensional boxes. Let T be a tree decomposition 
of the intersection graph of B with ρ nodes of sizes n1, . . . , nρ, respectively.
The Klee’s Measure of B within a given d-dimensional domain box Γ can be

computed in time within O(ρ log ρ +(cid:80)ρ

).

i=1 nd/2

i

Proof. We show that Algorithm 3 runs in time within the given bound. The
recursion tree corresponding to the algorithm has ρ leaves, and since at each

10

i=1 nd/2

i

measure of the leaves to be within O((cid:80)ρ

step the size of the problem is approximately reduced by one half, the height is
within O(log ρ). The total running time at each internal level of the tree is within
O(ρ), and hence the ρ log ρ term. Moreover, the Klee’s Measure of the boxes
within each leaf is computed only once, making the total time of computing the
(cid:117)(cid:116)
When computing the Klee’s Measure of a set B of boxes, for whose intersection 
graph is given an optimal tree decomposition, the following result
follows.
Corollary 1. Let B be a set of n d-dimensional boxes, and T be an optimal
non-redundant tree decomposition of the intersection graph of B. The Klee’s
Measure of B within a given d-dimensional domain box Γ can be computed in
time within O(n log n+nωd/2), where ω is the treewidth of the intersection graph
of B.

). The result follows.

Proof. Let ρ denote the number of nodes in T . By Property 2, we know that,
since T is non-redundant, ρ ≤ n. Besides, each node in the tree decomposition
has at most ω + 1 vertices. The result follows by replacing each ni by ω, for
(cid:117)(cid:116)
i = [1..ρ], in Lemma 4.
Note that the bound O(n log n + nωd/2) in Lemma 4 is better than or equal
to O(nd/2) as long as ω ≤ n1−2/d. For this bound to be achieved, an optimal
tree decomposition of the intersection graph is required. This decomposition,
in general, needs to be computed, and it is not known whether this can be
performed in polynomial time [21].

Optimal tree decomposition of certain classes of graphs can be found efﬁciently.
 The Klee’s Measure of sets with intersection graph in such classes
can be computed in time depending on the treewidth. We describe two examples
of such results in Corollaries 2 and 3.
Corollary 2. Let B = {b1, b2, . . . , bn} be a set of n boxes in Rd, Γ be a ddimensional 
box, and G be the intersection graph of B. The measure of the union
), where
ρ is the number of connected components of G, and n1, . . . , nρ are the sizes of
the ρ connected components.

of B within Γ can be computed in time within O(n logd−1 n +(cid:80)ρ

i=1 nd/2

i

Proof. An algorithm described by Edelsbrunner et al.
[14] computes the connected 
components in time within O(n logd−1 n). From the connected components 
one can easily obtain a tree decomposition of the graph as follows: create
a node for each connected component, and add edges between the nodes until
(cid:117)(cid:116)
obtaining any arbitrary tree. By Lemma 4 the bound follows.

When the proﬁle of the input instance is k, the same bound from Lemma 2

can be achieved by using Algorithm 3, as seen in Corollary 3.
Corollary 3. Let B be a set of n boxes in Rd, Γ be a d-dimensional box, and
k be the proﬁle of B within Γ . The Klee’s Measure of B within Γ can be
computed in time within O(n log n + (n/k)k

d−2
2 ).

11
Proof. We can transform B into a set B(cid:48) with the same Klee’s Measure, but
with treewidth within O(k), as follows: Split the domain into O(n/k) slabs using
Algorithm 2. Then, for each slab, add to B(cid:48) the boxes in B that intersect the
slab, restricted to it (i.e., if a box intersects several slabs, the box will be split
into multiple boxes that intersect only one slab, and such that the union of them
is the original one)
A tree decomposition of the intersection graph of B(cid:48) with O(n/k) nodes of
size within O(k) can be obtained as follows: create a node for each slab, and
add edges between the nodes until an arbitrary tree is obtained. Since no box
can intersect a box out of its slab, the tree decomposition is valid. The bound
(cid:117)(cid:116)
follows from applying Lemma 4.
An approximation of the optimal tree decomposition of the input set could

be used, obtaining the weaker bounds described in Corollary 4.
Corollary 4. Let B be a set of n d-dimensional boxes, and Γ a d-dimensional
domain box. The Klee’s Measure of B within Γ can be computed in time
within O(n4ω log ω + N (ω log ω)d/2).
Proof. The result follows by replacing the ω term in the bound of Lemma 4 by
the O(ω log ω)-factor approximation obtained by Amir’s algorithm [3] (see the
(cid:117)(cid:116)
end of Section 4.1 for details).
Note that the O(n4ω log ω +n(ω log ω)d/2) bound for the general case is lower
than O(nd/2) as long as d > 8 (because of the ﬁrst term) and ω log ω ≤ n(d−2)/d.
In the following section, we compare the techniques we have described so far

and describe how to combine them.

5 Combining the Techniques

A low proﬁle implies that the intersection graph has low treewidth (Corollary 3),
but a low treewidth does not imply a low proﬁle: an instance of n boxes in the
class illustrated in Figure 3b has a proﬁle within O(n), and its treewidth is one.
On the other hand, the running time of the algorithm taking advantage of the
proﬁle is never worth than O(nd/2), which is not true for the running time of the
one sensitive to the treewith, even if an optimal tree decomposition is provided
to it.

The treewidth and proﬁle measures are independent from the size of the
Maxima. For example, an instance of n boxes in the class illustrated in Figure 
3a has a Maxima of size 1, and its treewidth is n − 1. With respect to the
treewidth, this is a ‘hard’ instance, but with respect to the Maxima size is easy.
On the contrary, an instance of n boxes in the class illustrated in Figure 3b has
a Maxima size of n, whiles its treewidth is one.

Since these two measures are independent, we can combine them to obtain
an algorithm sensitive to both of them, at the same time, by computing the
Maxima of the set; and ﬁnding the Klee’s Measure of the Maxima of the
remaining graph as described in Corollary 4. This way of proceeding yields an
algorithm with running time improving over the results from Lemmas 1 and 4.

12

(a)

(b)

Fig. 3: Two classes of instances of the Klee’s Measure problem that are “easy”
or “hard” depending on the measure considered: instance (a) is easy if the size of
the Maxima is considered, but diﬃcult if the proﬁle or treewidth are considered;
instance (b) is easy for treewidth, but hard for both Maxima size and proﬁle.

computed in time within O(cid:16)

Theorem 1. Let B be a set of n boxes in Rd, Γ a d-dimensional box, and G
be the intersection graph of B. The Klee’s Measure of B within Γ can be
, where h is

n log2d−2 h + h4ω log ω + h(ω log ω)d/2(cid:17)

the size of the Maxima M (B) of B, and w its treewidth.

No lower bound is known for this problem with respect to these measures. In
fact, we believe the results obtained here can be further improved, by considering
ﬁner versions of the measures in order to improve the analysis. We describe
preliminary results in this direction in the next section.

6 Discussion

Each of the three boosting techniques that we analyzed can be improved, and
we describe preliminary results for each technique in those directions below, as
well as other lines of research.
The Maxima based technique (described in Section 2) yields an algorithm
running in time within O(n(log h)2d−2 +hd/2), where h is the size of the Maxima
of the input set. This bound can be improved. For example, if instead of ﬁltering
items not in the Maxima only once, this is done as part of the simpliﬁcation
step of the algorithm Simplify, Divide and Conquer (SDC) [12], the expression for
22/d ) + O(n log2d−2 h). This running time
its running time becomes T (n) = 2T ( h
is still within O(nd/2) in the worst case, and also within O(n log2d−2 h + hd/2).
It is never worse (asymptotically) and it is better in many cases, but how to
formally analyze this improvement is still an open question.

The proﬁle based technique (described in Section 3) yields a solution running

in time within O(cid:16)

. The algorithm SDC [12] is already
adaptive to the proﬁle of the input set. It has a limitation though: it necessarily

k + nk

2

(n − k) log n−k

(cid:17)

d−2

Γx2x1Γx2x113
cycles over the dimensions in order to ensure running in time within O(nd/2).
If there are few dimensions where the proﬁle of the set is small, this technique
performs considerably better than SDC. The technique could be further improved
if, instead of considering an upper bound for the proﬁle in each sub-problem, we
use the exact value of the proﬁle of the subproblem. However, it is not clear how
to analyze this improvement.
The treewidth based technique (described in Section 4) yields an algorithm
running in time within O(n log n+nωd/2), if an optimal tree decomposition of the
intersection graph is given; and in time within O(n4ω log ω+n(ω log ω)d/2) if not.
Note that these running time bounds are not always better than or equal to the
O(nd/2) achivied by algorithm SDC. The dependence on a tree decomposition
is the main weakness of this approach. It is not known whether the Klee’s
Measure can be computed by using a treewidth-sensitive algorithm that does
not depend explicitly on a tree decomposition of the intersection graph.

Finally, note that the techniques that we described focus on the structure of
the instance, as opposed to the order in which the instance is given. As such,
the algorithms that we described cannot beat the O(n log n) bound, even though
there are instances that can still be solved in time within O(n). If one considers
the order in which the input is given, for special pre-sorted inputs one can achieve
the O(n) bound.

Acknowledgement

All authors were partially supported by Millennium Nucleus Information and
Coordination in Networks ICM/FIC RC130003. We thank Timothy Chan for
his helpful comments, and one anonymous referee from ESA 2015 for pointing
out the relation between our techniques of analysis and the treewidth of the
intersection graph.

References

1. Afshani, P., Barbay, J., Chan, T.M.: Instance-optimal geometric algorithms. In:
Proceedings of the Annual IEEE Symposium on Foundations of Computer Science
(FOCS). pp. 129–138 (2009)

2. Agarwal, P.K.: An improved algorithm for computing the volume of the union
of cubes. In: Proceedings of the Annual Symposium on Computational Geometry
(SoCG). pp. 230–239. ACM, New York, NY, USA (2010)

3. Amir, E.: Approximation algorithms for treewidth. Algorithmica 56(4), 448–479

(2010)

4. Arnborg, S., Proskurowski, A.: Linear time algorithms for NP-hard problems restricted 
to partial k-trees. Journal of Discrete Applied Mathematics (JDAM) 23(1),
11 – 24 (1989)

5. Barbay, J.: From time to space: Fast algorithms that yield small and fast data
structures. In: Space-Eﬃcient Data Structures, Streams, and Algorithms (IanFest).
pp. 97–111 (2013)

14

6. Barbay, J., Chan, T.M., Navarro, G., P´erez-Lantero, P.: Maximum-weight planar
boxes in O(n2) time (and better). Information Processing Letters (IPL) 114(8),
437–445 (2014)

7. Barbay, J., P´erez-Lantero, P., Rojas-Ledesma, J.: Adaptive computation of the
klee’s measure in high dimensions. CoRR abs/1505.02855 (2015), http://arxiv.
org/abs/1505.02855, (Last accessed on 2015-08-28.)

8. Bentley, J.L.: Algorithms for Klee’s rectangle problems. Unpublished notes (1977)
9. Bodlaender, H.L., Drange, P.G., Dregi, M.S., Fomin, F.V., Lokshtanov, D.,
Pilipczuk, M.: A o(cˆk n) 5-approximation algorithm for treewidth. CoRR
abs/1304.6321 (2013), http://arxiv.org/abs/1304.6321, (Last accessed on 2015-
08-22.)

10. Bringmann, K.: An improved algorithm for Klee’s measure problem on fat boxes.
Computational Geometry: Theory and Applications (CGTA) 45(5-6), 225–233
(2012)

11. Chan, T.M.: A (slightly) faster algorithm for Klee’s measure problem. In: Proceedings 
of the Annual Symposium on Computational Geometry (SoCG). pp. 94–100
(2008)

12. Chan, T.M.: Klee’s measure problem made easy. In: Proceedings of the Annual
IEEE Symposium on Foundations of Computer Science (FOCS). pp. 410–419
(2013)

13. d’Amore, F., Nguyen, V.H., Roos, T., Widmayer, P.: On optimal cuts of hyperrectangles.
 Computing 55(3), 191–206 (1995)

14. Edelsbrunner, H., Van Leeuwen, J., Ottmann, T., Wood, D.: Computing the connected 
components of simple rectilinear geometrical objects in d-space. RAIRO -
Theoretical Informatics and Applications - Informatique Thorique et Applications
18(2), 171–183 (1984)

15. Feige, U., Hajiaghayi, M., Lee, J.R.: Improved approximation algorithms for
minimum-weight vertex separators. In: Proceedings of the annual ACM Symposium 
on Theory Of Computing (STOC). pp. 563–572. STOC ’05, ACM, New York,
NY, USA (2005)
∪n
1 [ai, bi]. Communications of the ACM (CACM) 21(7), 540–544 (Jul 1978)

16. Fredman, M.L., Weide, B.: On the complexity of computing the measure of

17. Gavril, F.: The intersection graphs of subtrees in trees are exactly the chordal

graphs. Journal of Combinatorial Theory (JCT), Series B 16(1), 47 – 56 (1974)

18. Kirkpatrick, D.G., Seidel, R.: Output-size sensitive algorithms for ﬁnding maximal
vectors. In: Proceedings of the Annual Symposium on Computational Geometry
(SoCG). pp. 89–96 (1985)

19. Kirkpatrick, D.G., Seidel, R.: The ultimate planar convex hull algorithm. SIAM
20. Klee, V.: Can the measure of ∪n

Journal on Computing (JC) 15(1), 287–299 (Feb 1986)

1 [ai, bi] be computed in less than o(n log n) steps?

The American Mathematical Monthly (AMM) 84(4), 284–285 (1977)

21. Kleinberg, J., Tardos, E.: Algorithm Design. Addison-Wesley Longman Publishing

Co., Inc., Boston, MA, USA (2005)

22. Moﬀat, A., Petersson, O.: An overview of adaptive sorting. Australian Computer

Journal (AJC) 24(2), 70–77 (1992)

23. Overmars, M.H., Yap, C.: New upper bounds in Klee’s measure problem. SIAM

Journal on Computing (JC) 20(6), 1034–1045 (1991)

24. Overmars, M.H.: On the equivalence of rectangle containment, rectangle enclosure 
and ECDF-searching. Technical report, University of Utrecht, Department of
Computer Science (01 1981)

25. Robertson, N., Seymour, P.: Graph minors. ii. algorithmic aspects of tree-width

7(3), 309 – 322 (1986)

26. Yildiz, H., Suri, S.: On Klee’s measure problem for grounded boxes. In: Proceedings 
of the Annual Symposium on Computational Geometry (SoCG). pp. 111–120.
ACM, New York, NY, USA (2012)

15

