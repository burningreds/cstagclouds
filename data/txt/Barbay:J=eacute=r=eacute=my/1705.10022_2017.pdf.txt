7
1
0
2

 

y
a
M
1
3

 

 
 
]

G
C
.
s
c
[
 
 

3
v
2
2
0
0
1

.

5
0
7
1
:
v
i
X
r
a

Depth Distribution in High Dimensions

(Extended version(cid:63))

J´er´emy Barbay1, Pablo P´erez-Lantero2, and Javiel Rojas-Ledesma1

1 Departmento de Ciencias de la Computaci´on, Universidad de Chile, Chile

2 Departmento de Matem´atica y Computaci´on, Universidad de Santiago, Chile.

jeremy@barbay.cl, jrojas@dcc.uchile.cl.

pablo.perez.l@usach.cl.

Abstract Motivated by the analysis of range queries in databases, we
introduce the computation of the Depth Distribution of a set B of
axis aligned boxes, whose computation generalizes that of the Klee’s
Measure and of the Maximum Depth. In the worst case over instances
of ﬁxed input size n, we describe an algorithm of complexity within
O(n
log n), using space within O(n log n), mixing two techniques previously 
used to compute the Klee’s Measure. We reﬁne this result and
previous results on the Klee’s Measure and the Maximum Depth for
various measures of diﬃculty of the input, such as the proﬁle of the input
and the degeneracy of the intersection graph formed by the boxes.

d+1

2

1

Introduction

Problems studied in Computational Geometry have found important applications 
in the processing and querying of massive databases [1], such as the computation 
of the Maxima of a set of points [2, 4], or compressed data structures
for Point Location and Rectangle Stabbing [3]. In particular, we consider
cases where the input or queries are composed of axis-aligned boxes in d dimen-
sions: in the context of databases it corresponds for instance to a search for cars
within the intersection of ranges in price, availability and security ratings range.
Consider a set B of n axis-parallel boxes in Rd, for ﬁxed d. We focus on
two measures on such set of boxes: the Klee’s measure and the Maximum
Depth. The Klee’s Measure of B is the size of the “shadow” projected by B,
more formally the volume of the union of the boxes in B. Originally suggested
on the line by Klee [18], its computation is well studied in higher dimensions [7,
8, 9, 10, 22, 26, 25, 24], and can be done in time within O(nd/2), using an
algorithm introduced by Chan [10] based on a new paradigm called “Simplify,
Divide and Conquer”. The Maximum Depth of B is the maximum number of
boxes covering a same point, and its computational complexity is similar to that
of Klee’s Measure’s, converging to the same complexity within O(nd/2) [10].

(cid:63) A preliminary version of these results were presented at the 23rd Annual International

Computing and Combinatorics Conference (COCOON’17)[5]

2

Hypothesis. The known algorithms to compute these two measures are all strikingly 
similar, to the point that Chan [10] states that all known techniques used
for computing the Klee’s Measure can be applied to the computation of the
Maximum Depth. That would suggest a reduction from one to the other, but
those two measures are completely distinct: the Klee’s measure is a volume
whose value can be a real number, while the Maximum Depth is a cardinality
whose value is an integer in the range [1..n]. Is there any way to formalize the
close relationship between the computation of these two measures?

Our Results. We describe a ﬁrst step towards such a formalization, in the form of
a new problem, which we show to be intermediary in terms of the techniques
being used, between the Klee’s Measure and the Maximum Depth, slightly
more costly in time and space, and with interesting applications and results
of its own. We introduce the notion of Depth Distribution of a set B of n
axis-parallel boxes in Rd, formed by the vector of n values (V1, . . . , Vn), where
Vi corresponds to the volume covered by exactly i boxes from B. The Depth
Distribution of a set B can be interpreted as a probability distribution function
(hence the name): if a point p is selected uniformly at random from the region
covered by the boxes in B, the probability that p hits exactly k boxes from B is

(Vk/(cid:80)n

i=1 Vi), for all k ∈ [1..n].

The Depth Distribution reﬁnes both the Klee’s Measure and the
Maximum Depth. It is a measure ﬁner than the Klee’s Measure in the sense
that the Klee’s Measure of a set B can be obtained in time linear in the size n
of B by summing the components of the Depth Distribution of B. Similarly,
the Depth Distribution is a measure ﬁner than the Maximum Depth in the
sense that the Maximum Depth of a set B can be obtained in linear time by
ﬁnding the largest i ∈ [1..n] such that Vi (cid:54)= 0. In the context of a database,
when receiving multidimensional range queries (e.g. about cars), the Depth
Distribution of the queries yields valuable information to the database owner
(e.g. a car dealer) about the repartition of the queries in the space of the data,
to allow for informed decisions on it (e.g. to orient the future purchase of cars
to resell based on the clients’ desires, as expressed by their queries).

In the classical computational complexity model where one studies the worst
case over instances of ﬁxed size n, the trivial approach of partitioning the space
in cells that are completely contained within all the boxes they intersect, results
in a solution with prohibitive running time (within O(nd+1)). Simple variants of
the techniques previously used to compute the Klee’s Measure [10, 22] results
in a solution running in time within O(nd/2+1), using linear space, or a solution
running in time within O(n(d/2+1/2 log n), but using space within O(nd/2 log n).
We combine those two into a single technique to compute the Depth Distribulog 
n), using space within O(n log n) (in Section 3.1)
tion in time within O(n
√
This solution is slower by a factor within O(
n log n) than the best known algorithms 
for computing the Klee’s Measure and the Maximum Depth: we
show in Section 3.2 that such a gap might be ineluctable, via a reduction from
the computation of Matrix Multiplication.

d+1

2

3

In the reﬁned computational complexity model where one studies the worst
case complexity taking advantage of additional parameters describing the
diﬃculty of the instance [4, 17, 21], we consider (in Section 4) distinct measures
of diﬃculty for the instances of these problems, such as the proﬁle and the
degeneracy of the intersection graph of the boxes, and describe algorithms in
these model to compute the Depth Distribution, the Klee’s Measure and
the Maximum Depth of a set B.

After a short overview of the known results on the computation of the Klee’s
Measure and the Maximum Depth (in Section 2), we describe in Section 3
the results in the worst case over instances of ﬁxed size. In Section 4, we describe
results on reﬁned partitions of the instance universe, both for the computation of
the Depth Distribution, and for the previously known problems of computing
the Klee’s Measure and the Maximum Depth. We conclude in Section 5 with
a discussion on discrete variants and further reﬁnements of the analysis.

2 Background

The techniques used to compute the Klee’s Measure have evolved over time,
and can all be used to compute the Maximum Depth. We retrace some of the
main results, which will be useful for the deﬁnition of an algorithm computing the
Depth Distribution (in Section 3), and for the reﬁnements of the analysis for
Depth Distribution, Klee’s Measure and Maximum Depth (in Section 4).
The computation of the Klee’s Measure of a set B of n axis-aligned ddimensional 
boxes was ﬁrst posed by Klee [18] in 1977. After some initial progresses 
[6, 15, 18], Overmars and Yap [22] described a solution running in time
within O(nd/2 log n). This remained the best solution for more than 20 years
until 2013, when Chan [10] presented a simpler and faster algorithm running in
time within O(nd/2).

The algorithms described by Overmars and Yap [22] and by Chan [10], respectively,
 take both advantage of solutions to the special case of the problem
where all the boxes are slabs. A box b is said to be a slab within another box
Γ if b ∩ Γ = {(x1, . . . , xd) ∈ Γ | α ≤ xi ≤ β}, for some integer i ∈ [1..d] and
some real values α, β (see Figure 1 for an illustration). Overmars and Yap [22]
showed that, if all the boxes in B are slabs inside the domain box Γ , then the
Klee’s Measure of B within Γ can be computed in linear time (provided that
the boxes have been pre-sorted in each dimension).

Overmars and Yap’s algorithm [22] is based on a technique originally described 
by Bentley [6]: solve the static problem in d dimensions by combining a
data structure for the dynamic version of the problem in d − 1 dimensions with
a plane sweep over the d-th dimension. The algorithm starts by partitioning the
space into O(nd/2) rectangular cells such that the boxes in B are equivalent to
slabs when restricted to each of those cells. Then, the algorithm builds a tree-like
data structure whose leaves are the cells of the partition, supporting insertion
and deletion of boxes while keeping track of the Klee’s Measure of the boxes.

4

Figure 1: An illustration in dimensions 2 (a) and 3 (b) of two boxes b1, b2 equivalent 
to slabs when restricted to the box Γ . The Klee’s Measure of {b1, b2}
within Γ is the area (resp. volume) of the shadowed region in (a) (resp. (b)).

Chan’s algorithm [10] is a simpler divide-and-conquer algorithm, where the

slabs are simpliﬁed and removed from the input before the recursive calls (Chan [10]
named this technique Simplify, Divide and Conquer, SDC for short). To obtain
the recursive subproblems, the algorithm assigns a constant weight of 2
to
each (d-2)-face intersecting the domain and orthogonal to the i-th and j-th dimensions,
 i, j ∈ [1..d]. Then, the domain is partitioned into two sub-domains
by the hyperplane x1 = m, where m is the weighted median of the (d-2)-faces
orthogonal to the ﬁrst dimension. This yields a decrease by a factor of 22/d in
the total weight of the (d-2)-faces intersecting each sub-domain. Chan [10] uses
this, and the fact that slabs have no (d-2)-face intersecting the domain, to prove
that the SDC algorithm runs in time within O(nd/2).

i+j

2

Unfortunately, there are sets of boxes which require partitions of the space
into a number of cells within Ω(nd/2) to ensure that, when restricted to each
cell, all the boxes are equivalent to slabs. Hence, without a radically new technique,
 any algorithm based on this approach will require running time within
Ω(nd/2). Chan [10] conjectured that any combinatorial algorithm computing
the Klee’s Measure requires within Ω(nd/2) operations, via a reduction from
the parameterized k-Clique problem, in the worst case over instances of ﬁxed
size n. As a consequence, recent work have focused on the study of special cases
which can be solved faster than Ω(nd/2), like for instance when all the boxes are
orthants [10], α-fat boxes [7], or cubes [8]. In turn, we show in Section 4 that
there are measures which gradually separate easy instances for these problems
from the hard ones.

In the next section, we present an algorithm for the computation of the
Depth Distribution inspired by a combination of the approaches described
above, outperforming naive applications of those techniques.

b1b2b1b2ΓΓ(a)(b)3 Computing the Depth Distribution

5

We describe in Section 3.1 an algorithm to compute the Depth Distribution
of a set of n boxes. The running time of this algorithm in the worst case over ddimensional 
instances of ﬁxed size n is within O(n
log n), using space within
O(n log n). This running time is worse than that of computing only the Klee’s
√
Measure (or the Maximum Depth) by a factor within O(
n log n): we argue in
Section 3.2 that computing the Depth Distribution is computationally harder
than the special cases of computing the Klee’s Measure and the Maximum
Depth, unless computing Matrix Multiplication is much easier than usually
assumed.

d+1

2

3.1 Upper bound
We introduce an algorithm to compute the Depth Distribution inspired by
a combination of the techniques introduced by Chan [10], and by Overmars and
Yap [22], for the computation of the Klee’s Measure (described in Section 2).
As in those approaches, the algorithm partitions the domain Γ into O(nd/2) cells
where the boxes of B are equivalent to slabs, and then combines the solution
within each cell to obtain the ﬁnal answer. Two main issues must be addressed:
how to compute the Depth Distribution when the boxes are slabs, and how
to partition the domain eﬃciently.

We address ﬁrst the special case of slabs. We show in Lemma 1 that computing 
the Depth Distribution of a set of n d-dimensional slabs within a domain
Γ can be done via a multiplication of d polynomials of degree at most n.
Lemma 1. Let B be a set of n axis-parallel d-dimensional axis-aligned boxes
whose intersection with a domain box Γ are slabs. The computation of the Depth
Distribution (V1, . . . , Vn) of B within Γ can be performed via a multiplication
of d polynomials of degree at most n.
Proof. For all i ∈ [1..d], let Bi be the subset of slabs that are orthogonal to the ithat 
result from projecting Bi to the i-th dimension within Γ . We associate a
polynomial Pi(x) of degree n with each Bi as follows:
– let Γi be the projection of the domain Γ into the i-th dimension, and
– let V i

(cid:1) be the Depth Distribution of the intervals

th dimension, and let(cid:0)V i

0 be the length of the region of Γi not covered by a box in Bi (i.e.,

1 , . . . , V i
n

0 = (|Γi| −(cid:80)n
– Pi(x) =(cid:80)n

V i

j=0 V i

j )); then

j=1 V i
j · xj.

Since any slab entirely covers the domain in all the dimensions but the one to
which it is orthogonal, any point p has depth k in B if and only if it has depth
j1 in B1, j2 in B2, . . . , and jd in Bd, such that j1 + j2 + . . . + jd = k. Thus, for
all k ∈ [0..n]:

(cid:88)

(cid:32) d(cid:89)

(cid:33)

V i
ji

,

Vk =

0≤j1,...,jd≤n
j1+...+jd=k

i=1

6

which is precisely the (k + 1)-th coeﬃcient of P1(x) · P2(x) · . . . · Pd(x). Thus,
this product yields the Depth Distribution (V1, . . . , Vn) of B in Γ .
(cid:117)(cid:116)

Using standard Fast Fourier Transform techniques, two polynomials can be
multiplied in time within O(n log n) [12]. Moreover, the Depth Distribution of
a set of intervals (i.e., when d = 1) can be computed in linear time after sorting,
by a simple scan-line algorithm, as for the Klee’s Measure [10]. Thus, as a
consequence of Lemma 1, when the boxes in B are slabs when restricted to a
domain box Γ , the Depth Distribution of B within Γ can be computed in
time within O(n log n).
Corollary 2. Let B be a set of n d-dimensional axis aligned boxes whose intersections 
with a d-dimensional box Γ are slabs. The Depth Distribution of B
inside Γ can be computed in time within O(n log n).

2

d

d+1

2 +1 log n) (i.e., paying an extra O(n

A naive application of previous techniques [10, 22] to the computation of
Depth Distribution yields poor results. Combining the result in Corollary 2
with the partition of the space and the data structure described by Overmars
and Yap [22] yields an algorithm to compute the Depth Distribution running
log n), and using space within O(nd/2 log n). Similarly, if
in time within O(n
the result in Corollary 2 is combined with Chan’s partition of the space [10], one
obtains an algorithm using space linear in the number of boxes, but running in
time within O(n
1
2 )-factor for the reduction
in space usage of Overmars and Yap [22]).
We combine these two approaches into an algorithm which achieves the best
features of both: it runs in time within O(n
log n), and uses O(n log n)-space.
As in Chan’s approach [10] we use a divide and conquer algorithm, but we show
in Theorem 3 that the running time is asymptotically the same as if using the
partition and data structures described by Overmars and Yap [22] (see Algorithm 
1 for a detailed description).
Theorem 3. Let B be a set of n axis-parallel boxes in Rd. The Depth Distribution 
of B can be computed in time within O(n
log n), using space within
O(n log n).

d+1

d+1

2

2

2

d+1

Proof. First, let us show that the running time T (n) of Algorithm 1 is within
O(n
log n). We can charge the number of boxes in the set to the number
of (d-1)-faces intersecting the domain: if a box in B does not have a (d-1)-face
intersecting the domain, then it covers the entire domain, and it would have been
removed (simpliﬁed) from the input in the parent recursive call. Note that the
(d-1)-faces orthogonal to dimension x1 cannot intersect both the sub-domains
ΓL and ΓR of the recursive calls at the same time (because the algorithm uses
a hyperplane orthogonal to x1 to split the domain into ΓL and ΓR). Hence,
although at the d-th level of the recursion there are 2d recursive calls, any (d-1)-
face can appear in at most 2d−1 of those. In general, for any i, there are at most
2i recursive calls at the i-th level of recursion, but any (d-1)-face of the original
set can intersect at most 2(cid:98)i/d(cid:99)(d−1) of the cells corresponding to the domain of

7

1 , . . . , V (cid:48)
|B|

Vi+c ← Vi+c + V (cid:48)

i

for i ∈ [1..|B|] do

(cid:1) of B within Γ using Lemma 1

Compute the Depth Distribution(cid:0)V (cid:48)

Algorithm 1 SDC-DDistribution(B, Γ, c, (V1, . . . , Vn))
Input: A set B of n boxes in Rd; a d-dimensional domain box Γ ; the number c of
boxes not in B but in the original set that completely contain Γ ; and a vector
(V1, . . . , Vn) representing the Depth Distribution computed so far.
1: if no box in B has a (d-2)-face intersecting Γ (i.e., all the boxes are slabs) then
2:
3:
4:
5: else
6:
7:
8:
9:
10:
11:
12:
13:
14:

Let B0 ⊆ B be the subset of boxes completely containing Γ
c ← c + |B0|
Let B(cid:48) = B \ B0
Let m be the weighted median of the (d-2)-faces orthogonal to x1;
Split Γ into ΓL, ΓR by the hyperplane x1 = m;
Rename the dimensions so that x1, . . . , xd becomes x2, . . . , xd, x1;
Let BL and BR be the subsets of B(cid:48) intersecting ΓL and ΓR respectively;
Call SDC-DDistribution(BL, ΓL, c, (V1, . . . , Vn))
Call SDC-DDistribution(BR, ΓR, c, (V1, . . . , Vn))

those calls. Hence, the total number of (d-1)-faces which survive until the i-th
level of the recursion tree is within O(n2(cid:98)i/d(cid:99)(d−1)) (a similar argument was used
by Overmars and Yap [22] to bound the running time of the data structure they
introduced).

Let h be the height of the recursion tree of Algorithm 1. Chan [10] showed
that the partition in steps 9-11 makes h to be within a constant term of d
2 log n.
We analyze separately the total cost TI (n) of the interior nodes of the recursion
tree (i.e. the nodes corresponding to recursive calls which fail the base case
condition in step 1), from the total cost TL(n) of the leaves of the recursion tree.
Since, the cost of each interior node is linear in the number of (d-1)-faces

intersecting the corresponding domain, TI (n) is bounded by:

TI (n) ∈ h(cid:88)

O(n2

(cid:98)i/d(cid:99)(d−1))

h(cid:88)

2i(d−1)/d)

i=1

⊆ O(n

⊆ O(n2
⊆ O(n2
= O(n

i=1
d−1
d h)
d−1

d

d+1
2 )

d

2 log n)

To analyze the total cost of the leaves of the recursion tree, ﬁrst note that the
total number l of such recursive calls is within O(nd/2). Let n1, . . . , nl denote
the number of (d-1)-faces in each of those recursive calls, respectively. Note that
i=1 ni log ni) because the result of Lemma 1 is used in line

TL(n) is within O((cid:80)l

8

d+1

2

2 ) ,(cid:80)l

step 1 of the algorithm. Besides, since the number of (d-1)-faces which survive
until the h-th level of the recursion tree is within O(n
d+1
2 ).
That bound, and the fact that log ni ≤ log n, for all i ∈ [1..l], yields TL(n) ∈
O(n
log n). As T (n) = TI (n)+TL(n), the bound for the running time follows.
With respect to the space used by the algorithm, note that only one path in
recursion tree is active at any moment, and that at most O(n) extra space is
needed within each recursive call. Since the height of the recursion tree is within
O(log n), the total space used by the algorithm is clearly within O(n log n). (cid:117)(cid:116)

i=1 ni ∈ O(n

d−1

Note that in SDC-DDistribution the Depth Distribution is accumulated
into a parameter. This is only to simplify the description and analysis of the
algorithm, it does not impact its computational or space complexity. The initialization 
of the parameters of SDC-DDistribution should be done as below:

Algorithm 2 DDistribution(B, Γ )
Input: A set B of n boxes in Rd, a d-dimensional domain box Γ
Output: The Depth Distribution of B within Γ
1: (V1, V2, . . . , Vn) ← (0, 0, . . . , 0)
2: SDC-DDistribution(B, Γ, 0, (V1, V2, . . . , Vn))
3: return (V1, V2, . . . , Vn)

√
The bound for the running time in Theorem 3 is worse than that of computing
the Klee’s Measure (and Maximum Depth) by a factor within O(
n log n),
which raises the question of the optimality of the bound: we consider this matter
in the next section.

3.2 Conditional Lower Bound

As for many problems handling high dimensional inputs, the best lower bound
known for this problem is Ω(n log n) [15], which derives from the fact that the
Depth Distribution is a generalization of the Klee’s Measure problem.
This bound, however, is tight only when the input is a set of intervals (i.e,
d = 1). For higher dimensions, the conjectured lower bound of Ω(nd/2) described 
by Chan [9] in 2008 for the computational complexity of computing
the Klee’s Measure can be extended analogously to the computation of the
Depth Distribution.
One intriguing question is whether in dimension d = 2, as for Klee’s Measure,
 the Depth Distribution can be computed in time within O(n log n).
We argue that doing so would imply breakthrough results in a long standing
problem, Matrix Multiplication. We show that any instance of Matrix
Multiplication can be solved using an algorithm which computes the Depth
Distribution of a set of rectangles in the plane. For this, we make use of the
following simple observation:

9

Observation 1. Let A,B be two n × n matrices of real numbers, and let Ci
denote the n × n matrix that results from multiplying the n × 1 vector corresponding 
to the i-th column of A with the 1× n vector corresponding to the i-th

row of B. Then, AB =(cid:80)n

i=1 Ci.

We show in Theorem 4 that multiplying two n × n matrices can be done by
transforming the input into a set of O(n2) axis-aligned rectangles, and computing
the Depth Distribution of the resulting set. Moreover, this transformation can
be done in linear time, thus, the theorem yields a conditional lower bound for
the computation of the Depth Distribution.
Theorem 4. Let A, B be two n×n matrices of non-negative real numbers. There
is a set B of rectangles of size within O(n2), and a domain rectangle Γ , such that
the Depth Distribution of B within Γ can be projected to obtain the value of
the product AB.

Proof. We create a gadget to represent each Ci. Within the i-th gadget, there
will be a rectangular region for each coeﬃcient of (Ci) with the value of that
coeﬃcient as volume (see Figure 2 for a general outlook of the instance). We
arrange the boxes so that two of such rectangular regions have the same depth
if and only if they represent the same respective coeﬃcients of two distinct
matrices Ci and Ci(cid:48) (formally, they represent coeﬃcients (Ci)j,k and (Ci(cid:48))j(cid:48),k(cid:48),
respectively, such that i (cid:54)= i(cid:48), j = j(cid:48), and k = k(cid:48)).

Figure 2: An outlook of the instance generated for the product AB: we add a
gadget for each C1, . . . , Cn, within a domain Γ as in a). In b), a representation
of Ci with 2n boxes, the volume of the rectangular regions correspond to the
coeﬃcients of Ci (the regions in a gadget must have distinct depths to avoid that
their volumes are added into a same component of the Depth Distribution).

We describe a set of 5n2 boxes B (one box for each of the n2 coeﬃcients
of A, two boxes for each of the n2 coeﬃcients of B, and 2n2 additional boxes)

...............A1,iA2,iAn,iBi,1Bi,2Bi,n......C1CiCna)b)...(Ci)1,1(Ci)1,2(Ci)1,n(Ci)2,1(Ci)2,2(Ci)2,n(Ci)n,1(Ci)n,2(Ci)n,n...Γ(cid:80)nj=1B1,j(cid:80)nj=1Bi,j(cid:80)nj=1Bn,j(cid:80)imaxj{Ai,j}Cii

i

i

k=1 maxn

i

.

i

10
such that, for each i, j ∈ [1..n], the (2ni + 2j + 1)-th component of the Depth
Distribution of B is equal to the component ABi,j of the product AB. Such a
set can be constructed as follows (see Figure 3 for a graphical representation of
the instance generated):

– Let the domain Γ = {(x, y) | 0 ≤ x ≤(cid:80)

i maxj{Ai,j}}.
– For all i ∈ [1..n] we create a gadget for Ci that covers the entire domain in
i =

(cid:80)
j Bi,j, 0 ≤ y ≤(cid:80)
(cid:80)n
= (cid:80)i−1
+(cid:80)n
Ci entirely in the x-direction, and is bounded by ((cid:80)j
y ≤ (Aj,i +(cid:80)j

the y-direction, and that spans from C start
C start
– Within the gadget for Ci we place one box for each Aj,i and two boxes for
each Bi,j, for i, j ∈ [1..n], as follows: the one corresponding to Aj,i will span
l=1{Ak,l}) ≤
l=1{Ak,l}) in the y-direction. For Bi,j we place two
identical boxes entirely spanning Ci in the y-direction, and in the x-direction
k=1 Bi,k) ≤ x ≤ C end
bounded by (C start

k=0 Bi,k in the x-direction.

+(cid:80)j−1

k=1 maxn

j=1

k=0 Bj,k to C end

– Finally, we add 2n2 boxes to ensure that rectangular regions corresponding
to two coeﬃcients Ci,j and Ci,k in distinct rows j, k of a same Ci do not
share the same depth, for all i, j, k ∈ [1..n] . For this, for all j ∈ [1..n] we
add 2n identical boxes entirely spanning the domain in the x-direction, and
i maxj{Ai,j})) in the y-direction.

spanning from ((cid:80)j

l=1{Ak,l}) to ((cid:80)

k=1 maxn

Note that in the instance generated, for i, j ∈ [1..n]:

– a region has odd depth if and only if its volume is equal to some coeﬃcient

of any Ci;

– the regions corresponding to coeﬃcients of the i-th rows have depth between

(2in + 3) and (4in + 1);

– within the gadget for each Ci, the rectangular region with volume corresponding 
to the coeﬃcient Ci,j has depth (2ni + 2j + 1), and no other rectangular 
region within the gadget has that depth;

– two distinct regions have the same depth if and only if they represent the

same respective coeﬃcients of two distinct matrices Ci and Ci(cid:48).

The arguments above and the fact that, by deﬁnition of the Depth Distribution 
the volumes of regions with the same depth are accumulated together,
(cid:117)(cid:116)
yield the result of the theorem.
The optimal time to compute the product of two n× n matrices is still open.
It can naturally be computed in time within O(n3). However, Strassen showed in
1969 that within O(n2.81) arithmetic operations are enough [23]. This gave rise
to a new area of research, where the central question is to determine the value of
the exponent of the computational complexity of square matrix multiplication,
denoted ω, and deﬁned as the minimum value such that two n × n matrices can
be multiplied using within O(nω+ε) arithmetic operations for any ε > 0.

Figure 3: Illustration of an instance of Depth Distribution generated for the product AB. The text in red is the depth of
the region. The small arrows indicate that the boxes they delimit span the entire domain in the direction they point to. Small
numbers in the corner of each box indicate the number of exact copies of that box added to the instance (or intuitively, the
weight of the box). Finally, the numbers over curly brackets indicate the length of the region delimited by the brackets.

1
1

A1,1B1,1B1,2B1,nBn,1Bn,2Bn,n2n+34n+32n2+32n+24n+22n2+24n+14n2.....................222222n1111112n2nmaxi{A1,i}maxi{A2,i}maxi{An,i}A2,1An,1A1,nA2,nAn,n............................................................2n+52n+44n+54n+46n+16n242n2n4n2n2242n2n+32n+24n+14n2n+52n+4......4n+34n+24n+54n+46n+16n2n2+52n2+42n2+2n2+2n2n+12n2+32n2+22n2+52n2+42n2+2n2+2n2n+1...(cid:80)ni=1B1,i(cid:80)ni=1Bn,i...............00B2,1B2,2B2,n2n+34n+32n2+32n+24n+22n2+24n+14n2.....................22111...............2n+52n+44n+54n+46n+16n242n2n2+52n2+42n2+2n2+2n2n+1(cid:80)ni=1B2,i...A1,2A2,2An,2C1C2Cn12

The result of Theorem 4 directly yields a conditional lower bound on the
complexity of Depth Distribution: in particular, Depth Distribution in
dimension as low as two, can be solved in time within O(n log n), then Matrix
Multiplication can be computed in time within O(n2), i.e. ω = 2. However,
this would be a great breakthrough in the area, the best known upper bound to
date is approximately ω ≤ 2.37, when improvements in the last 30 years [11, 16]
have been in the range [2.3728, 2.3754].

Corollary 5 (Conditional lower bound). Computing the Depth Distribution 
of a set B of n d-dimensional boxes requires time within Ω(n1+c), for some
constant c > 0, unless two n× n matrices can be multiplied in time O(n2+ε), for
any constant ε > 0.

The running time of the algorithm that we described in Theorem 3 can be
improved for large classes of instances (i.e. asymptotically inﬁnite) by considering
measures of the diﬃculty of the input other than its size. We describe two of
these improved solutions in the next section.

2

d+1

4 Multivariate analysis
Even though the asymptotic complexity of O(n
log n) is the best we know so
far for computing the Depth Distribution of a set of n d-dimensional boxes,
there are many cases which can be solved faster. Some of those “easy” instances
can be mere particular cases, but others can be hints of some hidden measures of
diﬃculty of the Depth Distribution problem. We show that, indeed, there are
at least two such diﬃculty measures, gradually separating instances of the same
size n into various classes of diﬃculty. Informally, the ﬁrst one (the proﬁle of
the input set, Section 4.1) measures how separable the boxes are by axis-aligned
hyperplanes, whereas the second one (the degeneracy of the intersection graph,
Section 4.2) measures how “complex” the interactions of the boxes are in the
set between them. Those measures inspire similar results for the computation of
the Klee’s Measure and of the Maximum Depth.

4.1 Proﬁle
The i-th proﬁle pi of a set of boxes B is the maximum number of boxes intersected
by any hyperplane orthogonal to the i-th dimension; and the proﬁle p of B is the
minimum p = mini∈[1..d]{pi} of those over all dimensions. D’Amore [13] showed
how to compute it in linear time (after sorting the coordinate of the boxes in
each dimension). The following lemma shows that the Depth Distribution
can be computed in time sensitive to the proﬁle of the input set.
Lemma 6. Let B be a set of boxes with proﬁle p, and Γ be a d-dimensional axisaligned 
domain box. The Depth Distribution of B within Γ can be computed
in time within O(n log n + np

log p) ⊆ O(n

log n).

d−1

2

d+1

2

13

Proof. We describe an algorithm which partitions the domain into independent
slabs, computes the Depth Distribution within each slab, and combines the
results into the ﬁnal answer. For this, it sweeps a plane by the dimension with
smallest proﬁle, and after every 2p endpoints, it creates a new slab cutting
the space with a hyperplane orthogonal to this dimension. This partitions the
space into O(n/p) slabs, each intersecting at most O(p) boxes. Finally, the algorithm 
computes the Depth Distribution of B within each slab in time within
log p), and obtains the Depth Distribution of B within Γ by summing
O(p
the respective components of the Depth Distribution within each slab. The
(cid:117)(cid:116)
total running time of this is within O(n log n + np

log p).

d−1

d+1

2

2

The lemma above automatically yields reﬁned results for the computation of
the Klee’s Measure and the Maximum Depth of a set of boxes B. However,
applying the technique in an ad-hoc way to these problems yields better bounds:
Corollary 7. Let B be a set of boxes with proﬁle p, and Γ be a domain box.
The Klee’s Measure and Maximum Depth of B within Γ can be computed
in time within O(n log n + np

2 ) ⊆ O(nd/2).

d−2

The algorithms from Lemma 6 and Corollary 7 asymptotically outperform
previous ones in the sense that their running time is never worse than previous
algorithms by more than a constant factor, but can perform faster by more than
a constant factor on speciﬁc families of instances.
An orthogonal approach is to consider how complex the interactions between
the boxes are in the input set B, analyzing, for instance, the intersection graph
of B. We study such a technique in the next section.

4.2 Intersections Graph Degeneracy

A k-degenerate graph is an undirected graph in which every subgraph has a
vertex of degree at most k [19]. Every k-degenerate graph accepts an ordering
of the vertices in which every vertex is connected with at most k of the vertices
that precede it (we refer below to such an ordering as a degenerate ordering).
In the following lemma we show that this ordering can be used to compute
the Depth Distribution of a set B of n boxes in running time sensitive to the
degeneracy of the intersection graph of B.
Lemma 8. Let B be a set of boxes and Γ be a domain box, and let k be the
degeneracy of the intersection graph G of the boxes in B. The Depth Distribution 
of B within Γ can be computed in time within O(n logd n + e + nk
2 ),
where e ∈ O(n2) is the number of edges of G.

d+1

Proof. We describe an algorithm that runs in time within the bound in the
lemma. The algorithm ﬁrst computes the intersection graph G of B in time within
O(n logd n + e) [14], as well as the k-degeneracy of this graph and a degenerate
ordering O of the vertices in time within O(n + e) [20]. The algorithm then
iterates over O maintaining the invariant that, after the i-th step, the Depth

14

Distribution of the boxes corresponding to the vertices v1, v2, . . . , vi of the
ordering has been correctly computed.
For any subset V of vertices of G, let DDΓB (V ) denote the Depth Distribution 
within Γ of the boxes in B corresponding to the vertices in V . Also, for
i ∈ [1..n] let O[1..i] denote the ﬁrst i vertices of O, and O[i] denote the i-th vertex 
of O. From DDΓB (O[1..i-1]) (which the algorithm “knows” after the (i-1)-th
iteration), DDΓB (O[1..i]) can be obtained as follows: (i.) let P be the subset of
O[1..i-1] connected with O[i]; (ii.) compute DDO[i]B (P ∪ {O[i]}) in time within
O(k
log k) using SDC-DDistribution (note that the domain this time is O[i]
itself, instead of Γ ); (iii.) add to (DDΓB (O[1..i]))1 the value of (DDO[i]B (P ∪
O[i]))1; and (iv.) for all j = [2..k+1], substract from (DDΓB (O[1..i]))j−1 the
value of (DDO[i]B (P ∪ O[i]))j and add it to (DDΓB (O[1..i-1]))j.
O(k

Since the updates to the Depth Distribution in each step take time within
(cid:117)(cid:116)

log k), and there are n such steps, the result of the lemma follows.

d+1

d+1

2

2

Unlike the algorithm sensitive to the proﬁle, this one can run in time within
d+1
2 ) complexity

O(n1+ d+1
of SDC-DDistribution for values of the degeneracy k within O(n1− 2
d ).

2 ) (e.g. when k = n), which is only better than the O(n

Applying the same technique to the computation of Klee’s Measure and

Maximum Depth yields improved solutions as well:
Corollary 9. Let B be a set of boxes and Γ be a domain box, and let k be the
degeneracy of the intersection graph G of the boxes in B. The Klee’s Measure 
and Maximum Depth of B within Γ can be computed in time within
O(n logd n + e + nk

2 ), where e ∈ O(n2) is the number of edges of G.

d

Such reﬁnements of the worst-case complexity analysis are only examples and
can be applied to many other problems handling high dimensional data inputs.
We discuss a selection in the next section.

5 Discussion

The Depth Distribution captures many of the features in common between
Klee’s measure and Maximum Depth, so that new results on the computation 
of the Depth Distribution will yield corresponding results for those two
measures, and has its own applications of interest. Nevertheless, there is no direct
reduction to Klee’s measure or Maximum Depth from Depth Distribution,
 as the latter seems computationally more costly, and clarifying further the
relationship between these problems will require ﬁner models of computation.
We discuss below some further issues to ponder about those measures.
Discrete variants. In practice, multidimensional range queries are applied to a
database of multidimensional points. This yields discrete variants of each of the
problems previously discussed [1, 25]. In the Discrete Klee’s measure, the
input is composed of not only a set B of n boxes, but also of a set S of m points.
The problem is now to compute not the volume of the union of the boxes, but the

REFERENCES

15

number (and/or the list) of points which are covered by those boxes. Similarly,
one can deﬁne a discrete version of the Maximum Depth (which points are
covered by the maximum number of boxes) and of the Depth Distribution
(how many and which points are covered by exactly i boxes, for i ∈ [1..n]).
Interestingly enough, the computational complexity of these discrete variants is
much less than that of their continuous versions when there are reasonably few
points [25]: the discrete variant becomes hard only when there are many more
points than boxes [1]. Nevertheless, “easy” conﬁgurations of the boxes also yield
“easy” instances in the discrete case: it will be interesting to analyze the discrete
variants of those problems according to the measures of proﬁle and k-degeneracy
introduced on the continuous versions.
Tighter Bounds. Chan [10] conjectured that a complexity of Ω(nd/2) is required
to compute the Klee’s Measure, and hence to compute the Depth Distribution.
 However, the output of Depth Distribution gives much more information 
than the Klee’s Measure, of which a large part can be ignored during
the computation of the Klee’s Measure (while it is required for the computation 
of the Depth Distribution). It is not clear whether even a lower bound
of Ω(nd/2+) can be proven on the computational complexity of the Depth
Distribution given this fact.

Funding: All authors were supported by the Millennium Nucleus “Information
and Coordination in Networks” ICM/FIC RC130003. J´er´emy Barbay and Pablo
P´erez-Lantero were supported by the projects CONICYT Fondecyt/Regular nos
1170366 and 1160543 (Chile) respectively, while Javiel Rojas-Ledesma was supported 
by CONICYT-PCHA/Doctorado Nacional/2013-63130209 (Chile).

References

[1] Mahmoud Abo Khamis, Hung Q. Ngo, Christopher R´e, and Atri Rudra.
“Joins via Geometric Resolutions: Worst-case and Beyond.” In: Proceedings 
of the 34th ACM Symposium on Principles of Database Systems (PODS),
Melbourne, Victoria, Australia, May 31 - June 4, 2015. 2015, pp. 213–228.
[2] Peyman Afshani. “Fast Computation of Output-Sensitive Maxima in a
Word RAM.” In: Proceedings of the Twenty-Fifth Annual ACM-SIAM
Symposium on Discrete Algorithms (SODA), Portland, Oregon, USA, January 
5-7, 2014. SIAM, 2014, pp. 1414–1423.

[3] Peyman Afshani, Lars Arge, and Kasper Green Larsen. “Higher-dimensional
orthogonal range reporting and rectangle stabbing in the pointer machine
model.” In: Symposuim on Computational Geometry (SoCG), Chapel Hill,
NC, USA, June 17-20, 2012. 2012, pp. 323–332.

[4] Peyman Afshani, J´er´emy Barbay, and Timothy M. Chan. “Instance-Optimal
Geometric Algorithms.” In: Journal of the ACM (JACM) 64.1 (Mar. 2017),
3:1–3:38.

16

REFERENCES

[5] J´er´emy Barbay, Pablo P´erez-Lantero, and Javiel Rojas-Ledesma. “Depth
Distribution in High Dimension.” In: Proceedings of the 23rd Annual International 
Computing and Combinatorics Conference (COCOON’17). Ed.
by Yixin Cao and Jianer Chen. 2017.

[6] Jon L. Bentley. “Algorithms for Klee’s rectangle problems.” In: Unpublished 
notes (1977).

[7] Karl Bringmann. “An improved algorithm for Klee’s measure problem on
fat boxes.” In: Computational Geometry, Theory and Applications 45.5-6
(2012), pp. 225–233.

[8] Karl Bringmann. “Bringing Order to Special Cases of Klee’s Measure Problem.
” In: Mathematical Foundations of Computer Science 2013 - 38th International 
Symposium (MFCS), Klosterneuburg, Austria, August 26-30,
2013. Proceedings. 2013, pp. 207–218.

[9] Timothy M. Chan. “A (slightly) faster algorithm for Klee’s Measure Problem.
” In: Proceedings of the 24th ACM Symposium on Computational Geometry 
(SoCG), College Park, MD, USA, June 9-11, 2008. 2008, pp. 94–
100.

[10] Timothy M. Chan. “Klee’s Measure Problem Made Easy.” In: 54th Annual
IEEE Symposium on Foundations of Computer Science (FOCS), Berkeley,
CA, USA, 26-29 October, 2013. 2013, pp. 410–419.

[11] Don Coppersmith and Shmuel Winograd. “Matrix Multiplication via Arithmetic 
Progressions.” In: Proceedings of the 19th Annual ACM Symposium
on Theory of Computing (STOC), 1987, New York, New York, USA. ACM,
1987, pp. 1–6.

[12] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Cliﬀord

Stein. Introduction to Algorithms (3. ed.) MIT Press, 2009.

[13] Fabrizio d’Amore, Viet Hai Nguyen, Thomas Roos, and Peter Widmayer.
“On Optimal Cuts of Hyperrectangles.” In: Computing 55.3 (1995), pp. 191–
206.

[14] Herbert Edelsbrunner. “A new approach to rectangle intersections part I.”
In: Journal of Computer Mathematics (JCM) 13.3-4 (1983), pp. 209–219.
[15] Michael L. Fredman and Bruce W. Weide. “On the Complexity of Computing 
the Measure of ∪n
1 [ai, bi].” In: Communications of the ACM (CACM)
21.7 (1978), pp. 540–544.

[16] Fran¸cois Le Gall. “Powers of tensors and fast matrix multiplication.” In:
International Symposium on Symbolic and Algebraic Computation (IS-
SAC), Kobe, Japan, July 23-25, 2014. ACM, 2014, pp. 296–303.

[17] David G. Kirkpatrick and Raimund Seidel. “Output-size sensitive algorithms 
for ﬁnding maximal vectors.” In: Proceedings of the First Annual
Symposium on Computational Geometry (SoCG), Baltimore, Maryland,
USA, June 5-7, 1985. 1985, pp. 89–96.
[18] Victor Klee. “Can the Measure of ∪n

1 [ai, bi] be Computed in Less Than
O(n log n) Steps?” In: The American Mathematical Monthly (AMM) 84.4
(1977), pp. 284–285.

REFERENCES

17

[19] Don R Lick and Arthur T White. “k-Degenerate graphs.” In: Canadian

Journal of Mathematics (CJM) 22 (1970), pp. 1082–1096.

[20] David W. Matula and Leland L. Beck. “Smallest-last Ordering and Clustering 
and Graph Coloring Algorithms.” In: Journal of the ACM (JACM)
30.3 (July 1983), pp. 417–427.

[21] Alistair Moﬀat and Ola Petersson. “An Overview of Adaptive Sorting.”

In: Australian Computer Journal (ACJ) 24.2 (1992), pp. 70–77.

[22] Mark H. Overmars and Chee-Keng Yap. “New Upper Bounds in Klee’s

Measure Problem.” In: SIAM Journal on Computing (SICOMP) 20.6 (1991),
pp. 1034–1045.

[23] Volker Strassen. “Gaussian Elimination is Not Optimal.” In: Numerische

Mathematik 13.4 (Aug. 1969), pp. 354–356.

[24] Hakan Yildiz and Subhash Suri. “On Klee’s measure problem for grounded
boxes.” In: Symposuim on Computational Geometry (SoCG), Chapel Hill,
NC, USA, June 17-20, 2012. 2012, pp. 111–120.

[25] Hakan Yildiz, John Hershberger, and Subhash Suri. “A Discrete and Dynamic 
Version of Klee’s Measure Problem.” In: Proceedings of the 23rd Annual 
Canadian Conference on Computational Geometry (CCCG), Toronto,
Ontario, Canada, August 10-12, 2011. 2011.

[26] Hakan Yildiz, Luca Foschini, John Hershberger, and Subhash Suri. “The
Union of Probabilistic Boxes: Maintaining the Volume.” In: Algorithms -
ESA 2011 - 19th Annual European Symposium, Saarbr¨ucken, Germany,
September 5-9, 2011. Proceedings. 2011, pp. 591–602.

