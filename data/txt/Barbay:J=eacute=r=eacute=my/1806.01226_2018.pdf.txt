Adaptive Computation of the

Discrete Fréchet Distance

Jérémy Barbay

Departamento de Ciencias de la Computación,

University of Chile,
jeremy@barbay.cl

8
1
0
2

 

n
u
J
 

4

 
 
]

G
C
.
s
c
[
 
 

1
v
6
2
2
1
0

.

6
0
8
1
:
v
i
X
r
a

Abstract. The discrete Fréchet distance is a measure of similarity between point sequences which
permits to abstract diﬀerences of resolution between the two curves, approximating the original Fréchet
distance between curves. Such distance between sequences of respective length n and m can be computed
in time within O(nm) and space within O(n + m) using classical dynamic programing techniques, a
complexity likely to be optimal in the worst case over sequences of similar lenght unless the Strong
Exponential Hypothesis is proved incorrect. We propose a parameterized analysis of the computational
complexity of the discrete Fréchet distance in fonction of the area of the dynamic program matrix
relevant to the computation, measured by its certiﬁcate width ω. We prove that the discrete Fréchet
distance can be computed in time within ((n + m)ω) and space within O(n + m + ω).

1 Introduction

Measuring the similarity between two curves has applications in areas such as handwriting recognition [14],
protein structure alignment [10], quantifying macro-molecular pathways [13], morphing [3], movement analysis 
[7], and many others [15]. One of the most popular solutions, the Fréchet Distance is a measure of
similarity between two curves P and Q, that takes into account the location and ordering of the points along
the curves. It permits, among other features, to abstract the diﬀerence of resolution between P and Q, with
application to morphing, handwriting recognition and protein structure alignment, among others [15]. In
1995, Art and Godau [9] described an algorithm computing the Fréchet Distance between two polygonal
curves composed of n and m segments respectively in time within O(mn log(mn)).

One year before (1994), Eiter and Mannila [4] had extended the notion of the Fréchet Distance
between curves to the Discrete Fréchet Distance between sequence of points of respective sizes n and
m, demonstrating that the latter can be used to approximate the former in time within O(nm) and space
within O(n + m) using classical dynamic programming techniques. Two decades later (2014), Bringmann [2]
showed that this worst case complexity is likely to be optimal, unless a bunch of other problems (among
which CNF SAT) can be computed faster than usually expected. Hence, the bounds about the computational
complexity of the Discrete Fréchet Distance in the worst case over instances of input sizes n and m
are reasonably tight.

Yet, for various restricted classes of curves (e.g. κ-bounded, backbone, c-packed and long-edged [8] curves),
both the Fréchet Distance and the Discrete Fréchet Distance are known to be easier to compute.
Among other examples, we consider the Fréchet Distance Decision problem, which consists in deciding
whether the Fréchet Distance between two curves is equal to a given value f . In 2018, Gudmundsson
et al. [8] described an algorithm deciding if the Fréchet Distance is equal to a given value f in time
linear in the size of the input curves when each edge is longer than the Fréchet Distance between those
two curves. Based on this algorithm, they also showed how to approximate the Fréchet Distance within
a factor of √d in linear time, and preprocessed in linear time in order to support decision queries in time
within O(m log2 n). Those results easily project to the Discrete Fréchet Distance.

Those results for the mere computation of the Discrete Fréchet Distance suggest that one does not
always need to compute the n × m values of the dynamic program. Can such approaches be applied to
more general instances, such that the area of the dynamic program which needs to be computed
measures the diﬃculty of the instance?

In this work we perform a parameterized analysis of the computational complexity of the Discrete
Fréchet Distance, in function of the area of the dynamic program matrix relevant to the computation,
measured by its certiﬁcate width ω. After describing summarily the traditional way to compute the Discrete
Fréchet Distance and the particular case of long edged curves (Section 2), we describe an optimization of
the classical dynamic program based on two simple techniques, banded dynamic programming and thresholding 
(Section 3), and we prove that this program runs in time within O((n + m)ω) and space within O(n + m)
(Section 4). We conclude with a discussion in Section 5 of how our results generalize those of Gudmundsson 
et al. [8], and the potential applications and generalizations of our techniques to other problems where
dynamic programs have given good results

2 Preliminaries

Before describing our results, we describe some classical results upon which we build: the classical dynamic
program computing the Discrete Fréchet Distance, and the “easy” case of long-edged curves described
by Gudmundsson et al. [8].

Classical Dynamic Program Let P [1..n] and Q[1..m] be sequences of n and m points with n ≥ m. The
Discrete Fréchet Distance between P and Q is the minimal width of a traversal of P and Q, where the
width of a traversal is the maximal distance separating two points u ∈ P and v ∈ Q, where u and v progress
independently, but always forward.
Such a distance is easily computed using classical techniques from dynamic programming. The distance
between P [1..n] and Q[1..m] can be reduced in constant time to the minimum between the distance between
P [1..n − 1] and Q[1..m], the distance between P [1..n] and Q[1..m − 1], and the distance between P [1..n − 1]
and Q[1..m− 1]. Algorithm 1 (page 3) describes a simple implementation in Python, executing in time within
O(nm). While such a simple algorithm also requires space within O(nm), a simple optimization yields a space
within O(n+m), by computing the Discrete Fréchet Distance between P [1..i] and Q[1..j] for increasing
values of i and j, one column and row at the time, keeping in memory only the previous column and row.
We describe in Section 3 a more sophisticated algorithm which avoids computing some of the n × m values
computed by Algorithm 1.

Easy instances of the Fréchet Distance For various restricted classes of curves, such as κ-bounded,
backbone, c-packed and long-edged [8] curves, both the Fréchet Distance and the Discrete Fréchet
Distance are known to be easier to compute (or approximate).

A curve P is κ-bounded if for any two points x, y ∈ P, the union of the balls with radii r centered at y
and y contains the whole P[x, y] where r is equal to (κ/2) times the Euclidean distance between x and y.
Alt et al. described an algorithm to approximate within a factor of κ the Discrete Fréchet Distance
between two such curves of length at most n, in time within O(n lg n).

A backbone curve has constant edge length and requires a minimum distance between non-consecutive
vertices. Aronov et al. described an algorithm approximating within a factor of (1 + ε) the Discrete
Fréchet Distance of such curves in time near-linear in the size of the curves.

the diameter of B.

A curve P is c-packed if for any ball B the length of the portion of P contained in B is at most c times
In 2018, Gudmundsson et al. [8] showed that in the special case where all the edges of the polygonal
curve are longer than the Fréchet Distance, the latter can be decided (i.e., checking a value of the
Fréchet Distance) in linear time in the size of the input, computed in time within O((n + m) lg(n + m)),
approximated within a factor of √d in linear time in the size of the input, and preprocessed in linear time
in order to support decision queries in time within O(m log2 n).

In the next section, we describe a quite simple algorithm which not only takes advantage of long edged
curves, but of any pair of curves for which a consequent part of the array of the dynamic program can be
ignored.

2

Algorithm 1 Classical algorithm to compute the Discrete Fréchet Distance between two sequences
of points P and Q. The implementation is decomposed in two parts: the computation function initializes 
the array of values, which is ﬁlled recursively by the recursive function. For the sake of space, the
documentation strings and unit tests were not included, but the source ﬁle including those is available at
https://github.com/FineGrainedAnalysis/Frechet.

def recursive (dpA ,i ,j ,P ,Q ):

if dpA [i ,j] > −1:

return dpA [i ,j]

elif i == 0 and j == 0:

dpA [i ,j] = distance (P [0] , Q [0])

elif i > 0 and j == 0:

dpA [i ,j] = max (

recursive ( dpA ,i −1,0,P ,Q),
distance (P[i], Q [0]))

elif i == 0 and j > 0:

dpA [i ,j] = max (

recursive ( dpA ,0 ,j −1,P ,Q),
distance (P [0] , Q[j ]))

elif i > 0 and j > 0:

dpA [i ,j] = max (

min (

recursive ( dpA ,i −1,j ,P ,Q),
recursive ( dpA ,i −1,j −1,P ,Q),
recursive ( dpA ,i ,j −1,P ,Q )) ,

distance (P[i], Q[j ]))

else :

dpA [i ,j] = float (" inf ")

return dpA [i ,j]

def computation (P ,Q ):

dpA = numpy . ones (( len (P), len (Q )))
dpA = numpy . multiply ( dpA , −1)
d = recursive (dpA , len (P)−1, len (Q)−1,P ,Q)
return d

3

3 An opportunistic Dynamic Program

We describe an algorithm based on two complementary techniques: ﬁrst, a banded dynamic program, which
approximates the value computed by a classical dynamic program by considering only the values of the
dynamic program within a range of width w (for some parameter w) around the diagonal (a technique
previously introduced for the computation of the Edit Distance between two strings); and second, a
thresholding process, which accelerates the computation by cutting the recurrence any time the distance
computed becomes larger or equal to a threshold t (for some parameter t corresponding to a distance already
achieved by some traversal of the two curves). The combination of those two techniques, combined with a
parametrization of the problem, yields the parameterized upper bound on the computational complexity of
the Discrete Fréchet Distance.

Banded Dynamic Program: When computing the Edit Distance (e.g., the Delete Insert Edit
Distance, or the Levenshtein Edit Distance [1]) between similar strings S ∈ [1..σ]n and T ∈ [1..σ]m
(i.e., their Edit Distance d is small), it is possible to compute less than n× m cells of the dynamic program
array, and hence compute the Edit Distance in time within O(d(n+m)) ⊆ O(nm). The “trick” is based
on the following observation: when the distance between the two strings is d, the “paths” corresponding to
d operations transforming S into T in the matrix of the dynamic program errs at most at distance d from
the diagonal between the cell (1, 1) and the cell (n, m). Based on this observation, it is suﬃcient to compute
the number of operations corresponding to paths inside a “band” of width d around such a diagonal [1]. This
technique needs some adaptation to be applied to the computation of the Discrete Fréchet Distance
f between two curves, for two reasons: ﬁrst, f is a real number (it corresponds to the Euclidean distance
between two points) and not an integer as the number of edition operations, and this number is independent
of the number of cells of the dynamic program being computed; and second, the deﬁnition of the Discrete
Fréchet Distance is based on a maximum rather than a sum, which actually makes another optimization
possible, described in the next paragraph.

Thresholding: Given two sequences of points P [1..n] and Q[1..m], consider the Euclidean matrix E(P, Q)
of all n×m distances between a point u ∈ P and a point v ∈ Q. Any parallel traversal of P and Q corresponds
to a path in E(P, Q) from the top left cell (1, 1) to the bottom right cell (n, m); the width of such a traversal
is the maximum value in E(P, Q) on this path; and the Discrete Fréchet Distance is the minimum
width achieved over all such traversals.

Now suppose that, as for the Edit Distance between two similar strings, the traversal of the Euclidean
matrix E(P, Q) corresponding to the Discrete Fréchet Distance f between P and Q is close to the
diagonal from (1, 1) to (n, m), and that any traversal diverging from such a path “encounters” a pair of points
(u, v) at euclidean distance larger than f (in particular, this happens when the two curves are “long edged”
compared to f ). Then, some of the values of the cells of the dynamic program matrix outside of this diagonal
can be ignored for the computation of the Discrete Fréchet Distance between P and Q.

In the following paragraph we describe how to combine those two techniques into an adaptive algorithm
taking advantage of “easy” instances where a large quantity of cells of the dynamic program can be ignored.

Combining the two techniques: The solution described consists of two algorithms: an approximation
algorithm 2 which computes a parameterized upper bound on the Discrete Fréchet Distance, and a
computation algorithm 3 which calls the previous one iteratively with various parameter values, in order to
compute the real Discrete Fréchet Distance of the instance.

Algorithm 2 lists an implementation in Python of an algorithm which, given as parameters two arrays of
points P and Q, an integer width w, and a float threshold t; computes an upper bound of the Discrete
Fréchet Distance between P and Q, obtained by computing only the cells within a band of width 2w
around the diagonal from the top left cell (1, 1) to the bottom right cell (n, m), and cutting all sequences of
recursive calls when reaching a distance of value t or above. This algorithm uses space within (n + m) as it

4

computes the values from (1, 1) to (n, m) by updating and switching alternatively two arrays of size n and
two arrays of size m (respectively corresponding to rows and columns of the dynamic program matrix). Its
running time is within O(w(n + m)), as it computes at most w(n + m) cells of the dynamic program array.
Furthermore, it not only returns the value of the upper bound computed, but also a Boolean breached
indicating if the border of the banded diagonal has been reached during this computation. When such a
border has not been reached (and the threshold value t is smaller than or equal to the Discrete Fréchet
Distance between P and Q), the value returned is equal to the Discrete Fréchet Distance between P
and Q.

Algorithm 3 lists an implementation in Python of an algorithm which, given as parameters two sequences
of points P and Q, calls the approximation Algorithm 2 on P and Q for widths of exponentially increasing
value (by a factor of two). The ﬁrst call is performed with an inﬁnite threshold (no information is available
on the similarity of the curve at this point), but each successive calls use the best upper bound on the
Discrete Fréchet Distance between P and Q previously computed as a threshold.

The intuition of the correctness of Algorithm 3 is trivial: on the last execution of Algorithm 2, either all
the values of the dynamic program array were computed, or all recursions where stopped before they reached
a value which is not computed (because out of the bandwidth). We formalize the argument in the following
theorem.

Theorem 1. Algorithm 3 correctly returns the Fréchet Distance of the two input sequences of points.

Proof. Consider two sequences of points P and Q given as input to Algorithm 3. On the last execution of
Algorithm 2,

– the threshold value corresponds to a viable traversal of the Fréchet matrix, and
– either all the values of the dynamic program array were computed (w = n), or all recursions where

stopped before they reached a value which is not computed (bReached = False)).

As a consequence, the computation of the band of width w correctly simulates the computation of the whole
dynamic program, from which the correctness of the algorithm ensues.

In the next section, we analyze the running time of Algorithm 3, and describe a parameterized upper bound
on it.

4 Parameterized Upper Bound

The running time of the approximation Algorithm 2 when given parameter w is clearly within O(w(n + m)):
it computes within O(w) cells in at most n+m rounds, each in constant time. A ﬁner upper bound taking into
account the value of the parameter t requires more hypothesis on the relation between P and Q, for which we
need to consider the running time of the computation Algorithm 3. We model such hypothesis on the instance
in the form of a certiﬁcate, and more speciﬁcally in the form of a certiﬁcate area of the Euclidean matrix
corresponding to a set of values which suﬃce to certify the value of the Discrete Fréchet Distance.

Deﬁnition 1. Given two sequences of points P [1..n] and Q[1..m] of respective lengths n and m and of
Discrete Fréchet Distance f , a Certiﬁcate Area of the instance formed by P and Q is an area of the
Euclidean matrix of P and Q containing both (1, 1) and (n, m), and delimited by two paths (one above and
one below), both such that the minimum value on this path is larger than or equal to f . The width of such a
certiﬁcate area is the minimal width of a banded diagonal containing both paths.

The surface of such an area is a good measure of the diﬃculty to certify the Discrete Fréchet
Distance, but the minimal width of such an area lends itself better to an analysis of the running time of
the computation Algorithm 3:

Deﬁnition 2. Given two sequences of points P [1..n] and Q[1..m], the Certiﬁcate Width ω of (P, Q) is the
minimum width of a certiﬁcate area, taken over all possible certiﬁcate areas of (P, Q).

5

Algorithm 2 Parameterized Algorithm to approximate the Discrete Fréchet Distance between two
sequences of points by computing only values of the dynamic program within a band of width w around the
diagonal, and limiting the recursion to distances smaller than a threshold t.

def approximation (P ,Q ,w ,t ):

bReached = False
n = len (P)
m = len (Q)
assert ( m <= n )
assert ( m > 0 )
def e(i ,j ):

d = utils . distance (P[i], Q[j ])
if d < t:

if (i−j) >= w or (j−i) >= w:

bReached = True

return d

else :

return float (" inf ")

oldRow = np . ones (n)
oldColumn = np . ones (m)
oldRow [0] = oldColumn [0] = e (0 ,0)
for s in range (1 , m ):

newRow = np . ones (n)
for i in range ( max (1 , s−w +1) , s ):

newRow [i]

= max (e(i ,s), min (

oldRow [i],
oldRow [i −1],
newRow [i −1]))

newColumn = np . ones (m)
for j in range ( max (1 , s−w +1) , s ):

newColumn [j]

= max (e(s ,j), min (

newColumn [j −1],
oldColumn [j −1],
oldColumn [j ]))

newColumn [s] = newRow [s] = max (e(s ,s), min (

newRow [s −1],
newColumn [s −1],
oldRow [s −1]))

oldRow = newRow
oldColumn = newColumn

for s in range (m ,n ):

newColumn = np . ones (m)
for j in range (max (1 ,s−w +1) , m ):

newColumn [j]

= max (e(s ,j), min (

oldColumn [j],
oldColumn [j −1],
newColumn [j −1]))

oldColumn = newColumn

return bReached , newRow [n −1]

6

Algorithm 3 Adaptive algorithm to compute the Discrete Fréchet Distance between two sequences of
points, by iteratively approximating it with increasing width, using the value of the previous approximation
to potentially reduce the number of distances being computed.

def computation (P ,Q ):
if len (P)< len (Q ):

P ,Q = Q ,P

if len (Q) == 0:

return float (" inf ")

w = 1
bReached ,t= approximation (P ,Q ,w , float (" inf " ))
while bReached and w < len (Q ):

w = 2 ∗ x
bReached ,t= approximation (P ,Q ,w ,t)

return t

Such a width can be as large as n + m in the worst case over instances formed by sequences of points of

respective lengths n and m, but the smaller this certiﬁcate width is , the faster Algorithm 3 runs:

Theorem 2. Given two sequences of points P [1..n] and Q[1..m] forming an instance of certiﬁcate width ω,
Algorithm 3 computes the Discrete Fréchet Distance between P and Q in time within O((n+m)ω) and
space within O(n+m).

Beyond the necessity to measure experimentally the certiﬁcate width of practical instances of the Discrete 
Fréchet Distance, and the exact running time of Algorithm 3 on such instances, we discuss some
more subtle options for future work in the next section.

5 Discussion

The results described in this work are by far only preliminary. Among the various questions that those
preliminary results raise, we discuss here the relation to the long edged sequences recently described by Gudmundsson 
et al. [8]; a potential parameterized conditional lower bound matching our parameterized upper
bound on the computational complexity of the Discrete Fréchet Distance; (the not so) similar results
on the Orthogonal Vector decision problem; and the possibility of a theory of reductions between parameterized 
versions of polynomial problems without clear (parameterized or not) computational complexity
lower bounds.

Relation to Long Edged Sequences: In 2018, Gudmundsson et al. [8] described an algorithm deciding
if the Fréchet distance is equal to a given value f in time linear in the size of the input curves when each
edge is longer than the Fréchet Distance between those two curves. Algorithm 3 is more general than
Gudmundsson et al.’s algorithm [8], but it also performs in linear time on long-edged instances: the traversal
corresponding to the Fréchet Distance of such an instance is along the diagonal, implying a certiﬁcate
width of 1. See Figures 1, 2 and 3 for the Euclidean matrix, Fréchet Matrix and Dynamic Program Matrix
of a random instance formed of 5 points, each edge of length 100 with a Fréchet Distance of 13.45 (see
Appendix A.2 for the Python code used to generate long edged instances).

The ratio between the Fréchet Distance and the minimal edge length of the curves might prove to be
a more “natural” parameter than the certiﬁcate width to measure the “diﬃculty” of computing the Frŕechet
Distance of a pair of curves: we focused on the certiﬁcate width in the hope that such a technique can ﬁnd
applications in the analysis of other problems on which dynamic programming has yield good solutions.

7

1.41 101.43 193.97 294.66 199.17 227.36
100.14 13.45 94.67 195.37 99.5 142.89
199.48 97.99 5.39 105.43 6.13 113.25
290.44 192.56 104.04 6.0
97.26 109.6
193.23 93.14 13.17 104.98 10.44 99.05
232.69 156.27 112.89 104.58 107.64 6.4

1.41 101.43 193.97 294.66 294.66 294.66
100.14 13.45 94.67 195.37 195.37 195.37
199.48 97.99 13.45 105.43 105.43 113.25
290.44 192.56 104.04 13.45 97.26 109.6
290.44 192.56 104.04 104.98 13.45 99.05
290.44 192.56 112.89 104.58 107.64 13.45

Fig. 1. Euclidean Matrix for a Long Edged Instance:
the 6 points from the ﬁrst curve were randomly generated 
at distance 100 of each other, while the points
from the second curve were generated by perturbing
within a distance of 10 from the points of the ﬁrst
curve.

Fig. 2. Fréchet Matrix for the same Long Edged Instance 
as Figure 1: the traversal corresponding to
the Fréchet Distance of the instance is along the
diagonal (highlighted in bold here), resulting in a
Fréchet Distance of 13.45.

1.41 inf
inf 13.45 inf
inf
−1.0 inf
−1.0 −1.0 13.17
−1.0 −1.0 −1.0

inf −1.0 −1.0 −1.0
inf −1.0 −1.0
6.13 −1.0
inf
inf 13.45 inf
inf

inf 13.45

inf 13.45 inf

inf 13.45 inf

9.43 19.48 19.48 −1.0 −1.0 −1.0
18.81 11.31 11.31 16.86 −1.0 −1.0
18.81 14.26 11.31 11.31 inf −1.0
16.07 11.31 16.5 13.77
−1.0 inf
−1.0 −1.0
11.31 11.31 11.31
inf
−1.0 −1.0 −1.0 3.17 14.06 11.31

Fig. 3. Dynamic Program Matrix for the same Long
Edged Instance as Figure 1, with width 3 and threshold 
20: “inf” denotes interrupted recurrences because
the distance found is already larger than the threshold,
 meanwhile values outside of the band of width 3
are marked with “-1”.

Fig. 4. Dynamic Program Matrix for a general instance.
 The 6 points from the ﬁrst curve were randomly 
generated at distance 10 of each other, the
points from the second curve by perturbing within a
distance of 10 the points of the ﬁrst curve. The computation 
of the matrix is performed with width 3 and
threshold 20 as before.

Parameterized Conditional Lower Bound The original motivation for this work was to prove a parameterized 
conditional lower bound on the computational complexity of the Discrete Fréchet Distance
as a step-stone for doing the same for the computation of various Edit Distances. The ﬁrst step in this
direction was the identiﬁcation of a parameter for this problem: the certiﬁcate width, that seems to be a good
candidate. The next step is to reﬁne the reduction from CNF SAT to the Discrete Fréchet Distance
described by Bringmann [2], in order to deﬁne a reduction from (a potential parameterized version of) CNF
SAT to a parameterized version of the Discrete Fréchet Distance.

Parameterized Upper and Lower Bound for the computation of Orthogonal Vectors: Bringmann 
[2] mentions that the reduction from SAT CNF to the computation of the Discrete Fréchet Distance 
is similar to Williams’ reduction from SAT CNF to the (polynomial) problem of deciding if two sets
of vectors contain an Orthogonal Vector pair, and that there might be a reduction from the Orthogonal 
Vector decision problem to the computation of the Discrete Fréchet Distance. This mention
called the Orthogonal Vector decision problem to our attention, and in particular 1) the possibility of
a parametrization of the analysis of this problem, and 2) a potential linear (or parameterized) reduction
from such a parameterized Orthogonal Vector decision problem to the parameterized computation of
the Discrete Fréchet Distance described in this work. It turns out that there exists an algorithm solving 
the Orthogonal Vector decision problem in time within O((n+m)(δ + log(n) + log(m))), where n
and m are the respective sizes of the sets of vectors forming the instance, and δ is the certiﬁcate density
measuring the proportion of cells from the the dynamic program which are suﬃcient to compute in order to
certify the answer to the program. The reduction of this to the Discrete Fréchet Distance will be more
problematic: the two measures of diﬃculty seem completely unrelated.

8

A theory of reduction between polynomial parameterized problems The study of the parameterized 
complexity of NP-hard problems [6,11] yields a theory of reduction between pairs formed by a decision
problem P and a parameter k. The study of adaptive sorting algorithms [5,12] yields a theory of reductions
between parameters measuring the existing disorder in an array to be sorted (which can also be seen as a
theory of reductions between pairs of problems and parameters, but where all the problems are equal). Considering 
the theory of reductions between polynomial problems such as the Discrete Fréchet Distance,
the various Edit Distances between strings, the Orthogonal Vector decision problem, and many others,
 one can imagine that it would be possible to deﬁne a theory of reductions between parameterized versions
of these problems.

Acknowledgements: The author would like to thank Travis Gagie for interesting discussions and
for pointing out Gudmundsson et al.’s work [8]. Funding: Jérémy Barbay is partially funded by the
project Fondecyt Regular no. 1170366 from Conicyt. Data and Material Availability: The source of
this article, along with the unabridged code will be made publicly available upon publication at the url
https://github.com/FineGrainedAnalysis/Frechet.

References

1. Bergroth, L., Hakonen, H., Raita, T.: A survey of longest common subsequence algorithms. In: Proceedings of

the 11th Symposium on String Processing and Information Retrieval (SPIRE). pp. 39–48 (2000)

2. Bringmann, K.: Why walking the dog takes time: Fréchet distance has no strongly subquadratic algorithms unless
SETH fails. In: Proceedings of the 2014 IEEE 55th Annual Symposium on Foundations of Computer Science. pp.
661–670. FOCS ’14, IEEE Computer Society, Washington, DC, USA (2014)

3. Efrat, A., Guibas, L., Har-Peled, S., Mitchell, J., Murali, T.: New similarity measures between polylines with
applications to morphing and polygon sweeping. Discrete and Computational Geometry 28(4), 535–569 (2002)
4. Eiter, T., Mannila, H.: Computing discrete Fréchet distance. Tech. rep., Christian Doppler Labor für Expertensyteme,
 Technische Universität Wien (1994)

5. Estivill-Castro, V., Wood, D.: A survey of adaptive sorting algorithms. ACM Computing Surveys (ACMCS)

24(4), 441–476 (1992)

6. Flum, J., Grohe, M.: Parameterized Complexity Theory (Texts in Theoretical Computer Science. An EATCS

Series). Springer-Verlag New York, Inc., Secaucus, NJ, USA (2006)

7. Gudmundsson, J., Laube, P., Wolle, T.: Movement Patterns in Spatio-Temporal Data, pp. 1362–1370. Springer

International Publishing, Cham (2017)

8. Gudmundsson, J., Mirzanezhad, M., Mohades, A., Wenk, C.: Fast Fréchet distance between curves with long
edges. In: Proceedings of the International Workshop on Interactive and Spatial Computing (WISC). pp. 52–58.
IWISC ’18, ACM, New York, NY, USA (2018), best Paper Award IWISC’18

9. H., A., M., G.: Computing the Fréchet distance between two polygonal curves. International Journal of Computational 
Geometry and Applications (IJCGA) 5(1–2), 75–91 (1995)

10. Jiang M1, Xu Y, Z.B.: Protein structure-structure alignment with discrete Fréchet distance. J Bioinform Comput

Biol. 6(1), 51–64 (2008)

11. Marx, D.: Parameterized complexity of constraint satisfaction problems. In: Proceedings of 19th Annual IEEE

Conference on Computational Complexity (CCC). pp. 139–149 (2004)

12. Moﬀat, A., Petersson, O.: An overview of adaptive sorting. Australian Computer Journal (ACJ) 24(2), 70–77

(1992)

13. Seyler, S.L., Kumar, A., Thorpe, M.F., Beckstein, O.: Path Similarity Analysis: A Method for Quantifying

Macromolecular Pathways. PLoS Computational Biology 11, e1004568 (Oct 2015)

14. Sriraghavendra, E., K., K., Bhattacharyya, C.: Fréchet distance based approach for searching online handwritten 
documents. In: Proceedings of the Ninth International Conference on Document Analysis and Recognition 
- Volume 01. pp. 461–465. ICDAR ’07, IEEE Computer Society, Washington, DC, USA (2007),
http://dl.acm.org/citation.cfm?id=1304595.1304769

15. Wikipedia: Frechet_distance, https://en.wikipedia.org/wiki/Fréchet_distance

9

A Additional Algorithms of interest

Even though the source of this article, along with the unabridged code will be made publicly available upon
publication at the url https://github.com/FineGrainedAnalysis/Frechet, we copy here some extracts
of the code, which can help the reader to understand the implementation and the experiments performed.

A.1 Dynamic Program Matrix

We describe in Algorithm 4 the Python implementation of an algorithm to approximate the Discrete
Fréchet Matrix between two sequences of points, by computing only values of the dynamic program
within a band of width w around the diagonal, and limiting the recursion to distances smaller than a threshold
t. The interest of this algorithm is not its running time, which is within Θ(n× m) given that it initializes and
returns the whole matrix of the dynamic program, but in the pedagogical value of its output, which yields
a visualization of the space explored by Algorithm 3. In particular, this algorithm was used in Section 5 to
generate the matrices presented in Figures 1, 2 and 3.

A.2 Random Generation of Long Edged Curves

We describe in Algorithm 5 the Python code used to generate long edged instances in Figures 1, 2 and 3 of
Section 5.

10

Algorithm 4 Adaptive algorithm to approximate the Discrete Fréchet Matrix between two sequences
of points.

def approximationOfFrechetMatrix (P ,Q ,w ,t ):

bReached = False
def e(i ,j ):

d = distance (P[i], Q[j ])
if d < t:

if (i−j) >= w or (j−i) >= w:

bReached = True

return d

else :

return float (" inf ")

assert ( len (Q) <= len (P) )
assert ( len (Q) > 0 )
dpA = np . ones (( len (P), len (Q )))
dpA = np . multiply ( dpA , −20)
# I n i t i a l i z e
dpA [0 ,0] = e (0 ,0)
for i in range (1 , min (w , len (P ))):

a r r a y s

" o l d "

dpA [i ,0] = max (e(i ,0) , dpA [i −1 ,0])

for j in range (1 , min (w , len (Q ))):

dpA [0 , j] = max (e(0 , j), dpA [0 ,j −1])

# C o m p u t e
for s in range (1 , len (Q )):

v a l u e s

t h e

i n

l e f t m o s t

s q u a r e

for i in range ( max (1 , s−w +1) , s ):
= max (e(i ,s), min (

dpA [i ,s]

dpA [i ,s −1],
dpA [i −1,s −1],
dpA [i −1,s]

))

for j in range ( max (1 , s−w +1) , s ):
= max (e(s ,j), min (

dpA [s ,j]

dpA [s −1,j],
dpA [s −1,j −1],
dpA [s ,j −1]

))

dpA [s ,s]

= max (e(s ,s), min (

dpA [s −1,s],
dpA [s −1,s −1],
dpA [s ,s −1]

))

# C o m p u t e
for s in range ( len (Q), len (P )):

v a l u e s

r e s t

t h e

i n

o f

t h e

a r r a y

for j in range (max (1 ,s−w +1) , len (Q )):

dpA [s ,j]

= max (e(s ,j), min (

dpA [s −1,j],
dpA [s −1,j −1],
dpA [s ,j −1]

))

return bReached , dpA

11

Algorithm 5 Code used to generate long edged instances in Figures 1, 2 and 3 of Section 5.

def randomPointOnUnitCircle ():
r a n d o m p o i n t

a

" " " G e n e r a t e s
" " "
angleInRadians = random . random () ∗ 2.0 ∗ math . pi
dx = math . cos ( angleInRadians )
dy = math . sin ( angleInRadians )
return (dx , dy )

c i r c l e .

u n i t

t h e

o n

def randomLongEdgedCurve (n , edgeLength =10):

" " " G e n e r a t e s
s u c h

t h a t

a
e a c h

r a n d o m c u r v e
e d g e

o f

i s

o f

$ n $

p o i n t s

l e n g t h

$ e d g e L e n g t h $

>>> P = r a n d o m C u r v e ( 2 0 , 1 0 )
>>> Q = r a n d o m l y P e r t u r b e d C u r v e ( P , 1 )

" " "
x ,y = randomPointOnUnitCircle ()
P = [(x ,y )]
for i in range (n ):

dx , dy = randomPointOnUnitCircle ()
x += dx ∗ edgeLength
y += dy ∗ edgeLength
P. append ((x ,y ))

return P

def randomlyPerturbedCurve (P ,d =1):

" " " G e n e r a t e s

a

t h e

d i s t a n c e

p e r t u r b a t i o n @Q o f
f r o m @P t o @Q i s

a
n o t

c u r v e @P ,

a s

b i g

s o
a s

t h a t
i f

g e n e r a t e d

s e p a r a t e l y .

>>> P = [ ( 1 , 1 ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) ]
>>> Q = r a n d o m l y P e r t u r b e d C u r v e ( P , 1 )
" " "
Q = []
for x ,y in P:

xp = x+ random . randint(−d , d)
yp = y+ random . randint(−d , d)
Q. append (( xp , yp ))

return Q

12

