Succinct Representation of Labeled Graphs(cid:2)

Jérémy Barbay1, Luca Castelli Aleardi2, Meng He1,3,

and J. Ian Munro1

1 Cheriton School of Computer Science, University of Waterloo, Canada

{jbarbay,mhe,imunro}@uwaterloo.ca
2 LIX (Ecole Polytechnique, France) and

CS Department (Université Libre de Bruxelles, Belgium)

amturing@lix.polytechnique.fr

3 School of Computer Science, Carleton University, Canada

mhe@cg.scs.carleton.ca

Abstract. In many applications, the properties of an object being modeled 
are stored as labels on vertices or edges of a graph. In this paper,
we consider succinct representation of labeled graphs. Our main results
are the succinct representations of labeled and multi-labeled graphs (we
consider vertex labeled planar triangulations, as well as edge labeled
planar graphs and the more general k-page graphs) to support various
label queries eﬃciently. The additional space cost to store the labels is
essentially the information-theoretic minimum. As far as we know, our
representations are the ﬁrst succinct representations of labeled graphs.
We also have two preliminary results to achieve the main results. First,
we design a succinct representation of unlabeled planar triangulations
to support the rank/select of edges in ccw (counter clockwise) order in
addition to the other operations supported in previous work. Second, we
design a succinct representation for a k-page graph when k is large to
support various navigational operations more eﬃciently. In particular,
we can test the adjacency of two vertices in O(lg k lg lg k) time, while
previous work uses O(k) time (10; 14).

1 Introduction

Graphs are fundamental combinatorial objects, widely used to represent various
types of data. As modern applications often process large graphs, the problem
of designing space-eﬃcient data structures to represent graphs has attracted
a great deal of attention. In particular the idea of succinct data structures, i.e.
data structures that occupy space close to the information-theoretic lower bound
while supporting eﬃcient navigational operations, has been applied to various
classes of graphs (5; 6; 7; 8; 12; 14).

Previous work focused on succinct graph representations which support eﬃciently 
testing the adjacency between two vertices and listing the edges incident

(cid:2) This work was supported by NSERC of Canada, the Canada Research Chairs program,
 the IGM (University of Marne-la-Vallée) and the French “ACI Masses de don-
nées” program via the Geocomp project.

T. Tokuyama (Ed.): ISAAC 2007, LNCS 4835, pp. 316–328, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007

Succinct Representation of Labeled Graphs

317

to a vertex (5; 6; 14). However, in many applications, such connectivity information 
is associated with labels on the edges or vertices of the graph, and the space
required to encode those labels dominates the space used to encode the connectivity 
information, even when the encoding of the labels is compressed (11). For
example, when surface meshes are associated with properties such as color and
texture information, more bits per vertex are required to encode those labels
than to encode the graph itself. We address this problem by designing succinct
representations of labeled graphs, where labels from alphabet [σ] 1 are associated
with edges or vertices. These representations eﬃciently support label-based connectivity 
queries, such as retrieving the neighbors associated with a given label.
Our results are under the word RAM model with word size Θ(lg n) bits.2.

We investigate three important classes of graphs: planar triangulations, planar
graphs and k-page graphs. Planar graphs, in particular planar triangulations,
correspond to the connectivity information underlying surface meshes. Triangle
meshes are one of the most fundamental representations for geometric objects: in
computational geometry they are one natural way to represent surface models,
and in computer graphics triangles are the basic geometric primitive (for eﬃcient
rendering). k-page graphs have applications in several areas, such as sorting with
parallel stacks (17), fault-tolerant processor arrays (15) and VLSI (9).

2 Preliminaries

2.1 Related Work

Jacobson (12) ﬁrst proposed to represent unlabeled graphs succinctly. His approach 
is based on the concept of book embedding (4). A k-page embedding is a
topological embedding of a graph with the vertices along the spine and edges
distributed across k pages, each of which is an outerplanar graph. The minimum
number of pages, k, for a particular graph has been called the pagenumber or
book thickness. Jacobson showed how to represent a k-page graph using O(kn)
bits to support adjacency tests in O(lg n) bit probes, and listing the neighbors
of a vertex in O(d lg n + k) bit probes, where d is the vertex degree.

Munro and Raman (14) improved his results under the word RAM model by
showing how to represent a graph using 2kn + 2m + o(kn + m) bits to support
adjacency tests and the computation of the degree of a vertex in O(k) time,
and the listing of all the neighbors of a given vertex in O(d + k) time. Gavoille
and Hanusse (10) proposed a diﬀerent tradeoﬀ. They proposed an encoding in
2(m+ i) lg k +4(m+ i)+ o(km) bits, where i is the number of isolated vertices, to
support the adjacency test in O(k) time. As any planar graph can be embedded
in at most 4 pages (18), these results can be applied directly to planar graphs.
In particular, a planar graph can be represented using 8n + 2m + o(n) bits to
1 We use [σ] to denote the set {1, 2, . . . , σ} of references to arbitrary labels, as indeed
the alphabet of labels.
2 We use log2 x to denote the logarithmic base 2 and lg x to denote (cid:2)log2 x(cid:3). Occasionally 
this matters.

318

J. Barbay et al.

support adjacency tests and the computation of the degree of a vertex in O(1)
time, and the listing of all the neighbors of a given vertex in O(d) time (14).

A diﬀerent line of research is based on the canonical ordering of planar graphs.
Chuang et al. (8) designed a succinct representation of planar graphs of n vertices
and m edges in 2m+(5+)n+o(m+n) bits, for any constant  > 0, to support the
operations on planar graphs in asymptotically the same amount of time as the
approach described in the previous paragraph. Chiang et al. (7) further reduced
the space cost to 2m + 3n + o(m + n) bits. When a planar graph is triangulated,
Chuang et al. (8) showed how to represent it using 2m + 2n + o(m + n) bits.

Based on a partition algorithm, Castelli Aleardi et al. (5) proposed a succinct 
representation of planar triangulations with a boundary. Their data
structure uses 2.175 bits per triangle to support various operations eﬃciently.
Castelli Aleardi et al. (6) further extended this approach to design succinct representations 
of 3-connected planar graphs and triangulations using 2 bits per
edge and 1.62 bits per triangle respectively, which asymptotically match the
respective entropy of these two types of graphs.

2.2 Multiple Parentheses

(cid:3) )(cid:3)
(cid:3) ((cid:3)
(cid:3) )(cid:3)
2, ...,
1,
p,

Chuang et al. (8) proposed succinct representation of multiple parentheses,
a string of O(1) types that may be unbalanced. Thus a multiple parenthesis 
sequence of p types of parentheses is a sequence over the alphabet
{(cid:3)((cid:3)
(cid:3) ((cid:3)
i type-i opening parenthesis and
2, ...,
1,
type-i closing parenthesis, respectively. The operations considered are:
– m_rank(S, i, α): the number of parentheses α in S[1..i];
– m_select(S, i, α): the position of the ith parenthesis α;
– m_firstα(S, i) (m_lastα(S, i)): the position of the ﬁrst (last) parenthesis

}. We call (cid:3)((cid:3)

i and (cid:3))(cid:3)

(cid:3) )(cid:3)

p

α after (before) S[i];

– m_match(S, i): the position of the parenthesis matching S[i];
– m_enclosek(S, i1, i2): the position of the closest matching parenthesis pair

of type k which encloses S[i1] and S[i2].

Chuang et al. (8) showed how to construct a o(|S|)-bit auxiliary data structure,
for a string S of O(1) types of parentheses stored explicitly, to support the above
operations in constant time. We show how to improve this result in Corollary 1,
and propose an encoding for the case when the number of types of parentheses
is non-constant in Theorem 3.

2.3 Succinct Indexes for Binary Relations

Barbay et al. (2) showed how to achieve data abstraction in succinct data structures 
by designing succinct indexes. Given an abstract data type (ADT) to access 
the given data, the goal is to design auxiliary data structures (i.e. succinct
indexes) that occupy asymptotically less space than the information-theoretic
lower bound on the space required to encode the given data, and support an
extended set of operations using the basic operators deﬁned in the ADT.

Succinct Representation of Labeled Graphs

319

11

vn−1

T2

10
9

8

7

6

5

4

3
T0 ∪ (v0, v1) ∪ (v0, vn−1)

2

0

1

v0

T0

v1

T1

Fig. 1. A triangulated planar graph of 12 vertices with its canonical spanning tree T 0
(on the left). On the right, it shows the triangulation induced with a realizer, as well
as the local condition.

They considered sequences of n objects where each object can be associated
with a subset of labels from [σ], this association being deﬁned by a binary relation
of t pairs from [n]×[σ]. The operations include: object_access(x, i), the ith
label associated with x in lexicographic order; label_rank(α, x), the number of
objects labeled α up to (and including) x; label_select(α, r), the position of
the rth object labeled α; and label_access(x, α), whether object x is associated
with label α. They deﬁned the ADT through object_access and designed a
succinct index of t · o(lg σ) bits to support other operators eﬃciently.

2.4 Realizers and Planar Triangulations

A key notion in this paper is that of realizers of planar triangulations (see Figure 
1 for an example).
Deﬁnition 1 (Schnyder (16)). A realizer of a planar triangulation T is a
partition of the set of the internal edges into three sets T0, T1 and T2 of directed
edges, such that for each internal vertex v the following conditions hold:
– v has exactly one outgoing edge in each of the three sets T0, T1 and T2;
– local condition: the edges incident to v in ccw order are: one outgoing edge
in T0, zero or more incoming edges in T2, one outgoing edge in T1, zero or
more incoming edges in T0, one outgoing edge in T2, and ﬁnally zero or more
incoming edges in T1.

A fundamental property of realizers that we use extensively in Section 3 is:
Lemma 1 (Schnyder (16)). Consider a planar triangulation T of n vertices,
 with exterior face (v0, v1, vn−1). Then T always admits a realizer R =
(T0, T1, T2) and each set of edges in Ti is a spanning tree of all internal vertices.
More precisely, T0, T1 and T2 are spanning trees of T \{v1, vn−1}, T \{v0, vn−1}
and T \ {v0, v1}, respectively.

320

J. Barbay et al.

3 Vertex Labeled Planar Triangulations

3.1 Three New Traversal Orders on a Planar Triangulation
A key notion in the development of our results is that of three new traversal
orders of planar triangulations based on realizers. Let T be a planar triangulation
of n vertices and m edges, with exterior face (v0, v1, vn−1). We denote its realizer
by (T0, T1, T2) following Lemma 1. By Lemma 1, T0, T1 and T2 are three spanning
trees of the internal nodes of T , rooted at v0, v1 and vn−1, respectively. We
add the edges (v0, v1) and (v0, vn−1) to T0, and call the resulting tree, T 0, the
canonical spanning tree of T (8). In this section, we denote each vertex by its
number in canonical ordering, which is the ccw preorder number in T 0.
Deﬁnition 2. The zeroth order π0 is deﬁned on all the vertices of T and is
simply given by the preorder traversal of T0 starting at v0 in counter clockwise
order (ccw order).
The ﬁrst order π1 is deﬁned on the vertices of T \ v0 and corresponds to
a traversal of the edges of T1 as follows. Perform a preorder traversal of the
contour of T0 in a ccw manner. During this traversal, when visiting a vertex v,
we enumerate consecutively its incident edges (v, u1), . . . , (v, ui) in T1, where v
appears before ui in π0. The traversal of the edges of T1 naturally induces an
order on the nodes of T1: each node (diﬀerent from v1) is uniquely associated
with its parent edge in T1.
The second order π2 is deﬁned on the vertices of T \ {v0, v1} and can
be computed in a similar manner by performing a preorder traversal of T0 in
clockwise order (cw order). When visiting in cw order the contour of T0, the
edges in T2 incident to a node v are listed consecutively to induce an order on
the vertices of T2.
Note that the orders π1 and π2 do not correspond to previously studied traversal
orders on the trees T1 and T2, as they are dependent on T0 through π0 (see
Figure 2). The following lemma is crucial (we omit the proof):
Lemma 2. For any node x, its children in T1 (or T2), listed in ccw order (or cw
order), have consecutive numbers in π1 (or π2). In the case of T0, the children of
x are listed consecutively by a DFUDS (or Depth First Unary Degree Sequence (3))
traversal of T0.

3.2 Representing Planar Triangulations
We consider the following operations on unlabeled planar triangulations:
– adjacency(x, y), whether vertices x and y are adjacent;
– degree(x), the degree of vertex x;
– select_neighbor_ccw(x, y, r), the rth neighbor of vertex x starting from

vertex y in ccw order if x and y are adjacent, and ∞ otherwise;

– rank_neighbor_ccw(x, y, z), the number of neighbors of vertex x between
(and including) the vertices y and z in ccw order if y and z are both neighbors
of x, and ∞ otherwise.

Succinct Representation of Labeled Graphs

321

1

7
8

9

10

5

6

4

2

3

0

0

3

5

4

6

2

8

7

1

9

11

6

10
9

8

7

6

2

45
3

π0

1

0

DF U DS

0

5

11

4

3

9

8

10

7

2

1

21

43

5

6

7

1

2

87

10

11

3

8

5

9

10

11

6

4

9

π1

21

43

5

11

4

3

2 6

6

5

7

8

9

10

10 9 8

7

π2

21

43

5

4

6

10 9 8

6

7

7

2

8

5

9

3

Fig. 2. A planar triangulation induced with one realizer. The three orders π0, π1 and
π2, as well as the order induced by a DFUDS traversal of T0 are also shown.
}{
)(
10
11

{ { }}
) )(
9 8
10

}{
) )(
]
6
7

}{
) )(
4 3
5

}}
]
))
11 0

}{
)(
]
6
5

]

( ( (
]
2 3 4

)(
7
8

((
[
1
0

[ [ [

}
]

)
1

{

{

[ [

[

]

(
9

{

S

2

]

[

[

]

[

]

S0

S1

S2

)((
0

1

( ( ( ) ) ( ) ( ) ) ( )
2 3 4

6

7

5

( ( ) ) ( ) ( )
8 9
10 11

)

[

[

[
[
11 4 3 2

]

]

]

[
[
6 5

{

}{

}{

{

}{

}{

[

[

]

]

[
[ ]
10 9 8 7
{ { } } }{

} }

3

5

2

7

98

4610

]

]

]

]

π1π1

1

11

2

4

3

3

4

2

5

6

6

5

7

8

10 9

9

8

10

7

π2

1

4

2

6

3

4

10 9

5

8

6

7

7

2

8

5

9

3

Fig. 3. The multiple parenthesis string encoding of the triangulation in Figure 2

−1
j

(i), given the number of a node vi in πj it returns its rank in π0.

– Πj(i), given the number of a node vi in π0 it returns the number of vi in πj;
– Π
To represent a planar triangulation T , we compute a realizer (T0, T1, T2) of T
following Lemma 1. We then encode the three trees T0, T1 and T2 using a multiple
parenthesis sequence S of length 2m consisting of three types of parenthesis. S
is obtained by performing a preorder traversal of the canonical spanning tree
T 0 = T0∪(v0, v1)∪(v0, vn−1) and using diﬀerent types of parentheses to describe
the edges of T 0, T1 and T2. We use parentheses of the ﬁrst type, namely (cid:3)((cid:3) and
(cid:3))(cid:3), to encode the tree T 0, and other types of parentheses, (cid:3)[(cid:3), (cid:3)](cid:3), (cid:3){(cid:3), (cid:3)}(cid:3), to encode
the edges of T1 and T2. We use S0, S1 and S2 to denote the subsequences of S
that contain all the ﬁrst, second, and the third types of parentheses, respectively.
We construct S as follows (see Figure 3 for an example).

Let v0, . . . , vn−1 be the ccw preorder of the vertices of T 0. Then the string
S0 is simply the balanced parenthesis encoding of the tree T 0 (14): S0 can be
obtained by performing a ccw preorder traversal of the contour of T 0, writing
down an opening parenthesis when an edge of T 0 is traversed for the ﬁrst time,
and a closing parenthesis when it is visited for the second time. During the
traversal of T 0, we insert in S a pair of parentheses (cid:3)[(cid:3) and (cid:3)](cid:3) for each edge of T1,
and a pair of parentheses (cid:3){(cid:3) and (cid:3)}(cid:3) for each edge in T2. More precisely, when
visiting in ccw order the edges incident to a vertex vi, we insert:
– A (cid:3)[(cid:3) for each edge (vi, vj) in T1, where i < j, before the parenthesis (cid:3))(cid:3)

corresponding to vi;

J. Barbay et al.

322
– A (cid:3)](cid:3) for each edge (vi, vj) in T1, where i < j, after the parenthesis (cid:3)((cid:3)
– A (cid:3)}(cid:3) for each edge (vi, vj) in T2, where i > j, after the parenthesis (cid:3)((cid:3)
– A (cid:3){(cid:3) for each edge (vi, vj) in T2, where i > j, before the parenthesis (cid:3))(cid:3)

corresponding to vj;

corresponding to vi;

corresponding to vj.
Thus S is of length 2m, consisting of three types of parenthesis. It is easy to
observe that the subsequences S1 and S2 are balanced parenthesis sequences of
length 2(n − 1) and 2(n − 2), respectively.

We ﬁrst observe some basic properties of the string S. Recall that a node
vi can be referred to by its preorder number in T0, and by the position of the
matching parenthesis pair (i and )i (let pi and qi denote their positions in S).
Let be pf (or ql) be the position of the opening (or closing) parenthesis in S
corresponding to the ﬁrst (or last) child of node vi in T0.
Property 1. The following basic facts hold:
– Two nodes vi and vj are adjacent if and only if there is one common incident

edge (vi, vj) in exactly one of the trees T0, T1 or T2;

– pi < pf < ql < qi;
– The number of edges incident to vi and not belonging to the tree T0 is
(pf − pi − 1) + (qi − ql − 1);
– If vi is not a leaf in T0, between the occurrences of the (cid:3)((cid:3) that correspond to
the vertices vi and vi+1 (note that the (cid:3)((cid:3) corresponding to vi+1 is at position
pf ), there is exactly one (cid:3)](cid:3). Similarly, there is exactly one (cid:3){(cid:3) between the (cid:3))(cid:3)
that correspond to the vertices vi and the (cid:3))(cid:3) at position ql.

Observe that S0 is the balanced parenthesis encoding of the tree T0 (14), so
that if we store S0 and construct the auxiliary data structures for S0 as in (14),
we can support a set of navigational operators on T0. S can be represented
using the approach of Chuang et al. (8) (see Section 2.2) in 2m lg 6 + o(m) =
2m(cid:4)log2 6(cid:5) + o(m) = 6m + o(m) bits. However, this encoding does not support
the computation of an arbitrary word in S0, so that we cannot navigate in the
tree T0 without storing S0 explicitly, which will cost essentially 2 additional bits
per node. To reduce this space redundancy, and to decrease the item 2m(cid:4)log2 6(cid:5)
to 2m log2 6 + o(m), we have the following lemma (we omit the proof):
Lemma 3. The string S can be stored in 2m log2 6 + o(m) bits to support the
operators listed in Section 2.2 in constant time, as well as the computation of
an arbitrary word, or Θ(n) bits of the balanced parenthesis sequence of T0.
The same approach can be directly applied to a sequence of O(1) types of paren-
theses:
Corollary 1. Consider a multiple parenthesis sequence M of 2n parenthesis of
p types, where p = O(1). M can be stored using 2n log(2p) + o(n) bits to support
in O(1) time the operators listed in Section 2.2, as well as the computation
of an arbitrary word, or Θ(n) bits of the balanced parenthesis sequence of the
parentheses of a given type in M.

Succinct Representation of Labeled Graphs

323

−1
j

−1
j

The following theorem shows how to support the navigational operations on
triangulations. While the space used here is a little more than that of (7), the
explicit use of the three parenthesis sequences seems crucial to exploiting the
realizers to provide an eﬃcient implementation supporting Πj(i) and Π
(i).
Theorem 1. A planar triangulation T of n vertices and m edges can
be represented using 2m log2 6 + o(m) bits to support adjacency, degree,
select_neighbor_ccw, rank_neighbor_ccw as well as the Πj(i) and Π
(i)
operators (for j ∈ {1, 2}) in O(1) time.
Proof. We construct the string S for T as shown in this section, and store it using
2m log2 6 + o(m) bits by Lemma 3. Recall that S0 is the balanced parenthesis
encoding of T0, and that we can compute an arbitrary word of S0 from S.
Thus we can construct additional auxiliary structures using o(n) = o(m) bits
(13; 14) to support the navigational operations on T0. As each vertex is denoted
by its number in canonical ordering, vertex x corresponds to the xth opening
parenthesis in S0. We now show that these structures are suﬃcient.

To compute adjacency(x, y), recall that x and y are adjacent iﬀ one is the
parent of the other in one of the trees T0, T1 and T2. As S0 encodes the balanced
parenthesis sequence of T0, we can trivially check whether x (or y) is the parent
of y (or x) using existing algorithms on S0 (14). To test adjacency in T1, we
recall that x is the parent of y iﬀ the (only) outgoing edge of y, denoted by a (cid:3)](cid:3),
is an incoming edge of x, denoted by a (cid:3)[(cid:3). It then suﬃces to retrieve the ﬁrst (cid:3)](cid:3)
after the yth (cid:3)((cid:3) in S, given by m_first(cid:2)[(cid:2)(S, m_select(S, y,
(cid:3) ((cid:3))), and compute
the index, i, of its matching closing parenthesis, (cid:3)[(cid:3), in S. We then check whether
the nearest succeeding closing parenthesis (cid:3))(cid:3) of the (cid:3)[(cid:3) retrieved, located using
m_first(cid:2))(cid:2)(S, i), matches the xth opening parenthesis (cid:3)((cid:3) in S. If it does, then x
is the parent of y in T1. We use a similar approach to test the adjacency in T2.
To compute degree(x), let d0, d1 and d2 be the degrees of x in the trees T0,
T1 and T2 (we denote the degree of a node in a tree as the number of nodes
adjacent to it), respectively, so that the sum of these three values is the answer.
To compute d0, we use S0 and the algorithm to compute the degree of a node
in an ordinal tree using its balanced parenthesis representation by Chuang et
al. (8). To compute d1 + d2, if x has children in T0, we ﬁrst compute the indices,
i1 and i2, of the xth and the x + 1th (cid:3)((cid:3) in S, and the indices, j1 and j2, of the
(n − x)th and the (n − x + 1)th (cid:3))(cid:3) in S in constant time. By the third item of
Property 1, we have the property d1 + d2 = (i2 − i1 − 1) + (j2 − j1 − 1). The case
when x is a leaf in T0 can be handled similarly.

To support select_neighbor_ccw and rank_neighbor_ccw, we make use
of the local condition of realizers in Deﬁnition 1. The local condition tells us that,
given a vertex x, its neighbors, when listed in ccw order, form the following six
types of vertices: x’s parent in T0, x’s children in T2, x’s parent in T1, x’s children
in T0, x’s parent in T2, and x’s children in T1. The ith child of x in ccw order
in T0 can be computed in constant time, and the number of siblings before
a given child of x in ccw order can also be computed in constant time using
the algorithms of Lu and Yeh (13). The children of x in T1 corresponds to the

J. Barbay et al.

324
parentheses (cid:3)[(cid:3) between the (n − x)th and the (n − x + 1)th (cid:3))(cid:3) in S, and because
of the construction of S, if u and v are both children of x, and u occurs before
v in π1, then u is also before v in ccw order among x’s children. The children of
x in T2 have a similar property. Thus the operators supported on S allow us to
perform rank/select on x’s children in T1 and T2 in ccw order. As we can also
compute the number of each type of neighbors of x in constant time, this allows
us to support select_neighbor_ccw and rank_neighbor_ccw in O(1) time.
To compute Π1(i), we ﬁrst locate the position, j, of the ith (cid:3)((cid:3) in S, which is
(cid:3) ((cid:3)). We then locate the position, k, of the ﬁrst (cid:3)](cid:3) after position
m_select(S, i,
j, which is m_first(cid:2)](cid:2)(S, j). After that, we locate the matching parenthesis of
S[j] using m_match(S, j) (p denotes the result). S[p] is the parenthesis (cid:3)[(cid:3) that
corresponds to the edge between ui and its parent in T1, and by the construction
(cid:3) [(cid:3)). The
algorithm of S, the rank of S[p] is the answer, which is m_rank(S, p,
−1
−1
computation of Π
(cid:7)(cid:8)
2
1
can be supported similarly.

is exactly the inverse of the above process. Π2 and Π

3.3 Vertex Labeled Planar Triangulations

In addition to unlabeled operators, we present a set of operators that allow eﬃcient 
navigation in a labeled graph (these are natural extensions to navigational
operators on labeled trees):
– lab_degree(α, x), the number of the neighbors of vertex x in G labeled α;
– lab_select_ccw(α, x, y, r), the rth vertex labeled α among neighbors of
vertex x after vertex y in ccw order, if y is a neighbor of x, and ∞ otherwise;
– lab_rank_ccw(α, x, y, z), the number of the neighbors of vertex x labeled α
between y and z in ccw order if y and z are neighbors of x, and ∞ otherwise.
We deﬁne the interface of the ADT of labeled planar triangulations through
node_label(v, i), which returns the ith label associated to vertex v (i.e. the vth
vertex in canonical ordering).

Recall that Lemma 3 encodes the string S constructed in Section 3.2 to support 
the computation of an arbitrary word of S0, which is the balanced parenthesis 
sequence of the tree T0. In this section, we consider the DFUDS sequence
of T0. We have the following lemma (we omit the proof).
Lemma 4. The string S can be stored in (2 log2 6 + )m + o(m) bits, for any 
such that 0 <  < 1, to support in O(1) time the operators listed in Section 2.2,
as well as the computation of an arbitrary word, or Θ(n) bits of the balanced
parenthesis sequence, and of the DFUDS sequence of T0.

As Barbay et al. (2) did for multi-labeled trees, we now construct succinct indexes 
for vertex labeled planar triangulations. The main idea is to combine our
succinct representation of planar triangulations with three instances of the succinct 
indexes for related binary relations:
Theorem 2. Consider a multi-labeled planar triangulation T of n vertices, associated 
with σ labels in t pairs (t ≥ n). Given the support of node_label in

Succinct Representation of Labeled Graphs

325
f(n, σ, t) time on the vertices of T , there is a succinct index using t · o(lg σ)
bits which supports lab_degree, lab_select_ccw and lab_rank_ccw in
O((lg lg lg σ)2(f(n, σ, t) + lg lg σ)) time.

To design a succinct representation of multi-labeled graphs using the above theorem,
 we use the approach of Barbay et al. (1) to encode R0 using t lg σ + O(t)
bits to support object_access in constant time, which directly supports
node_label in O(1) time. Thus:
Corollary 2. A multi-labeled planar triangulation T of n vertices, associated
with σ labels in t pairs (t ≥ n) can be represented using t lg σ + t · o(lg σ) bits
to support node_label in O(1) time, and lab_degree, lab_select_ccw and
lab_rank_ccw in O((lg lg lg σ)2 lg lg σ) time.

4 Edge Labeled Graphs with Pagenumber k

4.1 Multiple Parentheses

We now consider the succinct representation of multiple parenthesis sequences of
p types of parentheses, where p is not a constant. We consider the following operations 
on a multiple parenthesis sequence S[1..2n] in addition to those deﬁned
(cid:3)(S, i), the rank of the parenthesis at position i among
in Section 2.2: m_rank
parentheses of the same type in S; m_findopen(S, i) (m_findclose(S, i)), the
matching closing (opening) parenthesis of the same type for the opening (clos-
ing) parenthesis at position i in S. Note that m_findopen and m_findclose
are identical to the operator m_match. We deﬁne them here for the simplicity
of the proofs of the theorems in this section. We have the following theorem (we
omit all the proofs in this section because of space constraint):

Theorem 3. A multiple parenthesis sequence of 2n parentheses of p types, in
which the parentheses of any given type are balanced, can be represented us-
(cid:3), m_findopen and
ing 2n lg p + o(n lg p) bits to support m_access, m_rank
m_findclose in O(lg lg p) time, and m_select in O(1) time. Alternatively,
(2 + )n lg p + o(n lg p) bits are suﬃcient to support these operations in O(1)
time, for any constant  such that 0 <  < 1.

4.2 Graphs with Pagenumber k for Large k

In this section, on unlabeled graphs with page number k, we consider the
operators adjacency and degree deﬁned in Section 3.2, and the operator
neighbors(x), returning the neighbors of x.

Previous results on succinctly representing k-page graphs (10; 14) support
adjacency in O(k) time. The lower-order term in the space cost of the result of
Gavoille and Hanusse (10) is o(km), which is dominant when k is large. Thus
previous results mainly deal with the case when k is small. We consider large k.

326

J. Barbay et al.

Theorem 4. A k-page graph of n vertices and m edges can be represented using
n + 2m lg k + o(m lg k) bits to support adjacency in O(lg k lg lg k) time, degree
in O(1) time, and neighbors(x) in O(d(x) lg lg k) time where d(x) is the degree
of x. Alternatively, it can be represented in n + (2 + )m lg k + o(m lg k) bits to
support adjacency in O(lg k) time, degree in O(1) time, and neighbors(x) in
O(d(x)) time, for any constant  such that 0 <  < 1.

4.3 Edge Labeled Graphs with Pagenumber k

We consider the following operations on edge labeled graphs:
– lab_adjacency(α, x, y), whether there is an edge labeled α between vertices

x and y;

labeled α;

– lab_degree_edge(α, x), the number of edges incident to vertex x that are

– lab_edges(α, x), the edges incident to vertex x that are labeled α.

We ﬁrst design succinct representation of edge labeled graphs with one page:

Lemma 5. An outerplanar graph of n vertices and m edges in which
the edges are associated with σ labels in t pairs (t ≥ n) can be represented 
using n + t(lg σ + o(lg σ)) bits to support lab_adjacency and
lab_degree_edge in O(lg lg σ(lg lg lg σ)2) time, and lab_edges(α, x)
in
O(lab_degree_edge(α, x) lg lg σ lg lg lg σ) time.

To support an edge labeled graph with k pages, we can use Lemma 5 to represent 
each page and combine all the pages to support navigational operations.
Alternatively, we can use Theorem 4 and a similar approach to Lemma 5 to
achieve a diﬀerent tradeoﬀ to improve the time eﬃciency for large k.

Theorem 5. A k-page graph of n vertices and m edges in which the
edges are associated with σ labels in t pairs (t ≥ n) can be represented 
using kn + t(lg σ + o(lg σ) bits to support lab_adjacency and
lab_degree_edge in O(k lg lg σ(lg lg lg σ)2)
time, and lab_edges(α, x)
in O(lab_degree_edge(α, x) lg lg σ lg lg lg σ + k)
it
can be
represented using n + (2m + ) lg k + o(m lg k) + m(lg σ +
o(lg σ)) bits to support lab_adjacency in O(lg k lg lg σ(lg lg lg σ)2) time,
lab_degree_edge in O(lg lg σ(lg lg lg σ)2) time, and lab_edges(α, x)
in
O(lab_degree_edge(α, x) lg lg σ lg lg lg σ) time, for any constant  such that
0 <  < 1.

time. Alternatively,

Corollary 3. An edge-labeled planar graph of n vertices and m edges in
which the edges are associated with σ labels in t pairs (t ≥ n) can be represented 
using 4n + t(lg σ + o(lg σ)) bits to support lab_adjacency and
lab_degree_edge in O(lg lg σ(lg lg lg σ)2) time, and lab_edges(α, x)
in
O(lab_degree_edge(α, x) lg lg σ lg lg lg σ) time.

Succinct Representation of Labeled Graphs

327

5 Concluding Remarks

In this paper, we present a framework of succinctly representing the properties
of graphs in the form of labels. We expect that our approach can be extended to
support other types of planar graphs, which is an open research topic. Another
open problem is to represent vertex labeled k-page graphs succinctly.

Our ﬁnal comment is that because Theorem 2 provides a succinct index for
vertex labeled planar triangulations, we can in fact store the labels in compressed
form as Barbay et al. (2) have done to compress strings, binary relations and
multi-labeled trees, while still supporting the same operations. This also applies
to Theorem 5, where we apply succinct indexes for binary relations.

References

[1] Barbay, J., Golynski, A., Munro, J.I., Rao, S.S.: Adaptive searching in succinctly
encoded binary relations and tree-structured documents. In: Lewenstein, M., Valiente,
 G. (eds.) CPM 2006. LNCS, vol. 4009, pp. 24–35. Springer, Heidelberg
(2006)

[2] Barbay, J., He, M., Munro, J.I., Rao, S.S.: Succinct indexes for strings, binary
relations and multi-labeled trees. In: Proceedings of the 18th Annual ACM-SIAM
Symposium on Discrete Algorithms, pp. 680–689. ACM Press, New York (2007)
[3] Benoit, D., Demaine, E.D., Munro, J.I., Raman, R., Raman, V., Rao, S.S.: Representing 
trees of higher degree. Algorithmica 43(4), 275–292 (2005)

[4] Bernhart, F., Kainen, P.C.: The book thickness of a graph. Journal of Combinatorial 
Theory, Series B 27(3), 320–331 (1979)

[5] Castelli-Aleardi, L., Devillers, O., Schaeﬀer, G.: Succinct representation of triangulations 
with a boundary. In: Dehne, F., López-Ortiz, A., Sack, J.-R. (eds.)
WADS 2005. LNCS, vol. 3608, pp. 134–145. Springer, Heidelberg (2005)

[6] Castelli-Aleardi, L., Devillers, O., Schaeﬀer, G.: Optimal succinct representations
of planar maps. In: Proceedings of the 22nd ACM Annual Symposium on Computational 
Geometry, pp. 309–318 (2006)

[7] Chiang, Y.-T., Lin, C.-C., Lu, H.-I.: Orderly spanning trees with applications to
graph encoding and graph drawing. In: Proceedings of the 12th Annual ACMSIAM 
symposium on Discrete algorithms, pp. 506–515 (2001)

[8] Chuang, R.C.-N., Garg, A., He, X., Kao, M.-Y., Lu, H.-I.: Compact encodings of
planar graphs via canonical orderings and multiple parentheses. In: Proceedings
of the 25th International Colloquium on Automata, Languages and Programming,
pp. 118–129 (1998)

[9] Chung, F.R.K., Leighton, F.T., Rosenberg, A.L.: Embedding graphs in books:
a layout problem with applications to VLSI design. SIAM J. Algebr. Discrete
Methods 8(1), 33–58 (1987)

[10] Gavoille, C., Hanusse, N.: On compact encoding of pagenumber k graphs. Discrete

Mathematics & Theoretical Computer Science (to appear, 2007)

[11] Isenburg, M., Snoeyink, J.: Face ﬁxer: Compressing polygon meshes with properties.
 In: Proceedings of SIGGRAPH 2000, pp. 263–270 (2000)

[12] Jacobson, G.: Space-eﬃcient static trees and graphs. In: Proceedings of the 30th

Annual Symposium on Foundations of Computer Science, pp. 549–554 (1989)

[13] Lu, H.-I., Yeh, C.-C.: Balanced parentheses strike back. ACM Transactions on

Algorithms (accepted, 2007)

328

J. Barbay et al.

[14] Munro, J.I., Raman, V.: Succinct representation of balanced parentheses and static

trees. SIAM J. Comput. 31(3), 762–776 (2001)

[15] Rosenberg, A.L.: The diogenes design methodology: toward automatic physical
layout. In: Proceedings of the International Workshop on Parallel Algorithms &
Architectures, pp. 335–348. North-Holland Publishing Co., Amsterdam (1986)

[16] Schnyder, W.: Embedding planar graphs on the grid. In: Proceedings of the 1st

Annual ACM-SIAM Symposium on Discrete Algorithms, pp. 138–148 (1990)

[17] Tarjan, R.E.: Sorting using networks of queues and stacks. J. Assoc. Comput.

Mach. 19, 341–346 (1972)

[18] Yannakakis, M.: Four pages are necessary and suﬃcient for planar graphs. In:
Proceedings of the 18th Annual ACM-SIAM Symposium on Theory of Computing,
pp. 104–108 (1986)

