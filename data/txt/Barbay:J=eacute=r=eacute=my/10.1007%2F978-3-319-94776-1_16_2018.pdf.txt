Computing Coverage Kernels Under

Restricted Settings

J´er´emy Barbay1(B), Pablo P´erez-Lantero2, and Javiel Rojas-Ledesma1

1 Departamento de Ciencias de la Computaci´on,

Universidad de Chile, Santiago, Chile

jeremy@barbay.cl, jrojas@dcc.uchile.cl

2 Departamento de Matem´atica y Ciencia de la Computaci´on,

Universidad de Santiago, Santiago, Chile

pablo.perez.l@usach.cl

Abstract. We consider the Minimum Coverage Kernel problem:
given a set B of d-dimensional boxes, ﬁnd a subset of B of minimum
size covering the same region as B. This problem is NP-hard, but as
for many NP-hard problems on graphs, the problem becomes solvable in
polynomial time under restrictions on the graph induced by B. We consider 
various classes of graphs, show that Minimum Coverage Kernel
remains NP-hard even for severely restricted instances, and provide two
polynomial time approximation algorithms for this problem.

1 Introduction
Given a set P of n points, and a set B of m boxes (i.e. axis-aligned closed
hyper-rectangles) in d-dimensional space, the Box Cover problem consists in
ﬁnding a set C ⊆ B of minimum size such that C covers P . A special case is the
Orthogonal Polygon Covering problem: given an orthogonal polygon P
with n edges, ﬁnd a set of boxes C of minimum size whose union covers P. Both
problems are NP-hard [8,11], but their known approximabilities in polynomial
time are diﬀerent: while Box Cover can be approximated up to a factor within
O(log OPT), where OPT is the size of an optimal solution [5,7]; Orthogonal
√
Polygon Covering can be approximated up to a factor within O(
log n) [14].
In an attempt to better understand what makes these problems hard, and why
there is such a gap in their approximabilities, we introduce the notion of coverage
kernels and study its computational complexity.
Given a set B of n d-dimensional boxes, a coverage kernel of B is a subset
K ⊆ B covering the same region as B, and a minimum coverage kernel of B is a
coverage kernel of minimum size. The computation of a minimum coverage kernel
(namely, the Minimum Coverage Kernel problem) is intermediate between
the Orthogonal Polygon Covering and the Box Cover problems. This
problem has found applications (under distinct names, and slight variations) in

This work was supported by projects CONICYT Fondecyt/Regular nos 1170366 and
1160543, and CONICYT-PCHA/Doctorado Nacional/2013-63130209 (Chile).

c(cid:2) Springer International Publishing AG, part of Springer Nature 2018
L. Wang and D. Zhu (Eds.): COCOON 2018, LNCS 10976, pp. 180–191, 2018.
https://doi.org/10.1007/978-3-319-94776-1_16

Computing Coverage Kernels Under Restricted Settings

181

the compression of access control lists in networks [9], and in obtaining concise
descriptions of structured sets in databases [15,18]. Since Orthogonal Polygon 
Covering is NP-hard, the same holds for the Minimum Coverage Kernel 
problem. We are interested in the exact computation and approximability
of Minimum Coverage Kernel in various restricted settings:

1. Under which restrictions is the exact computation of Minimum

Coverage Kernel still NP-hard?

2. How precisely can one approximate a Minimum Coverage Kernel

in polynomial time?
When the interactions between the boxes in a set B are simple (e.g., when all
the boxes are disjoint), a minimum coverage kernel of B can be computed eﬃciently.
 A natural way to capture the complexity of these interactions is through
the intersection graph. The intersection graph of B is the un-directed graph
with a vertex for each box, and in which two vertices are adjacent if and only
the respective boxes intersect. When the intersection graph is a tree, for instance,
each box of B is either completely covered by another, or present in any coverage
kernel of B, and thus a minimum coverage kernel can be computed eﬃciently.
For problem on graphs, a common approach to understand when does an NPhard 
problem become easy is to study distinct restricted classes of graphs, in
the hope to deﬁne some form of “boundary classes” of inputs separating “easy”
from “hard” instances [2]. Based on this, we study the hardness of the problem
under restricted classes of the intersection graph of the input.

Our Results. We study the Minimum Coverage Kernel problem under three
restrictions of the intersection graph, commonly considered for other problems 
[2]: planarity of the graph, bounded clique-number, and bounded vertexdegree.
 We show that the problem remains NP-hard even when the intersection
graph of the boxes has clique-number at most 4, and the maximum degree is at
most 8. For the Box Cover problem we show that it remains NP-hard even
under the severely restricted setting where the intersection graph of the boxes
is planar, its clique-number is at most 2 (i.e., the graph is triangle-free), the
maximum degree is at most 3, and every point is contained in at most two
boxes.

We complement these hardness results with two approximation algorithms
for the Minimum Coverage Kernel problem running in polynomial time.
We describe a O(log n)-approximation algorithm which runs in time within
2 +1 log2 n); and a randomized algorithm computing a O(log OPT)-
O(OPT · n
approximation in expected time within O(OPT·n
log2 n), with high probability
(at least 1 − 1
nΩ(1) ). Our main contribution in this matter is not the existence of
polynomial time approximation algorithms (which can be inferred from results
on Box Cover), but a new data structure which allows to signiﬁcantly improve
the running time of ﬁnding those approximations (when compared to the approximation 
algorithms for Box Cover). This is relevant in applications where a
minimum coverage kernel needs to be computed repeatedly [1,9,15,18].

d+1

2

d

182

J. Barbay et al.

Fig. 1. (a) An orthogonal polygon P. (b) A set of boxes B = {b1, b2, b3, b4} covering
exactly P, and such that in any cover of P with boxes, every box is either in B, or fully
covered by a box in B. (c) A set of points D(B) = {p1, p2, p3, p4, p5} such that any subset
of B covering D(B), covers also P. (d) The subset {b1, b2, b4} is an optimal solution for
the Orthogonal Polygon Cover problem on P, the Minimum Coverage Kernel
problem on B, and the Box Cover problem on D(B),B.

In the next section we review the reductions between the three problems
we consider, and introduce some basic concepts. We then present the hardness
results in Sect. 3, and describe in Sect. 4 the two approximation algorithms. We
conclude in Sect. 5 with a discussion on the results and future work.

2 Preliminaries

To better understand the relation between the Orthogonal Polygon Covering,
 the Box Cover and the Minimum Coverage Kernel problems, we
brieﬂy review the reductions between them. We describe them in the Cartesian
plane, as the generalization to higher dimensions is straightforward.
Let P be an orthogonal polygon with n horizontal/vertical edges. Consider
the grid formed by drawing inﬁnitely long lines through each edge of P (see
Fig. 1a for an illustration), and let G be the set of O(n2) points of this grid lying
on the intersection of two lines. Create a set B of boxes as follows: for each pair of
points in G, if the box having those two points as opposed vertices is completely
inside P, then add it to B (see Fig. 1b) Let C be any set of boxes covering P. Note
that for any box c ∈ C, either the vertices of c are in G, or c can be extended
horizontally and/or vertically (keeping c inside P) until this property is met.
Hence, there is at least one box in B that covers each c ∈ C, respectively, and thus
there is a subset B(cid:3) ⊆ B covering P with |B(cid:3)| ≤ |C|. Therefore, any minimum
coverage kernel of B is also an optimal covering of P (and thus, transferring
the NP-hardness of the Orthogonal Polygon Covering problem [8] to the
Minimum Coverage Kernel problem).
Now, let B be a set of n boxes, and consider the grid formed by drawing
inﬁnite lines through the edges of each box in B. This grid has within O(n2) cells
(O(nd) when generalized to d dimensions). Create a point-set D(B) as follows:
for each cell c which is completely inside a box in B we add to D(B) the middle
point of c (see Fig. 1c for an illustration). We call such a point-set a coverage
discretization of B, and denote it as D(B). Note that a set C ⊆ B covers D(B) if
and only if C covers the same region as B (namely, C is a coverage kernel of B).

Computing Coverage Kernels Under Restricted Settings

183

Therefore, the Minimum Coverage Kernel problem is a special case of the
Box Cover problem.

The relation between the Box Cover and the Minimum Coverage Kernel 
problems has two main implications. Firstly, hardness results for the Minimum 
Coverage Kernel problem can be transferred to the Box Cover problem.
 In fact, we do this in Sect. 3, where we show that Minimum Coverage
Kernel remains NP-hard under severely restricted settings, and extend this
result to the Box Cover problem under even more restricted settings. The other
main implication is that polynomial-time approximation algorithms for the Box
Cover problem can also be used for Minimum Coverage Kernel. However,
in scenarios where the boxes in B represent high dimensional data [9,15,18] and
Coverage Kernels need to be computed repeatedly [1], using approximation
algorithms for Box Cover can be unpractical. This is because constructing
D(B) requires time and space within Θ(nd). We deal with this in Sect. 4, where
we introduce a data structure to index D(B) without constructing it explicitly.
Then, we show how to improve two existing approximation algorithms [5,16] for
the Box Cover problem by using this index, making possible to use them for
the Minimum Coverage Kernel problem in the scenarios commented on.

3 Hardness Under Restricted Settings

We prove that Minimum Coverage Kernel remains NP-hard for restricted
classes of the intersection graph of the input set of boxes. We consider three
main restrictions: when the graph is planar, when the size of its largest clique
(namely the clique-number of the graph) is bounded by a constant, and when
the degree of a vertex with maximum degree (namely the vertex-degree of the
graph) is bounded by a constant.
Consider the k-Coverage Kernel problem: given a set B of n boxes, ﬁnd
whether there are k boxes in B covering the same region as the entire set. Proving 
that k-Coverage Kernel is NP-complete under restricted settings yields
the NP-hardness of Minimum Coverage Kernel under the same conditions. To
prove that k-Coverage Kernel is NP-hard under restricted settings we reduce
instances of the Planar 3-SAT problem (a classical NP-complete problem [17])
to restricted instances of k-Coverage Kernel. In the Planar 3-SAT problem,
given a boolean formula in 3-CNF whose incidence graph1 is planar, the goal is
to ﬁnd whether there is an assignment which satisﬁes the formula. The (planar)
incidence graph of any planar 3-SAT formula ϕ can be represented in the plane
as illustrated in Fig. 2 for an example, where all variables lie on a horizontal line,
and all clauses are represented by non-intersecting three-legged combs [13]. We
refer to such a representation of ϕ as the planar embedding of ϕ. Based on this
planar embedding we proof the results in Theorem 1. Although our arguments
are described in two dimensions, they extend trivially to higher dimensions.

1 The incidence graph of a 3-SAT formula is a bipartite graph with a vertex for each
variable and each clause, and an edge between a variable vertex and a clause vertex
for each occurrence of a variable in a clause.

184

J. Barbay et al.

Fig. 2. Planar embedding of the formula ϕ = (v1 ∨ v2 ∨ v3) ∧ (v3 ∨ v4 ∨ v5) ∧ (v1 ∨ v3 ∨
v5) ∧ (v1 ∨ v2 ∨ v4) ∧ (v2 ∨ v3 ∨ v4) ∧ (v4 ∨ v5 ∨ v6) ∧ (v1 ∨ v5 ∨ v6). The crosses and dots
at the end of the clause legs indicate that the connected variable appears in the clause
negated or not, respectively.

Theorem 1. Let B be a set of n boxes in the plane and let G be the intersection
graph of B. Solving k-Coverage Kernel over B is NP-complete even if G has
clique-number at most 4, and vertex-degree at most 8.

Due to space restrictions, we provide a brief intuition of the proof here, and
defer the details to the extended version [4]. Given any set B of n boxes in R
d, and
any subset K of B, certifying that K covers the same region as B can be done in
time within O(nd/2) using Chan’s algorithm [6] for computing the volume of the
union of the boxes in B. Therefore, k-Coverage Kernel is in NP. To prove that
it is NP-complete we construct, given a planar 3-SAT formula ϕ with n variables
and m clauses, a set B of O(n + m) boxes which has a coverage kernel of size
31m + 3n if and only if there is an assignment of the variables satisfying ϕ. We
use the planar embedding of ϕ as a starting point, and replace the components
corresponding to variables and clauses, respectively, by gadgets composed of
several boxes. Figure 3 illustrates the general layout of such construction for the
formula ϕ = (v1 ∨ v2 ∨ v3) ∧ (v1 ∨ v2 ∨ v4) ∧ (v1 ∨ v3 ∨ v4). This construction
can be obtained in polynomial time, and thus any polynomial time solution to
k-Coverage Kernel yields a polynomial time solution for Planar 3-SAT.

Fig. 3. Variable and clause gadgets for ϕ = (v1 ∨ v2 ∨ v3)∧ (v1 ∨ v2 ∨ v4)∧ (v1 ∨ v3 ∨ v4).
The bold lines highlight one side of each rectangle, and the dashed lines delimit the
regions of the variable and clause components in the planar embedding of ϕ. Finding the
minimum subset of rectangles covering the non-white regions answers the satisﬁability
of ϕ.

Computing Coverage Kernels Under Restricted Settings

185

To complete the proof we show that the instance of the construction meets all
the restrictions of Theorem 1.

Since the Minimum Coverage Kernel problem is a special case of the Box
Cover problem, the result of Theorem 1 also applies to the Box Cover problem.
 However, in Theorem 2 we show that this problem remains hard under even
more restricted settings (the proof is deferred to the the extended version [4]).
Theorem 2. Let P , B be a set of m points and n boxes in the plane, respectively,
and let G be the intersection graph of B. Solving Box Cover over B and P is
NP-complete even if every point in P is covered by at most two boxes of B, and
G is planar, has clique-number at most 2, and vertex-degree at most 4.

In the next section, we complement these hardness results with two approximation 
algorithms for the Minimum Coverage Kernel problem.

4 Eﬃcient Approximation of Minimum Coverage Kernels
Let B be a set of n boxes in R
d, and let D(B) be a coverage discretization of B
(as deﬁned in Sect. 2). A weight index for D(B) is a data structure which can
perform the following operations:
– Initialization: Assign an initial unitary weight to every point in D(B);
– Query: Given a box b ∈ B, ﬁnd the total weight of the points in b.
– Update: Given a box b ∈ B, multiply the weights of all the points within b by

a given value α ≥ 0;

2

d+1

d−1

We assume that the weights are small enough so that arithmetic operations over
the weights can be performed in constant time. There is a trivial implementation
of a weight index with initialization and update time within O(nd), and with
constant query time. In this section we describe a weight index for D(B) which
can be initialized in time within O(n
2 ), and with query and update time within
O(n
log n). We combine this data structure with two existing approximation
algorithms for the Box Cover problem [5,16] and obtain improved approximation 
algorithms (in the running time sense) for the Minimum Coverage
Kernel problem.
A Weight Index for a Set of Intervals. Consider ﬁrst the case of a set I of n
intervals. A trivial weight index which explicitly saves the weights of each point
in D(I) can be initialized in time within O(n log n), has linear update time, and
constant query time. We show that by sacriﬁcing query time (by a factor within
O(log n)) one can improve update time to within O(log n). The main idea is to
maintain the weights of each point of D(I) indirectly using a tree.
Consider a balanced binary tree whose leafs are in one-to-one correspondence
with the values in D(I) (from left to right in a non-decreasing order). Let pv
denote the point corresponding to a leaf node v of the tree. In order to represent
the weights of the points in D(I), we store a value μ(v) at each node v of the tree
subject to the following invariant: for each leaf v, the weight of the point pv equals

186

J. Barbay et al.

the product of the values μ(u) of all the ancestors u of v (including v itself). The
μ values allow to increase the weights of many points with only a few changes. For
instance, if we want to double the weights of all the points we simply multiply by
2 the value μ(r) of the root r of the tree. Besides the μ values, to allow eﬃcient
query time we also store at each node v three values min(v), max(v), ω(v): the
values min(v) and max(v) are the minimum and maximum pu, respectively, such
that u is a leaf of the tree rooted at v; the value ω(v) is the sum of the weights
of all pu such that u is a leaf of the tree rooted at v.

Initially, all the μ values are set to one. Besides, for every leaf l of the tree ω(l)
is set to one, while min(l) and max(l) are set to pl. The min, max and ω values
of every internal node v with children l, r, are initialized in a bottom-up fashion
as follows: min(v) = min{min(l), min(r)}; max(v) = max{max(l), max(r)};
ω(v) = μ(v)· (ω(l) + ω(r)). It is simple to verify that after this initialization, the
tree meets all the invariants mentioned above. We show in Theorem 3 that this
tree can be used as a weight index for D(I).
Theorem 3. Let I be a set of n intervals in R. There exists a weight index
for D(I) which can be initialized in time within O(n log n), and with query and
update time within O(log n).
Proof. Since intervals have linear union complexity, D(I) has within O(n) points,
and it can be computed in linear time after sorting, for a total time within
O(n log n). We store the points in the tree described above. Its initialization
can be done in linear time since the tree has within O(n) nodes, and when
implemented in a bottom-up fashion, the initialization of the μ, ω, min, and
max values, respectively, cost constant time per node.

To analyze the query time, let totalWeight(a, b, t) denote the procedure which
ﬁnds the total weight of the points corresponding to leafs of the tree rooted at
t that are in the interval [a, b]. This procedure can be implemented as follows:

1. if [a, b] is disjoint to [min(t), max(t)] return 0;
2. if [a, b] completely contains [min(t), max(t)] return ω(r);
3. if both conditions fail (leafs must meet either 1. or 2.), let l, r be the left and
4. if a > max(l) return μ(t) · totalWeight(a, b, r);
5. if b < min(r) return μ(t) · totalWeight(a, b, l);
6. otherwise return μ(t)(totalWeight(a,∞, l) + totalWeight(−∞, b, r)).

right child of t, respectively;

Due to the invariants to which the min and max values are subjected, every leaf
l of t corresponding to a point in [a, b] has an ancestor (including l itself) which
is visited during the call to totalWeight and which meets the condition in step 2.
For this, and because of the invariants to which the ω and μ values are subjected,
the procedure totalWeight is correct. Note that the number of nodes visited is
at most 4 times the height h of the tree: when both children need to be visited,
one of the endpoints of the interval to query is replaced by ±∞, which ensures
that in subsequent calls at least one of the children is completely covered by the

Computing Coverage Kernels Under Restricted Settings

187

query interval. Since h ∈ O(log n), and the operations at each node consume
constant time, the running time of totalWeight is within O(log n).

Similarly, to analyze the update time, let updateWeights(a, b, t, α) denote the
procedure which multiplies by a value α the weights of the points in the interval
[a, b] stored in leafs descending from t. This can be implemented as follows:

1. if [a, b] is disjoint to [min(t), max(t)], ﬁnish;
2. if [a, b] completely contains [min(t), max(t)] set μ(r) = α · μ(r), set ω(r) =

α · ω(r), and ﬁnish;

3. if both conditions fail, let l, r be the left and right child of t, respectively;
4. if a > max(l), call updateWeights(a, b, r, α);
5. else if b < min(r), call updateWeights(a, b, l, α);
6. otherwise, call updateWeights(a,∞, l, α), and updateWeights(−∞, b, r, α);
7. ﬁnally, after the recursive calls set ω(t) = μ(t) · (ω(l) + ω(r)), and ﬁnish.

Note that, for every point pv in [a, b] corresponding to a leaf v descending from
t, the μ value of exactly one of the ancestors of u changes (by a factor of α): at
least one changes because of the invariants to which the min and max values
are subjected (as analyzed for totalWeight); and no more than one can change
because once μ is assigned for the ﬁrst time to some ancestor u of v, the procedure
ﬁnishes leaving the descendants of v untouched. The analysis of the running time
(cid:10)(cid:11)
is analogous to that of totalWeight, and thus within O(log n).

A weight index for a set of intervals can be used to obtain an index for ddimensional 
sets of boxes. The main idea is to split the space into cells such
that, within each cell, the weights of the points in the cell can be represented by
combining d one dimensional weight indexes. This space partition is stored in a
binary tree where each node represents a cell of the space. We state this result
in Theorem 4, and due to space restrictions we defer the proof to the extended
version [4].
Theorem 4. Let B be a set of n d-dimensional boxes. There is a weight index
for D(B) which can be initialized in time within O(n
2 ), and with query and
update time within O(n

log n).

d+1

d−1

2

Approximating the Minimum Coverage Kernel of a set B of boxes via
approximation algorithms for the Box Cover problem requires that D(B) is
explicitly constructed. However, the weight index described in the proof of Theorem 
4 can be used to signiﬁcantly improve the running time of these algorithms.
We describe below two examples.
Practical Approximation Algorithms. The ﬁrst algorithm we consider is the
greedy O(log n)-approximation algorithm by Lov´asz [16]. The greedy strategy
applies naturally to the Minimum Coverage Kernel problem: iteratively pick
the box which covers the most yet uncovered points of D(B), until there are no
points of D(B) left to cover. To avoid the explicit construction of D(B) three
operations most be simulated: (i.) ﬁnd how many uncovered points are within a

188

J. Barbay et al.

2 +1 log2 n).

given a box b ∈ B; (ii.) delete the points that are covered by a box b ∈ B; and
(iii.) ﬁnd whether a subset B(cid:3) of B covers all the points of D(B).
For the ﬁrst two we use the weight index described in the proof of Theorem 4:
to delete the points within a given box b ∈ B we simply multiply the weights of all
the points of D(B) within b by α = 0; and ﬁnding the number of uncovered points
within a box b is equivalent to ﬁnding the total weight of the points of D(B)
within b. For the last of the three operations we use the following observation:
Observation 1. Let B be a set of d-dimensional boxes, and let B(cid:3) be a subset
of B. The volume of the region covered by B(cid:3) equals that of B if and only if B(cid:3)
and B cover the exact same region.
Let OPT denote the size of a minimum coverage kernel of B, and let N denote the
size of D(B) (N ∈ O(nd)). The greedy algorithm of Lov´asz [16], when run over
the sets B and D(B) works in O(OPT log N) steps; and at each stage a box is added
to the solution. The size of the output is within O(OPT log N) ⊆ O(OPT log n).
This algorithm can be modiﬁed to achieve the following running time, while
achieving the same approximation ratio:
Theorem 5. Let B be a set of n boxes in R
d with a minimum coverage kernel
of size OPT. Then, a Coverage Kernel of B of size within O(OPT log n) can
be computed in time within O(OPT · n
Proof. We initialize a weight index as in Theorem 4, which can be done in time
O(n
2 ), and compute the volume of the region covered by B, which can be
done in time within O(nd/2) [6]. Let C be an empty set. At each stage of the
algorithm, for every box b ∈ B \ C we compute the total weight of the points
inside b (which can be done in time within n
log n using the weight index).
We add to C the box with the highest total weight, and update the weights of
all the points within this box to zero (by multiplying their weights by α = 0)
log n. If the volume of the region covered by C (which can
in time within n
be computed in O(nd/2)-time [6]) is the same as that of B, then we stop and
return C as the approximated solution. The total running time of each stage
is within O(n
log n). This, and the fact that the number of stages is within
(cid:10)(cid:11)
O(OPT log n) yield the result of the theorem.
Now, we show how to improve Br¨onnimann and Goodrich’s O(log OPT)
approximation algorithm [5] via a weight index. First, we describe their main
idea. Let w : D(B) → R be a weight function for the points of D(B), and for a
subset P ⊆ D(B) let w(P ) denote the total weight of the points in P. A point
p is said to be ε-heavy, for a value ε ∈ (0, 1], if w(p) ≥ εw(D(B)), and ε-light
otherwise. A subset B(cid:3) ⊆ B is said to be an ε-net with respect to w if for every
ε-heavy point p ∈ D(B) there is a box in B(cid:3) which contains p. Let OPT denote
the size of a minimum coverage kernel of B, and let k be an integer such that
k/2 ≤ OPT < k. The algorithm initializes the weight of each point in D(B) to
1, and repeats the following weight-doubling step until every range is 1
2k -heavy:
2k -light point p and double the weights of all the points within every box
ﬁnd a 1

d−1

d+1

2

d−1

2

d+1

d

2

Computing Coverage Kernels Under Restricted Settings

189

To compute a 1

b ∈ B. When this process stops, it returns a 1
weights as the approximated solution.

2k -net C with respect to the ﬁnal
2k -heavy, C covers all the points of D(B). Hence,
Since each point in D(B) is 1
2k -net of size O(kg(k)) can be computed eﬃciently, this algorithm computes
if a 1
a solution of size O(kg(k)). Besides, Br¨onnimann and Goodrich [5] showed that
for a given k, if more than μk = 4k log(n/k) weight-doubling steps are performed,
then OPT > 2k. This allows to guess the correct k via exponential search, and to
bound the maximum weight of any point by n4/k3 (which allows to represent
the weights with O(log n) bits). See Br¨onnimann and Goodrich’s article [5] for
the complete details of their approach.
We simulate the operations over the weights of D(B) again using a weight
index, this time with a minor variation to that of Theorem 4: in every node of the
space partition tree, besides the ω, μ values, we also store the minimum weight of
the points within the cell corresponding to the node. During the initialization and
update operations of the weight index this value can be maintained as follows:
for a node v with children l, r, the minimum weight minω(v) of a point in the cell
of v can be computed as minω(v) = ω(v) · min{minω(l), minω(r)}. This value
2k -light points, and to ﬁnd one in
allows to eﬃciently detect whether there are 1
the case of existence by tracing down, in the partition tree, the path from which
that value comes.
2k -net, we choose a sample of B by performing at least
(16k log 16k) random independent draws from B. We then check whether it is
2k -net, and if not, we repeat the process, up to a maximum of
eﬀectively a 1
O(log n) times. Haussler and Welzl [12] showed that such a sample is a 1
2k -net
with probability at least 1/2. Thus, the expected number of samples needed to
2k -net is constant, and since we repeat the process up to O(log n) times,
obtain a 1
the probability of eﬀectively ﬁnding one is at least 1 − 1
nΩ(1) . We analyze the
running time of this approach in the following theorem.
Theorem 6. Let B be a set of n boxes in R
d with a minimum coverage kernel of
size OPT. A coverage kernel of B of size within O(OPT log OPT) can be computed
in O(OPTn
Proof. The algorithm performs several stages guessing the value of k. Within
each stage we initialize a weight index in time within O(n
2 ). Finding whether
2k -light point can be done in constant time: the root of the partition
there is a 1
tree stores both w(D(B)) and the minimum weight of any point in the ω and
minω values, respectively. For every light point, the weight-doubling steps consume 
time within O
log n) (by Theorem 4). Since
at each stage at most 4k log(n/k) weight-doubling steps are performed, the total
running time of each stage is within O(kn
log2 n).
Given that k increases geometrically while guessing its right value, and since
the running time of each stage is a polynomial function, the sum of the running
times of all the stages is asymptotically dominated by that of the last stage, for
(cid:10)(cid:11)
which we have that k ≤ OPT ≤ 2k. Thus the result of the theorem follows.

log2 n)-expected time, with probability at least 1 − 1

k ) ⊆ O(kn

log n log n

⊆ O(n

nΩ(1) .

n ×

d−1

2

n

log n

(cid:2)

(cid:2)

d+1

2

d+1

(cid:3)(cid:3)

d+1

2

d+1

2

d+1

2

190

J. Barbay et al.

Compared to the algorithm of Theorem 5, this last approach obtains a better
approximation factor on instances with small Coverage Kernels (O(log n)
vs. O(log OPT)), but the improvement comes with a sacriﬁce, not only in the
running time, but in the probability of ﬁnding such a good approximation. In
two and three dimensions, weight indexes might also help to obtain practical
O(log log OPT) approximation algorithms for the Minimum Coverage Problem.
 We discuss this, and other future directions of research in the next section.

5 Discussion

Whether it is possible to close the gap between the factors of approximation of
Box Cover and Orthogonal Polygon Covering has been a long standing
open question [14]. The Minimum Coverage Kernel problem, intermediate
between those two, has the potential of yielding answers in that direction, and
has natural applications of its own [9,15,18]. Trying to understand the diﬀerences
in hardness between these problems, we studied distinct restricted settings. We
show that while Minimum Coverage Kernel remains NP-hard under severely
restricted settings, the same can be said for the Box Cover problem under even
more extreme settings; and show that while the Box Cover and Minimum
Coverage Kernel can be approximated by at least the same factors, the
running time of obtaining some of those approximations can be signiﬁcantly
improved for the Minimum Coverage Kernel problem.

Another approach to understand what makes a problem hard is Parameterized 
Complexity [10], where the hardness of a problem is analyzed with respect
to multiple parameters of the input, with the hope of ﬁnding measures gradually 
separating “easy” instances form the “hard” ones. The hardness results
described in Sect. 3 show that for the Minimum Coverage Kernel and Box
Cover problems, the vertex-degree and clique-number of the underlaying graph
are not good candidates of such kind of measures, opposed to what happens for
other related problems [2].
In two and three dimensions, the Box Cover problem can be approximated
up to O(log log OPT) [3]. We do not know whether the running time of this
algorithm can be also improved for the case of Minimum Coverage Kernel
via a weight index. We omit this analysis since the approach described in Sect. 4
is relevant when the dimension of the boxes is high (while still constant), as in
distinct applications [9,15,18] of the Minimum Coverage Kernel problem.

Acknowledgments. We thank an anonymous reviewer for carefully reading our
manuscript, and providing many insightful comments and suggestions.

Computing Coverage Kernels Under Restricted Settings

191

References

1. Agarwal, P.K., Pan, J.: Near-linear algorithms for geometric hitting sets and set
covers. In: Proceedings of the 30th Annual Symposium on Computational Geometry 
(SoCG), pp. 271:271–271:279. ACM, New York (2014)

2. Alekseev, V.E., Boliac, R., Korobitsyn, D.V., Lozin, V.V.: NP-hard graph problems
and boundary classes of graphs. Theor. Comput. Sci. (TCS) 389(1–2), 219–236
(2007)

3. Aronov, B., Ezra, E., Sharir, M.: Small-size ε-nets for axis-parallel rectangles and

boxes. SIAM J. Comput. (SICOMP) 39(7), 3248–3282 (2010)

4. Barbay, J., P´erez-Lantero, P., Rojas-Ledesma, J.: Computing coverage kernels

under restricted settings. arXiv e-prints (2018)

5. Br¨onnimann, H., Goodrich, M.T.: Almost optimal set covers in ﬁnite VCdimension.
 Discrete Comput. Geom. (DCG) 14(4), 463–479 (1995)

6. Chan, T.M.: Klee’s measure problem made easy. In: 54th Annual IEEE Symposium
on Foundations of Computer Science (FOCS), Berkeley, CA, USA, 26–29 October
2013. IEEE Computer Society, pp. 410–419 (2013)

7. Clarkson, K.L., Varadarajan, K.R.: Improved approximation algorithms for geometric 
set cover. Discrete Comput. Geom. (DCG) 37(1), 43–58 (2007)

8. Culberson, J.C., Reckhow, R.A.: Covering polygons is hard. J. Algorithms (JALG)

17(1), 2–44 (1994)

9. Daly, J., Liu, A.X., Torng, E.: A diﬀerence resolution approach to compressing

access control lists. IEEE/ACM Trans. Netw. (TON) 24(1), 610–623 (2016)

10. Downey, R.G., Fellows, M.R.: Parameterized Complexity. Monographs in Computer 
Science. Springer, New York (1999). https://doi.org/10.1007/978-1-4612-
0515-9

11. Fowler, R.J., Paterson, M., Tanimoto, S.L.: Optimal packing and covering in the

plane are NP-complete. Inf. Process. Lett. (IPL) 12(3), 133–137 (1981)

12. Haussler, D., Welzl, E.: ε-nets and simplex range queries. Discrete Comput. Geom.

2, 127–151 (1987)

13. Knuth, D.E., Raghunathan, A.: The problem of compatible representatives. SIAM

J. Discrete Math. 5(3), 422–427 (1992)

14. Kumar, V.S.A., Ramesh, H.: Covering rectilinear polygons with axis-parallel rectangles.
 SIAM J. Comput. (SICOMP) 32(6), 1509–1541 (2003)

15. Lakshmanan, L.V.S., Ng, R.T., Wang, C.X., Zhou, X., Johnson, T.: The generalized 
MDL approach for summarization. In: Proceedings of 28th International
Conference on Very Large Data Bases (VLDB), Hong Kong, China, 20–23 August
2002, pp. 766–777. Morgan Kaufmann (2002)

16. Lov´asz, L.: On the ratio of optimal integral and fractional covers. Discrete Math.

(DM) 13(4), 383–390 (1975)

17. Mulzer, W., Rote, G.: Minimum-weight triangulation is NP-hard. J. ACM (JACM)

55(2), 1–29 (2008)

18. Pu, K.Q., Mendelzon, A.O.: Concise descriptions of subsets of structured sets.

ACM Trans. Database Syst. (TODS) 30(1), 211–248 (2005)

