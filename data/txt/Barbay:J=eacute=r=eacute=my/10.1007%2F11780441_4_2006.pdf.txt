Adaptive Searching in Succinctly Encoded

Binary Relations and Tree-Structured

Documents

J´er´emy Barbay1, Alexander Golynski1, J. Ian Munro1, and S. Srinivasa Rao2

1 David R. Cheriton School of Computer Science

University of Waterloo, Canada

2 Computational Logic and Algorithms group

IT University of Copenhagen, Denmark

Abstract. The most heavily used methods to answer conjunctive
queries on binary relations (such as the one associating keywords with
web pages) are based on inverted lists stored in sorted arrays and use
variants of binary search. We show that a succinct representation of the
binary relation permits much better results, while using space within a
lower order term of the optimal. We apply our results not only to conjunctive 
queries on binary relations, but also to queries on semi-structured
documents such as XML documents or ﬁle-system indexes, using a variant 
of an adaptive algorithm used to solve conjunctive queries on binary
relations.

Keywords: conjunctive queries,
structures, labeled trees, multi-labeled trees.

intersection problem, succinct data

1 Introduction

Consider the task of a search engine answering conjunctive queries: given a set
of keywords, it must return a list of references to the objects relevant to all
those keywords. These objects can be web-pages as in the case of a web search
engine like Google, or documents as in a search engine on a ﬁle system, or any
kind of data searched by keywords in general. Rather than roam the set of all
objects (which is usually huge — think about the set of web-pages indexed by
Google), a good search engine uses a precomputed index, which represents the
binary relation between the space of objects {1, . . . , n} = [n] and the space of
admissible keywords {1, . . . , σ} = [σ], so that it can be easily searched.

Usually, such an index is coded as a set of sorted arrays, so that the answer
to conjunctive queries is the intersection of those arrays. This intersection can
then be computed in time linear in the sum of the sizes of the array, but several
adaptive algorithms have been studied for the easier case where a small number 
of comparisons permits to check the result, with much better results than
linear [2, 3, 5, 6]. These intersection algorithms are all based on variants of the
binary search algorithm: as the cost of a search is logarithmic in the size of the

M. Lewenstein and G. Valiente (Eds.): CPM 2006, LNCS 4009, pp. 24–35, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006

Adaptive Searching in Succinctly Encoded Binary Relations

25

array, this impacts on their complexity, in particular on “easy” instances where
the intersection is empty or where only a few comparisons are suﬃcient to check
the result of the intersection.
Our results are threefold:
– First, observing that the use of inverted lists in sorted arrays is far from
being a mandatory step to compute the intersection, we consider instead
succinct data structures to encode the binary relation, which also permits
much faster searches. We give two representations (Theorem 1) for binary
relations associating n objects with σ labels in t pairs from [n]×[σ]. Each
bits, and supports queries in
of these representations uses t
time O(lg lg σ) or better (depending on the operator and on the encoding),
thus generalizing the results from Golynski et al. [9] on strings on large
alphabets. These results can be directly applied to the intersection problem
(Theorem 3), to improve the time complexity of the algorithm from Barbay
and Kenyon [3], and thus to reduce the time required to answer a conjunctive
query.

(cid:2)
(cid:3)
lg σ + o(lg σ)

(cid:2)
(cid:3)
lg σ + o(lg σ)

– Second, observing that a labeled tree is simply a tree in which each node is
associated with a label through a binary relation, we give a representation
for labeled trees (Theorem 2). This uses n
bits and supports
both structure-based navigation operators in constant time and label-based
search operators in time O(lg lg σ) or better, improving on the space used
by the solutions from both Geary et al. [8] and Ferragina et al. [7] on labeled
trees. These results can be immediately generalized to multi-labeled trees
(such as XML documents or ﬁle-system indexes) where nodes are associated
with zero or more labels in t pairs (rather than only n pairs in labeled trees),
giving a representation (Corollary 1) which uses t
bits and
supports the same operators in the same time.

(cid:2)
(cid:3)
lg σ + o(lg σ)

– Third, observing the similarity between conjunctive queries and unordered
path-subset queries on labeled and multi-labeled trees, we prove tight upper 
(Theorem 4) and lower (Theorem 5) bounds on the complexity of any
randomized algorithm solving these queries, hence extending the results of
Barbay and Kenyon on the intersection problem [3] to unordered path-subset
queries on multi-labeled trees.

All our results concerning the running time of operators and algorithms are
expressed in the RAM model, where words of size Θ(lg(max{n, σ})) can be
accessed and processed in constant time.

The paper is organized as follows. In Section 2, we present our succinct data
structures for the three objects considered: binary relations in Section 2.1, labeled 
trees in Section 2.2, and multi-labeled trees in Section 2.3. The encoding
of binary relations and the encoding of labeled trees are combined to encode
multi-labeled trees. We describe in Section 3 the algorithms that search the
objects eﬃciently using those data structures: the adaptive algorithm for the
intersection using our encoding of binary relations in Section 3.1, and our new
adaptive algorithm for searching multi-labeled trees in Section 3.2. We conclude
in Section 4 with some perspectives on future work.

26

J. Barbay et al.

2 Succinct Indexes

2.1 Binary Relations

Consider a binary relation R between an ordered set of n objects and an ordered
set of σ labels. Let t denote the cardinality of R, i.e. the number of pairs (object,
label) that are in R. In the context in which objects are references to web-pages,
and labels are keywords associated with the web-pages, such relations are used
to answer conjunctive queries, i.e. for a given set of keywords, to return all pages
that are associated with all the keywords in the set. Typically, such a relation is
encoded as a collection of postings lists, in which each list associates a sorted list
of web pages (objects) to a keyword (label), which can be intersected [2, 3, 5, 6]
to answer conjunctive queries.

Let α be a label from [σ], x be an object from [n], and r be an integer. We
propose a succinct encoding of the relation R that takes asymptotically minimal
space and supports the following operators:

– label rank(α, x), the number of objects labeled α preceding x;
– label select(α, r), the r-th object labeled α, if any, or ∞ otherwise;
– label nb(α), the number of objects labeled α;
– object rank(x, α), the number of labels associated with object x preceding
– object select(x, r), the r-th label associated with object x, if any, or ∞

label α;

otherwise;

– object nb(x), the number of labels associated with object x;
– table access(x, α), checks whether object x is associated with label α.

The naive encoding of such lists as sorted arrays uses t lg n + σ lg t bits of
space and supports label select(α, r) in constant time, but label rank(α, x)
requires time logarithmic in the number of objects associated with label α. It is
not clear how to support object rank(x, α) and object select(x, r) with such
an encoding. Each posting list can also be represented by a binary string of length
n, and encoded using Clark and Munro’s [4] encoding to support the operators
label rank and label select in constant time. However, this representation
uses a total of σn + o(σn) bits, which is too much in practice, especially when
the number of pairs t is much smaller than σn.

The operators label rank and label select are extensions of the operators
string rank and string select deﬁned by Golynski et al. [9], who only considered 
the case of strings, or in other words, the case where each object (i.e.
position in a string) is associated with exactly one label (i.e. a character from
an alphabet of size σ, that occurs at the given position in the string). We support 
the label rank and label select operators in the same time as theirs.
The operators object rank, object select are extensions of string access:
string access(x) gives the label associated with x (i.e., the character at position 
x), the operators object rank and object select are used to navigate in
the set of labels that are associated with a given object. The techniques from
Golynski et al. are not directly applicable to the case of binary relations, however

Adaptive Searching in Succinctly Encoded Binary Relations

27

we use similar ideas and obtain an eﬃcient implementation of the new operators
object rank, object select, label nb, object nb and table access. In what
follows, we use two encodings described by Golynski et al.: select encoding and
access encoding, and extend them to binary relations.
Theorem 1. Consider a binary relation on [n] × [σ] of cardinality t. Assume
that each object is associated with at least one label and each label is associated
with at last one object. Then there are two encodings (named label encoding
and object encoding), each using t
bits, that support the deﬁned
operators with the following run-times:

(cid:2)
(cid:3)
lg σ + o(lg σ)

label
O(lg lg σ)
label rank(α, x)
O(1)
label select(α, r)
O(1)
label nb(α)
object rank(x, α) O(cid:2)
(lg lg σ)2
object select(x, r) O(lg lg σ)
O(1)
object nb(x)
table access(α, x) O(lg lg σ)

(cid:3)

O(lg lg σ lg lg lg σ)

object
O(lg lg σ)
O(lg lg σ)

O(1)
O(1)
O(1)

O(lg lg σ)

where x ∈ [n], α ∈ [σ], and r is a positive integer.
Proof (sketch). Without loss of generality, we assume that σ≤n: the construction
is similar in the symmetric case. We reduce the problem of encoding a binary
matrix of size σ×n to the encoding of n/σ matrices of size σ×σ each, using
the same technique as Golynski et al [9]: we call this step a domain reduction.
Let tM denote the number of ones in one of the smaller matrix M, and let
the operators row rank, row select, column rank and column select have the
same functionalities as the operators label rank, label select, object rank
and object select respectively, but restricted to the smaller matrices, e.g.
row rank(i, j) is deﬁned only for j ≤ σ. This reduction allows the implementation 
of the operators label rank, label select, object rank, object select
using the operators row rank, row select, column rank, column select with an
acceptable space and time overhead.
We represent a boolean matrix M of size σ×σ by two strings: COLUMNS, on
alphabet [σ] and of length tM , such that the k-th symbol of COLUMNS corresponds
to the column index of the k-th pair in the row-major order1 traversal of M; and
ROWS, a binary string of length tM + σ, such that the number of zeros between
the i-th and the i + 1-st one indicates how many ones are in the i-th row of M.
We say that COLUMNS is divided into σ parts by ROWS. See the following example:

⎞
⎟⎟
⎠

⎛
⎜⎜
⎝

0 1 0 0
1 1 1 0
1 0 0 1
0 1 0 0

M =

COLUMNS=2,
ROWS

=0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1

1, 2, 3,

1, 4,

2

1 Row-major order lists the elements from the ﬁrst row, then from the second row,

and so on.

28

J. Barbay et al.

We encode COLUMNS using one of the two encodings from Golynski et al [9]
depending on the preferred time tradeoﬀs between diﬀerent operators as mentioned 
in the statement of the theorem. These encodings use tM (lg σ + o(lg σ))
bits of space with the following time tradeoﬀs:

string access
string select
string rank

select encoding

O(lg lg σ)
O(lg lg σ)

O(1)

O(1)

O(lg lg σ)

access encoding

O(lg lg σ lg lg lg σ)

The vector ROWS can be encoded using any succinct fully indexable dictionary 
that supports in constant time the operators bin rank and bin select,
the rank and select operators on binary strings introduced by Jacobson [10]
and improved by Clark and Munro [4]. The operators column select(i, j) and
column rank(i, j) are based on searching for occurrences of symbol j in the string
COLUMNS, which is done through the string rank and string select operators
on COLUMNS and bin rank and bin select operators on ROWS. The operator
row select(i, j) corresponds to a call to the string select operator on the
i-th part of COLUMNS.
A naive implementation of the operator row rank(i, j) using a binary search
on the i-th part of COLUMNS takes O(lg x · complexity of string access) time,
where x ≤ σ is the length of the i-th part of COLUMNS, which is not good enough.
We use a sparsiﬁcation idea similar to the one introduced by Golynski et al [9],
ﬁxing the parameter z = lg σ and encoding every z-th character of the i-th part of
COLUMNS using a y-fast trie (as deﬁned by Willard [13]). This structure supports
the rank operator in the “sparsiﬁed” string Y in time O(lg lg σ) using O(x/zσ) =
O(x) bits (which is O(t) for all values of i together). Note that row rank(i, j) ∈
[z rankY (j), z (rankY (j) + 1)], where rankY is the set rank, which denotes how
many elements in Y are smaller than j. The result of row rank(i, j) can be
computed using a binary search in an interval of size lg σ in time O(lg lg σ ·
complexity of string access).

The operator label nb(α) can be done in constant time using ROWS. The
operator object nb(x) can also be done in constant time by maintaining an
additional bit vector similar to ROWS that counts the numbers of occurrences for
each column. The operator table access(i, j) can be computed either as the
diﬀerence between row rank(i, j + 1) and row rank(i, j), or equivalently as the
diﬀerence between column rank(i + 1, j) and column rank(i, j).
The encoding of COLUMNS uses t(lg σ + o(lg σ)) bits (summed over all M). The
encodings of y-fast tries and ROWS vectors use O(t + n) bits in total, hence the
(cid:5)(cid:6)
total space of t

(cid:2)
(cid:3)
lg σ + o(lg σ)

bits for each encoding.

Note, that the operators described above are “symmetrical” with respect to
interchanging roles of objects and labels, so that we can assume that n ≥ σ.
The space used by the above data structure is almost optimal (equal to the
information-theoretical minimum plus a lower order term) under the assumption
that the average number of ones per column is small, namely if t/n = σo(1). In
(cid:3)
this case the lower bound suggested by information theory, equal to lg
, is

(cid:2)
nσ
t

Adaptive Searching in Succinctly Encoded Binary Relations

29

(cid:3)
(cid:2)
lg(nσ) − lg t + O(1)

roughly t
used by our encodings, t(lg σ + o(lg σ)).

(cid:3)
(cid:2)
lg σ − o(lg σ)

= t

, which is close to the space

2.2 Labeled Trees

An ordinal tree is a rooted tree in which the children of a node are ordered
and speciﬁed by their rank. Geary et al. [8] proposed an encoding for ordinal
trees which supports in constant time the following operators, called navigation
operators:
– tree ancestor(x, i), the i-th ancestor of node x for i ≥ 0;
– tree rankpre/post(x), the position of node x in the pre or post order traversal

of the tree;

the tree;

– tree selectpre/post(r), the r-th node in the pre or post order traversal of
– tree child(x, i), the i-th child of node x for i ≥ 1;
– tree child rank(x), the number of left siblings of node x;
– tree depth(x), the depth of x (number of edges in the path from root to x);
– tree nbdesc(x), the number of descendants of x;
– tree deg(x), the degree of x, i.e. its number of children.

Consider a set of σ labels, and an ordinal tree of n nodes such that each node
is assigned a label: this is a labeled tree [7, 8]. Let α be a label from [σ] and x
be a node from [n]. We deﬁne the following operators on labeled trees, for the
pre-order traversal of the tree:
– labeltree desc(α, x), the ﬁrst descendant of x which is labeled α, or ∞ if

there is none;

– labeltree nbdesc(α, x), the number of descendants of x that are labeled α;
– labeltree anc(α, x), the ancestor of x which is labeled α and closest to the

root, or ∞ if there is none;
In a manner similar to Ferragina et al. [7], we encode the structure of the
tree separately from the labels, but we encode it as the trace of the pre-order
traversal of the tree, and we encode the structure of the tree using Geary et
al.’s [8] encoding for unlabeled trees.

(cid:2)
(cid:3)
lg σ + o(lg σ)

Theorem 2. Consider a labeled tree of n nodes and σ labels. There is an encoding 
using n
bits that supports in constant time the navigation 
operators on the structure of the tree and in time O(lg lg σ) the operators
labeltree anc, labeltree desc and labeltree nbdesc along with the operators 
string rank, string select and string access on the pre-order traversal
of the labels of the tree.

Proof (sketch). Represent the structure of the tree as an ordinal tree encoded
using the encoding for unlabeled ordinal trees deﬁned by Geary et al. [8]: this
takes 2n + o(n) bits, and supports the navigation operators on the tree structure
in constant time.

30

J. Barbay et al.

The labels are extended by one bit (i.e. to an alphabet of size 2σ) such that

any node x originally labeled α is now labeled:

– α∗ if x has no ancestor labeled α (but eventually some descendants);
– α+∗ if x has at least one ancestor labeled α.

The sequence of extended labels is encoded in pre-order, using the representation 
of Golynski et al. [9] which uses n(lg(2σ)+ o(lg(2σ))) = n(lg σ + o(lg σ)) bits
and supports the operators string access, string select and string rank on
the pre-order traversal of the labels of the tree in the times claimed.
The operator labeltree anc(α, x) is supported by checking for the last node
y labeled α∗ in pre-order before x, which takes time O(lg lg σ), and checking
that y is an ancestor of x, which takes constant time. The symmetric operator
labeltree desc(α, x) is supported by checking for the ﬁrst node y labeled α∗ or
α+∗ in pre-order after x, which takes time O(lg lg σ), and checking that y is a descendant 
of x, which takes constant time. The operator labeltree nbdesc(α, x)
is easily supported via a combination of calls to the navigation operators, and
two calls to the operator string rank. Overall, the encoding uses 2n + o(n) +
(cid:5)(cid:6)
n(lg σ + o(lg σ)) = n

(cid:2)
(cid:3)
lg σ + o(lg σ)

bits.

The information-theoretic lower bound for storing a labeled tree on n nodes
with σ labels is asymptotically n
. Hence our encoding, which uses
(cid:2)
(cid:3)
bits, diﬀer from this bound by a lower order term in σ. Note that
lg σ+o(lg σ)
n
other encodings with similar results can be obtained using the other encodings
proposed by Golynski et al.; we developed here only the most appropriate for
our speciﬁc application.

(cid:3)
(cid:2)
lg σ− o(lg σ)

2.3 Multi-labeled Trees

XML documents and ﬁle systems can be seen as tree-structured documents,
but the labeled tree model described in the previous section is too restrictive to
represent them, as several labels are associated with each leaf in XML documents,
and several labels are associated with each internal node (folder) or leaf (ﬁle)
in a ﬁle system. We consider an extension of labeled trees where any number of
labels can be associated with each node.

Deﬁnition 1. A multi-labeled tree is an ordinal tree on n nodes together
with a set of σ labels, and a set of t pairs from [n] × [σ]. The operators are the
same as those on labeled trees: structure-based navigation operators (as deﬁned
by Geary et al. [8]) and label-based operators (as deﬁned in Theorem 2).

The results on binary relations from Section 2.1 combine very easily with the
results on labeled trees from Section 2.2 to give an encoding supporting eﬃciently
the operators on multi-labeled trees:

Corollary 1. Consider a multi-labeled tree on n nodes and σ labels, associated
in t pairs. There is an encoding using t
bits and supporting the
same operators as the encoding of Theorem 2 and in the same time.

(cid:2)
(cid:3)
lg σ + o(lg σ)

Adaptive Searching in Succinctly Encoded Binary Relations

31

Proof. The operators supported on labeled trees are extended to multi-labeled
trees by replacing each operator deﬁned on strings [9] by its equivalent on binary
relations as deﬁned in Theorem 1, in the ﬁrst encoding (named label), which
(cid:5)(cid:6)
supports all operators in time O(lg lg σ) or better.

“Music”

1=Music,
2=Class,
3=Pop, 4=Jazz, 5=Rock.

“Class”

“Pop Jazz”

“Pop Rock”

···

· ··

···

{1}
{3,4}
·· ·

{3,5}
· ··

{2}
···

··· ·· · ···
··· 3 4

2

·· ·
1
0 1 0 1 ··· 0 0 1 ··· 0 0 1 ·· ·

··· 3 5

Fig. 1. A simplistic example 
of File System

Fig. 2. The corresponding 
Multi-Labeled Tree

Fig. 3. The corresponding 
succinct encoding

Figure 1 represents a simplistic view of a personal ﬁle system organizing music
ﬁles. Figure 2 shows its representation as a multi-labeled tree, where the text
associated with each node is replaced by numbers from the range [1, σ]. Figure 3
shows the succinct encoding of this multi-labeled tree: the structure of the ordinal
tree, the string representing the labels in pre-order, and a binary string where
ones separate sequences of zeroes encoding the number of labels associated to
a node. As in Section 2.1, the space used by our structure is optimal under the
assumption that t/n = σo(1).

3 Applications

3.1 Eﬃcient Posting Lists

Several algorithms have been proposed for computing the answer to conjunctive
queries on a binary relation, through the intersection of inverted lists in sorted
arrays. The intersection of sorted arrays has been studied from several points of
view, all of which are based on various search methods in sorted arrays: Several
people have studied the intersection of a pair of sorted arrays, Baeza-Yates [1]
being the most recent. Other eﬀorts have been considering the intersection of
a larger number of sorted arrays [2, 3, 5, 6], measuring the performance of the
algorithms relative to the complexity of the description of a certiﬁcate of the
intersection, such as the set of comparisons performed by a non-deterministic
algorithm to check the result of the instance. We refer the reader to Figure 4 for
a simple example, and to the cited papers for more details.

These search methods are limited to a complexity logarithmic in the size of the
array. But the use of inverted lists in sorted arrays is far from being a mandatory
step to computing the intersection. Our implementation for binary relations
described in Section 2.1 permits us to search faster in the list of references

J. Barbay et al.

32
Music → A1 1 8 10 12 15 17 19 → 1
Jazz → A4 2 4 6 9 11 13 20 → 2
Rock → A5 3 5 7 14 16 18 21 → 3

8

10

12

9

11

13

15

17

19

14

16

18

20

21

4

6

5

7

Fig. 4. An example of how a conjunctive query corresponds to the intersection of
sets. A non-deterministic algorithm can check that the intersection is empty in δ = 4
comparisons (1 < 2, 7 < 8, 13 < 14, 19 < 20). Barbay and Kenyon’s algorithm performs
8 < δk searches (1 < 2 < 3 < 8 < 9 < 14 < 15 < 20 < 21). Most intersection
algorithms use variants of binary search in the sorted array. We propose to use the
rank operator on a succinct encoding of the binary relation.

associated with an object, and hence improves the performance of intersection
algorithms.

Theorem 3. Consider a set of objects [n] and a set of labels [σ], associated in
t pairs from [n] × [σ], and a conjunctive query Q composed of k labels from [σ].
There is a deterministic algorithm solving Q in time O(δk lg lg σ), where δ is the
minimum number of operations performed by any non-deterministic algorithm
to check the result of Q.

Proof (sketch). Barbay and Kenyon [3, Theorem 3.3] proposed a deterministic
algorithm for the conjunctive query that uses O(δk) doubling searches. We replace 
the doubling search by a combination of label rank, label select and
label access operators, and the result follows. Suppose that x is initialized as
the ﬁrst object of [n], and α as the ﬁrst label of the query. If we introduce the
bogus object ∞, which matches all labels and is a successor to all objects, the
algorithm now goes as follows:

If x = ∞, exit;

1.
2. If k labels are matched, output x, set it to the next object matching α, and

go to 1;
Otherwise, set α to the next label from Q, in cyclic order;
If x has matches α, go to 2;
Otherwise, set x to the next object matching α, and go to 1.

3.

(cid:5)(cid:6)

3.2 File System Search

We introduce a new type of query to search in labeled and multi-labeled trees,
that corresponds to one of the most natural search query that one can perform
in a ﬁle-system.

Deﬁnition 2 (Unordered Path-Subset Query). Given a multi-labeled tree
and a set Q of k labels, ﬁnd the set of nodes x, such that:

1. the rooted path to x contains nodes matching all the labels from Q; and,
2. this path contains no node satisfying (1) other than x.

Adaptive Searching in Succinctly Encoded Binary Relations

33

Such queries are motivated by the search in ﬁle systems, where the result corresponds 
to folders or ﬁles whose path matches the set of keywords. Multi-labeled
trees associate several keywords with each folder or ﬁle (such as the words and
extension composing its name) in an index of the ﬁle-system. Using techniques
similar to those used for the intersection problem, we prove the following result:

Theorem 4. Consider a Multi-Labeled Tree of n nodes and σ labels, associated
by t pairs. Given an unordered path-subset query composed of k labels, there is an
algorithm solving it which performs O(δk) operator calls in time O(δk lg lg σ),
where δ is the minimum number of operation performed by a non-deterministic
algorithm to solve the query.

Proof (sketch). Suppose that x is initialized to the root of the tree and that α
is initialized to the ﬁrst label of the query. If we consider the nodes in pre-order,
and introduce the bogus node ∞ that matches all labels and is a successor to
all nodes, our algorithm proceeds as follow:
1.
2. If k labels are matched, output x, set it to the next node matching α, and

If x = ∞, exit;

3.
4.

go to 1; Otherwise, set α to the next label from Q in cyclic order;
If x has an ancestor labeled α, go to 2;
If x has a descendant labeled α, set it to the ﬁrst such descendant, and
go to 2; Otherwise, set x to the next node matching α, and go to 1.

This algorithm cycles through the labels in the query set, maintains in x the
lowest node of the current potential match, counts how many labels are currently
matched, and eventually outputs the nodes matching the query.

The pre-order rank of successive nodes pointed to by x is strictly increasing
at each update, so that at any time, all pre-order predecessors of x have been
considered and have been output when adequate. Every k iterations of the loop
the algorithm considered at least as many nodes as a non-deterministic algorithm
would have in a single operation: it takes at most k steps to eliminate as many
potential result nodes as a non-deterministic algorithm, which can “guess” which
operation to perform to eliminate the largest number of potential result nodes.
When the pre-order rank of x reaches its ﬁnal value, all nodes have been considered 
(hence the correctness), and the algorithm has performed 2δk operator
calls where a non-deterministic algorithm would have performed at least δ (hence
(cid:5)(cid:6)
the complexity result).
We now prove that the number of operator calls performed by the above algorithm 
is optimal for deterministic algorithms:

Lemma 1. Consider any deterministic algorithm Alg solving unordered pathsubset 
queries, and δ ≥ 1, k ≥ 2, n ≥ δ(2k+1) + 1, σ ≥ 2k + 1, and t ≥ n.
There is a random distribution D on multi-labeled trees of O(n) objects and O(σ)
labels, associated with O(t) pairs, and an unordered path-subset query composed
of k labels which can be solved by a non-deterministic algorithm in at most O(δ)
operations on any multi-labeled trees from D, such that Alg performs Ω(δk)
operator calls on average to solve instances from D.

J. Barbay et al.

34
Proof (sketch). We deﬁne a distribution D on multi-labeled trees with δ branches
of 2k + 1 nodes such that any non-deterministic algorithm can show that the
unordered path-subset query composed of labels {1, . . . , k} has no match in δ operations.
 We prove the lower bound by showing that no deterministic algorithm
can check that this query has no match in less than δk operations on average. (cid:5)(cid:6)
The result on deterministic algorithms from Lemma 1 combines trivially with the
Yao-von Neumann principle [11, 12, 14] to prove a lower bound on the complexity
of any randomized algorithm:
Theorem 5. Consider any randomized algorithm RandAlg solving unordered
path-subset queries, and δ ≥ 1, n ≥ δ(2k+1) + 1, k ≥ 2, σ ≥ 2k + 1, and t ≥ n.
There is a Multi-Labeled tree of O(n) nodes and O(σ) labels, associated in O(t)
pairs, and an unordered path-subset query composed of k labels which can be
solved by a non-deterministic algorithm in at most O(δ) operations, such that
RandAlg performs on average Ω(δk) operator calls to answer the query.
The proofs of these results is similar to their counterparts on the intersection
problem [3]. In particular, Theorems 4 and 5 show that a deterministic algorithm
performs as well as any randomized algorithm for unordered path-subset queries,
in terms of the number of operator calls.

4 Conclusion

We considered succinct data structures for binary relations, labeled trees and
multi-labeled trees, and their application to search algorithms in those structures.
 Our results are threefold:

– ﬁrst, we give two succinct encodings for binary relations using asymptotically
optimal space and eﬃciently supporting in diﬀerent time trade-oﬀs the rank
and select operators on the rows and columns of the relation;

– second, we give a new representation for labeled trees, that we combine with

binary relations to represent multi-labeled trees;

– Third, we show that those encodings have applications to conjunctive queries
in binary relations and unordered path-subset queries in multi-labeled trees,
such as XML documents or ﬁle-system indexes.

Obvious research prospects are to extend the range of operators supported (e.g.
labeled child queries), and to apply similar encodings to other types of queries
(e.g. ordered sub-path, Twig Pattern and XPath queries).

References

1. R. A. Baeza-Yates. A fast set intersection algorithm for sorted sequences.

In
Proceedings of the 15th Annual Symposium on Combinatorial Pattern Matching
(CPM), volume 3109 of LNCS, pages 400–408. Springer, 2004.

2. J. Barbay. Optimality of randomized algorithms for the intersection problem.
In A. Albrecht, editor, Proceedings of the Symposium on Stochastic Algorithms,
Foundations and Applications (SAGA), volume 2827 / 2003, pages 26–38. SpringerVerlag 
Heidelberg, 2003.

Adaptive Searching in Succinctly Encoded Binary Relations

35

3. J. Barbay and C. Kenyon. Adaptive intersection and t-threshold problems.

In
Proceedings of the 13th ACM-SIAM Symposium On Discrete Algorithms (SODA),
pages 390–399, 2002.

4. D. R. Clark and J. I. Munro. Eﬃcient suﬃx trees on secondary storage. In Proceedings 
of the 7th annual ACM-SIAM Symposium on Discrete Algorithms (SODA),
pages 383–391, Philadelphia, PA, USA, 1996.

5. E. D. Demaine, A. L´opez-Ortiz, and J. I. Munro. Adaptive set intersections, unions,
and diﬀerences. In Proceedings of the 11th ACM-SIAM Symposium on Discrete
Algorithms (SODA), pages 743–752, 2000.

6. E. D. Demaine, A. L´opez-Ortiz, and J. I. Munro. Experiments on adaptive set
In Proceedings of the 3rd Workshop on
intersections for text retrieval systems.
Algorithm Engineering and Experiments, Lecture Notes in Computer Science, pages
5–6, Washington DC, January 2001.

7. P. Ferragina, F. Luccio, G. Manzini, and S. Muthukrishnan. Structuring labeled
In Proc. 46th IEEE Symposium on

trees for optimal succinctness, and beyond.
Foundations of Computer Science (FOCS ’05), pages 184–196, 2005.

8. R. F. Geary, R. Raman, and V. Raman. Succinct ordinal trees with level-ancestor
In Proceedings of the 15th annual ACM-SIAM Symposium on Discrete
queries.
Algorithms (SODA), pages 1–10. Society for Industrial and Applied Mathematics,
2004.

9. A. Golynski, J. I. Munro, and S. S. Rao. Rank/select operations on large alphabets:
a tool for text indexing. In Proceedings of the 17th annual ACM-SIAM symposium
on Discrete algorithm (SODA), pages 368–373, 2006.

10. G. Jacobson. Space-eﬃcient static trees and graphs. In Proceedings of the 30th
annual Symposium on Foundations of Computer Science (FOCS’89), pages 549–
554, 1989.

11. J. V. Neumann and O. Morgenstern. Theory of games and economic behavior. 1st

ed. Princeton University Press, 1944.

12. M. Sion. On general minimax theorems. Paciﬁc Journal of Mathematics, pages

171–176, 1958.

13. D. E. Willard. Log-logarithmic worst-case range queries are possible in space Θ(N).

Information Processing Letters, 17(2):81–84, Aug. 1983.

14. A. C. Yao. Probabilistic computations: Toward a uniﬁed measure of complexity. In
Proc. 18th IEEE Symposium on Foundations of Computer Science (FOCS), pages
222–227, 1977.

