CCCG 2013, Waterloo, Ontario, August 8–10, 2013

Maximum-Weight Planar Boxes in O(n2) Time (and Better)

J´er´emy Barbay∗

Timothy M. Chan†

Gonzalo Navarro‡

Pablo P´erez-Lantero§

Abstract

ing an axis-aligned box B maximizing (cid:80)

Given a set P of n points in Rd, where each point p of P
is associated with a weight w(p) (positive or negative),
the Maximum-Weight Box problem consists in ﬁnd-
p∈B∩P w(p).
We describe algorithms for this problem in two dimensions 
that run in the worst case in O(n2) time, and much
less on more speciﬁc classes of instances.
In particular,
 these results imply similar ones for the Maximum
Bichromatic Discrepancy Box problem. These improve 
by a factor of Θ(log n) on the best worst-case complexity 
previously known for these problems, O(n2 lg n)
[Cort´es et al., J. Alg., 2009; Dobkin et al., J. Comput.
Syst. Sci., 1996].

for a ﬁxed point set. They described a data structure 
called MCS-tree, which supports in O(lg n) time
both updates and Maximum-Sum Consecutive Subsequence 
queries on any interval of the sequence of
points. The Maximum-Weight Box problem in two
dimensions was introduced by Cort´es et al. [6], who gave
an algorithm running in O(n2 lg n) time within O(n)
space. Their algorithm is based on MCS-trees: they
reduce any instance of the Maximum-Weight Box
problem in two dimensions to O(n2) instances of the
problem in one dimension, each solved dynamically in
O(lg n) time by using the MCS-tree.

We consider the Maximum-Weight Box problem in
two dimensions on a set P of n weighted points, such
that no pair of points share the same x or y coordinate.

1 Introduction

Consider a set P of n points in Rd, such that the points
are in general position (i.e., no pair of points share the
same x or y coordinate). Each point p of P is assigned a

For any subset B ⊆ Rd let W (B) := (cid:80)

weight w(p) ∈ R that can be either positive or negative.
p∈B∩P w(p).
A box is an axis-aligned hyper-rectangle, and we say
that the weight of a box B is W (B). We consider the
Maximum-Weight Box problem, which given P and
w() consists in ﬁnding a box B with maximum weight
W (B).

Basic deﬁnitions. A strip is the area delimited by two
lines parallel to the same axis. Given the point set P ,
we say that a strip S is monochromatic if S ∩ P is not
empty and the weights of all elements of S ∩ P have the
same sign. A monochromatic strip S is positive (resp.
negative) if S contains points of P with positive (resp.
negative) weights. We say that P is composed of δ strips
if P can be covered by δ pairwise disjoint monochromatic 
strips of alternating signs. Given any bounded

set S ⊂ R2, let Box(S) denote the smallest box covering 
S.

Related work.
In one dimension, the coordinates of
the points matter only in the order they induce on their
weights, and the problem reduces to the MaximumSum 
Consecutive Subsequence problem [3], which
can be solved in O(n) time if the coordinates are already 
sorted. Cort´es et al.
[6] solved the dynamic
version of this problem supporting updates of weights
∗Department of Computer Science, University of Chile, Chile.
jbarbay@dcc.uchile.cl. Partially supported by grant CONICYT,
 FONDECYT/Regular 1120054, Chile.
†Cheriton School of Computer Science, University of Waterloo,
‡Department of Computer Science, University of Chile, Chile.
gnavarro@dcc.uchile.cl. Partially funded by Millennium Nucleus 
Information and Coordination in Networks ICM/FIC P10024F,
 Mideplan, Chile.
§Escuela de Ingenier´ıa Civil en Inform´atica, Universidad de
Valpara´ıso, Chile. pablo.perez@uv.cl. Partially supported by
grant CONICYT, FONDECYT/Iniciaci´on 11110069, Chile.

Waterloo, Canada. tmchan@cs.uwaterloo.ca.

Results. We present the following results for the
Maximum-Weight Box problem in two dimensions.
All our algorithms use space linear in the number of
input points. Over instances composed of n weighted
points, our general algorithm runs in O(n2) time (Theorem 
2). Although this result can be deduced from
new results on the Klee’s Measure problem [5], it
is a more direct and simpliﬁed (non-trivial) solution,
which further provides smaller running times on speciﬁc 
classes on instances. Namely, if the point set P
is composed of δ ∈ [1..n] (either horizontal or vertical)
strips, our algorithm executes adaptively in SORT(n) +
O(δn) ⊂ O(n lg n + δn) ⊂ O(n2) time (Theorem 4),
where SORT(n) is the time required to sort the elements
of P by their x-coordinates and by their y-coordinates
(O(n lg n) in the Comparison Model, O(n lg lg n) in the
RAM model, and O(n√lg lg n) with randomization in
the RAM model if the coordinates of the points are integer 
numbers [10]).

25th Canadian Conference on Computational Geometry, 2013

Applications to other known problems. Let P be a
set of n planar points, each being colored either red or
blue.

The Maximum Bichromatic Discrepancy Box
problem [6, 7] consists in ﬁnding a box that maximizes
the absolute diﬀerence between the numbers of red and
blue points that it contains, and was solved in O(n2 lg n)
time by Dobkin et al. [7]. Any instance of this problem 
can be reduced to two particular instances of the
Maximum-Weight Box problem [6]. In the ﬁrst one
red points have weight +1 and blue points weight −1,
and conversely in the second one. Then our results can
be applied and imply an O(n2) worst-case time algorithm 
for the Maximum Bichromatic Discrepancy
Box problem, improving upon previous O(n2 lg n)-time
algorithms [6, 7].

The Maximum Box problem [6,8,11] consists in ﬁnding 
a box B containing the maximum number of blue
points and no red point. Eckstein et al. [8] introduced
it in general dimension, proving that if the dimension
d of the points is part of the input then the problem
is NP-hard.
In two dimensions it was later solved in
O(n2 lg n) time by Liu and Nediak [11]. In 2010 Backer
et al. [1] showed that the Maximum Box problem in
two dimensions can be solved in O(n lg3 n) time and
O(n lg n) space, and that for any ﬁxed dimension d ≥ 3
it can be solved in time within O(nd lgd−2 n).
Any instance of the Maximum Box problem is equivalent 
to a particular case of the Maximum-Weight
Box problem in which blue points have weight +1 and
red points have weight −∞ [6]. Then our techniques
can be applied and imply O(n2) worst-case time algorithms 
for this problem. While this time complexity is
worse than the best known solution [1], it requires only
linear space, which in some cases can be an important
advantage over the O(n lg n) space required by Backer
et al.’s solution [1].

Note that our specialized results are faster on some
classes of instances which arise naturally in applications,
such as instances where one needs to ﬁnd a maximum
box over an imbalanced red-blue dataset in data mining
and/or data analysis [8, 9, 13]. Generally, if the ratio of
the number of blue points over the number of red points
is within ω(1), then our techniques yield a running time
within SORT(n) + o(n2) on an instance of n points.

2 Quadratic worst-case time algorithm

Assume the elements of P are sorted twice, ﬁrst by xcoordinates 
and second by y-coordinates, in SORT(n)
time.

We say that X ⊆ P is a box set if X is the intersection
of P with some box. For any box set X ⊆ P we deﬁne
the score of X, S(X), as the following four boxes (see
Figure 1). Let [x1, x2] × [y1, y2] := Box(X):
(1) Box(X);

(2) a maximum-weight box BL(X) ⊆ Box(X) of X of

the form [x1, x] × [y1, y2], x1 ≤ x ≤ x2;

(3) a maximum-weight box BR(X) ⊆ Box(X) of X of

the form [x, x2] × [y1, y2], x1 ≤ x ≤ x2; and
the form [x, x(cid:48)] × [y1, y2], x1 ≤ x ≤ x(cid:48)

(4) a maximum-weight box B0(X) ⊆ Box(X) of X of

≤ x2.

For each of these boxes we keep only two opposed vertices 
deﬁning it and its weight, so representing a box set
X by S(X) := (Box(X), BL(X), BR(X), B0(X)) requires
only constant space.

Figure 1: The score S(X) = (Box(X), BL(X), BR(X), B0(X))
of a box set X ⊆ P .

We say that a box set X ⊆ P is scored if S(X) is
computed, and we use Box(X) to represent X instead
of X itself. Let the operator ⊕ : 2P × 2P → 2P be
deﬁned over all pairs (X1, X2) of scored box sets of P
such that: X1 and X2 can be separated with a vertical
line, X1 is to the left of X2, and X1 ∪ X2 is a box set.
Then X1⊕X2 returns the scored set X1∪X2, and it can
be computed in O(1) time from the next observations:

In Section 2 we describe the general O(n2)-
Outline.
time algorithm.
In Section 3 we obtain the adaptive
algorithm running in SORT(n) + O(δn) time, where
δ is the number of strips of the point set. Finally,
in Section 4, we discuss further adaptive results, a
connection to Klee’s Measure problem, potential
polylogarithmic-factor speedups, and open problems.

W (BL(X1∪X2))= max

W (BR(X1∪X2))= max

W (X2)+W (BR(X1)).

W (X1∪X2)=W (X1) + W (X2).

(cid:26) W (BL(X1))
(cid:26) W (BR(X2))

W (X1)+W (BL(X2)).

Box(X)B0(X)BL(X)BR(X) W (B0(X1))

W (B0(X2))
W (BR(X1)) + W (BL(X2)).

W (B0(X1 ∪ X2))= max

Notice that by applying the operators ⊕ to singletons
{p} over all points p of P in left-to-right order, we can
compute B0(P ), i.e., the maximum-weight vertical strip,
in O(n) time. After projection to the x-axis, this immediately 
gives a linear-time algorithm for the MaximumSum 
Consecutive Subsequence problem, studied by
Bentley [3] and often taught in undergraduate algorithms 
classes.

Let S be a horizontal strip such that exactly m points
of P are not in S. The vertical lines passing through
the m points of P \ S split S into m + 1 boxes denoted
S1,S2, . . . ,Sm+1 from left to right. Let B be a box of
maximum weight that has its top side above S and its
bottom side below S. Suppose that the left and right
sides of B intersect Si and Sj (1 ≤ i ≤ j ≤ m + 1),
If i (cid:54)= j, then W (B ∩ Si) and W (B ∩
respectively.
Sj) are precisely W (BR(P ∩ Si)) and W (BL(P ∩ Sj)),
respectively (see Figure 2). Therefore we have W (B) =
t=i+1 W (St)+W (BL(P∩Sj))+W (B\
S). On the other hand, if i = j, then W (B) equals
W (B0(P ∩ Si)).

W (BR(P∩Si))+(cid:80)j−1

Figure 2: The strip S is partitioned into m + 1 boxes
S1,S2, . . . ,Sm+1 by the vertical lines passing through the m
points in P \ S. If the left and right sides of an optimal box
B cross Si and Sj, respectively, then they are determined by
BR(P ∩ Si) and BL(P ∩ Sj).

Consider

the

following

Strip-Constrained
Maximum-Weight Box problem:
Let P be a
weighted point set and S be a horizontal strip so that:
P \ S consists of n points already sorted from left
to right; S splits P \ S into two halves; the vertical
lines through the points of P \ S split S into the
boxes S1,S2, . . . ,Sn+1
to right; and the
points of P ∩ S are summarized by the scored box sets
P ∩ S1, . . . ,P ∩ Sn+1. Find a maximum-weight box
of P, with the top side above S and the bottom side
below S.

from left

CCCG 2013, Waterloo, Ontario, August 8–10, 2013

The key to our new solution is an O(n2)-time algorithm 
for this constrained problem, using an approach 
which may be nick-named “divide-summarize-
and-conquer”.

Strip-Constrained MaximumLemma 
1 The
Weight Box problem admits a solution in O(n2) time
and O(n) space.

Proof. Let F (n) denote the time required to solve a
given instance of the Strip-Constrained MaximumWeight 
Box problem over n points. We apply divide-
and-conquer: Split the points of P above (resp. below)
S into two halves with a horizontal line (cid:96)1 (resp. (cid:96)2).
Let P1 denote the points above (cid:96)1, P2 denote the points
in between (cid:96)1 and S, P3 denote the points in between
S and (cid:96)2, and P4 denote the points below (cid:96)2. Then the
problem can be reduced to the next four subproblems:
(cid:48) covering
(1) the points of P1 ∪ P4 outside a strip S

P2 ∪ P3 ∪ S;

(cid:48) covering

(cid:48) = S; and
(cid:48) covering

(2) the points of P1 ∪ P3 outside a strip S

(3) the points of P2 ∪ P3 outside the strip S
(4) the points of P2 ∪ P4 outside a strip S

P2 ∪ S;

P3 ∪ S.

The reduction to subproblem (1) can be done in O(n)
time as follows: Take each point p of P2 ∪ P3 and compute 
the score S({p}). Simulate the merging of the left-
to-right orders of P1 ∪ P4, P2 ∪ P3, and S1,S2, . . . ,Sn+1
(each of which can be obtained in O(n) time) to compute 
the corresponding scored box sets in the new strip
(cid:48). This computation can be done by applying the opS

erator ⊕ to successive scored box sets in between consecutive 
points of P1 ∪ P4 in the left-to-right order. The
reductions to subproblems (2)–(4) are similar.
The base case occurs when n ∈ {1, 2}. In the most
general setting (n = 2) we have one point p1 above S
and one point p2 below S, deﬁning boxes S1, S2, and
S3 on S. Assume w.l.o.g. that p1 is to the left of p2
and w(p1), w(p2) > 0 (for example, if w(p1) < 0, we can
eliminate p1). Then the solution is B0

(cid:0)(P ∩S1)∪{p1}∪
(P ∩ S2) ∪ {p2} ∪ (P ∩ S3)(cid:1), which can be computed in

constant time by applying the ⊕ operator.

This yields the recurrence

F (n) ∈ 4F (n/2) + O(n),

where F (1) ∈ O(1). Then F (n) ∈ O(n2). As for the
space G(n), since the four subproblems are solved independently 
one after the other, the recurrence is G(n) ∈
(cid:3)
G(n/2) + O(n), whose solution is within O(n).

The reduction from the original Maximum-Weight
Box problem to the constrained problem follows from
a more straightforward divide-and-conquer:

SBSiSjBR(P∩Si)BL(P∩Sj)25th Canadian Conference on Computational Geometry, 2013

Theorem 2 The Maximum-Weight Box problem
admits a solution in O(n2) time and O(n) space on instances 
of n points.

Proof. We ﬁrst sort the points of P by their xcoordinates 
in SORT(n) time and then apply a recursive
procedure, whose time over n weighted points will be
T (n). The recursion applies divide-and-conquer as fol-
lows: Draw a horizontal strip S (a line) splitting P into
two halves P1 and P2, where P1 is above S and P2 is below 
S. Then we can ﬁnd a maximum-weight box B1 for
P1, a maximum-weight box B2 for P2, and a maximumweight 
box B1,2 for P1 ∪ P2 restricted to intersect S.
Then the box among B1, B2, and B1,2 maximizing W ()
is the solution. To compute B1,2 we will use the solution 
for the Strip-Constrained Maximum-Weight
Box problem over P and S, for which we split S into
n + 1 empty scored boxes S1, . . . ,Sn according to all the
x-coordinates of P . This requires O(n) time and then
Lemma 1 allows us to compute B1,2 in O(n2) time and
O(n) space. Since B1 and B2 are computed recursively,
the time complexity is

T (n) ∈ 2T (n/2) + O(n2),

where T (1) ∈ O(1). Hence T (n) ∈ O(n2). As for
the space S(n), the three subproblems are solved independently 
one after the other, and thus it holds
(cid:3)
S(n) ∈ max{S(n/2), S(n/2), O(n)} ⊆ O(n).

3 δ-sensitive analysis

Assume that P is composed of δ ∈ [1..n] strips, and
suppose w.l.o.g. that these strips are horizontal. These
strips can be identiﬁed in O(n) time from the sorting
of the points in P by their y-coordinates. One does not
need to consider boxes whose horizontal sides are in the
middle of some of these strips: there always exists an
optimal box such that each horizontal side is aligned
with an edge of some strip; speciﬁcally, the top (resp.
bottom) of an optimal box will align with a positive
point at the top (resp. bottom) of a positive strip. Using
this observation we reﬁne the results of Section 2.

Strip-Constrained MaximumLemma 
3 The
Weight Box problem admits a solution in O(δn) time
and O(n) space if the points of P above (resp. below) S
are composed of δ/2 strips.

Proof. Let F (n, δ) denote the time required to solve
the problem. We modify the divide-and-conquer algorithm 
from the proof of Lemma 1 as follows: We split the
points above S with a horizontal line (cid:96)1 and the points
below S with a horizontal line (cid:96)2, and deﬁne P1, . . . , P4
as before. However, we choose (cid:96)1 and (cid:96)2 diﬀerently, not
to ensure that each Pi has n/4 points, but to ensure

that each Pi is composed of δ/4 strips. Let ni denote
the size of Pi (so that n1 + n2 + n3 + n4 = n).

The base case arises when there is at most one strip
above (resp. below) S, and can be solved as follows:
Assume w.l.o.g. that the weights of these at most two
strips are positive (if one of the strips has all negative
weights, we can eliminate all of its points). Then the
solution is B0(P ), which can be computed by applying
the operator ⊕ to the sequence, arranged in left-to-right
order, consisting of P ∩ S1, . . . ,P ∩ Sn+1 together with
singletons {pi} over all pi in P \ S. The base case then
requires O(n) time.

The recurrence is now modiﬁed to the following:

F (n, δ) ∈ F (n1 + n3, δ/2) + F (n1 + n4, δ/2)

+ F (n2 + n3, δ/2) + F (n2 + n4, δ/2)
+ O(n).

where F (n, 1) ∈ O(n). Observe that the recursion tree
for F (n, δ) has at most lg δ levels, and that in the ith 
level the computation time besides recursive calls is
O(2in). Then F (n, δ) ∈ O(δn). The space is within
(cid:3)
O(n) as in Theorem 2.

Theorem 4 The Maximum-Weight Box problem
admits a solution in SORT(n) + O(δn) time and O(n)
space on instances of n points composed of δ strips.

Proof. Let T (n, δ) denote the time required to solve the
Maximum-Weight Box problem over n points composed 
of δ strips. We apply divide-and-conquer as in
Theorem 2, but selecting strip S such that both resulting 
sets P1 and P2 are composed of δ/2 strips, and n1
points and n2 points respectively. If there is only δ = 1
strip then the solution is either empty (if the strip is
negative) or all the points (if it is positive), so in the
base case it holds T (n, 1) ∈ O(n). In the recursive case
we have:

T (n, δ) = T (n1, δ/2) + T (n2, δ/2) + F (n, δ)
∈ T (n1, δ/2) + T (n2, δ/2) + O(δn).

The recursion tree of T (n, δ) has at most lg δ levels and
in the i-th level the computation time besides recursive
calls is O(δn/2i), and thus T (n, δ) ∈ O(δn). Again, the
(cid:3)
space is O(n) as before.

Some naturally occurring instances will have a low
number of strips. For example, instances with an unbalanced 
number of positive and negative points are due
to contain few strips. The following corollary captures
this observation.

Corollary 5 Let n+ and n− be the number of points
with positive and negative weight of an instance of
n = n+ + n− points, respectively. Then the MaximumWeight 
Box problem admits a solution in SORT(n) +
O(min{n+, n−} · n) time.

Proof. Observe that δ ≤ 2 min{n+, n−} + 1 and apply
(cid:3)
Theorem 4.

4 Discussion

Improved adaptive results. Our SORT(n) + O(δn)
time algorithm adapts well to instances where points
associated with weights of same sign can be clustered
into a small number of vertical or horizontal strips. It
improves a previous O(δn lg(n/δ)) result [2].

To obtain better adaptive algorithms, we can consider
more general clusterings into rectangles. One approach
is as follows: Call (C1, . . . , Ck) a cluster partition of P
if {C1, . . . , Ck} is a partition of P and in every axis
the orthogonal projections of Box(C1), . . . , Box(Ck) are
pairwise disjoint.

Given a single rectangular cluster, the optimal box
of the whole instance can intersect the cluster boundaries 
in 10 distinct ways. Considering the top, bottom,
left or right edges of the cluster, an optimal box can
either intersect none of them (1 case where the optimal
box is strictly contained in the cluster), exactly two (4
cases where it contains exactly one of the corners of the
cluster), exactly three of them (4 cases where it entirely
contains exactly one cluster edge), or exactly four (1
case where it contains the whole cluster). Note that if
a box intersects exactly one edge, or exactly two opposite 
edges (e.g., top and bottom), then there is a box of
the same score which intersects no cluster boundaries,
since by the deﬁnition of a cluster partition, there are
no other points exactly above, below, to the left or to
the right of the cluster.

In the extended version of this article we will show
how, given a partition of the n points into k clusters
of respective sizes n1, . . . , nk, one can compute the 10
optimal boxes (extending the 4 boxes Box, BL, BR, and
B0 from Section 2) corresponding to the cases described
i ) and combine these
results in time O(k2) to obtain the optimal box of the
i + k2) time
algorithm. Finding an optimal cluster partition seems
hard.

above in time within O((cid:80)k
whole instance. This yields an O((cid:80)k

i=1 n2

i=1 n2

Connection to Klee’s measure problem and higher
dimensions. Our O(n2) worst-case time algorithm is
actually a special case of a more general result for a
problem related to the well known Klee’s Measure
problem (computing the volume of a union of n boxes).
In the D-dimensional Weighted Depth problem,
we are given a set of n weighted boxes in RD and we
want a point p ∈ RD that maximizes the depth, deﬁned
as the sum of the weights of the boxes that contain p.
All known algorithms for Klee’s Measure problem
can be modiﬁed to solve the Weighted Depth problem.
 In particular, Overmars and Yap’s algorithm [12]

CCCG 2013, Waterloo, Ontario, August 8–10, 2013

runs in O(nD/2 lg n) time, Chan’s algorithm [4] runs in
O(nD/22O(lg∗ n)) time, and a new simple algorithm by
Chan [5] runs in O(nD/2) time.

The following observation has not been noted before:

Observation 6 The Maximum-Weight Box problem 
in any constant dimension d can be reduced to the
Weighted Depth problem in dimension D = 2d.
Proof. Given a point set P in Rd, we map each
point p = (a1, . . . , ad) ∈ P to a region Rp in
R2d, consisting of all 2d-tuples (x1, . . . , xd, x(cid:48)
1, . . . , x(cid:48)
d)
such that p lies inside the box with opposite corners
1, . . . , x(cid:48)
(x1, . . . , xd) and (x(cid:48)
in other words, Rp =
d);
{(x1, . . . , xd, x(cid:48)
d) | [(x1 ≤ a1 ≤ x(cid:48)
1, . . . , x(cid:48)
1 ≤ a1 ≤
x1)] ∧ ··· ∧ [(xd ≤ ad ≤ x(cid:48)
d ≤ ad ≤ xd)]}. We
can decompose Rp into a constant number of boxes in
R2d. The maximum-weight box for P corresponds to
a point (x1, . . . , xd, x(cid:48)
1, . . . , x(cid:48)
d) that has the maximum
(cid:3)
depth among these regions.

d) ∨ (x(cid:48)

1) ∨ (x(cid:48)

According to the above observation, our O(n2) result 
for the Maximum-Weight Box problem in two
dimensions is thus not new, but can be deduced from
Chan’s latest result for the Weighted Depth problem 
in D = 4 dimensions [5]. In fact, the O(n2) time
algorithm presented in this paper is inspired by the algorithm 
in [5], which is also based on a “divide-summarize-
and-conquer” approach. We feel that the algorithm
here is nevertheless interesting, because it is a more
direct solution, and can be viewed as a further simpliﬁcation 
of [5], avoiding the need to work explicitly
in 4-dimensional space. (Besides, our O(n2) time algorithm 
is a stepping stone towards our SORT(n) + O(δn)
time algorithm.)

The above observation also implies

the
Maximum-Weight Box problem in d dimensions can
be solved in O(nd) time by Chan’s new algorithm.
Previously, only an O(n2d−2 lg n) time bound was reported 
[6].

that

Polylogarithmic-factor
speedups and applications.
Chan [5] also showed how to further speed up his algorithm 
by a polylogarithmic factor for the Weighted
Depth problem, but only when the dimension is suﬃciently 
large (in particular, not for D = 4).

However, in the unweighted case of the Depth problem,
 it is shown [4, 5] that polylogarithmic speedup is
possible for any D ≥ 3: the running time can be improved 
to O((nD/2/ lgD/2 n)(lg lg n)O(1)). This extends
to the case where the weights are integers with absolute
value bounded by O(1), since we can replace a box with
positive weight c by c copies of the box, and we can
replace a box with negative weight −c by c copies of its
complement (which can be decomposed into a constant
number of boxes).

25th Canadian Conference on Computational Geometry, 2013

In particular, we can thus solve the MaximumWeight 
Box problem for the case of +1 and −1
weights in O((nd/ lgd n)(lg lg n)O(1)) time. The same
bound thus follows for the Maximum Bichromatic
Discrepancy problem mentioned in the introduction.
Previously, only an O(n2 lg n) bound was known for
d = 2 [6, 7]. Similarly, by straightforward changes to
incorporate −∞ weights, the Maximum Box problem
can be solved in O((nd/ lgd n)(lg lg n)O(1)) time,
improving 
the previous O(nd lgd−2 n) bound for d ≥ 3 [1].

Lower bounds? We conjecture that O(nd) is the best
possible time complexity for the Maximum-Weight
Box problem, ignoring polylogarithmic factors. Unconditional 
lower bounds are probably diﬃcult to prove. If
one could show a converse to Observation 6 (a reduction 
from some problem related to Klee’s Measure
problem in 2d dimensions to the Maximum-Weight
Box problem in d dimensions), that might provide evidence 
for the conjecture. We are only able to show the
following:

Observation 7 The Weighted Depth problem in
any constant dimension d can be reduced to the
Maximum-Weight Box problem in dimension d.

Proof. We ﬁrst reduce the Weighted Depth problem 
to a special case of the Weighted Depth problem
where all the input boxes are “dominance” ranges of the
form (−∞, b1] × ··· × (−∞, bd]. To see this, for a given
i ∈ [1..d], we replace any input box [a1, b1]×···×[ad, bd]
of weight w with two boxes: [a1, b1]×···× [ai−1, bi−1]×
(−∞, bi] × [ai+1, bi+1] × ··· × [ad, bd] of weight w, and
[a1, b1] × ··· × [ai−1, bi−1] × (−∞, ai] × [ai+1, bi+1] ×
··· × [ad, bd] of weight −w. By repeating this for each
i ∈ [1..d], each original box is replaced with 2d boxes of
the desired special form.
Now, given an instance of this special case of the
Weighted Depth problem, we map each input box
b = (−∞, b1] × ··· × (−∞, bd] to the point pb =
(b1, . . . , bd), of the same weight. We have the obvious
property that pb lies inside the box [x1,∞)×···×[xd,∞)
iﬀ (x1, . . . , xd) lies inside b. We add an extra point at
(∞, . . . ,∞) with weight M for a suﬃciently large number 
M . The maximum-weight box containing the resulting 
point set must be of the form [x1,∞)×···× [xd,∞)
because of this extra point, and so corresponds to a
(cid:3)
point of maximum depth of the given boxes.

The above observation implies the W [1]-hardness of
the Maximum-Weight Box problem with respect to
d, since Klee’s Measure problem and the Weighted
Depth problem are W [1]-hard [4]. It also implies the
unlikeness of an algorithm that runs faster than nd/2
time with current knowledge about Klee’s Measure
problem.

References

[1] J. Backer and J. Keil. The monoand 
bichromatic
empty rectangle and square problems in all dimensions.
 In Proceedings of the 9th Latin American Theoretical 
Informatics Symposium (LATIN’10), pages 14–25.
2010.

[2] J. Barbay, G. Navarro, and P. P´erez-Lantero. Adaptive
techniques to ﬁnd optimal planar boxes. In Proceedings
of the 24th Canadian Conference on Computational Geometry 
(CCCG’12), pages 71–76, 2012.

[3] J. Bentley. Programming pearls: algorithm design techniques.
 Commun. ACM, 27(9):865–873, 1984.

[4] T. M. Chan. A (slightly) faster algorithm for Klee’s
measure problem. Comput. Geom., 43(3):243–250,
2010.

[5] T. M. Chan.

Klee’s measure problem made
easy. Submitted, https://cs.uwaterloo.ca/~tmchan/
easyklee4_13.pdf, 2013.

[6] C. Cort´es, J. M. D´ıaz-B´a˜nez, P. P´erez-Lantero,
C. Seara, J. Urrutia, and I. Ventura. Bichromatic separability 
with two boxes: A general approach. J. Algorithms,
 64(2-3):79–88, 2009.

[7] D. P. Dobkin, D. Gunopulos, and W. Maass. Computing 
the maximum bichromatic discrepancy, with applications 
to computer graphics and machine learning. J.
Comput. Syst. Sci., 52(3):453–470, 1996.

[8] J. Eckstein, P. Hammer, Y. Liu, M. Nediak, and
B. Simeone. The maximum box problem and its application 
to data analysis. Comput. Optim. App.,
23(3):285–298, 2002.

[9] X. Guo, Y. Yin, C. Dong, G. Yang, and G. Zhou.
On the class imbalance problem. In Proceedings of the
Fourth International Conference on Natural Computation,
 pages 192–201, 2008.

[10] Y. Han and M. Thorup.

√
sorting in
O(n
log log n) expected time and linear space. In Proceedings 
of the Thirty-Third IEEE Symposium on Foundations 
of Computer Science, pages 135–144, 2012.

Integer

[11] Y. Liu and M. Nediak. Planar case of the maximum 
box and related problems. In Proceeding of the
15th Canadian Conference on Computational Geometry 
(CCCG’03), pages 14–18, 2003.

[12] M. H. Overmars and C.-K. Yap. New upper bounds
SIAM J. Comput.,

in Klee’s measure problem.
20(6):1034–1045, 1991.

[13] S. Visa and A. Ralescu. Issues in mining imbalanced
data sets - a review paper. In Proceedings of the Sixteen 
Midwest Artiﬁcial Intelligence and Cognitive Science 
Conference, pages 67–73, 2005.

