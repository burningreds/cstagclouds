Knowl Inf Syst (2009) 20:323–348
DOI 10.1007/s10115-008-0181-z

REGULAR PAPER

Taking advantage of metadata semantics: the case
of learning-object-based lesson graphs
Olivier Motelet · Nelson Baloian · José A. Pino

Received: 18 December 2007 / Revised: 30 September 2008 / Accepted: 11 October 2008 /
Published online: 12 December 2008
© Springer-Verlag London Limited 2008

Abstract
Learning objects (LOs) are pieces of educational material characterized with a
valuable amount of information about their content and usage. This additional information
is deﬁned as a set of metadata generally following the IEEE LOM speciﬁcation. This speciﬁcation 
also serves to characterize the relations existing between LOs. LOs whose relations
are explicit are regarded as the nodes of a lesson graph. Link types and LO metadata constitute 
the lesson graph semantics. This article proposes to take advantage of lesson graph
semantics using a context diffusion approach. It consists in diffusing the metadata-based processes 
along the edges of the lesson graph. This technique aims at coping with the metadata
processing issues arising when some graph metadata are missing, incorrect, or incomplete.
This article also presents a three-layer extensible framework for easing the use of context
diffusion in a graph. As part of the framework, two original types of metadata processes
are introduced. The ﬁrst one takes advantage of the metadata attribute similarities between
related LOs. The second one focuses on the lesson graph consistency. The framework and
the application examples were implemented as an open-source Java library used in the lesson
graph authoring tool LessonMapper2. During the lesson authoring process, we show that the
framework can bring support not only for generating and validating metadata, but also for
retrieving LOs.
Keywords Learning object metadata · Lesson graph · Metadata processing · Metadata
propagation · Learning object retrieval · Lesson authoring

This work extends and improves the article “Taking Advantage of the Semantics of a Lesson Graph based on
Learning Objects.” published in proceedings of the 13th International Conference on Artiﬁcial Intelligence
in Education (AIED 2007), Los Angeles, USA, 9–13 July 2007, IOS Press.

O. Motelet (B) · N. Baloian · J. A. Pino

Department of Computer Science (DCC), Universidad de Chile, Santiago, Chile
e-mail: olivier.motelet@gmail.com

123

324

1 Introduction

O. Motelet et al.

As computer supported learning became increasingly popular, the need for quality multimedia
material increased. However, quality computer-based learning material is hard and expensive
to produce [31]. Due to this, its reuse has been a major concern for researchers [35]. The concept 
of learning object (LO) is normally used to describe digital entities aiming at supporting
learning/teaching. They are often annotated with metadata describing their characteristics.
These metadata are known as learning object metadata (LOM).

Metadata of electronic documents are generally described with the Dublin Core (DC)
speciﬁcation [9] which includes mostly concrete and objective data such as authors, title, or
granularity. They are definitely useful for describing educational resource content, but they
lack the pedagogical aspects of the LO, such as its educational purpose, its intended learner
proﬁle, its difﬁculty or its interactivity type. In order to cope with educational concerns,
various metadata sets were deﬁned such as DC Educational extension [10], CANCORE [5],
IMS Metadata [18], SCORM Metadata [36], and IEEE LOM [21]. Among these speciﬁcations,
 IEEE LOM is commonly emphasized as the standard reference from which the other
speciﬁcations derive.

IEEE LOM speciﬁes about 60 different metadata that should be instantiated for a LO. For
some of them, this is a straightforward task, e.g., author, technical format, or language. They
can even be automatically generated [1,4,8,11,37]. However, subjective attributes like, e.g.,
the description, the coverage, the interactivity type, the semantic density, the difﬁculty, the
intended end-user role, or the typical learning time of a LO, remain complex to instantiate
automatically. Although many repositories for storing and retrieving LOs have been created
in the last decade in order to allow LOs to be reused by as many people as possible [42], it
has been observed that LO authors often do not instantiate the LOM values or use default
and/or erroneous values if they are forced to instantiate them [6,30].

Here is where intelligent systems play an important role in computer-based learning: since
LOs are normally not used alone but rather in the context of a larger learning unit having
a logical coherent structure, the implicit and explicit information contained in the structure
can be extracted by automatic methods. As an example, Ochoa [32] suggests inferring metadata 
values from the information available in the learning management system containing
material for an e-learning course. Metadata like author-related information and educational
context (course level, area, prerequisites, student level, etc.) may be generated. Hatala and
Richards [16] propose a similar approach but they base their implementation on the standard
SCORM and IMS Packaging.

Hatala and Richards [16] also suggest another approach for generating educational metadata 
using the metadata semantics of LOs related with a parent–child type of relationship
inside a learning unit: missing educational LOM attributes can be suggested by deﬁning
a set of speciﬁc rules to deﬁne educational attributes that children objects may inherit
from their parent objects, or the educational attributes that parent objects may accumulate 
from their children. Brase [3] proposes a similar process in order to infer metadata
values for the elements of a set of related LOs. Hatala and Richards [16] note that inference 
rules valid for a certain community may not be valid for another. Thus the inference
system should provide suggestions for metadata values during the metadata creation process 
rather than automatically instantiating metadata values. Nevertheless, the quality of
the suggested metadata depends on the quality of the metadata of the neighboring LOs.
Indeed, neighboring LOs having missing or incorrect metadata entail the processing of
inference rules using missing or incorrect inputs. Such processing may result in erroneous
data.

123

Taking advantage of metadata semantics

325

This article aims at generalizing the metadata generation approach based on the metadata
semantics of the related LOs. First, it conceptualizes the processing of metadata semantics
in a lesson graph composed of interrelated LOs. Second, it proposes a framework for coping
with the problem of missing, incomplete or incorrect metadata when processing metadata
semantics of a lesson graph. Next, this framework is used to support two innovative methods
for processing metadata semantics: one method based on attribute similarities and the other
one based on graph consistency. These methods were implemented on LessonMapper2, a
lesson graph authoring tool. In this tool, they are used to facilitate not only LO metadata
generation, but also LO metadata validation, and LO retrieval as described in this article.
Finally, the scope and beneﬁts of our model are discussed.

2 Metadata and lesson graph

LOM has about 60 attributes describing technical, educational and general aspects of educational 
resources. Attributes are identiﬁed by a list of names separated by slashes, e.g.,
general/title, where “general” is the category and “title” the attribute name. Attributes
can be classiﬁed in three groups: (1) predeﬁned vocabulary values (e.g., easy and difﬁcult are
vocabulary values for the educational/difficulty attribute), (2) free text., (3) primitive
types, e.g., identiﬁer, date, time, or integer. A range is deﬁned for most attribute values like,
e.g., a set of strings for general/keywords.

Many authors have chosen the graph as the most suitable way of structuring the learning
material of computer-based learning systems whenever adaptability and ﬂexibility of the
learning material is required [12,26]. In a LOM-based lesson graph, the relation attribute
of LOM is used to describe the links between the LOs of the lesson. Links are typed, e.g.,
introducesTo, isPartOf, or exempliﬁedBy. The set of links deﬁnes the edges of a lesson graph
in which the nodes are the LOs. Such a graph is called LO graph. Figure 1 illustrates a LO
graph. In this example, six LOs, labeled from L1 to L6 are part of a programming course
with an object oriented language. L1 describes the problem (how to coordinate trafﬁc lights
in a crossroad) and L2 presents its implementation as a Java program. This problem aims
to teach object instantiation in a program. L3 and L4 refer to documents deﬁning object
instantiation and the concept of constructors, respectively. L5 is a node inside the lesson
graph whose learning material has not been deﬁned yet. L6 is a LO of coarser granularity
and acts as a container for L1 to L5.

Solved By

Abstracted By

Introduces To

Background For

Exampliﬁed By

Fig. 1 Start of a lesson graph about “object instantiation”

123

326

O. Motelet et al.

The literature about LO organization and sequencing contains various models [2,18,36,
41]. Nevertheless, most of them can be described as LO graphs with speciﬁc edge semantics 
characterizing the required structure and sequencing strategy. Most used LOM relation
types were often inspired by the DublinCore [9] speciﬁcation. However, these relations were
not originally designed for educational authoring, so they are not well suited to cope with
the requirements of lesson authoring. We opted for another extended taxonomy proposed
by Trigg [40]. Trigg’s taxonomy deﬁnes an extensive set of relations supporting narration,
 that can be used to deﬁne a lesson graph. It deﬁnes semantical as well as rhetorical
relations allowing the author to use those that better match the needs of the speciﬁc lesson.
 We asked a group of lecturers working in the Computer Science Department of our
university to organize the content of the introductory computer programming course for
freshmen as a lesson graph using a certain set of relations. We specifically left out the too
generic relations (e.g., isFollowedBy) since they give almost no information about a LO
context in the graph. Based on their work, we empirically selected a subset of these relations,
 emphasizing the semantical, rhetorical and organizational aspects of course authoring:
introducesTo, assessedBy, supportedBy, abstractedBy, exempliﬁedBy, comparableWith, backgroundFor,
 summarizedBy, resolvedBy, isPartOf. Each of these relations has an opposite: a
relation from a LO a to another LO b implies an opposite relation between b and a (e.g.,
isPartof deﬁnes a reverse relation hasPart). In this article, lesson graphs are built using this
set.

3 Taking advantage of LO metadata

3.1 Classical approach

Hatala and Richards [16] and Brase [3] present systems taking advantage of the semantics
of a set of related LOs in order to infer possible values for some missing elements. These
systems are based on a set of rules deﬁning the way to combine the semantics of LOM and
the nature of the links between the related LOs.

Figure 2 shows a conceptual model of such systems. This model is based on the metadata
values and the relation semantics of a LO graph. The central component of the model are
the inﬂuence rules. Inﬂuence rules express the impact of the graph semantics on the metadata
values.

Inﬂuence Rules 

(Rules expressing
Inﬂuence of Graph 

Semantics on 
Metadata Value)

Metadata Values

of a Learning-Object Graph

Support For LOM Generation

Contextualized Metadata Values

for this LO Graph

Fig. 2 Conceptual model for systems taking advantage of lesson graph semantics

123

Taking advantage of metadata semantics

327

Deﬁnition 3.1 (Inﬂuence rule) An inﬂuence rule is a triplet from A × T × I where A is the
LOM attribute set, T is the relation type set, and I is the set of inﬂuence type.

For instance, [16] proposes the rule: When there is an ascendancy (i.e., isPartOf) relation
between two LOs, the value of the educational/intentedUserRoleattribute of the
parent may be suggested to the child. Such statement can be expressed as the inﬂuence rule:

(educational/intendedUserRole, isPartOf, ’likely equals to’)

Deﬁnition 3.2 (Contextualized metadata value) Applying inﬂuence rules on the metadata
of a certain LO results in special data called contextualized metadata values since they are
inferred from the context of the LOs, i.e., the metadata values of the other LOs related to it
and the semantics of the relations between them.

The contextualized metadata values (CMVs) proposed in [16] are suggestions of metadata
values with a relevance level, e.g., Strong or Medium. In [3], the generated CMVs are instantiated 
as new metadata values. In these two systems, metadata processing result in different
types of CMV. In fact, both systems have their own metadata processing strategy. We deﬁne
CMV model as a metadata processing strategy. Deﬁning a CMV model consists in specifying 
some inﬂuence rules for processing metadata and the nature of the CMVs resulting from
applying those rules.

3.2 Diffusion-based approach

Surveys about metadata usage [6,14,17,30] state that human metadata instantiation (in contrast 
to automatic metadata instantiation) is a difﬁcult task which is generally ignored or
made in a hurry. Frequently, authors leave “by default” values, which may not correspond to
real values. Therefore, it is very probable that the LOs of a lesson graph suffer from missing,
incomplete, and even incorrect metadata values.

In the existing approaches, the scope of the rules is generally limited to the metadata values 
of the neighboring LOs. Therefore, computation of the rules may suffer from metadata
lack. In [16], this problem is considered in the inheritance and accumulation rules since they
are applied on the whole hierarchy of LOs instead of being limited to the direct parent or
children. Nevertheless, this principle is not applied to all the rules.

3.2.1 Context diffusion

In order to cope with the lack of metadata, [24] suggests to diffuse the metadata values over
an untyped graph using fuzzy logic. We also propose a diffusion mechanism in order to deal
with metadata lack, but unlike Marchiori’s work, we use the semantics of the graph. Thus,
instead of a ﬁxed propagation mechanism based on fuzzy logic, our propagation mechanism
is based on the results of inﬂuence rules. In this process, the inﬂuence rules are applied not
only to the metadata values of the neighboring LOs, but also recursively to the results of
applying the rules to these neighboring nodes, i.e., the CMVs. We call this recursive process
context diffusion. During context diffusion, inﬂuence rules are ﬁrst applied to the existing
values of the graph. Thus, a ﬁrst set of CMVs is generated. Afterwards, the inﬂuence rules are
applied to both the generated CMVs and the existing metadata values of the graph. Thus, a
new set of CMVs is generated. This process is repeated iteratively until the generated CMVs
ﬁnally converge; the update process should ensure this convergence.

123

328

O. Motelet et al.

Teacher Community

Customization

( Teacher Community Reﬁnement and Correction

/ Analysis of existing Lesson Graphs)

Authoring
and Use 

Context
Diffusion

Contextualized
Metadata Value

Update
(Propagation until 

Stabilization)

Inﬂuence Rules 

(Rules expressing  Inﬂuence of 
Graph Semantics on Metadata 

Value)

Metadata Values

of a Learning-Object Graph

Support For Lesson Graph 

Authoring and Usage

(Metadata Generation and Validation / 

Graph Consistency Checking / 
Retrieval of Additional Material)

Contextualized Metadata Values

for this LO Graph

Fig. 3 Conceptual model using context diffusion for taking advantage of lesson graph semantics

The context diffusion process increases the scope of the inﬂuence rules to the metadata of
the whole graph. Therefore, the impact of missing, incomplete, or incorrect metadata values
is decreased compared with methods only taking into account a reduced neighborhood.

This process is non-monotonic because the CMVs for a same LO may change at each
iteration of the context diffusion process. Deﬁning such non-monotonic process over an
existing inference rule system for the semantic web such as Jena [19] is a non-trivial task.
Therefore, we preferred to use a simple push protocol based on update propagation: A modiﬁcation 
of the CMVs of a graph LO induces the CMV update of the neighbor LOs. If the
updated CMVs are different from those of the previous iteration, the process is repeated to
the neighboring nodes. Otherwise, the propagation stops for that node. Two reasons out of
the diffusion process can entail the propagation of the CMVs of a LO: (1) a change in the
existing LOM values of the LO and (2) a change in the relation semantics linking this LO to
other LOs of the graph.

3.2.2 Conceptual model

Figure 3 depicts a conceptual model for taking advantage of lesson graph semantics that takes
into account context diffusion. Likewise the model of Fig. 2, the main components are the
metadata values and relation semantics of the LO graph, the inﬂuence rules and the resulting
contextualized metadata values (CMVs). Nevertheless, this model aggregates a new core
component: the context diffusion. As described above, the context diffusion is responsible
for iteratively applying the inﬂuence rules on both existing metadata values and the already
inferred CMVs until stabilization of the CMVs is reached.

The generated CMVs are not limited to support LOM generation: the next sections show
that CMVs can also be used to facilitate metadata validation and LO graph consistency checking 
during authoring, and to enhance the retrieval of LOs. Nevertheless, these features may
depend on the particular teaching style and strategy of the corresponding teacher community.
This is due to the fact that some LOM attributes are subjective [21]. Therefore, it is difﬁcult
to deﬁne inﬂuence rules suiting every teaching situation.

For that reason, teacher communities are also part of the model. First, they beneﬁt from
the support provided by using the CMVs when authoring and using the lesson graphs. Second,
 they customize the inﬂuence rules in order to adapt the system to their teaching style
and preferences.

123

Taking advantage of metadata semantics

329

Necessary Properties 

for

CMV Update Processes 

Inﬂ uence Rule

Semantic and Syntax

Inﬂ uence Rules

CMV Models

CMV Propagation Protocol

Fig. 4 Context diffusion-based framework for taking advantage of lesson graph semantics

3.2.3 Framework

In order to support this conceptual model, we introduce a metadata processing framework
implementing our context diffusion approach. Figure 4 shows the three-layer structure of this
framework. Each layer tries to facilitate the use of our context diffusion approach.

Since the performance and the termination policy of context diffusion are difﬁcult to implement,
 the base of the framework, the bottom layer, consists of a generic propagation protocol
ensuring such characteristics. It also establishes the scope of the update processes that can
be applied to this propagation protocol. This scope deﬁnes a set of necessary properties with
which the update processes should comply.

The middle layer concerns the implementation of different CMV models, i.e, different
metadata processing strategies. Implementing a CMV model means to deﬁne the nature of
the model CMVs and the update process of these CMVs. This update process must comply
with the properties deﬁned in the bottom layer. This layer also speciﬁes the inﬂuence rule
scope, i.e., the semantic and syntax of the inﬂuence rules. In practice, this layer is intended
for researchers or engineers wishing to use the diffusion propagation system deﬁned in this
article with new type of inﬂuence rules and CMVs. The remaining of this article presents
two CMV models.

The top layer deals with the definition of customized inﬂuence rules according to the
semantic and syntax speciﬁed in the previous layer. This customization process is intended
to teacher communities needing to adapt the metadata processing system to suit their speciﬁc 
context. This customization process may be manual, e.g., new inﬂuence rules could be
deﬁned using a domain-speciﬁc language (DSL) or existing rules could be reﬁned. Customization 
may also be automatic, e.g., the system could analyze existing lesson graphs in order
to deduce the necessary information for customizing the inﬂuence rules.

The next section presents the generic propagation protocol, i.e, the bottom layer of the
framework. Next, two examples CMV models are introduced. Implementation of the middle
and top layers are discussed for each of them.

4 Generic propagation protocol

Ensuring the termination of a propagation process is an essential property in order to ease
the use of a context diffusion approach. For this reason, the base layer of our framework is
responsible for guaranteeing this property. This layer consists of deﬁning the propagation
protocol and the scope of the CMV update processes this protocol can support.

This section presents an implementation of this bottom layer that ensures performance and
convergence of a context diffusion process in LO-based lesson graphs. First, the properties of

123

330

O. Motelet et al.

CMV update processes that are necessary in order to deﬁne an efﬁcient propagation protocol
are deﬁned. Then a propagation protocol sufﬁciently generic to match our needs of semantic
processes is described.

4.1 CMV update process characteristics

n

→ j.
We note i /→∗
j, then i /→∗

j the transitive passive update of the LO i on the LO j. If there is not
j.

j the transitive active update of the LO i on the LO j via a certain number of
→ k1, . . . ,

j, then ∃ k0, . . . , kn ∈ G such that i → k0, ki→k0

The update of one LO j with another LO i is passive if it does not induce modiﬁcation
We note i →∗

We deﬁne an update process as a set of update functions that takes several CMVs as inputs
and produces a new CMV.
The update of one LO j with another LO i is active if it induces a modiﬁcation of the
CMVs of j. Such an active update is noted i → j. We note j i→ j the state of the LO j after
being updated by i.
of the CMVs of j. Such a passive update is noted i /→ j.
intermediary LOs. I.e. if i →∗
and kkn−1→kn
i →∗
Deﬁnition 4.1 (Stable graph) A LO graph is stable with respect to a certain regular update
process if for all LOs i and j, i /→ j.
Deﬁnition 4.2 (Regular update process) An update process is regular if it complies with the
following properties:
Stability For any LOs i and j, i /→ j i→ j .
Acyclism For any LO i, i /→∗
Asymmetry For any LOs i and j, if i →∗
Cumulation For any LOs i, j, and k, if i /→ j and k → j, then i /→ j k→ j
Initialization There is an initialization procedure for this update process such that any iniMax 
There is a function Max: CMV× CMV → CMV for this update process such that for

tialized graph is stable.
any LOs i and j, if Max(i, j ) = i then j /→∗
Note that in a regular update process, a Max function can always be deﬁned. Indeed, if
a Max function cannot be deﬁned, then there exist i and j such that Max(i, j ) has given no
result. This case means that i →∗
j then
j /→∗
In practice, the update processes developed in our institution and described Sects. 5.1 and
5.2 are based on asymmetric operators such as <, >. Proving the regularity of such processes
and deﬁning the Max functions is straightforward as shown in Theorems 5.1 and 5.3.

j and j →∗

i. However, by asymmetry if i →∗

i and conversely. Thus, the previous case cannot occur.

0

i.

j, then j /→∗

i.

i.

4.2 Update propagation protocol

The algorithm of Fig. 5 implements the propagation protocol described in 3.2.1. This algorithm 
is based on retrieving the Maxof the LOs having an update to propagate. This method
enables the following theorem:

Theorem 4.3 Regular-update propagation of k modiﬁcation in a stable graph processes has
order O(m + n log n)O(Max) with m the number of relations in the graph and n the number
of LOs.

123

Taking advantage of metadata semantics

331

Fig. 5 Algorithm for regular-update propagation protocol

Proof Each LO propagates its update only once. We prove this claim by contradiction:
If there is a LO i propagating its update twice, then i is picked up twice in the heap. Thus,
i has been twice the Max from the heap. Let H1 and H2 be the state of the heap when i
is popped for the ﬁrst and second time, respectively. Let i1 and i2 be the states of i in H1
and H2, respectively. By definition of Max, for all j1 of H1, j1 /→∗
i1 (1). However, since
i2 ∈ H2, it exists a LO l such that l → i1 otherwise i1 should not reintegrate the heap.
According to the algorithm, all changes in the input graph are due to the propagation of
updates registered in the heap. Thus, l was also in the heap. Transitively, it exists j1 ∈ H1
such that j1 →∗
i1 (2). If j1 (cid:5)= i1, then (2) is contradictory
with (1). If j1 = i1, then by (2), i1 →∗
i1 which is impossible by acyclism property of
regular update processes. Therefore, a same LO cannot propagate its update twice.

l. Since l → i1, then j1 →∗

Each edge is visited only once Since each updated LO is propagated only once, the relations 
between each LO and its respective neighbors are visited only once.

Total Cost

In the Fibonacci Heap, inserting an element costs O(Max). If this element is
already in the data structure, the key associated to this element is increased since it was
updated by the propagation protocol. This operation also costs O(Max). Removing the
Max element of the Fibonacci Heap costs O(Max)O(log p), where p is the number of
element in the heap. In the worst case, p = n where n is the number of nodes of the graph.
Therefore, since the edges are visited only once, the worst case consists of inserting m
times in the Fibonacci Heap with m being the number of edges. Since each node diffuses 
its update only once, the Max of the Fibonacci Heap is removed n times at worst.
Consequently, the total cost of the algorithm has order O(m + n log n)O(Max).
(cid:6)(cid:7)

Note that since the update propagation algorithm depends on O(Max), regular update
processes should involve Max functions of low cost. In practice, the Max functions of the
update processes developed in our institution and described Sects. 5.1 and 5.2 are based on
decimal comparison (O(1)) or set comparison (O(set length)).

Theorem 4.4 Regular-update propagation results in a stable graph.

Proof If the graph resulting from a regular update process is not stable, then there exist i
and j such that i → j. Since the graph was stable before the update propagation, there was
ibefore /→ jbefore. But since iafter → jafter, then either iafter
(cid:5)= jbefore
(2). If (1) occurs, then according to the propagation protocol, the iafter has propagated its

(cid:5)= ibefore (1) or jafter

123

332

O. Motelet et al.

update to all its neighbors. Thus, iafter /→ j iafter→ j by stability property of regular update
processes. If j iafter→ j is modiﬁed by other updates, then there is still iafter /→ jafter by cumulation 
property of regular update processes. If (1) does not occur but (2) does, then by cumulation
property since ibefore /→ jbefore, ibefore /→ jafter. Therefore, for all i and j of the graph, i /→ j.
(cid:6)(cid:7)
Consequently, the graph is stable.

4.3 Avoiding propagation side-effect

In practice, our propagation system may present an undesirable side-effect when there are
decreasing metadata values according to the Maxfunction. Indeed, consider the active propagation 
i → j. Let inew be a decreasing value for i such that j i→ j → inew. The memory
of the old i value in the CMV of j ( j i→ j ) may be inconvenient, e.g., if the old i value was
incorrect and inew corrects it, it is not acceptable to have the CMV of i modiﬁed by a CMV
deriving from the old value of i.

In order to cope with this problem, the update process implementation must include the
following two rules. First, the update process of a node should not take into account the
neighboring CMVs deriving from this node. Applying this rule to our example, we have
j i→ j /→inew because j i→ j derives from i. This additional rule is consistent with the acyclism 
property of regular update processes. Second, update processes should always take into
account all the neighboring CMVs and the existing value of the updated node. Applying this
rule to our example, when inew is assigned for i, this new value can update j whereas there
should be inew /→ j i→ j by asymmetry of regular update processes applied to j i→ j → inew.
Therefore, the value of j can reﬂect the changes of i. In fact this property is natural since
j derived from i. Moreover, the asymmetry property remains respected since the ﬁrst rule
forbids j i→ j /→inew.

5 CMV model examples

This section describes two implementations of the second and third layer of our framework.
In the ﬁrst implementation, similarities among the attribute values of graph LOs are used to
generate suggestions for the missing metadata value of the LOs. In the second one, the graph
consistency is analyzed in order to generate restrictions for some of the metadata values a
LO should have in order to be consistent with the semantics linking it with the remaining
graphs. For both proposals, this section deﬁnes

(a)
(b)
(c)
(d)

the scope of the inﬂuence rules and a language to specify them,
the nature of the CMVs,
a regular update process for these CMVs,
an inﬂuence rule customization strategy.

5.1 Attribute similarities and value suggestion

As stated in [16], graph semantic analysis may be used to identify similarities between LOM
attribute values of related LOs. For instance, in the graph of Fig. 6, since L1 introduces
L3 we may expect that the general/keyword attribute of L1 and the general/keyword 
attribute of L3 share some values. In this particular case, the values of this attribute
are {instantiation,object,method} for L1. Therefore it seems reasonable to expect that the
general/keyword of L3 contains some of the values instantiation,object,new}.

123

Taking advantage of metadata semantics

333

Introduces To

Fig. 6 Extract of the LO graph shown Fig. 1

= {instantiation, object, method}

= ?

isPartOf

0.45

resolvBy

0.85

introTo
0.54

abstrBy

0.72

hasPart

0.57

?

explaiBy

0.75

backgrdFor

0.70

Fig. 7 Suggestion weights for general/keyword attribute

5.1.1 Inﬂuence rule scope

In order to generalize the predeﬁned rules of [16], we weigh similarities for each “attribute /
relation type” couple according to the use context. Weighted values are already used in the
term classiﬁcation domain [39,34]. We propose to apply them to the LO graph domain. In our
case study, we analyze a repository of lesson graphs (containing about 170 LOs) developed
at our institution. For instance, if a LO L is related to a LO L
with a link of type introducesTo,
then we found out that there is a probability 0.54 a certain value of the general/keyword 
attribute of L belongs to the general/keyword attribute of L
. In order to get such
a value, all the pairs of repository LOs having an introducesTo relation between them are
taken into account. Then we calculate the mean of the probabilities
(cid:3)
k ∈ keyword(L)

k ∈ keyword(L
and k is a possible value for the general/keyword attribute.
where L introduces to L
This computation is done on the stemmed version of the attribute values, i.e., their morphological 
root, in order to avoid common spelling problem (e.g., car and cars have the same
stemmed value).

(cid:2)
(cid:8))

(cid:1)

P
(cid:8)

(cid:8)

(cid:8)

Figure 7 is a reduced view of the lesson graph of Fig. 1 showing the probabilities of same
values between neighboring nodes calculated on our corpus for the general/keyword
attribute.
In this application of our conceptual model, inﬂuence rules are called suggestion rules.
Suggestion rules are functions f : A× T → [0, 1] where A is the set of LOM attributes and
T is the set of relation types.

According to the weights depicted in Fig. 7, some values for f are, e.g.,

f (general/keyword, introducesTo) = 0.54
f (general/keyword, explainedBy) = 0.75

123

334

Fig. 8 Suggestion update
process

5.1.2 CMV nature

O. Motelet et al.

It is possible to generate some CMVs called suggestions for the LOs of the lesson graph
using the rules introduced above. A suggestion is a set {(v, w(v)) : v ∈ Va} associating
weights w(v) to all the possible values Va for a certain LOM attribute a.
The weight is 0 when the value is not at all appropriate for the LO, while it is 1 when it
describes it perfectly. At the beginning of the context diffusion process, we set w(v) = 0 for
all possible values v for the a attribute except for the existing values of the attribute which
have a weight 1.

(cid:8)

5.1.3 Update process
Consider an attribute a and let Va be the set of possible values for a. Consider also two
LOs L and L
as depicted in Fig. 8. Let
{(v, w(v)) : v ∈ Va} and {(v, w(cid:8)(v)) : v ∈ Va} be the suggestions of L and L
, respectively,
for the a attribute.
(cid:8)

with regards to the suggestions of L consists of replacing the

, and a relationship of type t connecting L with L

The suggestion update of L

(cid:8)

(cid:8)

(cid:8)

suggestions of L

with

{(v, max(w(cid:8)(v), p(a, t ) × w(v)) : v ∈ Va}

(cid:4)

i since

from i to i

(cid:4)

Theorem 5.1 The suggestion update process is regular.
Proof Consider a ∈ A and v ∈ Va. Let pi j be the inﬂuence rule p(a, ti j ) where ti j is the
relation type between the LOs i and j. Let also wi be the weight wi (v) ∈ [0, 1] of the value v
of a for the LO i. If i → j, according to the definition of the suggestion update process then
pi j ∗ wi > w j . The suggestion diffusion process complies with the following properties:
Stability i /→ j i→ j since pi j ∗ wi ≤ pi j ∗ wi .
Acyclism i /→∗
Asymmetry i →∗
∗w j
i since if
(cid:4)
∗wi ≤ wi for all p ∈ [0, 1].
≤ wi because
∗w j ≤ w j <
Cumulation i /→ j & k → j ⇒ i /→ j k→ j since if pi j ∗ wi ≤ w j and pk j ∗ wk > w j , then
pi j ∗ wi < pk j ∗ wk because w j < pk j ∗ wk.
pi j ∗ wi = 0 ≤ w j = 0.

Initialization By initializing all weights with 0, the graph is stable since for any i and j,
Max For any i and j, Max(i, j ) = max(wi , w j ). Therefore if Max(i, j ) = i, then j /→∗
i
(cid:6)(cid:7)

( p) ∗ wi ≤ wi for all p ∈ [0, 1].
∗wi > w j , then

Therefore, the suggestion update process is regular.

∗w j ≤ w j < wi .

j ⇒ j /→∗

from j to i

from i to j

from j to i

from i to j

from j to i

since

(cid:4)

(cid:4)

(cid:4)

5.1.4 Inﬂuence rule customization

Suggestion rules customization can be mostly automatic. For instance, analyzing authored
lesson graphs, it is possible to calculate the probability that an attribute value is repeated
between two related LOs.

123

Taking advantage of metadata semantics

335

= ?

= {Java} 
= ?

Introduces To

= {OOP} 

= medium

Fig. 9 Extract of the LO graph shown in Fig. 1

In order to suit the teaching style of a particular community, this analysis should be performed 
locally. A strategy consists, e.g., in analyzing each lesson graphs added or updated
in the local repository used by the community. Nevertheless, this strategy only works if the
analyzed repository contains enough lesson graphs to extract statistically significant probabilities.
 Therefore, some default standard probabilities should be taken into when there is
insufﬁcient data.

5.2 Graph consistency and value restriction

Let us consider the lesson graph of Fig. 9. It is plausible to think that for a certain teacher
community, the fact that L1 introduces L3 may imply that the content of the LO L1 is simpler
than the one of L3 (otherwise the lesson graph would not be consistent). In terms of LOM
semantics, it means the value of the LOM attribute educational/difficulty of L1
should be lower or equal to the educational/difficulty of L3. If L1 introduces
more than one LO, its level of educational/difficulty should be compatible with
(lower than) each element it introduces. Since the value of educational/difficulty
is associated to a predeﬁned vocabulary, we can deﬁne an order among the terms of this
vocabulary to test the consistency.

Similarly, it seems reasonable to imagine that for a certain teacher community, since L6 is
a container for L1 and L3, the content coverage of L6, i.e., the extent or scope of the content
of this LO, should include the content coverage of its children. In terms of LOM semantics,
it means the value of the general/coverage attribute of L6 should be a superset for all
the general/coverage of its children (including L1 and L3).

5.2.1 Inﬂuence rule scope

The previous assumptions about the consistency of LOM attribute values are special inﬂuence 
rules called restriction rules. When deﬁning restriction rules, we distinguish between
two kinds of LOM attributes:
1.

the attributes dealing with single value which are ordered in the LOM speciﬁcation or can
be easily ordered in a LOM Proﬁle (e.g., the easy value of the educational/difficulty 
attribute can be set as inferior to the difﬁcult value),
the attributes which have a set of elements as value (e.g., general/coverage or
general/keyword).

2.

The LOM speciﬁcation makes such distinction.

When dealing with metadata attributes having a single element as value, the restriction
rules are functions taking a metadata attribute name and a relation name as parameter, and

123

336

O. Motelet et al.

Table 1 Examples of restriction rules

Relation Types LOM Attributes

General

Educational

Coverage Aggregation

⊆(cid:5)
isPartOf
vi
⊇(cid:6)
hasPart
vi
summarizes
summarizedby ⊇(cid:6)
vi
introducesTo
introducedBy
assessedBy
assesses

level

≤minvi
≥maxvi
≤minvi
≥maxvi
≤minvi
≥maxvi
≥maxvi
≤minvi

Intended
user role
⊆(cid:5)
vi
⊇(cid:6)
vi

⊆{learner}

Semantic
density

Typical learning
time

Difﬁculty

≤minvi
≥maxvi
≤minvi
≥maxvi

≤ max vi
≤maxvi
≤maxvi

≤maxvi

≥minvi
≤maxvi
≤maxvi

≤maxvi

returning an element of the set O = {≤,≥}×{max, min, V} where V are all the possible values 
for the LOM attributes. For example, the restriction rule for the educational/difficulty 
attribute and the introducesTo relation is deﬁned as ≤ maxvi where vi are the
educational/difficulty values of the LOs related with the introducesTo relation.

Table 1 shows other examples of restriction rules. Note that the rules can be modiﬁed in
order to adapt them to other educational contexts.
Finally, we deﬁne the restriction rules as functions γ : A × T → O ∪ Os where O =
{≤,≥} × {max, min, V}, Os = {(⊆,∩), (⊆, 2
V )}, A is the set of LOM
attributes, T is the set of relation types, and V is the set of all the possible values for the LOM
attributes.

V ), (⊇,∪), (⊇, 2

Therefore, the restriction rules for the propositions done before have the following values:

γ (educational/difficulty, introducesTo) = (≤, max)
γ (general/coverage, hasPart) = (⊇,∪)

5.2.2 CMV nature

Applying restriction rules to the LO graph results in a set of special CMVs called restriction
intervals. A restriction interval for a certain attribute a reduces the range of possible value
for a.
a (L),
the lower and upper bounds for ra(L), respectively, are elements of Va for single-element
value attributes and 2

We note ra(L) the restriction interval for a LO L and the a attribute. r low

Va for element set value attributes.

(L) and r up

a

We detect an inconsistency when the value that the user set for the a attribute does not
belong to this interval. Another source of anomaly is when the interval becomes incoherent,
 i.e., it does not comply anymore with r low
a (L) for single-element values or
(L) ⊆ r up
r low
a
At the beginning of the propagation process, the restriction interval for the a attribute and
the L LO is initialized to the whole interval of the possible values for a, i.e., [ − ∞,+∞]
for single-element values or [∅, Va] for element set values where Va is the power set of
all the values for a. If the user has set a value for the a attribute, the interval reduces to

a (L) for element set values.

(L) ≤ r up

a

123

Taking advantage of metadata semantics

337

Fig. 10 Restriction interval
update process

[a(L), a(L)] where a(L) is the actual value of a for L. If an interval becomes incoherent,
then the propagation process excludes it.

5.2.3 Update process

Figure 10 depicts a step of the propagation process: the changes in the restriction interval for
a certain attribute a of the L/0 LO are propagated to the restriction interval of its neighbor L.
Restriction rules are applied to the inverse of the relation used for propagating the changes:
in this case, the relation of type t connecting the L LO (receiving the update notiﬁcation)
to L/0 (propagating changes) is used. The update process of a restriction rule considers the
n + 1 LOs to which L is connected with relations of type t. Those LOs are denoted Li with
/0 ≤ i ≤ n, where n is a natural number.
If the t relation type imposes a restriction rule ≤ max for the values of the a attribute (i.e.,
γ (a, t ) = (≤, max)), the update function consists of replacing the ra(L) restriction interval
of the L LO by: ra(L)∩] − ∞, maxi
.1 This means that the restriction interval of
L is intersected with an interval consisting of an inﬁnite lower boundary (no effect on ra(L))
and an upper boundary equal to the maximum of the upper boundaries of the restriction intervals 
of the LOs Li (may lower the upper boundary of ra(L)). The other restriction update
functions follow the same principles as deﬁned below.
Consider an attribute a and Va the set of possible values for a. Consider also a LO L and
a set of LO Li , and a relationship of type t connecting L with the Li s. If the attribute a has
single-element values, then the restriction update process consists of the functions deﬁned in
Table 2. If the attribute a has element set values, then the restriction update process consists
of the functions deﬁned in Table 3.

(cid:1)
r up
a (Li )

(cid:3)(cid:7)

The intersection between two intervals is deﬁned as

x low, x up

ylow, yup

max

x low, ylow

(cid:3)

, min

(cid:1)

x up, yup

(cid:3)(cid:7)

(cid:8)

(cid:7) ∩ (cid:8)

(cid:7) = (cid:8)

(cid:1)

We deﬁne the min and max functions for the element set values a and b as

and

min(a, b) =

⎧
⎨

⎩

if a ⊆ b
if a ⊇ b

a
b
else a composition error is thrown

max(a, b) =

⎧
⎨

⎩

if a ⊇ b
if a ⊆ b

a
b
else a composition error is thrown

1 Interval notation follows the international standard ISO 31-11.

123

338

O. Motelet et al.

Table 2 Restriction update process for single-element attributes

γ (a, t )

Restriction update functions

Lowering the upper boundary
(≤, max)
(≤, min)
(≤, v) with v ∈ Va
Increasing the lower boundary
(≥, max)
(≥, min)
(≥, v) with v ∈ Va

ra (L) = ra (L)∩] − ∞, maxi
ra (L) = ra (L)∩] − ∞, mini
ra (L) = ra (L)∩] − ∞, v]
ra (L) = ra (L) ∩ (cid:15)
(cid:12)
r low
a
ra (L) = ra (L) ∩ (cid:15)
(cid:12)
r low
a
ra (L) = ra (L) ∩ [v,+∞ [

maxi

mini

(cid:13)(cid:14)

(cid:13)(cid:14)

(cid:12)
r up
a (Li )
(cid:12)
r up
a (Li )

(cid:13)
(Li )
(cid:13)
(Li )

,+∞ (cid:15)
,+∞ (cid:15)

Table 3 Restriction update
process for element set attributes

γ (a, t )

Restriction update functions

Va

Lowering the upper boundary
(⊆,∩)
(⊆, v) with v ⊆ 2
Increasing the lower boundary
(⊇,∪)
(⊇, v) with v ⊆ 2

Va

ra (L) = ra (L) ∩ (cid:15)∅,
(cid:5)
i
ra (L) = ra (L) ∩ [∅, v]
(cid:12)
ra (L) = ra (L) ∩ (cid:15)(cid:6)
r low
a
ra (L) = ra (L) ∩ [v,Va]

i

(cid:13)(cid:14)

(cid:12)
r up
a (Li )

(cid:14)

(cid:13)
(Li )

,Va

Property 5.2 There are three possible causes for a restriction interval to become empty or a
composition error to be thrown: (1) there is an incorrect value for the metadata of propagated
LO, and/or (2) there are some incorrect relations the LOs of the graph, and/or (3) there is a
contradiction between two restriction rules that should be resolved.

Theorem 5.3 The restriction update process is regular.

Proof The restriction update process applies on two independent attribute types: singleelement 
attributes (see Table 2) and element set attributes (Table 3). For each type, half of the
restriction rules decreases the upper limit of the restriction interval. The second half increases
the lower limit of the restriction interval. Since the interval coherence is considered out of the
update process as described in Property 5.2, the restriction update consists in four independent 
processes. Therefore, restriction update process is regular because those four processes
are regular as it can be easily shown with a method similar to the proof of Theorem 5.1. The
(cid:6)(cid:7)
interested reader can ﬁnd the complete proof in [28, p. 111].

5.2.4 Inﬂuence rule customization

Table 1 shows an example of restriction rules deﬁned in our sample repository. Restriction
rules can be deﬁned or existing restriction rules can be reﬁned in order to suit other teaching
communities. Rules are deﬁned in a domain-speciﬁc language following the grammar shown
in Fig. 11.

123

Taking advantage of metadata semantics

339

Fig. 11 Restriction rule context-free grammar

5.3 Implementation

The framework presented in this article is implemented as an open source Java library available 
at [7]. This library is adaptable to any metadata type organized as graphs. The library
implements the update propagation algorithm based on Fibonacci heap and the CMV models
previously described. It also includes the implementation of the two CMV model applications
deﬁned in this article.

6 Framework beneﬁts during lesson authoring

This section presents the use of our framework into a lesson graph authoring tool, LessonMapper2.
 First, LessonMapper2 is introduced. Next, the framework application for supporting
the generation and validation of LO metadata during lesson authoring is discussed. Finally,
a mechanism using the framework in order to enhance LO retrieval during lesson authoring
is brieﬂy presented.

6.1 LessonMapper2

LessonMapper2 [20] is a lesson graph authoring tool. In LessonMapper2, each node of the
graph is a LO associated with its set of metadata. While LO metadata generation is generally 
separated from the lesson authoring activity, LessonMapper2 integrates the instantiation
of LO metadata into the lesson authoring process. In particular, the metadata instantiation
is integrated into the lesson graph authoring interface. Figure 12 shows such an integration.


LessonMapper2 applies the framework described in this article on the IEEE LOM metadata 
set [21]. It also uses the RDF binding of this speciﬁcation in order to reify the vocabulary
associated with each LOM attribute [22]. Each time LessonMapper2 is launched, it connects 
to the community repository deﬁned by the user. This connection permits to update
the suggestion and restriction rules with the ones being deﬁned at the teaching community
level.

6.2 Supporting LOM generation and validation during lesson authoring

This subsection presents examples of use of our framework in order to facilitate LOM generation 
and validation during lesson authoring.

123

340

O. Motelet et al.

Fig. 12 Graph of Fig. 1 built with LessonMapper2

6.2.1 Supporting LOM generation

Suggestions and restrictions deﬁned with our framework are used to facilitate metadata generation.
 Figure 13 shows the semantic density of the LOs L6, L1, and L3. In this example, the
user asked for suggestions and restrictions for the educational/semanticDensity
attribute of L1. Consider that the system has been initialized with the restriction rule

γ (educational/semanticDensity, introducesTo) = (≤, min)

Therefore, the metadata diffusion framework infers that the semantic density of L1 should
be less or equal to the semantic density of L3.

LessonMapper2 was also initialized with a set of suggestion probabilities derived from
usage analysis in a teaching community of our University. Therefore, the system can suggest
some possible values for instantiating the semantic density of L1: (1) medium density, i.e.,
the value of the semantic density of L6, (2) low density, i.e., the semantic density of L3,
and (3) very high density, i.e., the semantic density of other LOs not displayed in Fig. 13 but
being also part of the lesson and indirectly related to L1. Suggestions are sized according to
their relevance: Suggestions having a high probability of being chosen are shown larger than
the other with less probability.

The suggested values that do not comply with the inferred restrictions, are painted in a
different color from the color assigned to the values that do. In LessonMapper2, simple drag
and drop enables to adopt one of the suggested values if the user considers it as the most
appropriate.

Initial case study In order to verify the suggestion accuracy, we performed two preliminary
experiments: ﬁrst, a statistical analysis of existing data, second, the observation of users working 
with our system.

The statistical analysis was based on 170 LOs organized as a large graph developed in our
University. Each LO of the graph was studied independently. First, the suggestions for the

123

Taking advantage of metadata semantics

341

L6

L1

L3

L6

L1

L3

Fig. 13 Suggestions and restriction for the educational/semanticDensity attribute value of the
Primer Programa LO

selected LO were calculated as if it had no instantiated metadata value. Then, the generated
suggestions were compared to the instantiated values in order to log the expected suggestions,
 i.e. those matching with the instantiated values, and also the unexpected suggestions,
i.e. those not matching with the instantiated values.

For each attribute, we investigated the differences between the distribution of weights for
the expected suggestions and for the unexpected suggestions. Figure 14 shows these distributions.
 The data are displayed as boxplots since their juxtaposition permits to investigate
the differences between the data sets without any statistical assumption on data distribution
[25].

We observe that the suggestions generated for tangible attributes, such as keyword or
coverage, are statistically accurate: the expected suggestions have high weights and the
unexpected suggestions have low weights. On the opposite, the suggestions generated for
some subjective attributes such as interactivityType or learningResourceType 
are not accurate: the weight does not appear correlated with the fact that a suggestion
is expected or not. Thus, it is useless to propose such suggestions to the users. However,
this behavior does not apply to all subjective attributes. For example, Fig. 14 shows that
suggestions for the attributes semanticDensity or difficulty may be sufﬁciently
accurate to be useful for users. Nevertheless, large-scale experiments are needed in order to
generalize such results.

We performed a second experiment based on the observation of 11 users working with our
system. After a brief introduction to LessonMapper2 and its features—including a demonstration 
of suggestion usage—each user had to build a LO graph and instantiate the metadata
of their LOs. We observed that three users never took beneﬁts of the suggestions in order to
instantiate the metadata even when the suggestions were ﬁtting. This phenomenon is likely
to be related to an HCI issue. Nevertheless more experiments are needed in order to identify
the phenomenon causes.

123

keyword

coverage

structure

interactivity

learning

type

resource type

semantic
density

context

difficulty

attributes

O. Motelet et al.

342

i

s
t
h
g
e
w
 
n
o
i
t
s
e
g
g
u
s

1

8
0

.

6
0

.

4
0

.

2
0

.

0

149

12449

107

426

155

343

345

165
162
suggestion sample sizes

149

765

518

161

349

163

517

expected suggestions

unexpected suggestions

Fig. 14 Boxplot representation of expected and unexpected suggestions distributed by weights and attribute
types. Boxplots show the smallest observation (bottom line), lower quartile (rectangle bottom), median (bold
line), upper quartile (rectangle top), and largest observation (top line). They may also indicate the observations
that can be considered outliers (circles)

6.2.2 Supporting LOM validation

The validity of the metadata of a certain educational resource has to be ensured in order
to facilitate the access to this resource. Valid metadata should satisfy a minimum level of
completeness and correctness.

The analysis of completeness of LOM simply consists of checking the number of instantiated 
attributes. Complete LOM have all their attribute instantiated. Correctness evaluation
is complex because it deals with the semantics of the metadata values. Available methods
focus on determining if a metadata is incorrect. They are generally based on comparing the
instantiated value with the results of automatic instantiation systems or by checking the consistency 
of the LOM attributes inside the same LO [33,38]. In the context of lesson authoring
based on LO graph, we propose a complementary approach based on the restriction inferred
with our framework: a LOM value not complying with one of the inferred restrictions is
tagged as incorrect.

LOM validation is integrated into the lesson authoring process as a visual tag decorating
the graph LOs. As shown in Fig. 15, in LessonMapper2, all the learning material items of the
graph are decorated with tricolor bars representing the proportion of invalid, undeﬁned, and
not invalid elements for the LOM attributes of each learning material item. Invalid elements
hold values not satisfying the restrictions deduced by the system. Undeﬁned elements have
not yet any value assigned. Finally, not invalid elements hold values successfully passing
both tests of completeness and incorrectness.

6.3 Using LOM for enhancing LO retrieval

6.3.1 Querying a repository from inside the lesson graph

Standard querying is done by searching matching metadata and keywords. To describe L5
of Fig. 1, we could for example choose “constructors overloading” and retrieve the LOs with

123

Taking advantage of metadata semantics

343

L1

L3

L1

L3

Fig. 15 Displaying the validation state of the metadata of a LO with LessonMapper2

metadata related to it. This is the approach taken by most information retrieval engines like
Lucene [23].

Querying a LO repository can be done using a purely graphical approach. For instance,
consider node L5 of Fig. 1. This node is not associated with an existing document, instead
it is a query node: A query reﬂecting the need for a LO with certain characteristics is thus
expressed as a vertex in the lesson graph. In Fig. 1, the LOs satisfying the query node L5 are
examples of the concepts introduced by L4.

6.3.2 Using the lesson graph to evaluate potential results

Since authoring a lesson consists of adding nodes to the lesson graph, it is natural to integrate
this task with the LO retrieval process and to use the implicit information associated with
the new node position. This can be seen as associating a context extracted from the graph
to the traditional term or metadata search. The framework presented in this article can be
used to implement such approach. For instance, in [29], we propose to modify the ranking
of retrieved objects as produced by a Lucene search process with the results of classiﬁers
designed to take the neighbor graph into account.

These new classiﬁers are based on the suggestions and restrictions produced by the framework.
 When searching a repository, the LOs that comply with the value restrictions associated
with the query should be promoted. To implement this idea, a score is computed for each LO
as #CompliedRestrictions
. If there are no generated restrictions for a certain LOM attribute,
#Restrictions
the scores are set to 1.

Suggestions can also serve the ranking process: To estimate the similarity between a query
node q and a node e from the repository, we can measure how similar the nodes’ suggestions
are. We propose to adapt the traditional cosine measure for this task:

v we(v)2

123

simatt(q, e) =

(cid:17)(cid:16)

v wq (v) × we(v)

(cid:16)
v wq (v)2 × (cid:18)(cid:16)

344

O. Motelet et al.

where v scans the values of the attribute att and wq (v) and we(v) are the weights associated
with v in the suggestions of q and e, respectively. This measure quantiﬁes the intuition that
the value suggestions represent the relation of the node q and e with their neighbors in their
respective graphs. In other words, these values summarize the context of the nodes.

The new classiﬁers obtained using the suggestions and restrictions generated by the framework 
are then combined. Combination is automatically performed by the RankBoost algorithm 
[13], a machine learning algorithm that searches for an optimal combination of several
weak or uncertain classiﬁers.

Using RankBoost permits to automatically combine our approach with other retrieval
methods. For example, in the context of conceptual-graph-based queries, [15] proposes to
count the transformations separating the conceptual graph of the query with the conceptual
graph of the result in order to rank the results. Our approach does not deal with this conceptual
graph aspect. Consequently, the two approaches may be complementary and could be easily
combined with RankBoost.

6.3.3 Experiments

A LO repository was implemented within our institution and populated with 170 LOs about
a single topic: An introductory Java course. This repository contains ﬁne grained LOs, each
corresponding to teaching/learning material for about 5 min. In contrast with the available
repositories, relation semantics linking repository LOs are based on the proposal introduced
in Sect. 2 (see [27] for getting access to a repository snapshot).

Eleven teachers of Java Programming, not involved in the project presented in this article,
were asked to complete four different lesson graphs about object instantiation and method
call. The proposed graphs were purposely incomplete in order to motivate the teachers to
complete them. For each situation, they were asked to complete the corresponding lesson
graph with two new LOs of their choice. The teachers had to thoroughly describe the required
LOs so that the interviewer could identify which repository LO matched the teacher’s intent.
The matching LOs were not communicated to the teachers. Instead of that, they were asked to
search for them in the repository using common keyword queries and locating the expected
material inside the graphs, i.e., by deﬁning query nodes. Teachers knew that keyword queries 
were used to search the metadata of the available LOs of the repository and not their
content. Eventually, query terms referring to some special vocabulary values were deﬁned
in natural language and then replaced by the interviewer with the proper vocabulary value.
These experiments gave rise to 88 test cases, including keyword query and position in lesson
graph along with the relevant results (see [29] for details about the experiments).

Result analysis Using the queries (composed of a graph with a query node and of a set
of keywords), we evaluated two different systems: ﬁrst, we used only keyword queries and
the Lucene IR system. Lucene indexed the metadata of the LOs contained in the repository.
 During the preprocessing, metadata values were stemmed and tags were removed. Only
metadata were indexed since most of the educational resources of the used repository were
multimedia documents with proprietary format where relevant information is difﬁcult to
access. Similarly, keyword queries are stemmed.

In the next step, we used the classiﬁers based on the restrictions and suggestions produced
by the framework. Rankboost served to combine these classiﬁers together with the Lucene
classiﬁer. It resulted in one classiﬁer summarizing the ranking evaluation of all the classiﬁers
including Lucene. We trained and tested RankBoost using a fourfold cross-validation. Each

123

Taking advantage of metadata semantics

345

Table 4 T tests on precision
differences between
Rankboost-based combination of
framework-based classiﬁers and
Lucene alone

Recall interval% Mean

95% conﬁdence interval

p value

0–25
0–50
0–75
0–100

0.0523
0.0502
0.0461
0.0411

0.0195–0.0850
0.0208–0.0796
0.0187–0.0736
0.0143–0.0678

0.002109
0.001053
0.001251
0.003039

fold corresponded to one of the proposed graphs of the experiment. When testing onefold,
the data of the three others were used for training.

Precision-recall analysis for both systems shows that the RankBoost combination of the
framework-based classiﬁers outperforms significantly Lucene alone. Table 4 summarizes
tests conﬁrming the statistical significance of this difference being over 4% of precision
gain.

Analyzing the way the various classiﬁers are combined, it is possible to identify which
LOM attributes contribute to enhance retrieval: We observe that the interactivityLevel,
 interactivityType and semanticDensity classiﬁers have been singled
out by Rankboost as operating on the most helpful attributes.

We could not experiment with other publicly available repositories because they lack
semantically rich relations between LOs. Therefore, future work will consist of developing
a larger and more heterogeneous repository in order to prove that our approach is scalable.

7 Conclusion

This article presented a context diffusion approach for taking advantage of the metadata
semantics inside a lesson graph based on LOs. It consists in the diffusion of metadatabased 
processes along the edges of a lesson graph. This diffusion method prevents missing
and incomplete metadata from blocking these processes. Moreover, it reduces the impact
of incorrect metadata values on the ﬁnal result of processing LOM since all the available
metadata values of the graph can be taken into account in this process.

In order to facilitate the use of this approach, this article introduced a three-layer framework 
organized by technical difﬁculty. This organization enables the framework to be adapted
to new uses not only by researchers or engineers, but also by ﬁnal users.

In the context of lesson graphs, two types of metadata processes were proposed: one
for generating weighted probable LOM values and another for generating restrictions about
LOM value scope. Each type of processes can be customized by the end-users. In the ﬁrst
case, processing LOM is conﬁgured by a set of probabilities that can be deduced from the
analysis of an existing repository of LO graphs. In the second case, rules are deﬁned in a
domain-speciﬁc language. Both systems have been applied to the lesson authoring context.
They facilitate LOM generation and validation, and also enhance LO retrieval.

LOM processing deals with lesson semantics. Therefore, it is strongly related to the teaching 
style of the teacher community using it. For that reason, LOM processing needs to be
adaptable in order to suit this teaching style. Since our framework separates the diffusion
process from the rule definition, rules can be tailored without having to modify the diffusion
process. This feature opens the opportunity for teachers to deﬁne the rules themselves. In
order to enable this use case, the rules should be deﬁned into an intuitive representation, e.g.,
a visual language. As a future work, we plan to translate the rules deﬁned in this article into
such a representation.

123

346

O. Motelet et al.

Moreover, the framework provides a basic propagation protocol that ensures convergence
and minimal performance for the diffusion. In particular, this article formally deﬁned the
characteristics of the metadata processes for which the protocol can be applied. This set of
characteristics allows the definition of new types of metadata semantic processes without
having to ensure convergence: ensuring these characteristics is enough.

Future work will focus on new applications of the framework. In particular, metadata processing 
methods in order to ease lesson design are studied. Since the proposed framework
can be used with any type of metadata for which a graph can be deﬁned, this work will also
focus on other metadata than LOM such as metadata logging the interactions between the
teacher, learners and LOs.

While the propagation protocol proposed in this article is generic enough to support our
needs, some metadata-based processes may not enter this scope. For such processes, the
base layer of the framework should be adapted. For instance, we plan to deﬁne a new propagation 
protocol whose termination occurs not only after convergence but also whenever
cycles emerge during the diffusion. We also plan to consider those cycles in order to deduce
semantic properties about the graph elements.

Acknowledgments The authors are sincerely grateful for the important collaboration of Georges Dupret,
Rodrigo Paredes, and Benjamin Piwowarski. They are also thankful for the helpful comments of the anonymous
reviewers. This work was partially supported by Fondecyt (Chile) grant no. 1080352.

References

1. Aumann Y, Feldman R, Liberzon Y, Rosenfeld B, Schler J (2006) Visual information extraction. Knowl

Inf Syst 10(1):1–15

2. Barrit C, Lewis D, Wieseler W (1999) Cisco systems reusable information object strategy version 3.0,

Technical report, http://www.cisco.com

3. Brase J (2005) Usage of metadata, PhD thesis, University of Hannover
4. Brooks C, McCalla G (2006) Towards ﬂexible learning object metadata. Int J Contin Eng Lifelong Learn

16(1):50–63

5. Cancore (2007) http://www.cancore.ca
6. Currier S, Barton J, O’Beirne R, Ryan B (2004) Quality assurance for digital learning object repositories:

issues for the metadata creation process. ALT J 12(1):5–20

7. Dif (2007) Metadata diffusion framework. http://metadatadiffuse.googlecode.com
8. Downes, S. (2004) Ressource proﬁles. J Interac Media Edu Spec Issue Educ Semant Web. 5. ISSN:1365893X.
 http://www-jime.open.ac.uk/2004/1/

9. DublinCore (2007) Metadata initiative. http://www.dublincore.org
10. DublinCoreEdu (2007) Dublin core metadata initiative education working group. http://dublincore.org/

groups/education

11. Duval E, Hodgins (2004) Metadata matters. In: International conference on metadata and dublin core

speciﬁcations (DC 2004)

12. Fischer S (2001) Course and exercise sequencing using metadata in adaptive hypermedia learning systems.
 J Educ Resour Comput 1(1es):5

13. Freund Y, Iyer RD, Schapire RE, Singer Y (2003) An efﬁcient boosting algorithm for combining preferences.
 J Mach Learn Res 4:933–969

14. Friesen N (2004) International lom survey report, Technical report, ISO/IEC JTC1/SC36
15. Genest D, Chein M (2005) A content-search information retrieval process based on conceptual graphs.

Knowl Inf Syst 8:292–309

16. Hatala M, Richards G (2003) Value-added metatagging: Ontology and rule based methods for smarter
metadata. In: Schroeder M, Wagner G (eds) RuleML. Lecture notes in computer science, vol 2876.
Springer, Heidelberg, pp 65–80

17. Heath BP, McArthur DJ, McClelland MK, Vetter RJ (2005) Metadata lessons from the ilumina digital

library. Commun ACM 48(7):68–74

18. IMS (2007) IMS global learning consortium. http://www.imsglobal.org last visit on 05/2006

123

Taking advantage of metadata semantics

347

19. JEN (2007) A semantic web framework for java. http://jena.sourceforge.net/
20. LM2 (2007) Lessonmapper2 web site. http://lm2.eduforge.org
21. LOM (2002)

IEEE LTSC p1484.12.1 learning object metadata

http://ieeeltsc.org/wg12LOM/

speciﬁcation ﬁnal draft.

22. LOM (2003) The rdf binding of lom. http://kmr.nada.kth.se/el/ims/metadata.html
23. Lucene (2007) Full-featured text search engine library in java. http://lucene.apache.org
24. Marchiori M (1998) The limits of web metadata, and beyond. In: Proceedings of seventh international

conference on world wide web (WWW98). Elsevier, Amsterdam, pp 1–9

25. Massart D, Verbeke J, Capron C, Schlesier K (2005) Visual presentation of data by means of box plots.

LC-GC Eur 18(4)

26. McCalla G (1992) The search for adaptability, ﬂexibility, and individualization: Approaches to curriculum 
in intelligent tutoring systems. In: Jones M, Winne P (eds) Foundations and frontiers of adaptive
learning environments. Springer, Heidelberg, pp 91–122

27. Motelet O (2007a) Experiment data (repository snapshot and test cases). http://reﬂex.dcc.uchile.cl/lm/

lessonMapper2/IRTests.zip

28. Motelet O (2007b) Improving learning-object metadata usage during lesson authoring, PhD thesis,

Universidad de Chile

29. Motelet O, Piwowarski B, Dupret G, Pino JA, Baloian N (2007) Enhancing educational-material retrieval
using authored-lesson metadata. In: Symposium on string processing and information retrieval (SPIRE07).
Lecture notes in computer science, vol 4726. Springer, Heidelberg, pp 239–248

30. Najjar J, Duval E (2006) Actual use of learning objects and metadata: an empirical analysis. IEEE Tech

Comm Digit Libr Bull (TCDL) 2(2)

31. Ochoa SF, Pino JA, Baloian N, Fuller DA (2003) Icesee: a tool for developing engineering courseware.

Comput Appl Eng Educ 11(2):53–66

32. Ochoa X, Cardinaels K, Meire M, Duval E (2005) Frameworks for the automatic indexation of learning 
management systems content into learning object repositories. In: World conference on educational
multimedia, hypermedia and telecommunications (ED-MEDIA 2005). Association for the Advancement
of Computing in Education, pp 1407–1414

33. Ochoa X, Duval E (2006) Quality metrics for learning object metadata. In: World Conference on Educational 
Multimedia, Hypermedia & Telecommunications (ED-MEDIA 2006). Association for the Advancement 
of Computing in Education, pp 1004–1011

34. Palopoli L, Rosaci D, Terracina G, Ursino D (2005) A graph-based approach for extracting terminological

properties from information sources with heterogeneous formats. Knowl Inf Syst 8:462–497

35. Santoro FM, Borges MRS, Santos N (2006) Patterns for designing planning mechanisms in cscl environments.
 Int J Comput Appl Technol 25(2–3):102–115

36. SCORM (2007) Advanced distributed learning scorm (sharable content object reference model).

http://www.adlnet.org

37. Simon B, Dolog P, Miklós Z, Olmedilla D, Sintek M (2004) Conceptualising smart spaces for learning.
J Interact Media Educ Spec Issue Educ Semant Web. 5(ISSN: 1365-893X). http://www-jime.open.ac.uk/
2004/1/

38. Stuckenschmidt H, van Harmelen F (2004) Generating and managing metadata for web-based information 
systems. Knowl Based Syst 17(5–6):201–206

39. Thabtah FA, Cowling P, Peng Y (2006) Multiple labels associative classiﬁcation. Knowl Inf Syst

9(1):109–129

40. Trigg R (1983) A network-based approach to text handling for the online scientiﬁc community, PhD

thesis, University of Maryland

41. Verbert K, Duval E (2004) Towards a global architecture for learning objects: a comparative analysis
of learning object content models. In: World conference on educational multimedia, hypermedia and
telecommunications (EDMEDIA2004). Association for the Advancement of Computing in Education,
pp 202–208

42. Wiley D (2000) Learning object design and sequencing theory, PhD thesis, Brigham Young University

123

348

Author Biographies

O. Motelet et al.

Olivier Motelet obtained a degree of Engineer from the Ecole des
Mines de Nantes (France) and also a degree of European Master of
Science in Computer Science from the Vridje Universiteit Brussel
(Belgium) in 2000. In 2007, he acquired his PhD from the Universidad
de Chile (Chile). His research interests include learning management
systems, human computer interaction, software usability and domain
speciﬁc languages. He is presently independent consultant in France.

Nelson Baloian obtained his Degree of Engineer in Computer Science 
in 1989 from the Universidad de Chile. In 1998 obtained
his PhD from the University of Duisburg (Germany). He has been
working on the ﬁelds of computer supported learning and distributed 
computing since then. He is author of about 30 journal and
conference articles of these subjects. He is currently Assistant Professor 
at
the Department of Computer Science of the Universidad 
de Chile. He is also Visiting Professor of the University of
Waseda (Japan) and the University of Duisburg-Essen (Germany).

José A. Pino
is Full Professor of Computer Science and Director 
of the PhD Program in Computer Science at the Universidad de
Chile. His research interests include computer-supported collaborative
work, human-computer interaction and software industry studies. He has
served as President of the Chilean Computer Science Society (SCCC)
and President of CLEI (the Latin American Association of Universities 
concerning Information Technology). He has co-authored six books
and published research papers in international conferences and journals,
including Journal of the ACM, Communications of the ACM, Decision
Support Systems, Interacting with Computers, Information Technology
and People, and Group Decision and Negotiation.

123

