Implementing the Coupled Objects Paradigm for 

Synchronizing Distributed Applications  

Through Firewalls 

Nelson Baloian, José A. Pino, and Marc Jansen 

Computer Science Department, Universidad de Chile, 

Blanco Encalada 2120, Santiago, Chile 

{nbaloian, jpino}@dcc.uchile.cl 

Abstract.  Middleware  for  supporting  the programming  of  distributed  systems 
has  been  proposed  since  the  beginnings  of  Internet.  Various  approaches  have 
been  implemented  to  support  different  ways  of  communication,  architecture, 
and data sharing. A schema called MatchMaker intended for developing applications 
requiring a replicated architecture, dynamic and partial synchronization 
is  introduced.  Two  implementations  of  MatchMaker  are  presented:  one  based 
on Java RMI distributed objects for synchronizing applications running inside a 
local  area  network  or  networks  without  proxies,  firewalls  or  NAT  addresses, 
and the other one for applications in a restrictive environment. MatchMaker has 
been successfully used for developing many applications supporting collaborative 
distributed learning. 

1   Introduction 

The need for a middleware that could simplify the programming of distributed applications 
is clear since the development of the first ones. Sun RPC [11] schema and the 
CORBA [12] architecture are two of the first and most well known supporting platforms.
 The aim of these systems is to make distributed applications programming not 
too different from the programming of stand-alone applications, by encapsulating the 
communication protocol and offering the programmer a nice interface for executing 
code in another computer.  

Many other platforms and architectures have been developed thereafter [1] for suiting 
 a  certain  class  of  applications  with  common  requirements.  They  differ  on  the 
distribution schemes of the shared data, communication mechanisms, and application 
architecture  they  support  [2].  Rendezvous  [13]  and  Suite  [14]  are  groupware  platforms,
 which use a central distribution scheme for the data of collaborative applications.
  GroupKit  [15],  DECAF  [16]  and  MASC  [17]  use  a  replicated  distribution 
scheme. Guerrero and Fuller  [18] propose a pattern system to support the design of 
collaborative  applications.  Patterson  [3],  Dewan  [4]  and  Roth  [5]  propose  various 
taxonomies for groupware platforms, especially with respect to the shared data distribution 
schema they support. They can be grouped in the following four classes: 

W. Shen et al. (Eds.): CSCWD 2006, LNCS 4402, pp. 599–608, 2007. 
© Springer-Verlag Berlin Heidelberg 2007 

600 

N. Baloian, J.A. Pino, and M. Jansen 

(cid:121) Centralized: A single server maintains the data for all applications. Every application 
has to contact this server for retrieving the state of the shared work and/or 
make changes. This may cause bottlenecks if the server is loaded with too much 
synchronizing work.  

(cid:121) Replicated: Every participant has a copy of all the shared data and the application 
is exactly replicated at every site. The application has a better performance 
since it has to access local data only. However, the need to keep these data coherent 
and synchronized at every site may lead to very complex algorithms, especially 
to deal with problems such as latecomers [6]. 

(cid:121) Asymmetric: There is no pre-defined central  server, but one of the participants 

takes that role.  

(cid:121) Semi-replicated: there are multiple servers in this schema. Compared to the Centralized 
 schema,  this  may  lead  to  a  shorter  response  time  and  is  more  robust, 
since the crash of one of the servers does not imply the crash of the system. It has 
some of the problems of data coherence found in  the replicated schema. 

We  have  developed  distributed  applications  for  supporting  collaborative  learning 
in  distributed  environments  since  1995  (http://www.collide.org).  We  detected  we 
needed a support for easing development of these distributed applications. However, 
the synchronization requirements for our applications were quite demanding:  

(cid:121) Replicated architecture: It should be possible to synchronize multiple and potentially 
different applications already existing in a distributed environment. 

(cid:121) Dynamic synchronization: It should be possible to start and stop the synchronization 
at any point of the application lifetime. Before and after the coupling phase, 
applications should continue to exist independently. 

(cid:121) Partial synchronization: It should be possible to synchronize each component of 
an application interface (AI) individually with a component of another AI, thus 
allowing 
the  synchronization  of  applications  with  completely  different  
interfaces. 

MatchMaker was developed on these requirements. This framework allows a programmer 
to easily  “extend” a stand-alone application and transform it into a shared 
one. One of its major features is that it is based on well-known design patterns like the 
Model-View-Controller  (MVC)  architecture.  MatchMaker  supports  collaboration  by 
combining two architectures  for collaborative systems: On the one hand, the  framework 
has a centralized server. On the other hand, it is based on a replicated architecture.
 By combining them, we get the advantages of both solutions and we remove the 
disadvantages: e.g., a problem of a centralized server is that it is not possible for clients 
to continue working if this server is no longer reachable. Using a replicated architecture 
 enables  us  to  keep  working  stand-alone  even  if  the  server  is  not  reachable. 
After reconnecting the server to the network it is only necessary that one client sends 
its data to the server and the other clients can get the data from the server again. Besides,
 it is easier to implement persistency if all data is saved in one central facility. 
Moreover,  MatchMaker  allows  partial  coupling  of  applications  by  using  data  structures 
reflecting the applications internal structures. It also has a replay function and an 
undo/redo framework, both based on an advanced logging mechanism. 

 

Implementing the Coupled Objects Paradigm 

601 

The MatchMaker approach was first implemented over a Sun OS UNIX platform 
[7]  and  it  has  evolved  to  respond  to  the  changing  technological  evolution  of  computers 
and networks. One of the last implementations [8] was based on Java and used 
RMI (Remote Method Invocation). However, the fact that firewalls, proxies and NAT 
are  becoming  quite  frequent  in  the  Internet  moved  us  to  implement  a  new  solution 
that could also work in this new environment. The next section presents the usage of 
the current implementation of the MatchMaker framework. Therefore, the basic paradigm 
 of  the  MatchMaker  framework  is  described;  the  examples  explain  the  needed 
work to extend a stand-alone application to a collaborative one. 

Then, we present the implementation with SOAP to achieve the same functionality 
overcoming  the  problems  created  by  the  presence  of  firewalls,  proxies,  and  NAT. 
Some applications developed with MatchMaker, and discussions and conclustions are 
presented.  

2   Principles of MatchMaker and Its Usage 

While building cooperative software, a developer has to decide about the mechanism 
he  wants  to  use  for  making  his  application  a  distributed  one.  He  basically  has  the 
choice of three major paradigms: first, he can decide to use a centralized server capable 
of storing the data locally and serving this locally stored data to several clients. Or 
second, he can decide to use a non-centralized approach in which the needed information 
by all clients is first sent to the server and is  then  multicasted to the  interested 
clients. In these scenarios where the data does not get stored centrally, it is not possible 
to work with the clients any longer if the server is for some reason not accessible 
any  more.  Or  third,  he  can  choose  a  replicated  architecture.  Here,  all  the  necessary 
data  for  the  clients  is  replicated  at  the  client  side.  The  advantage  of  this  latter  
approach is the clients are still operable even if they loose their network connection or 
the central server breaks down. 

The MatchMaker framework combines the second and third paradigms for developing 
 cooperative  software.  It  has  a  centralized  server,  which  manages  to  send  the 
necessary  data  to  the  clients,  but  this  centralized  server  also  replicates  the  required 
internal data structure of the application. By replicating the data structure it is possible 
for each application to have  a synchronized status compared to the other ones. Furthermore,
 a centralized storage of the  necessary data structures also allows the  handling 
of late-comers easily because they get an updated status of the shared data. 

Within  the  server  application,  the  data  structure  is  arranged  as  a  so-called  “synchronization 
tree”. Every application of a collaborative scenario could register itself 
as  a  listener  for  this  synchronization  tree,  even  for  the  whole  tree,  but  also  for  sub 
trees. With the registration of an application for a part of the synchronization tree, the 
server ensures that the application is informed about changes in the part of the synchronization 
 tree  that  the  application  is  registered  for.  Usually,  the  synchronization 
tree reflects the internal data structure of the application as shown in Figure 1.  

Figure 1 shows an example with two users collaboratively working in a modeling 
task.  The  application  provides  the  possibility  of  using  several  workspaces  either  in 
private or in public mode. It can be seen the workspaces 1 and 3 are available to users 
A and B. Workspace 3 is only synchronized on the graph  level but the  handwritten 
annotations are not synchronized. Workspace 2 is only available for user B privately. 

602 

N. Baloian, J.A. Pino, and M. Jansen 

Fig. 1. An example of the MM Synchronization tree 

 

Unlike  most  frameworks  for  synchronization,  this  one    does  not  use  event-based 
approach but a replication, according to the MVC paradigm. By doing this, it allows 
to interpret the models differently in different applications or scenarios. For example, 
a  model  may be  fully interpreted by an application running on a PC  with  high performance,
  but  on  the  other  hand,  some  parts  of  information  provided  by  the  model 
may not be considered if the same model is interpreted by an application running on a 
PDA with limited performance especially with respect to screen facilities. The models 
are propagated to the clients using the Java common event architecture, whereby the 
events are in this case remote events since the applications run in different Java Virtual 
Machines. Four kinds of events can be multicasted from the server to the interested 
clients for changes that occur in the synchronization tree: a new node is created, 
a  node  is  deleted,  the  model  of  a  node  has  changed,  or  an  action  is  executed  on  a  
certain node. Therefore, every MatchMaker client has to implement methods to handle 
these four operations.  

We would like to stress that the class/style files and the template should not be manipulated 
and that the guidelines regarding font sizes and format should be adhered to. 
This is to ensure the end product is as homogeneous as possible. 

2.1   Extended Features in MatchMaker  

Besides  the  basic  feature  of  synchronization  of  collaborative  applications,  the 
MatchMaker  framework  provides  additional  features  that  might  be  of  interest  while 
working in collaborative scenarios. Some of these features are: 

Logging: It is possible to record complete MatchMaker sessions in an XML file. For 
example,  it  is  recorded  which  client  caused  a  certain  operation,  when  it  happened 
(timestamp), which sub-tree was invoked in the operation, etc. The objects themselves 
placed in the sub-tree might also be stored in XML format as long as the object supports 
it; otherwise the object will be serialized and stored as a byte array. 

 

Implementing the Coupled Objects Paradigm 

603 

Replay:  Having  these  log-files,  an  additional  feature  is  the  possibility  of  replay 
MatchMaker sessions, making it possible to see a MatchMaker session like a video. 
This might be interesting for demonstration purposes or in game scenarios in order to 
analyze the strategy of players but also for the analysis of collaborative groups behavior.
  This  replay  is  possible  either  time-wise  or  step-wise  (thus,  users  must  decide 
when a certain step in the collaborative work is over and the next step starts). 

Undo/Redo: Another interesting feature is an advanced Undo/Redo function. With its 
help, it is possible to undo/redo operations for a whole session. It is also possible to 
undo/redo all or some operations that happened during a certain period of time. 

Persistency: Persistency is somehow related to data security. It is possible to store the 
status of the MatchMaker server persistently. This means the status of the server will 
be obtained over the server lifetime and it can be reloaded after a possible restart of 
the server. 

2.2   Layout, Typeface, Font Sizes and Numbering 

The MatchMaker framework was developed to easily extend a stand-alone application 
to a collaborative application. The developer has to make sure the application is capable 
 of  creating,  joining  and  leaving  MatchMaker  sessions  as  well  as  updating  the 
status of the application. 

The  first  thing  a  developer  has  to  do  is  to  define  the  models  for  the  objects  he 
wants to synchronize. The model has to implement the java.io.Serializable interface, 
otherwise it will not be possible to send them over the network using RMI. The next 
activity is to decide which of the classes should be responsible for keeping the application 
synchronized. Those classes have to implement the SyncListener interface that 
marks the classes as a listener for the MatchMaker server. When building the interface,
 the developer must implement four methods, each corresponding to one of the 
events a MatchMaker server can multicast to interested clients: 

 

 

public void objectChanged(SyncEvent event) 
public void objectDeleted(SyncEvent event) 
public void objectChanged(SyncEvent event) 
public void actionExecuted (SyncActionEvent event) 

After writing the listeners, the developer has to make sure the listeners are added to 
the  right  part  of  the  synchronization  tree.  A  listener  will  be  informed  about  all 
changes that happened in a part of the synchronization tree it is registered for. It is not 
required all listeners be added to the root element of the synchronization tree. Most 
likely this will not be the case; usually the listener will only be added to a certain sub 
tree of the synchronization tree. 

3   The SOAP-Based MatchMaker 

The current version of MatchMaker works well in closed environments, such as Local 
Area Networks. But outside, over the Internet, there are complications. We find obstacles 
 such  as  Firewalls,  Proxies  and  Routers  with  Network  Address  Translation 
(NAT), which do not allow applications to act as servers. A solution for this problem 

604 

N. Baloian, J.A. Pino, and M. Jansen 

is  to  reimplement  MatchMaker  using  SOAP  over  HyperText  Transfer  Protocol 
(HTTP)  as  the  transportation  layer  for  communicating  clients  with  the  server,  and 
implementing the MatchMaker server as a Web Service. HTTP is normally open to 
firewalls and it is easily accessible from clients behind proxies or NATs. To accomplish 
this task, we used Apache Axis as the platform for Web Services and consumer 
clients in Java. Axis is an Open Source SOAP engine written in Java.  

At the sever side, Apache Axis works as a servlet, so it needs to be deployed inside 
a Web Servlet Container such as Jakarta Tomcat, WebLogic or the Web Application 
Server of J2EE. Apache Axis provides classes allowing clients to connect to a server, 
communicate  with  a  remote  application  using  the  SOAP  protocol  and  invoke  Web 
Service  methods  with  little  effort  from  the  developer.  The  new  version  of  MatchMaker,
  known  as  SOAP  MatchMaker,  works  the  same  way  as  the  current  RMI 
MatchMaker  version.  It  only  differs  in  some  aspects,  being  the  communication  between 
clients and server the most notorious one.  

The  problem  was  how  to  pass  Java  objects  through  SOAP.  MatchMaker  passes 
Java Objects as arguments and it returns  values between clients and server.  Apache 
Axis BeanSerializer (AABS) utility can send a serializable Java object through SOAP 
if its class is written with the JavaBean pattern. But if the source code of that class is 
not  available,  we  cannot  assume  the  class  was  written  according  to  the  JavaBean 
pattern, even if it were the case.  Every serializable Java object can be serialized into a 
byte array, and since SOAP recognizes byte arrays as a data type, we can send serializable 
 Java  objects  as  byte  arrays  through  SOAP.  We  only  need  to  serialize  the 
object into a byte array at the sender side, and deserialize back into an object at the 
receiver side. The only restriction to deserialize a byte array back into an object is the 
application needs to know the class at execution time. This solution also helps to keep 
SOAP  messages  small:  Java  objects  with  too  many  fields  could  create  large  SOAP 
messages if they are serialized with ABBS. 

In the RMI MatchMaker version, clients act as servers listening for events from the 
central server. In this new approach, the clients cannot act as servers anymore; they 
are forced to act in passive mode. This means clients need to contact the server to find 
out if new events affected the coupled objects. The basic mechanism consists of every 
client having an event queue at the server side. Clients are constantly requesting the 
server for new events, and every time a new event is available, it is sent to the client. 
If no new events are available, the client keeps waiting until a new event is available, 
but the connection with the server is kept alive. 

The problem is another client to the server reports that HTTP connections have a 
timeout, so they cannot wait too long for a new event. A solution for this is that clients 
request new events once in a while, e.g., 0.5 seconds. If there are no new events 
available, a void event is sent back to the client. If there is at least one event available, 
the first event in the queue is sent back. This solution seems to work fine with simple 
applications with little activity, like a chat application. With large applications generating 
many events per second, the interaction between users is painfully slow, event 
queues at the server side overflow quickly and it consumes unnecessary bandwidth. A 
solution  working  much  better  is  to  have  clients  requesting  for  new  events  from  the 
server and keep waiting for 10 seconds until a new event is available. If a new event 
is available during that period, it is sent back to the client, and the client requests the 
next  event  the  same  way  as  before.  If  10  seconds  have  passed  and  there  is  no  new 

 

Implementing the Coupled Objects Paradigm 

605 

events available  yet, a  void event is  sent back  to the client. This  way, a client only 
receives void events if we get a timeout while waiting. 

4   Applications Implemented with MatchMaker 

MatchMaker has been successfully used to implement many applications mainly, but 
not only, in the Computer Supported Collaborative Work field. One of the first applications 
was a system for collaboratively teach/learn mathematical functions and their 
derivatives. In this scenario, two different versions (the teacher’s version shown in the 
background of Figure 2 and a student version in the foreground) are used to present, 
discuss  and  practice  this  topic.  In  the  scenario  of  a  computer-integrated  classroom 
where the teacher needs to publicly discuss  a student’s solution, it turned out that a 
full application or window synchronization is not desirable. Instead, the teacher initializes 
the synchronization by coupling the function input fields (i.e. the generator of 
the displayed curve, not the display itself). At any point in time the applications can 
be  de-coupled,  e.g.  to  synchronize  with  another  student,  or  to  synchronize  with  a 
larger group of students to distribute a special task. 

Fig.  2.  A  collaborative  tool  for  discussion
functions and derivatives  

  
Fig. 3. Children collaborating with an application 
for early literacy 

 

Another  application  is  shown  in  Figure  3.  Two  children  work  in  a  collaborative 
mode  with  instances  of  a  Java-based  application  for  early  literacy.  The  material  (a 
table built up of images and letters) is distributed between the participants based on 
the jigsaw design principle to induce collaboration. The actual workspace is coupled 
by means of JMM. Two or more workspaces of this application can be coupled and 
decoupled by the children according to their needs and preferences. The application is 
in daily use at a German primary school associated to the NIMIS project [9]. 

Perhaps  one  of  the  most  used  applications  has  been  CoolModes  [10].  It  is  a  
collaborative tool framework designed to support discussions and cooperative modelling 
processes in various domains. Like other environments, this is achieved through a 
shared  workspace  environment  with  synchronized  visual  representations.  These  

606 

N. Baloian, J.A. Pino, and M. Jansen 

representations  together  with  their  underlying  semantics  can  be  externally  defined, 
which offers the option to develop domain-dependent “plug-in” visual languages and 
interpretation patterns, encapsulated in so-called “palettes”. The languages can differ 
considerably with respect to the underlying formal semantics (e.g. System dynamics 
simulation  vs.  handwriting  annotation)  but  yet  be  mixed  and  used  synchronously  in 
the  framework.  From  our  point  of  view,  this  is  a  suitable  approach  for  supporting 
open modelling tasks with potentially unknown means. 

5   Evaluation 

We assumed from the beginning that the SOAP-based MatchMaker could not outperform 
the RMI-based version, but we wanted to measure how worse its performance is 
and  if  it  really  means  that  the  delays  introduced  by  the  serialization/deserialization 
process would make it useless. We first made a comparative evaluation between both 
implementations:  we  generated  100  events  for  an  object  coupled  with  5  other  ones 
with a delay of 0.5 seconds between each event. We experimented in two scenarios: 
the first one, for objects residing inside a local area network and the second one for 
objects  residing  all  in  different  networks.  For  the  delay  of  each  event  we  took  the 
maximum delay between the  time of generation of the event and the time the event 
reached  every  one  of  the  coupled  objects.  The  results  are  shown  in  Figures  4  and 
Figure 5, respectively. 

MatchMaker RMI

MatchMaker SOAP

s
t
n
e
v
e
 
f
o
 
r
e
b
m
u
N

70
60
50
40
30
20
10
0

0
1
 
-
 
0

0
2
 
-
 
1
1

0
3
 
-
 
1
2

0
4
 
-
 
1
3

0
5
 
-
 
1
4

0
6
 
-
 
1
5

0
7
 
-
 
1
6

0
8
 
-
 
1
7

0
9
 
-
 
1
8

0
0
1
 
-
 
1
9

0
1
1
 
-
 
1
0
1

0
2
1
 
-
 
1
1
1

0
3
1
 
-
 
1
2
1

0
4
1
 
-
 
1
3
1

0
5
1
 
-
 
1
4
1

0
6
1
 
-
 
1
5
1

0
7
1
 
-
 
1
6
1

0
8
1
 
-
 
1
7
1

0
9
1
 
-
 
1
8
1

0
0
2
 
-
 
1
9
1

0
1
2
 
-
 
1
0
2

Response time [ms]

 

s
t
n
e
v
e
 
f
o
 
r
e
b
m
u
N

70
60
50
40
30
20
10
0
0 - 10

21 - 30

61 - 70

81 - 90

101 - 110

41 - 50
181 - 190
Response time[ms]

121 - 130

161 - 170

141 - 150

201 - 210

Fig. 4. The response time of the events for objects located inside a local area network 

 

s
t
n
e
v
e
 
f
o
 
r
e
b
m
u
N

70
60
50
40
30
20
10
0

MatchMaker RMI

MatchMaker SOAP

s
t
n
e
v
e
 
f
o
 
r
e
b
m
u
N

70

50

30

10

-10
0 - 10

21 - 30

0
1
 
-
 
0

0
2
 
-
 
1
1

0
3
 
-
 
1
2

0
4
 
-
 
1
3

0
5
 
-
 
1
4

0
6
 
-
 
1
5

0
7
 
-
 
1
6

0
8
 
-
 
1
7

0
9
 
-
 
1
8

0
0
1
 
-
 
1
9

0
1
1
 
-
 
1
0
1

0
2
1
 
-
 
1
1
1

0
3
1
 
-
 
1
2
1

0
4
1
 
-
 
1
3
1

0
5
1
 
-
 
1
4
1

0
6
1
 
-
 
1
5
1

0
7
1
 
-
 
1
6
1

0
8
1
 
-
 
1
7
1

0
9
1
 
-
 
1
8
1

0
0
2
 
-
 
1
9
1

0
1
2
 
-
 
1
0
2

Response Time[ms]

 

61 - 70

81 - 90

41 - 50
181 - 190
Response Time [ms]

101 - 110

141 - 150

161 - 170

121 - 130

201 - 210

Fig. 5. The response time of the events for objects located in different networks 

 

 

 

Implementing the Coupled Objects Paradigm 

607 

The obtained time performance disadvantage of the SOAP MatchMaker does not 
seem  to  be  meaningful  for  human  beings  if  we  take  the  mean  delay  values  for  all 
events.  However,  the  dispersion  of  the  data  is  wider  for  the  SOAP  version.  This 
means that we can expect long delays but very infrequently.  

6   Conclusions 

Using  XML  based  technologies  like  Web  Services  and  SOAP  has  drawbacks  like 
decreased performance, basically due to the overhead in the length of sent messages 
and the required serialization and deserialization of XML. On the other hand, a standardized 
 format  for  information  exchange  like  SOAP  allows  overcoming  certain 
drawbacks  usually  arising  while  working  on  collaborative  systems  where  users  are 
located in different physical and/or logical LANs. Often, those systems use proprietary 
protocols for the data exchange and thus the data exchange between applications 
written  in  different  programming  languages  is  usually  considered  a  problem.  While 
approaches like CORBA or RMI-IIOP try to overcome this limitation, they never are 
fully adopted, unlike Web Services and the corresponding XML based technologies. 

Another advantage of using an XML based protocol for data exchange in MatchMaker 
is the sharing of data structures that were not previously known to either the 
server or the clients. Defining a Document Type Definition (DTD) or a Schema for 
the  exchanged  XML  data  allows  creating  the  necessary  data  structures  at  runtime. 
Going one step further, even if no DTD or Schema is defined for the exchanged XML 
data descriptions, the necessary DTDs or Schemas can be calculated since it is only 
required  to  create  the  corresponding  data  structures.  Afterwards,  the  needed  data 
structures can be created for the respective programming language. 

Nevertheless,  due  to  the  decreased  performance,  it  becomes  necessary  to  think 
about the scenario in which the new version of MatchMaker should be used, at least if 
the scenario is a synchronous one. Scenarios like the coupling of handwritten annotations,
 that usually are quite intensive in terms of the volume of exchanged data, are 
not good candidates for the new MatchMaker version. Whereas, in case of modelling 
scenarios, it is typically not very intensive with respect to the volume of exchanged 
data and even if a huge amount of data needs to be exchanged, a slight delay may not 
be considered a problem. 

Acknowledgments.  This  work  was  partially  supported  by  a  research  grant  (No. 
1040952) from Fondecyt (Chile) and a scholarship from NCIT (Japan). 

References 

1.  Urnes, T. & Nejabi, R.: Tools for implementing groupware: Survey and evaluation. Technical 
Report No. CS-94-03. York University (1994) 

2.  Lukosch, S.: Adaptive and Transparent data Distribution Support. Lecture Notes in Computer 
Science 2440 (2002) 255-274 

3.  Patterson, J.: Taxonomy of Architectures for Synchronous Groupware Architectures. ACM 

SIGOIS Bulletin 15(3) (1995) 27-29 

608 

N. Baloian, J.A. Pino, and M. Jansen 

4.  Dewan, P.: Multiuser  Architectures. Proc.  10th  ACM  Symposium  on  Operating  Systems 

Principles. Orcas Island, Washington, USA (1985) 63-78 

5.  Roth, J. & Unger, C.: An extensible classification model for distribution architectures of 
synchronous groupware. Proc. 4th International Conference on Design of Cooperative Systems 
(COOP2000). Sophia, Antipolis, France (2000)  

6.  Lukosh, S.: Transparent Latecomer Support for Synchronous Groupware. Lecture Notes in 

Computer Science 2806 (2003) 26-41 

7.  Zhao, J. & Hoppe, H.U.:  Getting serious about flexible user interface coupling. Proc. International 
Workshop on the Design of Cooperative Systems. Juan-les-Pins, France (1995) 
8.  Jansen, M.: MatchMaker - A Framework to Support Collaborative Java Applications. Proc. 

11th Conf. on Artificial Intelligence in Education. Amsterdam (2003) 535-536 

9.  Tewissen, F., Lingnau, A., Hoppe, U., Mannhaupt, G. & Nischk, D.: Collaborative Writing 
in a Computer-integrated Classroom for Early Learning. Proc. European Conf. on CSCL. 
Maastricht, The Netherlands (2001) 593-600 

10.  Bollen,  L.,  Hoppe,  H.U.,  Milrad,  M.  &  Pinkwart,  N.:  Collaborative  Modelling  in  Group 
Learning  Environments.  Proc.  XX  International  Conf.  of  the  System  Dynamics  Society. 
Palermo, Italy (2002) 53-64 

11.  Srinivasan,  R.:  RPC:Remote  Procedure  Call  Protocol  Specification  Version  2.  Internet 

RFC 1831 (1995) 

12.  Vogel, A. & Duddy, K.: Java Programming with CORBA. 2nd. ed. Wiley & Sons (1998) 
13.  Hill,  R.,  Brinck,  T.,  Rohall,  S., Patterson,  J.  &  Wilne,  W.:  The  Rendezvous  architecture 
and  language  for  constructing  multiuser  applications.  ACM  Transactions  on  ComputerHuman 
Interaction 1(2) (1994) 81-125 

14.  Dewan, P. & Choudhary, R.: A High-level and flexible framework for implementing multiuser 
interfaces. ACM Transactions on Information Systems 10(4) (1992) 345-380 

15.  Roseman, M. Greenberg, S.: Building real time groupware with GroupKit. ACM Transactions 
on Computer-Human Interaction 3(1) (1996) 66-106 

16.  Storm, R. Banvar, G. Miller, K., Prakash, A. & Ward, M.: Concurrency Control and vie 
notification  algorithms  for  collaborative  replicated  objects.  IEEE  Transactions  on  Computers 
47(4) (1998) 458-471 

17.  Aldunate, R., Ochoa, S., Pena-Mora, F. & Nussbaum, M.: Robust Mobile Ad-hoc Space 
for Collaboration to Support Disaster Relief Efforts Involving Critical Physical Infrastructure.
 ASCE Journal of Computing in Civil Engineering 20(1) (2006) 13-27 

18.  Guerrero, L. & Fuller, D.: A Pattern System for the Development of Collaborative Applications.
 Information and Software Technology 43(7) (2001) 457-467 

