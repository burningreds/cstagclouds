Implementing Stick-Ons for Spreadsheets 

Shermann S.M. Chan and José A. Pino 

Depto. de Ciencias de la Computación, Universidad de Chile 

Av. Blanco Encalada 2120, Tercer Piso, Santiago, Chile 

{schan,jpino}@dcc.uchile.cl 

Abstract. Spreadsheet systems were initially intended for individual use. Collaborative 
use implies there should be a local versioning mechanism. As such, it 
is proposed to use a modified Stick-On. This means to define them to cope with 
the wide variety of data types, which can be associated to spreadsheet cells. The 
proposed design includes a hierarchy of these new Stick-Ons, a Field Dependency 
Graph and a Peer Referencing Mechanism. 

1   Introduction 

Spreadsheets were initially intended for individual use. Later improvements allowed 
some group facilities. However, current systems do not allow a group of synchronous 
users to have local versioning control. Suppose, e.g., a small group of business analysts 
trying to adjust a company budget for next year. One analyst can make a proposal.
 Another analyst may be looking at the same shared view and wishes to change 
one of the assumptions, i.e., the value on one of the cells. If he changes it, perhaps 
many other numbers (depending on it through formulas) will change as well, including 
 the  final  financial  result.  A  third  analyst  may  then  wish  to  compare  results  and 
also  see  all  the  intermediate  figures  for  both  proposals.  The  spreadsheet  should  be 
able in this case to keep both versions and allow users to easily see them. Notice it is 
not trivial to define what a local version is and how to manage it.  

The  focus  of  this  paper  is  to  characterize  local  versions  [1]  for  spreadsheets  and 
study their implementation. We base our work on a concept proposed by Pino [9] for 
handling local versions for text, called Stick-On. From a user’s point of view, a StickOn 
is a virtual piece of paper which can be written; removing the piece of paper lets 
see what is written under it. Technically, Stick-On holds an alternative version for the 
text that is covering. The rest of the paper is organized as follows. Section 2 presents 
background  information  on  the  subject.  Section  3  presents  the  System  Architecture 
we are considering. Section 4 contains the analysis and design of the Stick-Ons and 
their internal structure and manipulation. Finally, section 5 presents the conclusions. 

2   Background Information 

Spreadsheets may be considered general-purpose programming languages [10]. However,
 some problems may become awkward to solve with spreadsheets, such as those 

G.-J. de Vreede et al. (Eds.): CRIWG 2004, LNCS 3198, pp. 206–214, 2004. 
© Springer-Verlag Berlin Heidelberg 2004 

Implementing Stick-Ons for Spreadsheets      207 

involving much data. On the contrary, spreadsheets seem adequate to solve problems 
related  to  computations  specified  in  formulas.  Spreadsheet  systems  also  include  an 
interesting visual interface: values are presented on a bi-dimensional matrix. It may 
be drawn to resemble the balance sheets used by accountants. By careful design of the 
user  interface,  people  believe  to  be  just  “filling  data”  when  they  are  actually  programming 
the spreadsheet system. Thus, many final users apply them to make computations 
on business data, results from lab experiments, simulation data, etc. 

Nevertheless,  spreadsheets  have  problems  [7].  One  of  the  problems  is  users  lose 
context of related cells when working on a separate area of the matrix; Morrison et al. 
[4] have proposed a code inspection approach to reduce error due to this difficulty. A 
second  problem  of  spreadsheets  is  the  insufficient  feedback  to  the  user  on  cell  de-
pendencies: a cell may affect another cell because it is used in the formula defining 
the contents of the latter one. The user indirectly sees this dependency only when he 
explicitly asks for the display of that formula. This problem will motivate us to propose 
a field dependency graph. Another spreadsheet shortcoming concerns local versioning 
 [1],  as  mentioned  in  the  introduction.  Our  proposal  will  be  based  on  StickOns.
 Stick-Ons were originally proposed as alternative local versioning mechanisms 
for  text  to  version  columns  [5],  flexible  diffs  [6],  and  active  diffs  [3].  The  original 
local versioning mechanisms do not seem appropriate to be used with spreadsheets. 
Stick-Ons  could  be  re-defined  for  spreadsheets,  but  they  should  be  very  different: 
There are cells, they are dynamic and the contents may depend on other cells. 

3   System Architecture 

The architecture of our proposed collaborative authoring tool for spreadsheet applications 
 is  multiple-client/single-server,  as  shown  in  Fig.  1.  Collaborative  clients  can 
form logical and dynamic groups for specific tasks. Each client can start his spreadsheet 
 application,  in  which  a  plug-in  of  our  proposed  system  is  embedded.  Three 
main client-components in the system are: a Peer Referencing Mechanism (PRM), a 
search engine, and an update engine. PRM has an intelligent agent, which links the 
Stick-On Hierarchy and the Field Dependency Graph (FDG) Hierarchy together (ref. 
section 4). The search engine retrieves data from the server’s SpreadSheet DataBase 
(SSDB) and stores the data to the client-side as a temporary copy; whereas the update 
engine synchronizes the data from client-side to server-side.  

When  a  user  starts  the  spreadsheet  application  and  the  embedded  system,  he 
should be authenticated and authorized by the User Authentication and Synchronization 
 (UAS)  component,  which  is  located  at  the  server  side.  UAS  consists  of  three 
parts: Authentication (Login), Concurrency Control (CC), and Access Level Permission 
(ALP). The Authentication component checks the user profiles, which are stored 
in the User DataBase (UserDB). Once a user is allowed to enter the system, he will be 
provided with a user-level. Any action he does (e.g. search or update) is monitored by 
the CC and the ALP components. Users may have various roles within a group (e.g. 
clerk,  manager).  Thus,  user-levels  are  necessary  to  control  their  activities  and  behaviors 
(e.g. whether the user is able to invite other users to join a group for a specific 

