Formal Modeling of Multi-user Interfaces 

in Cooperative Work 

Benjamin Weyers1, Wolfram Luther1, Nelson Baloian2, Jose A. Pino2 

1 University of Duisburg-Essen, Department of Computer Science and Cognitive Science,  

Lotharstr. 63, 47057 Duisburg, Germany 

2 Universidad de Chile, Department of Computer Science,  

Blanco Encalada 2120, Santiago, Chile 

Abstract. Support systems for cooperative work lack consistent modeling tools 
for  user  interface  creation  and  execution  that  are  flexible  enough  to  combine 
both data processing and the logical aspects of a user interface and, at the same 
time,  dialog  and  cooperation  modeling  aspects.  This  paper  introduces  a  new 
concept to model user interfaces for cooperative work: the so-called multi-user 
interfaces  aimed at distributed scenarios involving mobile devices implementing 
cooperative work. These multi-user interfaces are modeled in a hierarchical 
structure  of  dialog  models  and  interaction  logic  based  on  a  formal  modeling 
language  called  FILL.  For  execution  and  verification,  FILL  models  are  automatically 
transformed to reference nets, a type of Petri nets, making the entire 
user interface and cooperation model accessible to simulation and verification 
tools. This new approach seeks to integrate more closely modeling and implementation 
 based  on  a  formalized  interface  design  and  user-machine  dialogue. 
Formal graph rewriting concepts allow both the user interface and the collaboration 
model to be easily adapted in various ways by the modeler or user.   

Keywords: Multi-user interfaces, mobile cooperative work, formal UI models. 

1 

Introduction 

The research field of computer-supported cooperative  work (CSCW) is  mainly concentrated 
on examining “the possibilities and effects of technological support for humans 
involved in collaborative group communication and work processes” [4, p. V]. 
Key research areas in CSCW include the development of concepts and architectures 
for  communication,  cooperative  interaction  concepts,  and  ubiquitous  computing  approaches 
for hiding technology from the user and promoting integration of cooperative 
work in everyday working processes.  

Up to now, there is no all-embracing formal concept for modeling user interfaces 
(UI) in  CSCW scenarios  for  creating flexible UI  models.  Formal UI  models can be 
directly  processed  by  algorithmic  implementations,  also  involving  further  formal 
models, e.g., user models, dialogue or context models, making this kind of UI implementation 
suitable for machine processing. The creation of flexible UI models would 
make  CSCW  systems  more  adaptable  and  easy  to  integrate  into  existing  workflows 

V. Herskovic et al. (Eds.): CRIWG 2012, LNCS 7493, pp. 129–136, 2012. 
© Springer-Verlag Berlin Heidelberg 2012 

130 

B. Weyers et al. 

than current systems. It would also provide a formal basis for validation and verification 
 concerns,  thus  identifying  problems  in  cooperation.  Finally,  it  would  enable  a 
close and error-free combination of modeling and implementation. To this end, we are 
introducing an extension to our formal modeling approach for UIs called FILL [15] 
that  responds  to  the  five  basic  problems  in  CSCW  design  mentioned  by  Koch  and 
Gross in [9]: awareness, communication, coordination, consensus, and collaboration. 
We do not claim that our general modular architecture for formal (multi-)UI modeling 
based on FILL offers final UI patterns or concrete UI solutions for CSCW scenarios. 
Nevertheless,  this  paper  presents  a  conceptual  basis  for  future  implementation  by 
indicating  the  capabilities  of  a  formal  approach  to  model  UIs  for  CSCW  systems, 
integrating  CSCW  mechanisms  into  a  UI  model,  and  exemplarily  demonstrating  its 
potential use. 

FILL-based UI models are mainly based on interaction logic (IL), a term that describes 
the data processing between, on the one hand, the participating users carrying 
out actions on the UI physical representation (PR) (e.g., buttons, sliders) and, on the 
other hand, the system being controlled in the form of system information data sent by 
the system to the user. Thus, the new approach introduced in this contribution fills the 
gap between classic informal or semi-formal UI modeling and its implementation by 
using a visual modeling language accompanied by an automatic transformation to an 
executable  and  verifiable  formal  model,  Petri  nets.  Formal  reconfiguration  concepts 
make adaptation of CSCW systems more comprehensive when modifying an existing 
model at a later stage. Besides addressing the concerns of CSCW systems and groupware 
modelers, this approach enables the user to introduce CSCW principles into the 
formal reconfiguration concepts that specifically affect the cooperation process.  

This paper will begin with a short insight into related research fields, followed by 
an introduction to FILL in Section 3. Section 4 and 5introduce the extension of the 
basic  UI  modeling  approach  to  cooperative  work  scenarios  and  describe  briefly  an 
example application supporting cooperative learning of cryptographic protocols. 

2 

Related Work 

User  interface  modeling  plays  a  central  role  in  the  development  of  groupware  and 
CSCW  systems,  especially  in  the  context  of  implementing  certain  CSCW  features, 
like awareness, communication, etc. Various researchers suggest ways of creating and 
modeling  user  interfaces  for  groupware.  Molina  et  al.  [11]  present,  e.g.,  a  modelbased 
methodology for the creation of user interfaces for CSCW systems by combining 
high-level specification concepts defining cooperative tasks with a model of the 
organization. These models are iteratively refined, resulting in ConcurTaskTrees serving 
as bridges between the conceptual model of the CSCW system and its user interface 
implementation. Arvola [1] introduces a collection of interaction design patterns 
for  CSCW  systems  that  are  based  on  field  studies  in  face-to-face  scenarios.  These 
concepts can be used in ongoing modeling approaches as discussed in this contribution.
  Johannsen  [8]  describes  general  aspects  in  human-machine  interface  modeling 
for cooperative work in various use cases, such as cooperation in a cement plant. 

 

Formal Modeling of Multi-user Interfaces in Cooperative Work 

131 

A further key issue in CSCW systems modeling is how to bring CSCW principles 
into  an  existing  formal  user  interface  modeling  approach  based  on  Petri  nets.  Petri 
Nets have been already used to describe how CSCW systems work, especially from 
the  user-machine  interaction  point  of  view  [12].  Hao  et  al.  [7]  offer  an  example  of 
Petri net–based  modeling of  heterogeneous data sharing in collaborative  work: they 
describe the use of Petri net translation and firing rules in relation to a heterogeneous 
data queue as an access station to heterogeneous data sharing. Borges et al. [3] used 
Petri  net–based  models  to  describe  communication  in  learning  scenarios  to  be  executed 
 in  an  e-learning  environment  called  TeleMeios.  Furuta  et  al.  [6]  introduce  a 
modeling approach based on colored Petri nets for modeling protocols for collaboration.
 Nielsen et al. [2] give a general overview of the use  of Petri nets in  modeling 
interactive systems. This list motivates our work, in which we seek to combine Petri 
nets with formal user interface modeling as introduced in [15].  

3 

Formal Modeling of Single-User Interfaces 

In this section, the formal modeling approach for user interfaces used in a single-user 
scenario is highlighted, while necessary extensions to this basic approach will be outlined 
in Section 4, based on the entire formalization developed in detail in [15, 16]. 
Thus, the present section does not consider any aspects of CSCW systems to be introduced 
in the user interface model, since these will be discussed in Section 4. 

 A two-layered architecture has been developed for formal modeling standard sin-
gle-user interfaces, as can be seen in Figure 1. It distinguishes a physical representation 
of a UI as a set of interaction elements (like buttons, sliders, text fields, etc.) from 
its  interaction  logic.  Interaction  logic  is  a  set  of  data  processing  routines  describing 
the user interface behavior. Thus, interaction logic describes what happens if the user 
presses a button or evokes another type of interaction event, as well as necessary data 
processing for representing information emitted by the (technical) system to be controlled.
 Interaction logic also  models the interrelation among the various interaction 
elements of the physical representation involving data emitted from the system. This 
interrelation is normally identified as the user interface dialog model. In this modeling 
concept, the system itself is handled as a black box with a specific set of values to be 
read  or  written  from  the  external  interaction  logic.  This  well-defined,  finite  set  of 
system values is referred to as the system interface. 

In [15], a graph-based language for modeling formal interaction logic called FILL 
was  introduced.  FILL  is  based  on  concepts  familiar  to  business  process  modeling 
languages,  which  is  also  visible  in  certain  nodes  borrowed  from  BPMN,  especially 
gateway nodes for fusion and splitting of processes. 
FILL  has  three  node  types:  (a)  operation  nodes,  (b) 
proxy  nodes,  and  (c)  the  BPMN  nodes  mentioned 
above. Type (a) nodes represent values to be read by 
or written into the system (system operation nodes), 
including  elementary  data  processing  functions  like 
type conversions, arithmetic operations, etc. (interac-
tion-logic  operation)  and  channels  allowing  the 
modularization  of  IL.  Type  (b)  nodes  represent  

 
Fig.  1.  Simple  architecture  of  a
formal user interface model 

Physical Representation

Interaction Logic
System Interface

Action Logic / System

132 

B. Weyers et al. 

interaction elements in the UI’s physical representation in the IL graph. Thus, proxy 
nodes handle data objects resulting from interaction, such as events and data returned 
from the interaction logic to certain interaction elements. Type (c) nodes are used for 
branching and fusing data processes in interaction logic models offering various semantics 
 and  guard  conditions,  which  control  the  branching  and  fusing  of  data 
processes. 

A formal algorithmic transformation of FILL models into reference nets has been 
implemented [15, 16] to offer formal semantics, executability, and a broad toolset for 
simulation  and  verification  in  FILL-based  IL  models.  Reference  nets  are  a  special 
type of colored Petri net [10] with tokens representing complex data types; it is extended 
by an annotation language for controlling the switching of transitions based on 
logical expressions and tokens which are able to reference other net instances or different 
formal models, thus allowing modular FILL models. In general, reference nets 
can represent the entire semantics of FILL models, such as time discreteness, parallelism,
 and non-determinism. In conclusion, a (single) formal FILL-based UI can be 
defined as follows: 

Definition 1: A user interface UI is a three tuple (PR; IL; SI), where PR is the physical 
representation, IL is a FILL-based interaction logic or its representation as a reference 
net, and SI is a given system interface. 

Adaptation of CSCW systems and their UIs is well supported by the use of formal 
languages  for  modeling  UIs.  Through  the  integration  of  CSCW  models  into  formal 
multi-UI models (as described below), formal rewriting can be used to adapt interaction 
 logic  and  its  corresponding  CSCW  model.  Graph-rewriting  systems  have  been 
shown  to  be  well  suited  to  formally  changing  graph-based  models  [16]  as  in  the 
double pushout approach introduced by Ehrig et al. [5]. 

For  creation,  simulation,  and  reconfiguration  of  UIs,  a  framework  was  implemented 
 called  the  UIEditor  [15].  It  offers  interactive  editors  for  creating  physical 
representations and FILL-based interaction logic, a simulation engine that combines 
Renew  (http://www.renew.de)  for  the  simulation  of  reference  nets  and  the  physical 
representation of user interfaces with a module for interactive or automatic reconfiguration 
 based  on  pre-implemented  algorithms.  The  creation  module  includes  an  
algorithm that automatically translates a FILL model into its reference net–based representation.
 Examples can be found in [16] on pp. 43-45, pp. 86-87, and pp. 117-124. 

4  Multi-user Interface Modeling 

Based on the findings reported in [14] about too abstract architectures for modeling 
UIs,  it  is  interesting  to  extend  the  proposed  basic  architecture  to  one  offering  finer 
grained exchangeable components and identification of dialog model components and 
their possible representation as FILL models. The resulting component-based modeling 
approach is necessary for the creation of multi-user interfaces, which are mainly 
characterized by a multi-user dialog model describing the interaction among multiple 
UIs on a higher meta level independent of the individual users’ UIs. This meta model 
will contain formal (Petri net–based) descriptions of CSCW concepts, such as awareness,
 and make them executable, verifiable, and adaptable through reconfiguration.  

 

Formal Modeling of Multi-user Interfaces in Cooperative Work 

133 

A first step towards component-based modeling of user interfaces has been made 
using  FILL  by  defining  sub-processes  called  interaction  processes,  which  are  subgraphs 
of the FILL-based IL that are exclusively associated with one interaction element 
 of  the  physical  representation.  The  interrelation  among  different  interaction 
elements is part of the interaction processes inasmuch as they are connected by channels 
to each other. This modeling approach produces fixed dialog models entangled in 
the resulting IL. The concept of interaction processes has to be conceptually extended 
through  a  dialog  model  that  describes  the  interrelation  between  the  interaction 
processes using FILL. This will be realized by presenting interaction processes in the 
independent, FILL-based, higher-level dialog  model  with interaction-logic operation 
nodes,  where  input  and  output  ports  represent  input  and  output  channel  operations 
defined in the interaction process. This modularizes the IL into interaction processes 
(one for each interaction element), and the dialog model makes them exchangeable. 
This FILL-based (local) dialog model is also transformed into a reference net, where 
the communication between dialog model and interaction process is described by the 
intrinsic ability of reference nets to reference other nets through synchronous channels 
[10]. 

Multi-user interfaces are user interfaces that are used simultaneously by more than 
one user. Various scenarios seem to be possible. The most common is probably the 
one-interface–multi-user  scenario,  in  which  one  physical  user  interface  exists,  but 
several users use it, e.g., UI design in case of the control room of power plants, which 
can  also  be  handled  with  the  originally  published  FILL-based  modeling  approach. 
Another possibility is the multi-interface–multi-user scenario. Here, cooperative systems 
implemented on  mobile devices are of special  interest. In such systems, every 
mobile  device  has  its  own  user  interface  used  by  one  participant  in  the  cooperative 
working scenario. Due to the capability of modularizing UI models with FILL, as will 
be introduced below, the example scenario of cooperation through mobile devices is 
an  excellent  use  case  demonstrating  the  possible  distribution  of  device  specific  UIs 
using a formal modeling approach. 

In Figure 2, the major architectural concept can be seen, differentiating n different 
mobile  devices  with  each  having  a  formally  modeled  user  interface  with  a  physical 
representation and a modularized interaction logic. A further abstraction layer of the 
dialog  model  has  been  added  describing  the  communication  among  various  participants 
and their  mobile devices, called multi-user  dialog or  cooperation  model. This 
global dialog model again is shown as a FILL-based model describing the data flow 
that is implemented in the underlying communication structure, such as a client-server 
or  some  other  communication  structure,  for 
instance,  Blackboard  or  peer-to-peer  concepts.
 At the level of local and global FILL 
models,  communication  is  based  on  the 
reference  mechanisms  of  the  reference  nets 
resulting  from  the  algorithmic  transformation 
of FILL. 

System Interface

...

UI_Client n

Multi-User

PR

IL

UI_Client 1

UI_Client 2

PR

IL

PR

IL

For  modeling  this  kind  of  cooperationhandling 
model using FILL, every data type 
that can be sent to and from a client is indicated 
 as  a  proxy  node  in  the  FILL-based, 

System

Dialog Model/

Cooperation Model

Server

Fig. 2. Multi-user interface model 

134 

B. Weyers et al. 

multi-user dialog  model and  controlled by the local interaction logic  model of their 
local UIs. To distinguish the various participating clients and to identify certain rules 
in the dialog model, the sent data should be accompanied by a client ID. Since FILL 
is  able  to  handle  complex  object-oriented  data  types,  it  is  also  possible  to  use  role 
identifiers to get around the problem of static ID definition, which has to be integrated 
into the dialog model, but this makes it inflexible. 

Processed data to be returned to the client can also be tagged with various kinds of 
information, for instance, whether a piece of data is awareness information. In general,
 this approach makes the model independent of the underlying technical communication 
structure. To avoid any inflexibility in the model, the graph rewriting technique 
mentioned  above  can  be  applied  to  the  finished  dialog  model.  This  is  the  case  if 
changes have to be carried out on the cooperation concept, like changing privacy rules 
or adapting aspects of awareness. Furthermore, client-side local IL models can also be 
modified  using  rewriting  that  can  be  triggered  by  the  multi-user  dialog  model  or 
through other instances, like supervisors or agents. Finally, multi-user interfaces can 
be defined as follows: 

Definition 2 (Multi-User Interface): A multi-user interface MUI is a triple (U*, MD, 
SI), where U* is a set of modularized single UI models, MD is a FILL-based multiuser 
dialog model, and SI is a system interface. Every ui in U* has the form ui=(IP, 
LD), where IP is a set of interaction processes and LD is the local dialog model. 

5  Modeling CSCW Systems Based on MUIs 

Koch  et  al.  [9]  consider  awareness,  communication,  coordination,  consensus  (here 
split up in authorization/privacy, and coordination/delegation as tools for finding consensus 
in cooperative work, cf. [9]), and collaboration as the five central issues to be 
tackled while developing CSCW systems. 

Communication, inasmuch as it is based on data exchange, can be modeled using 
FILL. Here, the sent communication data can be filtered, redirected to different cooperation 
 partner,  or  modified  if  necessary.  To  this  end,  specific  interaction-logical  
operations  defining  how  data  is  spread  to  other  cooperation  partners  and  how  it  is 
modified can be introduced. This procedure can be used to control the use of shared 
workspaces. It can also be used to manage data on which participant is able to recognize 
which kind of changes are being made in the workspace. 

Awareness information, such as editing events in shared data, is processed by the 
underlying  system  holding  the  data,  and  by  the  multi-user  dialog  model,  which  can 
handle the creation and distribution of certain awareness information and send these 
to  authorized  cooperation  partners.  Furthermore,  it  is  possible  to  change  a  partici-
pant’s UI to that of a cooperating user, permitting access to that user’s work and vice 
versa. This temporary sharing of UIs would also be helpful for providing information 
concerning tasks performed by group members and reflected in an operation accessible 
on a foreign UI.  

Authorization and privacy can be defined in the multi-user dialog model by including 
 specific  interaction-logic  operations  that  filter  awareness  or  communication 
data by applying predefined rules. These rules might be defined by a supervising participant 
who is also able to control and supervise the entire cooperative work in the 

 

Formal Modeling of Multi-user Interfaces in Cooperative Work 

135 

system. Reconfiguration can be used to adapt the privacy model during runtime, by, 
for instance, changing filter rules or various clients’ UI models to enhance or restrict 
rights in altering data or perceiving changes in the system.  

Coordination  and  delegation  can  also  be  modeled  by  describing  how  specific 
parts  of  a  UI  are  passed  to  a  specific  person,  enabling  him  to  manipulate  specific 
shared data. In general, handling access to shared data and information provided by 
the underlying system supporting the multi-user dialog model also makes it possible 
to control collaboration to varying extents. Rights for reading and/or writing access to 
specific types of data can be defined in the model and again modified during runtime 
by supervisors or other participants, as long as they have reconfiguration rights for the 
model.  

Collaboration can be handled by Petri net–based models, such as the turn-taking 
concept introduced by Mühlenbrock in [12]. Here, he describes the use of Petri nets 
for modeling the collaboration by defining whether a role is able to work on a shared 
task or not. This example of a Petri net–based model can be easily transferred to the 
reference net–based multi-user model.  

The  conceptual  view  of  implementing  CSCW  systems  using  formally  modeled 
MUIs introduced above is very general and needs further development. Still, we used 
a  multi-user  interface  concept  in  a  cooperative  learning  system  for  learning  cryptographic 
 algorithms  [17].  Here,  students  were  asked  to  cooperatively  model  a  multiuser 
interface. They  were asked to break up the protocol steps and allocate them to 
three different local UIs in a consistent way. The multi-user dialog model was predefined 
 by  a  Petri  net  describing  the  correct  protocol. Through  cooperative  modeling, 
the students were able to build a consistent cognitive model of the protocol and simulate 
it using three individual (local) UIs.  

This case study did not use the FILL-based approach described above, but could be 
easily  translated  because  FILL  is  also  transferred  to  reference  nets.  To  do  this,  the 
initial step is to model the protocol in a cooperative way using FILL. Then, the global 
model is partitioned into several local interaction-logic models. For this, the students 
select those interaction elements from a toolbar that would enable them to launch the 
actions in the right context and at the right time according to their role in the protocol. 
Still, the protocol embedded in the reference net is used to generate error messages if 
any  operations  are  distributed  in  a  wrong  way  or  have  been  executed  in  the  wrong 
situation/context. Contextualized error messages are sent to the participant as long as 
this functionality has been introduced into the system process model by a teacher or 
supervisor under certain consistency checks. In the case of cryptographic protocols, it 
would be necessary to check whether the goal of the protocol is still reachable (e.g., 
exchanging keys) or not. In general, work has been done tackling the larger problem 
of synchronizing communication, as Paternò et al. show in [13], where they introduce 
a formal concept for synchronizing communication using CTTs. 

6 

Conclusions and Future Work 

In this paper, we introduced a new concept allowing the modeler of a CSCW system 
to closely connect UI and cooperation  modeling to adapt or change  the cooperation 
model at runtime in response to changing requirements or tasks while reducing both 
conceptual errors and development costs. Here, the formal approach offers a chance 

136 

B. Weyers et al. 

to apply various validation and verification concepts to identify errors in the model or 
reconfiguration applied to it. 

Future  work  mainly  involves  finalizing  the  implementation  of  the  concept  and 
conducting further evaluation studies to identify problems in the use of these concepts 
and detect technical problems that may arise when using the concepts in real-life scenarios.
 Finally, a great deal of work remains to be done on integrating existing CSCW 
concepts  into  the  framework  and  exploring  concrete  reconfiguration  operations  that 
can be applied to existing multi-user interface models. 

References 

1.  Arvola, M.: Interaction Design Patterns for Computers in Sociable Use. Int. J. of Computer 

Applications in Technology 25(2-3), 128–139 (2006) 

2.  Beauchemin,  S.,  Barron,  J.:  Petri  Net–based  Cooperation  in  Multi-Agent  Systems.  In: 
Proc. of 2007 Conf. on Computer and Robot Vision, pp. 123–130. IEEE, New York (2007) 
3.  Borges, D., Neto, H., Neuman de Souza, J.: Work in Progress: Petri Nets as Applied to the 
Modeling of E-Learning Cooperative Systems. In: Proc. of 40th ASEE/IEEE Frontiers in 
Education Conf., pp. F1D-1–F1D-3. IEEE, Washington, DC (2010) 

4.  Bowers, J., Benford, S. (eds.): Studies in Computer-Supported Cooperative Work: Theory, 

Practice, and Design. Prentice Hall, New York (1991) 

5.  Ehrig, H., Hoffmann, K., Padberg, J.: Transformation of Petri Nets. ENTS 148, 151–172 

(2006) 

6.  Furuta,  R.,  Stotts,  P.:  Interpreted  Collaboration  Protocols  and  Their  User  in  Groupware 
Prototyping.  In:  Proc.  of  1994  ACM  Conf.  on  CSCW,  pp.  121–131.  ACM,  New  York 
(1994) 

7.  Hao, Y., Huang, H., Zeng, P., Shao, W.: Collaborative Work Heterogeneous Data Sharing 

and Application based on Petri Net. J. of Adv. Mater. Res. 421, 732–738 (2012) 

8.  Johannsen, G.: Human-Machine  Interfaces  for Cooperative  Work. Int. J. of  Advances in 

Human Factors/Ergnonomics 20, 359–364 (1995) 

9.  Koch,  M.,  Gross,  T.:  Computer-Supported  Cooperative  Work:  Concepts  and  Trends.  In: 

Proc. 11th IMS Conf., pp. 165–172. Koellen, Bonn (2006) 

10.  Kummer, O.: Referenznetze. Dissertation, University of Hamburg, Germany (2002) 
11.  Molina, A., Redondo, M., Ortega, M.: A Methodological Approach for User Interface Development 
 of  Collaborative  Applications:  A  Case  Study.  J.  Science  of  Computer  Programming 
74(9), 754–776 (2009) 

12.  Mühlenbrock, M.: Action-based Collaboration Analysis for Group Learning. Dissertation, 

University of Duisburg-Essen, Germany (2000) 

13.  Paternò, F., Mancini, C.: Developing Task Models from Informal Scenarios. In: Proceedings 
of CHI 1999, pp. 228–229. ACM, New York (1999) 

14.  UIMS Tool Workshop: A Metamodel for the Runtime Architecture of an Interactive System.
 SIGCHI Bulletin 24(1), 32–37 (1992) 

15.  Weyers, B., Burkolter, D., Luther, W., Kluge, A.: Formal Modeling and Reconfiguration 
of User Interfaces for Reduction of Errors in Failure Handling of Complex Systems. Int. J. 
of HCI (in press, 2012) 

16.  Weyers, B.: Reconfiguration of User Interface Models for Monitoring and Control of Hu-

man-Computer Systems. Dissertation, University of Duisburg-Essen, Germany (2012) 

17.  Weyers, B., Luther, W., Baloian, N.: Interface Creation and Redesign Techniques in Collaborative 
Learning Scenarios. Int. J. of Fut. Gen. Comp. Sys. 27(1), 127–138 (2011) 

