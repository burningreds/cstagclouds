On the Impossibility of Batch Update

for Cryptographic Accumulators

Philippe Camacho and Alejandro Hevia

Dept. of Computer Science, University of Chile,
Blanco Encalada 2120, 3er piso, Santiago, Chile

{pcamacho,ahevia}@dcc.uchile.cl

Abstract. A cryptographic accumulator is a scheme where a set of elements 
is represented by a single short value. This value, along with
another value called witness, allows to prove membership into the set. If
new values are added or existent values are deleted from the accumulator,
then the accumulated value changes and the witnesses need to be updated.
 In their survey on accumulators [6], Fazio and Nicolosi noted that
Camenisch and Lysyanskaya’s construction [3] was such that the time to
update a witness after m changes to the accumulated value was proportional 
to m. They posed the question whether batch update was possible,
namely if a cryptographic accumulator where the time to update witnesses 
is independent from the number of changes in the accumulated
set exists. Recently, Wang et al. answered positively by giving a construction 
for an accumulator with batch update [9,10]. In this work, we show
that the construction is not secure by exhibiting an attack. Moreover,
we prove it cannot be ﬁxed. If the accumulated value has been updated
m times then the time to update a witness must be at least Ω(m) in the
worst case.

Keywords: cryptographic accumulators, batch update.

1 Introduction

An accumulator is a scheme that hashes elements of a set X into a single, short
size value called the accumulated value. Then it is possible to prove membership 
into X of an element x using a veriﬁcation algorithm that takes as input
the accumulated value, the element x, and some value called witness. The ﬁrst
construction of such scheme is due to Benaloh and De Mare [2]. Several improvements 
later followed, including the work of Camenisch and Lysyanskaya [3]
who showed how to build dynamic accumulators (where the accumulated set
can evolve), and how to use them as a tool to eﬃciently implement anonymous
credentials. In their survey on accumulators [6], Fazio and Nicolosi pointed out
that, in Camenisch and Lysyanskaya’s construction, the time to recompute the
witnesses once the accumulated set has been modiﬁed was proportional to m,
the number of changes of the accumulated set. This raised a natural question:
“Is it possible to construct dynamic accumulators in which the update of several
witnesses can be performed in constant (independently of m) time?”

M. Abdalla and P.S.L.M. Barreto (Eds.): LATINCRYPT 2010, LNCS 6212, pp. 178–188, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010

On the Impossibility of Batch Update for Cryptographic Accumulators

179

Wang et al. [9,10] answered positively this question by showing a construction
that allows batch update. Unfortunately, we show that this construction is not
secure. Moreover, we prove that there is no way to ﬁx Wang et al.’s accumulator
by giving a lower bound of Ω(m) in the time required to update witnesses after
m updates.

Related Work. The ﬁrst construction for cryptographic accumulators with
batch update was given in [9] and later revised in [10]. The existence of accumulators 
with batch update seems to have been taken for granted, and in fact
assumed to exist in subsequent work. Damg¨ard and Triandopoulos [5] cite their
availability as an example of an accumulator construction based on the Paillier
cryptosystem. Camenisch et al. [4] also mentioned Wang et al.’s accumulator
and claim to support batch update. If we consider strictly Fazio and Nicolosi’s
deﬁnition however, this is not the case, as the witness update algorithm in [4]
performs a number of operations proportional to the combined size of the set of
added elements and removed elements.

We remark that our impossibility result also apply to any batch update variant
of the accumulator schemes proposed in [5,7], which allow both membership and
non-membership proofs.

Organization of the paper. First, in Section 2, we brieﬂy recall the notion
of a dynamic accumulator, and Section 3 we outline Wang et al.’s construction 
[9,10]. Our attack is described next in Section 4. The general impossibility
result is then presented in Section 5. Finally, we conclude in section 6.

2 Dynamic Accumulators

In this section, we brieﬂy review the notion of dynamic accumulators.

Syntax. Accumulator schemes consider two types of participants: a manager
who initializes the parameters, and computes the accumulated value as well as
the witnesses; and users, whose role is to verify the membership of elements in
the (accumulated) set and possibly ask the manager to insert/delete elements
in the set.
Deﬁnition 1. [3] Let k ∈ N be the security parameter. An accumulator scheme
Acc consists of the following algorithms.

– KeyGen(1k): This probabilistic algorithm takes k in unary as input and returns 
a pair of public and private keys (P K, SK), and the initial accumulated
value for the empty set Acc∅.

– AccVal(X, Acc∅, P K, [SK]): Given a ﬁnite set of elements X (of at most
polynomial size in k), a public key, and the initial accumulated value Acc∅,
this algorithm returns the accumulated value AccX corresponding to the set
X. Depending on the implementation, the secret key SK may also be given
as optional parameter, often to improve the eﬃciency1.

1 The secret key may also be an optional parameter in the algorithms WitGen, AddEle,

DelEle, and UpdWitGen.

180

P. Camacho and A. Hevia

– Verify(x, w, AccX , P K): Given an element x, a witness w, an accumulated
value AccX, and a public key P K, this deterministic algorithm returns Yes
if the veriﬁcation is successful, meaning that x ∈ X, or ⊥ otherwise. This
algorithm is run by a user.

– WitGen(x, AccX , P K, [SK]): This algorithm returns a witness w associated

to the element x of the set X represented by AccX.

– AddEle(x, AccX , P K, [SK]): This algorithm computes the new accumulated

value AccX∪{x} obtained after the insertion of x into set X.

(cid:5)

– DelEle(x, AccX , P K, [SK]): This algorithm computes the new accumulated
value AccX\{x} obtained by removing the element x from the accumulated
set X.

– UpdWitGen(X, X

, P K, [SK]): Suppose the set X is transformed into the set
(cid:5) after several updates (insertions/deletions). The algorithm UpdWitGen
X
returns the information U pdX,X(cid:2) required to update all the witnesses (us-
(cid:5). This
ing the algorithm UpdWit) of the elements of X that are still in X
algorithm is run by the manager.

– UpdWit(wx, AccX , AccX(cid:2) , U pdX,X(cid:2), P K): This algorithm recomputes the wit-
(cid:5). It takes as parameters
ness wx for some element x that remains in the set X
an existent witness wx with respect to set X (represented by the accumulated
value AccX), some update information U pdX,X(cid:2), and the public key P K. It
(cid:5)
(cid:5)
returns a new witness w
x for the element x with respect to the new set X
represented by some accumulated value AccX(cid:2). This algorithm is run by the
user.

The above deﬁnition is slightly more general than the one proposed by Camenisch 
and Lysyanskaya [3] as it does not depend on how these algorithms
are implemented, and it explicitly includes the update algorithms UpdWit and
UpdWitGen in the syntax.

Correctness. The correctness property of an accumulator scheme simply says
that if an element x belongs to the accumulated set X and if the corresponding 
witness w has been computed using WitGen or UpdWitGen, UpdWit then the
veriﬁcation process should pass. Although the notion of correctness for accumulators 
with batch update was informally used before, it appears it has not
been formalized until now. If Alg(·) is a possibly probabilistic algorithm, and
a a parameter, let {Alg(a)} be the set of all possible values output by running
algorithm Alg with argument a.

(cid:2)

Deﬁnition 2. (Correctness) Let X, Y be sets, AccX , AccY their respective associated 
accumulated values, P K a public key, SK the corresponding private key,
and y ∈ X
– wy ∈ {WitGen(y, AccY , P K, SK)}, or
– wy ∈ {UpdWit(w

Y . Let wy a value (witness) that satisﬁes either
y, AccX , AccY , U pdX,Y , P K)} where w
(cid:5)

(cid:5)
y is witness of y with

respect to AccX, and U pdX,Y ∈ {UpdWitGen(X, Y, P K, SK)}.

We say that an accumulator scheme Acc is correct if and only if for every such
y, wy, X, and Y , it holds that Verify(y, wy, AccY , P K) = Yes.

On the Impossibility of Batch Update for Cryptographic Accumulators

181

Security. The security of an accumulator scheme is captured by an experiment
where the adversary plays the role of a user and attempts to forge a witness
(i.e. ﬁnding a valid witness for an element that does not belong to the set)
while having access to an oracle that implements the operations relative to the
manager. Such adversary must succeed with at most negligible probability on
the security parameter. The deﬁnition proposed in [9] is built on the one of [3]
and includes the new algorithms AddEle,DelEle (for sets) and UpdWit that are
run by the oracle (manager).

Deﬁnition 3. ([3,9]) Let Acc be an accumulator scheme. We consider the notion 
of security denoted UF-ACC described by the following experiment: on input
the security parameter k, the adversary A has access to an oracle O(·) that replies
to queries by playing the role of the accumulator manager. Using the oracle, the
adversary can insert and delete a polynomial number of elements of his choice.
The oracle O(·) replies with the new accumulated value. The adversary can also
ask for witness computations or update information. Finally, the adversary is
required to output a pair (x, w). The advantage of the adversary A is deﬁned by:

UF-ACC

Acc

Adv

(A) = Pr [ Verify(x, w, AccX , P K) = Yes ∧ x /∈ X ]

where P K is the public key generated by KeyGen, and AccX is the accumulated
value of the resulting accumulated set X. The scheme Acc is said to be secure if
for every probabilistic polynomial time adversary A we have

where neg : N → R+ is some negligible function.

UF-ACC

Acc

Adv

(A) = neg(k)

Batch Update. As originally proposed [6], the batch update property for an
accumulator scheme states that each user should be able to update each of its
witness using the algorithm UpdWit in time independent from the number of
changes (additions and deletions) to the accumulated set.
Deﬁnition 4. ( Batch update for accumulator schemes). Let k ∈ N be a security 
parameter and let Acc be an accumulator scheme. Also, let Xi be a set of
accumulated values at some time i, and Ui ⊂ Xi be a set of elements for which
some user U holds valid witnesses. Suppose that after m > 0 updates (insertions
or deletions) to set Xi, the new accumulated set is Xi+m and the associated
accumulated value is AccXi+m. We say that Acc has the batch update property
if given some information U pdXi,Xi+m, user U running UpdWit can recompute
Xi+m in constant time (with respect to
a valid witness for any element in Ui
m), or equivalently, time O(k).

(cid:2)

3 Wang et al.’s Construction

In this section, we brieﬂy recall Wang et al.’s accumulator with batch update [9,10].
The ﬁrst version of their work [9] suﬀered from two correctness problems which
were later ﬁxed [10]. Below we review the improved version [10].

182

P. Camacho and A. Hevia

Syntax. The algorithms of Wang et al.’s scheme slightly deviate from the general 
syntax of section 2 as they allow to add and delete sets of more than one
element to the accumulator. Moreover the algorithms AddEle and AccVal are
randomized which means that the accumulated value does not only depend on
the elements of the set, contrary to the deﬁnition of Fazio and Nicolosi [6]. The
general idea however remains the same. The syntax from [9] can be found in the
Appendix A.1.

n is Paillier’s L function [8].

Construction. Wang et al.’s accumulator relies on the Paillier cryptosystem
[8] which we recall in Appendix A.2. In the following, λ will denote the value
lcm(p− 1, q − 1) where n = pq is a product of large-enough safe primes p, q, and
F : u → u−1
– KeyGen(1k): Given the security parameter k in unary, compute a safe-prime
product n = pq that is k-bits long and create an empty set V . Let C =
n2 \ {1} and T
R← Z
R← Z+ be two random
∗
∗
ϕ(n2) and σ
Z
numbers. The public key P K is set to (n, β) and the private key SK to
(σ, λ). The output is the parameter P = (P K, SK).
– AccVal(X,P): Given a set X = {c1, ..., cm} with X ⊂ C, and the parameter
P, take cm+1

(cid:5) = {3, ..., n2}. Let β

R← C and compute

xi = F (cλ
(cid:3)

AccX = σ

i mod n2) mod n (for i = 1, ..., m + 1)
m+1
i=1 xi mod n
−1

mod n2 (for i = 1, ..., m + 1)

yi = cλσβ
ac = Π m+1

i

i=1 yi mod n2

Output the accumulated value AccX and the auxiliary information ac.
– WitGen(ac, X,P): Given the auxiliary information ac, a set X = {c1, ..., cm},
and the parameter P, choose uniformly at random a set of m numbers T =
{t1, ..., tm} ⊂ T

(cid:5) \ {β} (for i = 1, ..., m) and compute

wi = acc

−1

−tiβ
i

mod n2 (for i = 1, ..., m)

– AddEle(X

⊕

⊕
l+1

⊕ = {c

⊕
⊕
1 , ..., c
l

, ac, AccX ,P): Given a set X

Output the witness Wi = (wi, ti) for ci (for i = 1, ..., m).
}(X
R← C and a set of l numbers T

⊕ ⊆ C \ X), to be
inserted, the auxiliary information ac, the accumulated value AccX, and the
⊕ = {t
} R←
parameter P, choose c
(cid:5) \ (T ∪ {β}), and compute
T
⊕
⊕
i )λ mod n2) mod n (for i = 1, ..., l + 1)
i = F ((c
x
AccX∪X⊕ = AccX + σ
⊕
⊕
−1
i )λσβ
i = (c
y
⊕
au = Π l+1
i mod n2
i=1 y
⊕
⊕
i )−t
−1
i = acau(c
w
Set ac = acau mod n2, T = T ∪ T
accumulated value AccX∪X⊕ corresponding to the set X ∪ X

⊕, and V = V ∪{au}. Then output the new
⊕, the witness

mod n2 (for i = 1, ..., l + 1)

mod n2 (for i = 1, ..., l)

⊕
⊕
1 , ..., t
l

(cid:3)

⊕
l+1
i mod n
i=1 x

⊕
i β

On the Impossibility of Batch Update for Cryptographic Accumulators

183

⊕
i = (w
(cid:8)

W
auxiliary information au and ac.

⊕
i , t
, ac, AccX ,P): Given a set X

⊕
i ) for the new added elements c
(cid:8) = {c

⊕
i (for i = 1, ..., l), and the
(cid:8) ⊂ X) to be
(cid:8)
(cid:8)
1 , ..., c
l
deleted, the auxiliary information ac, the accumulated value AccX, and the
parameter P, choose c

} (X

– DelEle(X

(cid:8)
l+1

R← C and compute
(cid:8)
i )λ mod n2) mod n (for i = 1, ..., l + 1)

(cid:8)
i = F ((c
x
AccX\X(cid:4) = AccX − σ
(cid:8)
(cid:8)
i )λσβ
i = (c
y
(cid:8)
au = y
l+1Π l

−1

j=1(y

(cid:3)
(cid:8)
(cid:8)
l
i + σx
l+1 mod n
i=1 x
mod n2 (for i = 1, ..., l + 1)
(cid:8)
j )−1 mod n2

Set ac = acau mod n2 and V = V ∪ {au}. Then output the new accumulated 
value AccX\X(cid:4) corresponding to the set X \ X
(cid:8) and the auxiliary
information au and ac.
– Verify(c, W, AccX , P K): Given an element c, its witness W = (w, t), the
accumulated value AccX, and the public key P K, test whether {c, w} ⊂
C, t ∈ T
(cid:5) and F (wβ ct mod n2) ≡ AccX( mod n). If so, output Yes, otherwise
output ⊥.

– UpdWit(Wi, au, P K) : Given the witness Wi, the auxiliary information au
(cid:5)
i = wiau mod n2 then output the new

and the public key P K, compute w
witness W

(cid:5)
i, ti) for the element ci.

(cid:5)
i = (w

In the following section we show that Wang et al.’s construction is not secure.

4 An Attack on the Accumulator with Batch Update of

Wang et al.

4.1 Problems with the Proof

A security proof for the scheme was presented in the original paper2 by Wang
et al. [9]. In this work, a security reduction is presented assuming the Extended
Strong RSA assumption (or es-RSA), also proposed in [9] as an analogous to the
Strong RSA assumption [1] but relative to modulus n2 instead of n. Unfortunately,
 there are two main problems in the proof. First, it states that adversary B
must “run the KeyGen algorithm” which means it knows the factorization of the
product n = pq, or at least has the knowledge of ϕ(n2) and λ = lcm(p− 1, q− 1)
since β = σλ mod n2 (see [9]). Therefore, it is not clear how the reduction to
break the es-RSA assumption can be achieved.
The second problem is that, to break the es-RSA assumption, B needs to ﬁnd
non trivial values (y, s) such that ys = x mod n2 where x is given as input to B.
This value x does not seem to be mentioned in the proof.

2 As mentioned before, the subsequent paper [10] ﬁxes two correctness ﬂaws in [9] but
does not give a new security proof. The attack we consider however is relative to the
improved version [10].

184

P. Camacho and A. Hevia

4.2 Description of the Attack
In order to show that the construction is not secure, i.e., the proof of security
cannot be ﬁxed, we present an attack. This attack considers the updated scheme
[10]. The idea is simply to delete an element from the set, and then update the
witness of this element with the update information obtained by the execution of
the algorithm DelEle. We then observe that this new witness is a valid one for the
deleted element, which of course should not happen. We start with the set X =
{c1} for some c1, and let x1 = F (cλ
1 mod n2) mod n. Then, a random element c∗
is chosen and x∗ = F (cλ∗ mod n2) mod n is computed. The accumulated value is
set to v = σ(x1 + x∗) mod n. The witness value W1 = (w1, t1) for c1 is deﬁned
by w1 = acc
mod n2,
y∗ = cλσβ

−t1β
1
mod n2, and t1 is random.

mod n2 where ac = y∗y1 mod n2, y1 = cλσβ

Then the adversary asks the manager to delete element c1. This means
(cid:5) = v − σx1 + σ(x∗∗) mod n = σ(x∗ +
that the new accumulated value is v
x∗∗) mod n where x∗∗ = F (cλ∗∗ mod n2) mod n and c∗∗ is random. The aux-
−1
iliary value au used to update the witnesses is au = y∗∗y
1 mod n2 where
y∗∗ = cλσβ
∗∗
mod n2. So, by updating the witness w1 with au we obtain
−1
(cid:5)
1 = auw1 mod n2 = y∗∗y
1 y∗y1c
mod n2. Then
w
(cid:5)β
1 mod n2 = (y∗∗y∗)β mod n2 = (c∗∗c∗)λσ mod n2. It
)βct1
1 ct1
w
follows that

mod n2 = y∗∗y∗c

≡ (y∗∗y∗c

−t1β
1

−t1β
1

−1

−1

−t1β
1

−1

−1

∗

−1

1

−1

1

−1

F (w

(cid:5)β
1 ct1

1 mod n2) ≡ F ((c∗∗c∗)λσ mod n2) mod n

≡ σ(F (cλ∗∗ mod n2) + F (cλ∗ mod n2)) mod n
≡ σ(x∗ + x∗∗) mod n
≡ v

mod n

(cid:5)

(cid:5)
1, t1) is a valid witness for the deleted element x1. Therefore
This shows that (w
the scheme is not secure. Indeed the problem is simply that the information au
allows to update every old witness including w1 for which such an update should
not be possible.

5 A Lower Bound for Updating the Witnesses

The attack of the last section is an indication that the proposed construction
may have some design ﬂaws. In this section, we show that the problem indeed is
more fundamental and the batch update property is essentially unrealizable. We
argue this by presenting a lower bound on the size of U pdX,X(cid:2), the information
needed to update the witnesses after m changes (more precisely deletions). Any
deterministic3 update algorithm UpdWit must at least read U pdX,X(cid:2), and so it
also bounds the running time of any such algorithm. In the following theorem
log refers to the logarithm in base two function.
3 For simplicity, in the proof we focus on deterministic update (UpdWit) and veriﬁcation 
(Verify) algorithms. This is in fact the case for the construction of [10]. We
believe the result can be extended to the probabilistic case but the proof becomes
more involved.

On the Impossibility of Batch Update for Cryptographic Accumulators

185

Theorem 1. Let Acc be a secure accumulator scheme with deterministic UpdWit
and Verify algorithms. For an update involving m delete operations in a set of N
elements, the size of the information U pdX,X(cid:2) required by the algorithm UpdWit
is Ω(m log N

2 we have |U pdX,X(cid:2)| = Ω(m) = Ω(N).

m). In particular if m = N

Proof. The idea of the proof is that the update information must encode a minimum 
amount of information in order for the accumulator scheme to be correct
and secure. We prove this by considering a theoretical game between the accumulator 
manager and some user U. In the game, starting from an accumulated
set X, the accumulator manager updates the accumulator in a way that is not
known to user U (namely, the manager deletes some elements in an arbitrary
set Xd ⊂ X) while still providing the update information U pdX,X(cid:2) to U, where
(cid:5) = X \ Xd. We prove that, as long as the scheme is correct and secure, there
X
is a simple strategy that allows the user U to recover the exact changes made by
the manager, that is, the set of deleted elements Xd. We conclude that the information 
provided by the manager to the user must at least encode a description
of set Xd. Details follow.
Consider the following game. The set accumulated in some point of the time
is X = {x1, x2, ..., xN}, and the corresponding accumulated value is AccX. We
suppose the user possesses all the witnesses for each element in X and knows the
accumulated value. Then m DelEle operations are performed, that is the new set
(cid:5) = X \ Xd where Xd = {xi1 , xi2 , ..., xim}. The manager computes
obtained is X
the new accumulated value AccX(cid:2) and sends it to the user along with the update
(cid:5).
information U pdX,X(cid:2) required to update all the witnesses that are still in X
Armed with this update information U pdX,X(cid:2) and the new accumulated value
AccX(cid:2), user U is able to reconstruct the set Xd of deleted elements as follows: for
each element in X, the user checks if the corresponding witness can be successfully 
updated using algorithm UpdWit with input U pdX,X(cid:2). More speciﬁcally, the
(cid:5)
x is
user computes w
x, AccX(cid:2) , P K) = ⊥, then the element
(cid:5)
a valid witness. If not, that is, if Verify(x, w
x must have been deleted from X. Note that this condition is necessary otherwise 
it would contradict the scheme’s correctness (there would be elements in
(cid:5) for which an updated witness cannot be computed) or the scheme’s security
X
(it would be possible to update witnesses for deleted elements).

(cid:5)
x = UpdWit(wx, U pdX,X(cid:2), P K) and checks whether or not w

m

Hence, the user must be able to recompute the set of deleted elements Xd only
from values U pdX,X(cid:2) and AccX(cid:2). We therefore conclude that (U pdX,X(cid:2) , AccX(cid:2))
must contain at least the information required to encode any subset with m elsuch 
subsets, so the minements 
of a set containing N elements. There are
(cid:5)
(cid:5)
(cid:4)
) ≥ m log N
imum amount of information required is log
bits. Since log(
N
m). Given that |AccX(cid:2)| must be
we obtain that |(AccX(cid:2) , U pdX,X(cid:2))| = Ω(m log N
m
suﬃciently short (say, at least O(log(N)), as otherwise the accumulated value
is not longer a “short representation” of the set, and the scheme is not really
useful), we conclude that |U pdX,X(cid:2)| = Ω(m log N
Given a the security parameter k, the above theorem says that any update
algorithm must take time at least O(m) = O(N) = O(p(k)) = ω(k) for some

m). The result then follows.

(cid:4)
N
m

(cid:5)

(cid:4)
N
m

186

P. Camacho and A. Hevia

polynomial p, in order to read the input. This goes beyond O(k), the desired
“constant time” in the number of changes. Interestingly, even if the number
of expensive operations (say, O(k3) modular exponentiations) of UpdWit were
sublinear in the size of the update information U pdX,X(cid:2), the overall complexity
of the update operation would still be dominated by the time O(p(k)) to read
the update information (and the accumulated value).

Corollary 1. Cryptographic accumulators with batch update (and deterministic 
update and veriﬁcation) do not exist.

6 Conclusion

This result shows that the batch update property as proposed in [6] essentially
cannot be obtained, as the time to update all the witnesses cannot be linear in
the security parameter k, i.e O(k), but it must be at least O(p(k)) = ω(k) for
some polynomial p. Notice that our lower bound is not tight since Camenisch
and Lysyanskaya’s accumulator requires O(p(k)·k) time to update the witnesses
after O(p(k)) changes. Nonetheless, in principle, it leaves some (potential) room
to improve their construction by at most a factor of k.

Finally, one may consider getting around this impossibility result by not allowing 
deletions in the set. Unfortunately, such an accumulator can be trivially 
implemented by signing the elements of the set, as in this case there is no
replay-attack. The witness for every element consists in its signature under the
manager’s private key, and clearly needs not to be updated.

Acknowledgments

The authors wish to thank the anonymous reviewers for their helpful comments
and suggestions. Alejandro Hevia gratefully acknowledges the support of CONICYT 
via FONDECYT No. 1070332.

References

1. Bari´c, N., Pﬁtzmann, B.: Collision-free accumulators and fail-stop signature
schemes without trees. In: Fumy, W. (ed.) EUROCRYPT 1997. LNCS, vol. 1233,
pp. 480–494. Springer, Heidelberg (1997)

2. Benaloh, J.C., de Mare, M.: One-way accumulators: A decentralized alternative to
digital signatures. In: Helleseth, T. (ed.) EUROCRYPT 1993. LNCS, vol. 765, pp.
274–285. Springer, Heidelberg (1994)

3. Camenisch, J., Lysyanskaya, A.: Dynamic accumulators and application to eﬃcient
revocation of anonymous credentials. In: Yung, M. (ed.) CRYPTO 2002. LNCS,
vol. 2442, pp. 61–76. Springer, Heidelberg (2002)

4. Camenisch, J., Kohlweiss, M., Soriente, C.: An accumulator based on bilinear maps
and eﬃcient revocation for anonymous credentials. In: Jarecki, S., Tsudik, G. (eds.)
PKC 2009. LNCS, vol. 5443, pp. 481–500. Springer, Heidelberg (2009)

On the Impossibility of Batch Update for Cryptographic Accumulators

187

5. Damg˚ard, I., Triandopoulos, N.: Supporting non-membership proofs with bilinearmap 
accumulators. Cryptology ePrint Archive, Report 2008/538 (2008)

6. Fazio, N., Nicolosi, A.: Cryptographic accumulators: Deﬁnitions, constructions and

applications. Technical report (2002)

7. Li, J., Li, N., Xue, R.: Universal accumulators with eﬃcient nonmembership proofs.
In: Katz, J., Yung, M. (eds.) ACNS 2007. LNCS, vol. 4521, pp. 253–269. Springer,
Heidelberg (2007)

8. Paillier, P.: Public-key cryptosystems based on composite degree residuosity
classes. In: Stern, J. (ed.) EUROCRYPT 1999. LNCS, vol. 1592, pp. 223–238.
Springer, Heidelberg (1999)

9. Wang, P., Wang, H., Pieprzyk, J.: A new dynamic accumulator for batch updates.
In: Qing, S., Imai, H., Wang, G. (eds.) ICICS 2007. LNCS, vol. 4861, pp. 98–112.
Springer, Heidelberg (2007)

10. Wang, P., Wang, H., Pieprzyk, J.: Improvement of a dynamic accumulator at ICICS
07 and its application in multi-user keyword-based retrieval on encrypted data. In:
Proceedings of IEEE Asia-Paciﬁc Services Computing Conference - APSCC, pp.
1381–1386 (2008)

A Appendix

A.1 Syntax of Wang et al.’s Accumulator

Deﬁnition 5. ([9]) Let k be the security parameter. A dynamic accumulator
with batch update AccBU consists of the following algorithms:

– KeyGen(1k): Is a probabilistic algorithm that takes as input the security parameter 
k in unary and returns a parameter P = (P K, SK) where P K is
the public key and SK is the private key4.
– AccVal(X,P): Is a probabilistic algorithm that computes an accumulated
value. It takes as input the set X = {c1, ..., cm} and the parameter P and
returns an accumulated value AccX along with some auxiliary information
ac that will be used by other algorithms.

– Verify(x, W, AccX , P K): This deterministic algorithm checks whether an element 
x belongs to the set X represented by the accumulated value AccX using
the witness W and the public key P K. It returns Yes whether the witness
W for x is valid or ⊥ otherwise.
, ac, AccX ,P): This probabilistic algorithm adds some new elements 
to the accumulated value. The input values are the set of new elements
}, the auxiliary information ac, the accumulated
⊕ = {c
to add X
value AccX and the parameter P. The returned values are AccX∪X⊕ the accumulated 
value corresponding to the set X∪X
⊕, a witnesses {W
}
⊕
⊕
1 , ..., W
}, and the auxiliary informaassociated 
to the inserted elements {c
⊕
⊕
l
1 , ..., c
l
tion ac, au, that will be used for future update operations.

⊕
⊕
1 , ..., c
l

– AddEle(X

⊕

4 In the original paper, the authors mention another parameter M which is an upper
bound to the number of elements that can be accumulated. In order to simplify the
notations, we omit it and recall that this upper bound must be a polynomial in k.

188

P. Camacho and A. Hevia

(cid:8)

(cid:8) = {c

– DelEle(X

(cid:8)
(cid:8)
1 , ..., c
l

, ac, AccX ,P): This probabilistic algorithm is analogous to AddEle
(cid:8). The input values are the set of
and allows to delete a set of elements X
}, the auxiliary information ac, the accuelements 
to delete X
mulated value AccX and the parameter P. The returned values are AccX\X(cid:4)
the accumulated value corresponding to the set X \ X
(cid:8), and the auxiliary
information ac, au, that will be used for future update operations.
– WitGen(ac, X,P): This probabilistic algorithm creates a witness for every
element in the set X. It takes as input an auxiliary information ac, the set
X and the parameter P.

– UpdWit(Wi, au, P K) : This deterministic algorithm updates witnesses for the
elements accumulated AccX and that are still accumulated in AccX(cid:2) (the new
set after update). The inputs are Wi, the witness to update, the auxiliary
(cid:5)
information au and the public key P K. It returns an updated witness W
i
that allows to prove that ci is still accumulated in the new accumulated value
AccX(cid:2).

Note that in this deﬁnition UpdWitGen does not appear. The reason is that in
Wang et al.’s construction, the update information required to recompute the
witnesses is generated by algorithms AddEle and DelEle.

A.2 Paillier Cryptosystem

The Paillier cryptosystem [8] consists of the following three algorithms.

– KeyGen: let n = pq be a RSA modulus, with p, q large prime integers. Let g
an integer multiple of n modulo n2. The public key is deﬁned by P K = (n, g)
and the private key by SK = λ = λ(n) = lcm(p − 1, q − 1).
– Encrypt: let M ∈ Zn be a plaintext message and r a random element in Z
∗
n,

– Decrypt: to recover M from ciphertext c, compute M = F (cλ mod n

F (gλ mod n2) mod n
takes as argument elements from the set Sn = {u <

the encrypted message is c = gM rn mod n2.
where F : u → u−1
n2|u = 1 mod n}.

n

2

)

The homomorphic property of the Paillier cryptosystem follows from the fact
that ∀x, y ∈ Sn and σ ∈ Z+:

F ((x.y)λ mod n2) mod n = F (xλ mod n2) + F (yλ mod n2) mod n

F (xσλ mod n2) mod n = σF (xλ mod n2) mod n

