QA-NIZK Arguments in Asymmetric Groups:

New Tools and New Constructions

Alonso Gonz´alez1(B), Alejandro Hevia1, and Carla R`afols2

1 Departamento de Ciencias de la Computaci´on,

Universidad de Chile, Santiago, Chile

2 Faculty of Mathematics, Horst-G¨ortz Institute for IT Security,

alonso.gon@gmail.com

Ruhr-Universit¨at Bochum, Bochum, Germany

Abstract. A sequence of recent works have constructed constant-size
quasi-adaptive (QA) NIZK arguments of membership in linear subspaces
m, where ˆG is a group equipped with a bilinear map e : ˆG × ˇH → T.
of ˆG
Although applicable to any bilinear group, these techniques are less useful 
in the asymmetric case. For example, Jutla and Roy (Crypto 2014)
show how to do QA aggregation of Groth-Sahai proofs, but the types of
equations which can be aggregated are more restricted in the asymmetric 
setting. Furthermore, there are natural statements which cannot be
expressed as membership in linear subspaces, for example the satisﬁability 
of quadratic equations.

m to linear subspaces of ˆG

In this paper we develop speciﬁc techniques for asymmetric groups.
We introduce a new computational assumption, under which we can
recover all the aggregation results of Groth-Sahai proofs known in the
symmetric setting. We adapt the arguments of membership in linear
n. In particular, we give
spaces of ˆG
a constant-size argument that two sets of Groth-Sahai commitments,
deﬁned over diﬀerent groups ˆG, ˇH, open to the same scalars in Zq, a
useful tool to prove satisﬁability of quadratic equations in Zq. We then
n and develop new
use one of the arguments for subspaces in ˆG
techniques to give constant-size QA-NIZK proofs that a commitment
opens to a bit-string. To the best of our knowledge, these are the ﬁrst
constant-size proofs for quadratic equations in Zq under standard and
falsiﬁable assumptions. As a result, we obtain improved threshold GrothSahai 
proofs for pairing product equations, ring signatures, proofs of
membership in a list, and various types of signature schemes.

m × ˇH

m × ˇH

1 Introduction

Ideally, a NIZK proof system should be both expressive and eﬃcient, meaning
that it should allow to prove statements which are general enough to be useful in

A. Gonz´alez—Funded by CONICYT, CONICYT-PCHA/Doctorado Nacional/201321130937.

C. R`afols—Part of this work was done while visiting Centro de Modelamiento
Matem´atico, U. Chile. Gratefully acknowledges the support of CONICYT via Basal
in Applied Mathematics.

c(cid:2) International Association for Cryptologic Research 2015
T. Iwata and J.H. Cheon (Eds.): ASIACRYPT 2015, Part I, LNCS 9452, pp. 605–629, 2016.
DOI: 10.1007/978-3-662-48797-6 25

606

A. Gonz´alez et al.

practice using a small amount of resources. Furthermore, it should be constructed
under mild security assumptions. As it is usually the case for most cryptographic
primitives, there is a trade oﬀ between these three design goals. For instance,
there exist constant-size proofs for any language in NP (e.g. [12]) but based on
very strong and controversial assumptions, namely knowledge-of-exponent type
of assumptions (which are non-falsiﬁable, according to Naor’s classiﬁcation [25])
or the random oracle model.

The Groth-Sahai proof system (GS proofs) [16] is an outstanding example
of how these three goals (expressivity, eﬃciency, and mild assumptions) can be
combined successfully. It provides a proof system for satisﬁability of quadratic
equations over bilinear groups. This language suﬃces to capture almost all of the
statements which appear in practice when designing public-key cryptographic
schemes over bilinear groups. Although GS proofs are quite eﬃcient, proving
satisﬁability of m equations in n variables requires sending some commitments
of size Θ(n) and some proofs of size Θ(m) and they easily get expensive unless
the statement is very simple. For this reason, several recent works have focused
on further improving proof eﬃciency (e.g. [7,8,26])

Among those, a recent line of work [19–22] has succeeded in constructing
constant-size arguments for very speciﬁc statements, namely, for membership in
subspaces of ˆGm, where ˆG is some group equipped with a bilinear map where the
discrete logarithm is hard. The soundness of the schemes is based on standard,
falsiﬁable assumptions and the proof size is independent of both m and the
witness size. These improvements are in a quasi-adaptive model (QA-NIZK,
[19]). This means that the common reference string of these proof systems is
specialized to the linear space where one wants to prove membership.

Interestingly, Jutla and Roy [20] also showed that their techniques to construct 
constant-size NIZK in linear spaces can be used to aggregate the GS
proofs of m equations in n variables, that is, the total proof size can be reduced
to Θ(n). Aggregation is also quasi-adaptive, which means that the common reference 
string depends on the set of equations one wants to aggregate. Further,
it is only possible if the equations meet some restrictions. The ﬁrst one is that
only linear equations can be aggregated. The second one is that, in asymmetric 
bilinear groups, the equations must be one-sided linear, i.e. linear equations
which have variables in only one of the Zq modules ˆG, ˇH, or Zq.1

Thus, it is worth to investigate if we can develop new techniques to aggregate
other types of equations, for example, quadratic equations in Zq and also recover
all the aggregation results of [20] (in particular, for two-sided linear equations) in
asymmetric bilinear groups. The latter (Type III bilinear groups, according to the
classiﬁcation of [11]) are the most attractive from the perspective of a performance
and security trade oﬀ, specially since the recent attacks on discrete logarithms
in ﬁnite ﬁelds by Joux [18] and subsequent improvements. Considerable research

1 Jutla and Roy show how to aggregate two-sided linear equations in symmetric bilinear 
groups. The asymmetric case is not discussed, yet for one-sided linear equations
it can be easily derived from their results. This is not the case for two-sided ones,
see Sect. 4.

QA-NIZK Arguments in Asymmetric Groups

607

eﬀort (e.g. [1,10]) has been put into translating pairing-based cryptosystems from
a setting with more structure in which design is simpler (e.g. composite-order or
symmetric bilinear groups) to a more eﬃcient setting (e.g. prime order or asymmetric 
bilinear groups). In this line, we aim not only at obtaining new results in
the asymmetric setting but also to translate known results and develop new tools
speciﬁcally designed for it which might be of independent interest.

1.1 Our Results

In Sect. 3, we give constructions of constant-size QA-NIZK arguments of membership 
in linear spaces of ˆGm× ˇHn. Denote the elements of ˆG (respectively of ˇH)
with a hat (resp. with an inverted hat) , as ˆx ∈ ˆG (respectively, as ˇy ∈ ˇH). Given
ˆM ∈ ˆGm×t and ˇN ∈ ˇHn×t, we construct QA-NIZK arguments of membership in
the language

L ˆM, ˇN := {(ˆx, ˇy) ∈ ˆGm × ˇHn : ∃w ∈ Zt
q, ˆx = ˆMw, ˇy := ˇNw},
(cid:2)
ˆM
which is the subspace of ˆGm × ˇHn spanned by
ˇN
on the recent constructions of [21]. When m = n, we construct QA-NIZK arguments 
of membership in

. This construction is based

(cid:3)

L ˆM, ˇN,+ := {(ˆx, ˇy) ∈ ˆGm × ˇHm : ∃w ∈ Zt

q, x + y = (M + N)w},

(cid:2)

(cid:3)(cid:5)

w
s

,

(cid:2)

(cid:3)

which is the linear subspace of ˆGm × ˇHm of vectors (ˆx, ˇy) such that the sum of
their discrete logarithms is in the image of M+N (the sum of discrete logarithms
of ˆM and ˇN).
From the argument for L ˆM, ˇN, we easily derive another constant-size QA-

(cid:4)
(ˆc, ˇd) ∈ ˆGm × ˇHn : ∃(w, r, s), ˆc = ˆU

NIZK argument in the space
Lcom, ˆU, ˇV,ν :=
where ˆU ∈ ˆGm× ˜m, ˇV ∈ ˇHn×˜n and w ∈ Zν
q . Membership in this space captures
the fact that two commitments (or sets of commitments) in ˆG, ˇH open to the
same vector w ∈ Zν
q . This is signiﬁcant for the eﬃciency of quadratic GS proofs in
asymmetric groups since, because of the way the proofs are constructed, one can
only prove satisﬁability of equations of degree one in each variable. Therefore, to
prove a quadratic statement one needs to add auxiliary variables with commitments 
in the other group. For instance, to prove that ˆc opens to b ∈ {0, 1}, one
proves that some commitment ˇd opens to b such that {b(b − 1) = 0, b − b = 0}.
Our result allows us to aggregate the n proofs of the second statement.

, ˇd = ˇV

w
r

To construct these arguments we introduce a new assumption, the Split Kernel 
Matrix Diﬃe-Hellman Assumption (SKerMDH). This assumption is derived
from the recently introduced Kernel Matrix Diﬃe-Hellman Assumption
(KerMDH, [24]), which says that it is hard to ﬁnd a vector in the co-kernel

608

A. Gonz´alez et al.

of ˆA ∈ ˆG(cid:3)×k when A is such that it is hard to decide membership in Im( ˆA)
(i.e. when A is an instance of a Matrix DH Assumption [8]). Our SKerMDH
Assumption says that one cannot ﬁnd a solution to the KerMDH problem which
is “split” between the groups ˆG and ˇH. We think this assumption can be useful in
other protocols in asymmetric bilinear groups. A particular case of Kernel MDH
Assumption is the Simultaneous Double Pairing Assumption (SDP, [2]), which is
a well established assumption in symmetric bilinear maps, and its “split” variant
is the SSDP Assumption (see Sect. 2.1) [2].

In Sect. 4 we use the SKerMDH Assumption to lift the known aggregation
results in symmetric groups to asymmetric ones. More speciﬁcally, we show how
to extend the results of [20] to aggregate proofs of two-sided linear equations in
asymmetric groups. While the original aggregation results of [20] were based on
decisional assumptions, our proof shows that they are implied by computational
assumptions.

Next, in Sect. 5, we address the problem of aggregating the proof of quadratic
equations in Zq. For concreteness, we study the problem of proving that a commitment 
in ˆG opens to a bit-string of length n. Such a construction was unknown
even in symmetric bilinear groups (yet, it can be easily generalized to this setting,
see the full version). More speciﬁcally, we prove membership in

L ˆU,bits := {ˆc ∈ ˆGn+m : ˆc := ˆU1b + ˆU2w, (b, w) ∈ {0, 1}n × Zm

q

},

where ( ˆU1, ˆU2) ∈ ˆG(n+m)×n × ˆG(n+m)×m are matrices which deﬁne a perfectly 
binding and computationally hiding commitment to b. Speciﬁcally, we
give instantiations for m = 1 (when ˆc is a single commitment to b), and m = n
(when ˆc is the concatenation of n Groth-Sahai commitments to a bit).

We stress that although our proof is constant-size, we need the commitment
to be perfectly binding, thus the size of the commitment is linear in n. The
common reference string which we need for this construction is quadratic in the
(cid:6)
size of the bit-string. Our proof is compatible with proving linear statements
i∈[n] bi = t by adding a linear number
about the bit-string, for instance, that
(in n) of elements to the CRS (see the full version). We observe that in the
special case where t = 1 the common reference string can be linear in n. The
costs of our constructions and the cost of GS proofs are summarized in Table 1.
We stress that our results rely solely on falsiﬁable assumptions. More specifically,
 in the asymmetric case we need some assumptions which are weaker than
the Symmetric External DH Assumption plus the SSDP Assumption. Interestingly,
 our construction in the symmetric setting relies on assumptions which are
all weaker than the 2-Lin Assumption (see the full version).

We think that our techniques for constructing QA-NIZK arguments for bitstrings 
might be of independent interest. In the asymmetric case, we combine
our QA-NIZK argument for L ˆM, ˇN,+ with decisional assumptions in ˆG and ˇH.
We do this with the purpose of using QA-NIZK arguments even when M + N
has full rank. In this case, strictly speaking “proving membership in the space”
looses all meaning, as every vector in ˆGm × ˇHm is in the space. However, using
decisional assumptions, we can argue that the generating matrix of the space is

QA-NIZK Arguments in Asymmetric Groups

609

indistinguishable from a lower rank matrix which spans a subspace in which it
is meaningful to prove membership.

Finally, in Sect. 6 we discuss some applications of our results. In particular,
our results provide shorter signature size of several schemes, more eﬃcient ring
signatures, more eﬃcient proofs of membership in a list, and improved threshold
GS proofs for pairing product equations.

Table 1. Comparison for proofs of bi ∈ {0, 1}, for i ∈ [n], between GS proofs and
our diﬀerent constructions. Our NIZK construction for bit-strings is denoted by Πbit
and the construction for proving that two sets of commitments open to the same value
ΨDk,com. Row “Πbit m = 1” is for our construction for a single commitment of size n + 1
to a bit-string of size n, and “Πbit m = n” is for our construction for n concatenated
GS commitments. Row “Πbit weight 1” is for our construction for bit-strings of weight
1 with m = 1. Column “Comms” contains the size of the commitments, “CK” the size
of the commitment keys in the CRS, and “CRS(ρ)” the size of the language dependent
part of the CRS. The size of elements in ˆG and ˇH is g and h, respectively. The table is
computed for Dk = L2, the 2-Linear matrix distribution.

GS [15]
GS + ΨD
Πbit m = 1

k ,com

Comms

Proof

CK

CRS(ρ)

2n(g + h) 4n(g + h)

4(g + h) 0

2n(g + h)

(2n + 2)(g + h) 4(g + h)

(10n + 4)(g + h)

#Pairings

28n

20n + 8

(n + 1)g

10(g + h)

2
(n + 1)g (6n

Πbit m = n

2ng

10(g + h)

4g

+ 10n + 32)(g + h) n + 55
2
(12n

+ 14n + 22)g +

2n + 54

2
(12n

+ 12n + 24)h

Πbit weight 1, m = 1 (n + 1)g

10(g + h)

(n + 1)g (20n + 26)(g + h)

n + 55

2 Preliminaries

Let Gena be some probabilistic polynomial time algorithm which on input 1λ,
where λ is the security parameter, returns the description of an asymmetric
bilinear group (q, ˆG, ˇH, T, e, ˆg, ˇh), where ˆG, ˇH and T are groups of prime order q,
the elements ˆg, ˇh are generators of ˆG, ˇH respectively, and e : ˆG × ˇH → T is an
eﬃciently computable, non-degenerate bilinear map.
We denote by g and h the bit-size of the elements of ˆG and ˇH, respectively.
Elements ˆx ∈ ˆG (resp. ˇy ∈ ˇH, zT ∈ T) are written with a hat (resp, with
inverted hat, sub-index T) and ˆ0, ˇ0 and 0T denote the neutral elements. Given
ˆx ∈ ˆG, ˇy ∈ ˇH, ˆxˇy refers to the pairing operation, i.e. ˆxˇy = e(ˆx, ˇy). Vectors
and matrices are denoted in boldface and any product of vectors/matrices of
elements in ˆG and ˇH is deﬁned in the natural way via the pairing operation.
That is, given ˆX ∈ ˆGn×m and ˇY ∈ ˇHm×(cid:3), ˆX ˇY ∈ Tn×(cid:3). The product ˇX ˆY ∈ Tn×(cid:3)
is deﬁned similarly by switching the arguments of the pairing. Given a matrix
T = (ti,j) ∈ Zm×n
, ˆT (resp. ˇT) is the natural embedding of T in ˆG (resp. in
ˇH), that is, the matrix whose (i, j)th entry is ti,j ˆg (resp. ti,jˇh). Conversely, given
ˆT or ˇT, we use T ∈ Zn×m
for the matrix of discrete logarithms of ˆT (resp.
ˇT). We denote by In×n the identity matrix in Zn×n
i the ith element of

and en

q

q

q

610

A. Gonz´alez et al.

q (simply ei if n is clear from the context). We make
the canonical basis of Zn
extensive use of the set [n + k] × [n + k] \ {(i, i) : i ∈ [n]} and for brevity we
denote it by IN,K.

2.1 Computational Assumptions
Deﬁnition 1. Let (cid:4), k ∈ N with (cid:4) > k. We call D(cid:3),k a matrix distribution if
it outputs (in poly time, with overwhelming probability) matrices in Z(cid:3)×k
. We
deﬁne Dk := Dk+1,k and Dk the distribution of the ﬁrst k rows when A ← Dk.
Deﬁnition 2 (Matrix Diﬃe-Hellman Assumption [8]). Let D(cid:3),k be a
matrix distribution and Γ := (q, ˆG, ˇH, T, e, ˆg, ˇh) ← Gena(1λ). We say that the
D(cid:3),k-Matrix Diﬃe-Hellman (D(cid:3),k-MDDH ˆG) Assumption holds relative to Gena if
(cid:7)(cid:7)(cid:7) = negl(λ),
for all PPT adversaries D,
q , ˆu ← ˆG(cid:3)

(cid:7)(cid:7)(cid:7)Pr[D(Γ, ˆA, ˆAw) = 1] − Pr[D(Γ, ˆA, ˆu) = 1]

where the probability is taken over Γ ← Gena(1λ), A ← D(cid:3),k, w ← Zk
and the coin tosses of adversary D.

AdvD(cid:2),k,Gena(D) :=

q

The D(cid:3),k-MDDH ˇH problem is deﬁned similarly. In this paper we will refer to

the following matrix distributions:

(cid:14)

(cid:15)

B

C

, U(cid:3),k : A =

(cid:16)

(cid:17)

,

a1,1 ... a1,k

.
.
.

. . .

.
.
.

a(cid:2),1 ... a(cid:2),k

Lk : A =

⎛
⎜⎝ a1 0 ... 0

0 a2 ... 0
.
.
.
.
.
.
0 0 ... ak
1 1 ... 1

. . .

.
.
.

⎞
⎟⎠,L(cid:3),k : A =

q

.

where ai, ai,j ← Zq, for each i, j ∈ [k], B ← Lk, C ← Z(cid:3)−k,k
The Lk-MDDH Assumption is the k-linear family of Decisional Assumptions
[17,27]. The L1-MDDHX, X ∈ { ˆG, ˇH}, is the Decisional Diﬃe-Hellman (DDH)
Assumption in X, and the assumption that it holds in both groups is the Symmetric 
External DH Assumption (SXDH). The L(cid:3),k-MDDH Assumption is used
in our construction to commit to multiple elements simultaneously. It can be
shown tightly equivalent to the Lk-MDDH Assumption. The U(cid:3),k Assumption is
the Uniform Assumption and is weaker than the Lk-MDDH. Additionally, we
will be using the following family of computational assumptions:
Deﬁnition 3 (Kernel Diﬃe-Hellman Assumption [24]). Let Γ ← Gena(1λ).
The Kernel Diﬃe-Hellman Assumption in ˇH (D(cid:3),k-KerMDH ˇH) says that every PPT
Algorithm has negligible advantage in the following game: given ˇA, where A ←
D(cid:3),k, ﬁnd ˆx ∈ ˆG(cid:3) \ {ˆ0}, such that ˆx(cid:4) ˇA = 0T.
The Simultaneous Pairing Assumption in ˇH (SP ˇH) is the U1-KerMDH ˇH Assumption 
and the Simultaneous Double Pairing Assumption (SDP ˇH) is the L2,3KerMDH 
ˇH Assumption. The Kernel Diﬃe-Hellman assumption is a generalization 
and abstraction of these two assumptions to other matrix distributions. The

QA-NIZK Arguments in Asymmetric Groups

611

D(cid:3),k-KerMDH ˇH Assumption is weaker than the D(cid:3),k-MDDH ˇH Assumption, since
a solution allows to decide membership in Im( ˇA).

For our construction, we need to introduce a new family of computational

assumptions.
Deﬁnition 4 (Split Kernel Diﬃe-Hellman Assumption). Let Γ←Gena(1λ).
The Split Kernel Diﬃe-Hellman Assumption in ˆG, ˇH (D(cid:3),k-SKerMDH) says that
every PPT Algorithm has negligible advantage in the following game: given ( ˆA, ˇA),
A ← D(cid:3),k, ﬁnd a pair of vectors (ˆr, ˇs) ∈ ˆG(cid:3) × ˇH(cid:3), r (cid:6)= s, such that ˆr(cid:4) ˇA = ˇs(cid:4) ˆA.
As a particular case we consider the Split Simultaneous Double Pairing
Assumption in ˆG, ˇH (SSDP) which is the L2-SKerMDH Assumption. Intuitively,
the Kernel Diﬃe-Hellman Assumption says one cannot ﬁnd a non-zero vector in
ˆG(cid:3) which is in the co-kernel of ˇA, while the new assumption says one cannot
ﬁnd a pair of vectors in ˆG(cid:3) × ˇH(cid:3) such that the diﬀerence of the vector of their
discrete logarithms is in the co-kernel of ˇA. The name “split” comes from the
idea that the output of a successful adversary would break the Kernel DiﬃeHellman 
Assumption, but this instance is “split” between the groups ˆG and ˇH.
When k = 1, the D(cid:3),k-SKerMDH Assumption does not hold. The assumption is
generically as least as hard as the standard,“non-split” assumption in symmetric
bilinear groups. This means, in particular, that in Type III bilinear groups, one
can use the SSDP Assumption with the same security guarantees as the SDP
Assumption, which is a well established assumption (used for instance in [2,23]).
Lemma 1. If D(cid:3),k-KerMDH holds in generic symmetric bilinear groups, then
D(cid:3),k-SKerMDH holds in generic asymmetric bilinear groups.
Suppose there is a generic algorithm which breaks the D(cid:3),k-SKerMDH Assumption.
 Intuitively, given two diﬀerent encodings of A ← D(cid:3),k, ( ˆA, ˇA), this algorithm 
ﬁnds ˆr and ˇs, r (cid:6)= s such that ˆr(cid:4) ˇA = ˇs(cid:4) ˆA. But since the algorithm is
generic, it also works when ˆG = ˇH, and then ˆr−ˆs is a solution to D(cid:3),k-KerMDH.
We provide a formal proof in the full version.

2.2 Groth-Sahai NIZK Proofs

The GS proof system allows to prove satisﬁability of a set of quadratic equations
in a bilinear group. The admissible equation types must be in the following form:

my(cid:18)

mx(cid:18)

mx(cid:18)

my(cid:18)

f(αj, yj) +

f(xi, βi) +

f(xi, γi,jyj) = t,

(1)

j=1

i=1

i=1

j=1

where A1, A2, AT are Zq-vector spaces equipped with some bilinear map f :
A1 × A2 → AT , α ∈ Amy
, t ∈ AT . The
modules and the map f can be deﬁned in diﬀerent ways as: (a) in pairingproduct 
equations (PPEs), A1 = ˆG, A2 = ˇH, AT = T, f(ˆx, ˇy) = ˆxˇy ∈ T, in
which case t = 0T, (b1) in multi-scalar multiplication equations in ˆG (MMEs),

, Γ = (γi,j) ∈ Z

mx×my

1 , β ∈ Amx

2

q

612

A. Gonz´alez et al.

A1 = ˆG, A2 = Zq, AT = ˆG, f(ˆx, y) = yˆx ∈ ˆG, (b2) MMEs in ˇH (MMEs),
A1 = Zq, A2 = ˇH, AT = ˇH, f(x, ˇy) = xˇy ∈ ˇH, and (c) in quadratic equations
in Zq (QEs), A1 = A2 = AT = Zq, f(x, y) = xy ∈ Zq. An equation is linear if
Γ = 0, it is two-sided linear if both α (cid:6)= 0 and β (cid:6)= 0, and one-sided otherwise.
We brieﬂy recall some facts about GS proofs in the SXDH instantiation used
in the rest of the paper. Let Γ ← Gena(1λ), u2, v2 ← L1, u1 := e1 + μu2, v1 :=
e1 + v2, μ,  ← Zq. The common reference string is crsGS := (Γ, ˆu1, ˆu2, ˇv1, ˇv2)
and is known as the perfectly sound CRS. There is also a perfectly witnessindistinguishable 
CRS, with the only diﬀerence being that u1 := μu2 and v1 :=
v2 and the simulation trapdoor is (μ, ). These two CRS distributions are computationally 
indistinguishable. Implicitly, crsGS deﬁnes the maps:

ι1 : ˆG ∪ Zq → ˆG2,
ι2 : ˇH ∪ Zq → ˇH2,

(cid:4)
ι1(ˆx) := (ˆx, ˆ0)
(cid:4)
ι2(ˇy) := (ˇy, ˇ0)

,

,

ι1(x) := xˆu1.
ι2(y) := yˇv1.

The maps ιX, X ∈ {1, 2} can be naturally extended to vectors of arbitrary length
X and we write ιX(δ) for (ιX(δ1)|| . . .||ιX(δm)).
δ ∈ Am
The perfectly sound CRS deﬁnes perfectly binding commitments for any
variable in A1 or A2. Speciﬁcally, the commitment to x ∈ A1 is ˆc := ι1(x) +
r1(ˆu1 − ˆe1) + r2ˆu2 ∈ ˆG2, and to y ∈ A2 is ˇd := ι2(y) + s1(ˇv1 − ˇe1) + s2ˇv2, where
r1, r2, s1, s2 ← Zq, except if A1 = Zq (resp. A2 = Zq) in which case r1 = 0 (resp.
s1 = 0).

2.3 Quasi-Adaptive NIZK Arguments

We recall the deﬁnition of Quasi Adaptive NIZK (QA-NIZK) Arguments of
Jutla et al. [19]. A QA-NIZK proof system enables to prove membership in a
language deﬁned by a relation Rρ, which in turn is completely determined by
some parameter ρ sampled from a distribution DΓ . We say that DΓ is witness
samplable if there exist an eﬃcient algorithm that samples (ρ, ω) such that ρ is
distributed according to DΓ , and membership of ρ in the parameter language Lpar
can be eﬃciently veriﬁed with ω. While the Common Reference String can be set
based on ρ, the zero-knowledge simulator is required to be a single probabilistic
polynomial time algorithm that works for the whole collection of relations RΓ .
A tuple of algorithms (K0, K1, P, V) is called a QA-NIZK proof system for
witness-relations RΓ = {Rρ}ρ∈sup(DΓ ) with parameters sampled from a distribution 
DΓ over associated parameter language Lpar, if there exists a probabilistic
polynomial time simulator (S1, S2), such that for all non-uniform PPT adversaries 
A1, A2, A3 we have:

Quasi-Adaptive Completeness:

Pr

(cid:19)
Γ ← K0(1λ); ρ ← DΓ ; ψ ← K1(Γ, ρ); (x, w) ← A1(Γ, ψ);
π ← P(ψ, x, w) : V(ψ, x, π) = 1 if Rρ(x, w)

(cid:20)

= 1.

QA-NIZK Arguments in Asymmetric Groups

613

(cid:19)
Computational Quasi-Adaptive Soundness:
Γ ← K0(1λ); ρ ← DΓ ; ψ ← K1(Γ, ρ);
(x, π) ← A2(Γ, ψ) : V(ψ, x, π) = 1 and ¬(∃w : Rρ(x, w))

Pr

(cid:20)

≈ 0.

Perfect Quasi-Adaptive Zero-Knowledge:

Pr[Γ ← K0(1λ); ρ ← DΓ ; ψ ← K1(Γ, ρ) : A
Pr[Γ ← K0(1λ); ρ ← DΓ ; (ψ, τ) ← S1(Γ, ρ) : A

P(ψ,·,·)
3

(Γ, ψ) = 1] =

S(ψ,τ,·,·)
3

(Γ, ψ) = 1]

where
– P(ψ,·,·) emulates the actual prover. It takes input (x, w) and outputs a
proof π if (x, w) ∈ Rρ. Otherwise, it outputs ⊥.
– S(ψ, τ,·,·) is an oracle that takes input (x, w). It outputs a simulated
proof S2(ψ, τ, x) if (x, w) ∈ Rρ and ⊥ if (x, w) /∈ Rρ.

Note that ψ is the CRS in the above deﬁnitions. We assume that ψ contains an
encoding of ρ, which is thus available to V.

2.4 QA-NIZK Argument for Linear Spaces

In this section we recall the two constructions of QA-NIZK arguments of membership 
in linear spaces given by Kiltz and Wee [21], for the language:

L ˆM := {ˆx ∈ ˆGn : ∃w ∈ Zt

q, ˆx = ˆMw}.

Algorithm K0(1λ) just outputs Γ := (q, ˆG, ˇH, T, e, ˆg, ˇh) ← Gena(1λ), the rest of
the algorithms are described in Fig. 1.

(S1(Γ, ˆM, n))
˜k×n
q

K1(Γ, ˆM, n)
A ← (cid:21)Dk, Δ ← Z
ˇAΔ := Δ(cid:4) ˇA, ˆMΔ := Δ ˆM
Return crs := ( ˆMΔ, ˇAΔ, ˇA)
(τsim := Δ)

P(crs, ˆx, w) \\ˆx = ˆMw
Return ˆσ := ˆMΔw.

S2(crs, ˆx, τsim)
Return ˆσ := Δˆx

V(crs, ˆx, ˆσ)
Return (ˆx(cid:4) ˇAΔ = ˆσ(cid:4) ˇA)

Fig. 1. The ﬁgure describes ΨDk when (cid:2)Dk = Dk and ˜k = k + 1 and ΨDk
when (cid:2)Dk = Dk
and ˜k = k. Both are QA-NIZK arguments for L ˆM. ΨDk is the construction of [21,
Sect. 3.1], which is a generalization of Libert et al ’s QA-NIZK [22] to any Dk-KerMDHˇH
Assumption. ΨDk

is the construction of [21, Sect. 3.2.].

Theorem 1 (Theorem 1 of [21]). If (cid:21)Dk = Dk and ˜k = k+1, Fig. 1 describes a
QA-NIZK proof system with perfect completeness, computational adaptive soundness 
based on the Dk-KerMDH ˇH Assumption, perfect zero-knowledge, and proof
size k + 1.

614

A. Gonz´alez et al.

Theorem 2 (Theorem 2 of [21]). If (cid:21)Dk = Dk and ˜k = k, and DΓ is a witness 
samplable distribution, Fig. 1 describes a QA-NIZK proof system with perfect 
completeness, computational adaptive soundness based on the Dk-KerMDH ˇH
Assumption, perfect zero-knowledge, and proof size k.

3 New QA-NIZK Arguments in Asymmetric Groups

In this section we construct three QA-NIZK arguments of membership in diﬀerent 
subspaces of ˆGm× ˇHn. Their soundness relies on the Split Kernel Assumption.

3.1 Argument of Membership in Subspace Concatenation

Figure 2 describes a QA-NIZK Argument of Membership in the language

L ˆM, ˇN := {(ˆx, ˇy) : ∃w ∈ Zt

q, ˆx = ˆMw, ˇy = ˇNw} ⊆ ˆGm × ˇHn.
(cid:14)
(cid:23)
(cid:22)

(cid:15)

We refer to this as the Concatenation Language, because if we deﬁne P as the
concatenation of ˆM, ˇN, that is P :=
is in the
span of P.

, then (ˆx, ˇy) ∈ L ˆM, ˇN iﬀ

ˆM
ˇN

ˆx
ˇy

(S1(Γ, ˆM, ˇN, m, n))

˜k×t
q

˜k×n
q

, Z ← Z

K1(Γ, ˆM, ˇN, m, n)
A ← (cid:2)Dk
, Ξ ← Z
Λ ← Z
˜k×m
q
(cid:2) ˇA
ˇAΛ := Λ
(cid:2) ˆA
ˆAΞ := Ξ
ˆMΛ := Λ ˆM + ˆZ
ˇNΞ := Ξ ˇN − ˇZ
Return crs := ( ˆMΛ, ˇAΛ, ˇA, ˇNΞ ,
ˆAΞ , ˆA).
(τsim := (Λ, Ξ).)

˜k
q

S2(crs, (ˆx, ˇy), τsim)
z ← Z
ˆρ := Λˆx + ˆz
ˇσ := Ξˇy − ˇz
Return ( ˆρ, ˇσ).

˜k
q

P(crs, ˆx, ˇy, w)
\\(ˆx = ˆMw, ˇy = ˇNw)
z ← Z
ˆρ := ˆMΛw + ˆz
ˇσ := ˇNΞ w − ˇz
Return ( ˆρ, ˇσ).

V(crs, (ˆx, ˇy), ( ˆρ, ˇσ))
Return (ˆx
= ˇσ(cid:2) ˆA − ˇy

(cid:2) ˇAΛ − ˆρ(cid:2) ˇA
(cid:2) ˆAΞ ).

Fig. 2. Two QA-NIZK Arguments for L ˆM, ˇN. ΨDk,spl is deﬁned for (cid:2)Dk = Dk and ˜k =
k + 1, and is a generalization of [21] Sect. 3.1 in two groups. The second construction
ΨDk,spl corresponds to (cid:2)Dk = Dk and ˜k = k, and is a generalization of [21] Sect. 3.2 in
two groups. Computational soundness is based on the Dk-SKerMDH Assumption. The
CRS size is (˜kk + ˜kt + mk)g + (˜kk + ˜kt + nk)h and the proof size ˜k(g + h). Veriﬁcation
requires 2˜kk + (m + n)k pairing computations.

Soundness Intuition. If we ignore for a moment that ˆG, ˇH are diﬀerent groups,
ΨDk,spl (resp. ΨDk,spl) is almost identical to ΨDk (resp. to ΨDk
) for the language
L ˆP, and Δ := (Λ||Ξ), where Λ ∈ Z
. Further, the information
that an unbounded adversary can extract from the CRS about Δ is:

, Ξ ∈ Z

˜k×m
q

˜k×n
q

QA-NIZK Arguments in Asymmetric Groups

615

(cid:2)
(cid:4)
PΔ = ΛM + ΞN, AΔ = Δ(cid:4)A =
(cid:2)
(cid:4)
MΛ = ΛM + Z, NΞ = ΞN − Z,

1.

2.

(cid:3)(cid:5)
(cid:2)
from crsΨD
Λ(cid:4)A
Ξ(cid:4)A

(cid:3)(cid:5)

Λ(cid:4)A
(cid:3)
Ξ(cid:4)A
AΛ
=
AΞ

,

k

from crsΨD

k ,spl.

k

and crsΨD

Given that the matrix Z is uniformly random, crsΨD
k ,spl reveal the
same information about Δ to an unbounded adversary. Therefore, as the proof
of soundness is essentially based on the fact that parts of Δ are information
theoretically hidden to the adversary, the original proof of [21] can be easily
adapted for the new arguments. The proofs can be found in the full version.

Theorem 3. If (cid:21)Dk = Dk and ˜k = k + 1, Fig. 2 describes a QA-NIZK proof
system with perfect completeness, computational adaptive soundness based on
the Dk-SKerMDH Assumption, and perfect zero-knowledge.
Theorem 4. If (cid:21)Dk = Dk and ˜k = k, and DΓ is a witness samplable distribution,
 Fig. 2 describes a QA-NIZK proof system with perfect completeness, computational 
adaptive soundness based on the Dk-SKerMDH Assumption, and perfect
zero-knowledge.

3.2 Argument of Sum in Subspace

We can adapt the previous construction to the Sum in Subspace Language,

L ˆM, ˇN,+ := {(ˆx, ˇy) ∈ ˆGm × ˇHm : ∃w ∈ Zt

q, x + y = (M + N)w}.

We deﬁne two proof systems ΨDk,+, ΨDk,+ as in Fig. 2, but now with Λ = Ξ.
Intuitively, soundness follows from the same argument because the information
about Λ in the CRS is now Λ(cid:4)A, Λ(M + N).

3.3 Argument of Equal Opening in Diﬀerent Groups

Given the results for Subspace Concatenation of Sect. 3.1, it is direct to construct
constant-size NIZK Arguments of membership in:

Lcom, ˆU, ˇV,ν :=

(cid:4)
(ˆc, ˇd) ∈ ˆGm × ˇHn : ∃(w, r, s), ˆc = ˆU

(cid:2)

(cid:3)

w
r

, ˇd = ˇV

(cid:2)

(cid:3)(cid:5)

w
s

,

q

q

q

× Z˜n−ν

q . The witness is (w, r, s) ∈ Zν

×
. This language is interesting because it can express the fact that

where ˆU ∈ ˆGm× ˜m, ˇV ∈ ˇHn×˜n and w ∈ Zν
Z ˜m−ν
(ˆc, ˇd) are commitments to the same vector w ∈ Zν
The construction is an immediate consequence of the observation that
Lcom, ˆU, ˇV,ν can be rewritten as some concatenation language L ˆM, ˇN. Denote by
ˆU1 the ﬁrst ν columns of ˆU and ˆU2 the remaining ones, and ˇV1 the ﬁrst ν
columns of ˇV and ˇV2 the remaining ones. If we deﬁne:

q in diﬀerent groups.

ˆM := ( ˆU1|| ˆU2||ˆ0m×(˜n−ν))

ˇN := ( ˇV1||ˇ0n×( ˜m−ν)|| ˇV2).

616

A. Gonz´alez et al.

then it is immediate to verify that Lcom, ˆU, ˇV,ν = L ˆM, ˇN.
In the rest of the paper, we denote as ΨDk,com the proof system for Lcom, ˆU, ˇV,ν
which corresponds to ΨDk,spl for L ˆM, ˇN, where ˆM, ˇN are the matrices deﬁned
above. Note that for commitment schemes we can generally assume ˆU, ˇV to be
drawn from some witness samplable distribution.

4 Aggregating Groth-Sahai Proofs in Asymmetric

Groups

Jutla and Roy [20] show how to aggregate GS proofs of two-sided linear equations
in symmetric bilinear groups. In the original construction of [20] soundness is
based on a decisional assumption (a weaker variant of the 2-Lin Assumption).
Its natural generalization in asymmetric groups (where soundness is based on
the SXDH Assumption) only enables to aggregate the proofs of one-sided linear
equations.

In this section, we revisit their construction. We give an alternative, simpler,
proof of soundness under a computational assumption which avoids altogether
the “Switching Lemma” of [20]. Further, we extend it to two-sided equations in
the asymmetric setting. For one-sided linear equations we can prove soundness
under any kernel assumption and for two-sided linear equations, under any split
kernel assumption.2
Let A1, A2, AT be Zq-vector spaces compatible with some Groth-Sahai equation 
as detailed in Sect. 2.2. Let DΓ be a witness samplable distribution which
outputs n pairs of vectors (α(cid:3), β(cid:3)) ∈ Amy
, (cid:4) ∈ [n], for some mx, my ∈ N.
Given some ﬁxed pairs (α(cid:3), β(cid:3)), we deﬁne, for each ˜t ∈ An
T , the set of equations
S˜t as:
S˜t =

(cid:24)
(cid:25)
E(cid:3)(x, y) = ˜t(cid:3) : (cid:4) ∈ [n]

, E(cid:3)(x, y) :=

f(α(cid:3),j, yj) +

× Amx

2

1

(cid:18)
j∈[my]

(cid:18)
i∈[mx]

f(xi, β(cid:3),i).

We note that, as in [20], we only achieve quasi-adaptive aggregation, that is,
the common reference string is speciﬁc to a particular set of equations. More
speciﬁcally, it depends on the constants α(cid:3), β(cid:3) (but not on ˜t(cid:3), which can be
chosen by the prover) and it can be used to aggregate the proofs of S˜t, for any ˜t.
Given the equation types for which we can construct NIZK GS proofs, there
always exists (1) t(cid:3) ∈ A1, such that ˜t(cid:3) = f(t(cid:3), base2) or (2) ˜t(cid:3) ∈ A2, such that
˜t(cid:3) = f(base1, t(cid:3)), where basei = 1 if Ai = Zq, base1 = ˆg if A1 = ˆG and base2 = ˇh
if A2 = ˇH. This is because ˜t(cid:3) = 0T for PPEs, and AT = Ai, for some i ∈ [2], for
other types of equations. For simplicity, in the construction we assume that (1)
is the case, otherwise change ι2(a(cid:3),i), ι1(t(cid:3)) for ι1(a(cid:3),i), ι2(t(cid:3)) in the construction
below.
2 The results of [20] are based on what they call the “Switching Lemma”. As noted in
[24], it is implicit in the proof of this lemma that the same results can be obtained
under computational assumptions.

QA-NIZK Arguments in Asymmetric Groups

617

(cid:24)

⎞
⎠

crs :=

follows:

ι1(a(cid:3),iα(cid:3)),

ι2(a(cid:3),iβ(cid:3)),

× Amy
2 .

1

⎧⎨
⎩

(cid:18)
(cid:3)∈[n]

⎛
⎝crsGS,

K0(1Λ): Return Γ := (q, ˆG, ˇH, T, e, ˆg, ˇh) ← Gena(1Λ).
DΓ : DΓ is some distribution over n pairs of vectors (α(cid:3), β(cid:3)) ∈ Amx
K1(Γ,S˜t): Let A = (ai,j) ← Dn,k. Deﬁne
(cid:18)
(cid:25)
ι2(a(cid:3),i) : (cid:4) ∈ [n]
(cid:3)∈[n]

⎫⎬
⎭
: i ∈ [k]
P(Γ,S˜t, x, y): Given a solution x = x, y = y to S˜t, the prover proceeds as
Commit to all xj ∈ A1 as ˆcj ← CommGS(xj), and to all yj ∈ A2 as
ˇdj ← CommGS(yj).
For each i ∈ [k], run the GS prover for the equation
(cid:6)
(cid:3)∈[n] f(t(cid:3), a(cid:3),i) to obtain the proof, which is a pair ( ˆΘi, ˇΠi).

(cid:6)
(cid:3)∈[n] a(cid:3),iE(cid:3)(x, y) =

V(crs,S˜t,{ˆcj}j∈[mx],{ˇdj}j∈[my],{ ˆΘi, ˇΠi}i∈[k]): For each i ∈ [k], run the GS

Output ({ˆcj : j ∈ [mx]},{ˇdj : j ∈ [my]},{( ˇΠi, ˆΘi) : i ∈ [k]}).
veriﬁer for equation (cid:18)
(cid:3)∈[n]

(cid:18)
(cid:3)∈[n]

a(cid:3),iE(cid:3)(x, y) =

f(t(cid:3), a(cid:3),i).

Theorem 5. The above protocol is a QA-NIZK proof system for two-sided linear
equations.

Proof. Completeness. Observe that
(cid:18)
j∈[my]

(cid:18)
(cid:3)∈[n]

a(cid:3),iE(cid:3)(x, y) =

f(a(cid:3),iα(cid:3),j, yj) +

(cid:18)
j∈[mx]

f(xj, a(cid:3),iβ(cid:3),j).

(2)

Completeness follows from the observation that to eﬃciently compute the proof,
the GS Prover [16] only needs, a part from a satisfying assignment to the equation,
 the randomness used in the commitments, plus a way to compute the
inclusion map of all involved constants, in this case ι1(a(cid:3),iα(cid:3),j), ι2(a(cid:3),iβ(cid:3),j) and
the latter is part of the CRS.
Soundness. We change to a game Game1 where we know the discrete logarithm
of the GS commitment key, as well as the discrete logarithms of (α(cid:3), β(cid:3)), (cid:4) ∈
[n]. This is possible because they are both chosen from a witness samplable
distribution.
We now prove that an adversary against the soundness in Game1 can be used
to construct an adversary B against the Dn,k-SKerMDH Assumption, where Dn,k
is the matrix distribution used in the CRS generation.
B receives a challenge ( ˆA, ˇA) ∈ ˆGn×k × ˇHn×k. Given all the discrete logarithms 
that B knows, it can compute a properly distributed CRS even without
knowledge of the discrete logarithm of ˆA. The soundness adversary outputs
commitments {ˆcj}j∈[mx],{ˇdj}j∈[my] together with proofs { ˆΘi, ˇΠi}i∈[k], which
are accepted by the veriﬁer.

618

A. Gonz´alez et al.

n ˆx − ˆtn), ˇσ := (α(cid:4)

Let x (resp. ˆx) be the vector of openings of {ˆcj}j∈[mx] in A1 (resp. in the
group ˆG) and y (resp. ˇy) the vector of openings of {ˇdj}j∈[my] in A2 (resp. in
the group ˇH). If A1 = ˆG (resp. A2 = ˇH) then x = ˆx (resp. y = ˇy). The vectors
ˆx and ˇy are eﬃciently computable by B who knows the discrete logarithm of
1 ˆx −
the commitment keys. We claim that the pair ( ˆρ, ˇσ) ∈ ˆGn × ˇHn, ˆρ := (β(cid:4)
n ˇy), solves the Dn,k-SKerMDH challenge.
1 ˇy, . . . , α(cid:4)
ˆt1, . . . , β(cid:4)
First, observe that if the adversary is successful in breaking the soundness
(cid:6)
property, then ρ (cid:6)= σ. Indeed, if this is the case there is some index (cid:4) ∈ [n] such
that E(cid:3)(x, y) (cid:6)= ˜t(cid:3), which means that
j∈[mx] f(xj, β(cid:3),j)−
f(t(cid:3), base2). If we take discrete logarithms in each side of the equation, this
inequality is exactly equivalent to ρ (cid:6)= σ.

(cid:6)
(cid:6)
Further, because GS proofs have perfect soundness, x and y satisfy the equa-
(cid:3)∈[n] f(t(cid:3), a(cid:3),i), for all i ∈ [k], Thus, for all i ∈ [k],
(cid:3)∈[n] a(cid:3),iE(cid:3)(x, y) =
(cid:18)
(cid:22)
(cid:3) ˆx − ˆt(cid:3)
β(cid:4)
(cid:3)∈[n]

j∈[my] f(α(cid:3),j, yj) (cid:6)=

(cid:18)
(cid:3)∈[n]

(cid:6)

tion

ˆa(cid:3),i

α(cid:4)
(cid:3) ˇy

,

(cid:23)

=

(cid:22)

(cid:23)

ˇa(cid:3),i

(3)

which implies that ˆρ ˇA = ˇσ ˆA.
Zero-Knowledge. The same simulator of GS proofs can be used. Speciﬁcally the
simulated proof corresponds to k simulated GS proofs.

One-Sided Equations. In the case when α(cid:3) = 0 and ˜t(cid:3) = f(t(cid:3), base2) for
some t(cid:3) ∈ A1, for all (cid:4) ∈ [n], proofs can be aggregated under a standard
Kernel Assumption (and thus, in asymmetric bilinear groups we can choose
k = 1). Indeed, in this case, in the soundness proof, the adversary B receives
ˇA ∈ ˇHn×k, an instance of the Dn,k − KerMDH ˇH problem. The adversary B
n ˆx − ˆtn) as a solution to the challenge. To see
outputs ˆρ := (β(cid:4)
(cid:6)
why this works, note that, when α(cid:3) = 0 for all (cid:4) ∈ [n], equation (3) reads
= 0T and thus ˆρ ˇA = 0T. The case when β(cid:3) = 0 and
(cid:3)∈[n] ˇa(cid:3),i
˜t(cid:3) = f(base1, t(cid:3)) for some t(cid:3) ∈ A2, for all (cid:4) ∈ [n], is analogous.

1 ˆx − ˆt1, . . . , β(cid:4)

(cid:3) ˆx − ˆt(cid:3)
β(cid:4)

(cid:22)

(cid:23)

5 QA-NIZK Arguments for Bit-Strings

We construct a constant-size QA-NIZK for proving that a perfectly binding
commitment opens to a bit-string. That is, we prove membership in the language:

L ˆU,bits := {ˆc ∈ ˆGn+m : ˆc := ˆU1b + ˆU2w, (b, w) ∈ {0, 1}n × Zm

q

},

where ˆU := ( ˆU1, ˆU2) ∈ ˆG(n+m)×n × ˆG(n+m)×m deﬁnes perfectly binding and
computationally hiding commitment keys. The witness for membership is (b, w)
and ˆU ← DΓ , where DΓ is some witness samplable distribution.
To prove that a commitment in ˆG opens to a vector of bits b, the usual
strategy is to compute another commitment ˇd ∈ ˇH¯n to a vector ¯b ∈ Zn
q and
prove (1) bi(bi − 1) = 0, for all i ∈ [n], and (2) bi − bi = 0, for all i ∈ [n].

QA-NIZK Arguments in Asymmetric Groups

619

For statement (2), since ˆU is witness samplable, we can use our most eﬃcient
QA-NIZK from Sect. 3.3 for equal opening in diﬀerent groups. Under the SSDP
Assumption, which is the SKerMDH Assumption of minimal size conjectured to
hold in asymmetric groups, the proof is of size 2(g + h). Thus, the challenge is to
aggregate n equations of the form bi(bi−1) = 0. We note that this is a particular
case of the problem of aggregating proofs of quadratic equations, which was left
open in [20].

We ﬁnally remark that the proof must include ˇd and thus it may be not
of size independent of n. However, it turns out that ˇd needs not be perfectly
binding, in fact ¯n = 2 suﬃces.

Intuition. A prover wanting to show satisﬁability of the equation x(y − 1) = 0
using GS proofs, will commit to a solution x = b and y = b as ˆc = bˆu1 + rˆu2
and ˇd = bˇv1 + sˇv2, for r, s ← Zq, and then give a pair ( ˆθ, ˇπ) ∈ ˆG2 × ˇH2 which
satisﬁes the following veriﬁcation equation3:
= ˆu2 ˇπ(cid:4)

ˇd − ˇv1

+ ˆθˇv

(cid:23)(cid:4)

(4)

(cid:22)

ˆc

(cid:4)
2 .

The reason why this works is that, if we express both sides of the equation in
the basis of T2×2 given by {ˆu1ˇv(cid:4)
}, the coeﬃcient of ˆu1ˇv(cid:4)
is b(b − 1) on the left side and 0 on the right side (regardless of ( ˆθ, ˇπ)). Our
observation is that the veriﬁcation equation can be abstracted as saying:

2 , ˆu2ˇv(cid:4)

1 , ˆu1ˇv(cid:4)

2

1

1 , ˆu2ˇv(cid:4)
(cid:23)(cid:4) ∈ Span(ˆu2ˇv

(cid:22)

ˇd − ˇv1

ˆc

(cid:4)
1 , ˆu1ˇv

(cid:4)
2 , ˆu2ˇv

2 ) ⊂ T2×2.
(cid:4)

(5)

Now consider commitments to (b1, . . . , bn) and (b1, . . . , bn) constructed with
some commitment key {(ˆgi, ˇhi) : i ∈ [n + 1]} ⊂ ˆGn × ˇHn, for some n ∈ N, to
i∈[n] biˇhi +
be determined later, and deﬁned as ˆc :=
sˇhn+1, r, s ← Zq. Suppose for a moment that {ˆgi
: i, j ∈ [n + 1]} is a set of
⎞
linearly independent vectors. Then,
⎠ ∈ Span{ˆgi

(cid:6)
i∈[n] biˆgi + rˆgn+1, ˇd :=

j : (i, j) ∈ IN,1}
(cid:4)
ˇh

⎛
⎝ˇd

(cid:4) −

(cid:4)
ˇh
j

(cid:6)

ˇh(cid:4)

(6)

ˆc

j

(cid:18)
j∈[n]

in the left side of the equation.

if and only if bi(bi − 1) = 0 for all i ∈ [n], because bi(bi − 1) is the coordinate of
ˆgiˇh(cid:4)
i
Equation 6 suggests to use one of the constant-size QA-NIZK Arguments for
linear spaces to get a constant-size proof that bi(bi − 1) = 0 for all i ∈ [n].
Unfortunately, these arguments are only deﬁned for membership in subspaces in
ˆGm or ˇHm but not in Tm. Our solution is to include information in the CRS
to “bring back” this statement from T to ˆG, i.e. the matrices ˆCi,j := ˆgih(cid:4)
j , for
each (i, j) ∈ IN,1. Then, to prove that bi(bi − 1) = 0 for all i ∈ [n], the prover
3 For readers familiar with the Groth-Sahai notation, Eq. (4) corresponds to
c • (d − ι2(1)) = u2 • π + θ • v2.

620

A. Gonz´alez et al.

computes ˆΘb(b−1) as a linear combination of C := { ˆCi,j : (i, j) ∈ IN,1} (with
coeﬃcients which depend on b, b, r, s) such that

⎛
⎝ˇd −

ˆc

⎞
⎠(cid:4)

(cid:18)
j∈[n]

ˇhj

= ˆΘb(b−1)

ˇIn×n,

(7)

j

With this change, the statement ˆΘb(b−1)

∈ Span(C).
and gives a QA-NIZK proof of ˆΘb(b−1)
This reasoning assumes that {ˆgih(cid:4)
} (or equivalently, { ˆCi,j}) are linearly
independent, which can only happen if n ≥ n + 1. If that is the case, the proof
∈ ˆGn×n and this matrix is part of the
cannot be constant because ˆΘb(¯b−1)
proof. Instead, we choose ˆg1, . . . , ˆgn+1 ∈ ˆG2 and ˇh1, . . . , ˇhn+1 ∈ ˇH2, so that
{ ˆCi,j} ⊆ ˆG2×2. Intuitively, this should still work because the prover receives
these vectors as part of the CRS and he does not know their discrete logarithms,
so to him, they behave as linearly independent vectors.
∈ Span(C) seems no longer meaningful,
 as Span(C) is all of ˆG2×2 with overwhelming probability. But this is not
the case, because by means of decisional assumptions in ˆG2 and in ˇH2, we switch
to a game where the matrices ˆCi,j span a non-trivial space of ˆG2×2. Speciﬁcally,
to a game where ˆCi∗,i∗ /∈ Span(C) and i
∗ ← [n] remains hidden to the adversary.
 Once we are in such a game, perfect soundness is guaranteed for equation
bi∗(¯bi∗ − 1) = 0 and a cheating adversary is caught with probability at least 1/n.
We think this technique might be of independent interest.
The last obstacle is that, using decisional assumptions on the set of vectors
{ˇhj}j∈[n+1] is incompatible with using the discrete logarithms of ˇhj to compute
the matrices ˆCi,j := ˆgih(cid:4)
j given in the CRS. To account for the fact that, in
some games, we only know gi ∈ Zq and, in some others, only hj ∈ Zq, we replace
each matrix ˆCi,j by a pair ( ˆCi,j, ˇDi,j) which is uniformly distributed conditioned
on Ci,j + Di,j = gih(cid:4)
j . This randomization completely hides the group in which
we can compute gih(cid:4)
j . Finally, we use our QA-NIZK Argument for sum in a
subspace (Sect. 3.2) to prove membership in this space.
Instantiations. We discuss in detail two particular cases of languages L ˆU,bits.
First, in Sect. 5.1 we discuss the case when
(a) ˆc is a vector in ˆGn+1, ˆun+1 ← Ln+1,1 and ˆU1 :=

∈ ˆG(n+1)×n, ˆU2 :=

(cid:3)

(cid:2)
ˆIn×n
ˆ01×n

ˆun+1 ∈ ˆGn+1, ˆU = ( ˆU1|| ˆU2).

(cid:6)
In this case, the vectors ˆgi in the intuition are deﬁned as ˆgi = Δˆui, where Δ ←
2×(n+1)
i∈[n] biˆui + wˆun+1.
Z
q
Then in Sect. 5.3 we discuss how to generalize the construction for a) to

, and the commitment to b is computed as ˆc :=

QA-NIZK Arguments in Asymmetric Groups

621

(b) ˆc is the concatenation of n GS commitments. That is, given the GS CRS

crsGS = (Γ, ˆu1, ˆu2, ˇv1, ˇv2), we deﬁne,

⎛
⎜⎝ˆu1 . . . ˆ0
...
...
...
ˆ0 . . . ˆu1

⎞
⎟⎠ ∈ ˆG2n×n, ˆU2 :=

⎞
⎟⎠ ∈ ˆG2n×n.

⎛
⎜⎝ˆu2 . . . ˆ0
...
...
...
ˆ0 . . . ˆu2

ˆU1 :=

Although the proof size is constant, in both of our instantiations the commitment 
size is Θ(n). Speciﬁcally, (n + 1)g for case a) and 2ng for case b).

5.1 The Scheme
K0(1Λ): Return Γ := (q, ˆG, ˇH, T, e, ˆg, ˇh) ← Gena(1Λ).
DΓ : The distribution DΓ over ˆG(n+1)×(n+1) is some witness samplable distri-
(cid:22)
bution which deﬁnes the relation RΓ = {R ˆU} ⊆ ˆGn+1 × ({0, 1}n × Zq),
. The relation Rpar
where ˆU ← DΓ , such that (ˆc,(cid:13)b, w(cid:14)) ∈ R ˆU iﬀ ˆc = ˆU
consists of pairs ( ˆU, U) where ˆU ← DΓ .
q and for all i ∈ [n], hi := ihn+1, where i ← Zq.
Deﬁne ˇH := (ˇh1|| . . .||ˇhn+1). Choose Δ ← Z
, deﬁne ˆG := Δ ˆU and
ˆgi := Δˆui ∈ ˆG2, for all i ∈ [n + 1]. Let a ← L1 and deﬁne ˇaΔ := Δ(cid:4)ˇa ∈
ˇHn+1. For any pair (i, j) ∈ IN,1, let Ti,j ← Z2×2

K1(Γ, ˆU): Let hn+1 ← Z2

2×(n+1)
q

and set:

(cid:23)

b
w

q

(cid:4)
ˆCi,j := ˆgih
j

− ˆTi,j ∈ ˆG2×2,

ˇDi,j := ˇTi,j ∈ ˇH2×2.

Note that ˆCi,j can be eﬃciently computed as hj ∈ Z2
crete logarithms of ˇhj.

q is the vector of disbe 
an instance of our proof system for Equal Opening (Sect. 3.3).

Let ΨDk,+ be the proof system for Sum in Subspace (Sect. 3.2) and ΨDk,com
← K1(Γ,

← K1(Γ,{ ˆCi,j, ˇDi,j}(i,j)∈IN,1) and4 crsΨD

Let crsΨD

k ,com

ˆG, ˇH, n).

k ,+

The common reference string is given by:
(cid:15)

ˆU, ˆG, ˇH,{ ˆCi,j, ˇDi,j}(i,j)∈IN,1, crsΨD
ˇa, ˇaΔ, crsΨD

crsV :=

crsP :=

(cid:14)
(cid:14)

.

k ,com

(cid:15)

k ,+, crsΨD

k ,com

,

P(crsP , ˆc,(cid:13)b, wg(cid:14)): Pick wh ← Zq, R ← Z2×2

q

1. Deﬁne

k ,+, crsΨD
(cid:2)
(cid:3)

ˆcΔ := ˆG

b
wg
2×2 (resp. in ˇH

(cid:2)
and then:

,

ˇd := ˇH

(cid:3)

.

b
wh

4 We identify matrices in ˆG

2×2) with vectors in ˆG

4 (resp. in ˇH

4).

622

A. Gonz´alez et al.

2. Compute ( ˆΘb(b−1), ˇΠb(b−1)) :=

(cid:15)
biwh( ˆCi,n+1, ˇDi,n+1) + wg(bi − 1)( ˆCn+1,i, ˇDn+1,i)
(cid:18)
j∈[n]
j(cid:6)=i

(cid:14)
(cid:18)
(cid:18)
i∈[n]
+
i∈[n]
+wgwh( ˆCn+1,n+1, ˇDn+1,n+1) + ( ˆR,− ˇR).

bi(bj − 1)( ˆCi,j, ˇDi,j)

3. Compute a proof ( ˆρ

b(b−1), ˇσ

space spanned by {Ci,j + Di,j}(i,j)∈IN,1, and a proof ( ˆρ
(ˆcΔ, ˇd) open to the same value, using b, wg, and wh.
X∈{b(b−1),b−b}(cid:14)):

V(crsV , ˆc,(cid:13)ˆcΔ, ˇd, ( ˆΘb(b−1), ˇΠb(b−1)),{( ˆρX , ˇσX)}

(8)
b(b−1)) that Θb(b−1) + ˇΠb(b−1) belongs to the
b−b) that

b−b, ˇσ

1. Check if ˆc(cid:4)ˇaΔ = ˆc(cid:4)
Δˇa.
2. Check if
(cid:18)
j∈[n]

⎛
⎝ˇd −

ˆcΔ

⎞
⎠(cid:4)

ˇhj

= ˆΘb(b−1)

ˇI2×2 + ˆI2×2 ˇΠb(b−1).

(9)

b−b) are valid proofs for ( ˆΘb(b−1),

3. Verify that ( ˆρ

b(b−1)), ( ˆρ
ˇΠb(b−1)) and (ˆcΔ, ˇd) using crsΨD

b(b−1), ˇσ

b−b, ˇσ
k ,+ and crsΨD

k ,com respectively.
If any of these checks fails, the veriﬁer outputs 0, else it outputs 1.
S1(Γ, ˆU): The simulator receives as input a description of an asymmetric bilinear
group Γ and a matrix ˆU ∈ ˆG(n+1)×(n+1) sampled according to distribution
DΓ . It generates and outputs the CRS in the same way as K1, but additionally 
it also outputs the simulation trapdoor

(cid:14)

(cid:15)

τ =

H, Δ, τΨD

k ,+, τΨD

k ,com

,

k ,com are, respectively, ΨDk,+’s and ΨDk,com’s simulation

where τΨD
trapdoors.

k ,+ and τΨD

S2(crsP , ˆc, τ): Compute ˆcΔ := Δˆc. Then pick random wh ← Zq, R ← Z2×2

and

q

deﬁne d := whhn+1. Then set:

ˆΘb(b−1)

:= ˆcΔ

⎛
⎝d −

⎞
⎠(cid:4)

(cid:18)
i∈[n]

hi

+ ˆR,

ˇΠb(b−1)

:= − ˇR.

Finally, simulate proofs ( ˆρX , ˇσX) for X ∈ {b(b − 1), b − b} using τΨD
τΨD

k ,com.

k ,+ and

QA-NIZK Arguments in Asymmetric Groups

623

5.2 Proof of Security

Completeness is proven in the full version. The following theorem guarantees
Soundness.

Theorem 6. Let AdvPS(A) be the advantage of an adversary A against the
soundness of the proof system described above. There exist PPT adversaries
∗
∗
(cid:14)
2 such that
1, P
B1, B2, B3, P

AdvPS(A) ≤ n

6/q + AdvU1, ˆG(B1) + AdvU1, ˇH(B2) + AdvSPˇH(B3)
+ AdvΨD

∗
k ,+(P
1) + AdvΨD

(cid:15)
∗
2)
k ,com(P

.

The proof follows from the indistinguishability of the following games:

(cid:22)

(cid:23)

b
wg

Game0 This game is identical to Real except that algorithm K1 does not receive

Real This is the real soundness game. The output is 1 if the adversary breaks
the soundness, i.e. the adversary submits some ˆc = ˆU
, for some
b /∈ {0, 1}n and w ∈ Zq, and the corresponding proof which is accepted
by the veriﬁer.
ˆU as a input but it samples ( ˆU, U) ∈ Rpar itself according to DΓ .
Game1 This game is identical to Game0 except that the simulator picks a random
∗ ∈ [n], and uses U to check if the output of the adversary A is such
i
that bi∗ ∈ {0, 1}. It aborts if bi∗ ∈ {0, 1}.
Game2 This game is identical to Game1 except that now the vectors ˆgi, i ∈ [n]
and i (cid:6)= i
Game3 This game is identical to Game2 except that now the vector ˇhi∗ is a
uniform vector in ˇH2, sampled independently of ˇhn+1.

∗, are uniform vectors in the space spanned by ˆgn+1.

n

Pr [Game0(A) = 1] .

It is obvious that the ﬁrst two games are indistinguishable. The rest of the
argument goes as follows (the remaining proofs are in the full version).
Lemma 2. Pr [Game1(A) = 1] ≥ 1
Lemma 3. There exists a U1-MDDH ˆG adversary B such that | Pr [Game1(A) = 1]
− Pr [Game2(A) = 1]| ≤ AdvU1, ˆG(B) + 2/q.
Proof. The adversary B receives (ˆs, ˆt) an instance of the U1-MDDH ˆG problem.
B deﬁnes all the parameters honestly except that it embeds the U1-MDDH ˆG
challenge in the matrix ˆG.
2×(n−i
∗
,
q
ˆgi∗ ← ˆG2, and deﬁnes ˆG := ( ˆEW0||ˆgi∗|| ˆEW1||ˆs). In the real algorithm K1, the
generator picks the matrix Δ ∈ Z
. Although B does not know Δ, it can
compute ˆΔ as ˆΔ = ˆGU−1, given that U is full rank and was sampled by B,
so it can compute the rest of the elements of the common reference string using
the discrete logarithms of ˆU, ˇH and ˇa.

Let ˆE := (ˆs||ˆt). B picks i

∗ ← [n], W0 ← Z

, W1 ← Z

2×(n+1)
q

2×(i
q

∗−1)

)

624

A. Gonz´alez et al.

∗, are in the space spanned by ˆgn+1 as in Game2.

In case ˆt is uniform over ˆG2, by the Schwartz-Zippel lemma det( ˆE) = 0 with
probability at most 2/q. Thus, with probability at least 1 − 2/q, the matrix ˆE
is full-rank and ˆG is uniform over ˆG2×(n+1) as in Game1. On the other hand, in
case ˆt = γˆs, all of ˆgi, i (cid:6)= i
Lemma 4. There exists a U1-MDDH ˇH adversary B such that | Pr [Game2(A) = 1]
− Pr [Game3(A) = 1]| ≤ AdvU1, ˇH(B).
∗
∗
Lemma 5. There exists a SP ˇH adversary B and soundness adversaries P
1, P
2
for ΨDk,+ and ΨDk,com such that
Pr [Game3(A) = 1] ≤ 4/q + AdvSPˇH(B) + AdvΨD

∗
k ,+(P
1) + AdvΨD

∗
k ,com(P
2).

j : (i, j) ∈ [n + 1]2 \ {(i
∗

Proof. Pr[det((gi∗||gn+1)) = 0] = Pr[det((hi∗||hn+1)) = 0] ≤ 2/q, by the
Schwartz-Zippel lemma. Then, with probability at least 1 − 4/q, gi∗h(cid:4)
i∗ is lin-
∗)}} which implies that
early independent from {gih(cid:4)
, i
i∗ /∈ Span({Ci,j + Di,j : (i, j) ∈ IN,1}}). Additionally Game3(A) = 1 implies
gi∗h(cid:4)
that bi∗ /∈ {0, 1} while the veriﬁer accepts the proof produced by A, which
is (ˆcΔ, ˇd, ( ˆΘb(b−1), ˇΠb(b−1)),{( ˆρX , ˇσX)}
X∈{b(b−1),b−b}). Since {ˇhi∗ , ˇhn+1} is a
basis of ˇH2, we can deﬁne wh, bi∗ as the unique coeﬃcients in Zq such that
ˇd = bi∗ ˇhi∗ + whˇhn+1. We distinguish three cases:
(1) If ˆcΔ (cid:6)= Δˆc, we can construct an adversary B against the SP ˇH Assumption
that outputs ˆcΔ − Δˆc ∈ ker(ˇa(cid:4)).
(2) If ˆcΔ = Δˆc but bi∗ (cid:6)= bi∗. Given that (bigi∗ , ¯bi∗hi∗) is linearly independent
from {(gi∗ , hi∗), (gn+1, hn+1)} whenever bi∗ (cid:6)= ¯bi∗, an adversary P
∗
2 against
ΨDk,com outputs the pair ( ˆρ
(3) If ˆcΔ = Δˆc and bi∗ = bi∗, then bi∗(bi∗ − 1) (cid:6)= 0. If we express Θb(b−1) +
i∗ is bi∗(bi∗ −
Πb(b−1) as a linear combination of gih(cid:4)
1) (cid:6)= 0 and thus Θb(b−1) + Πb(b−1) /∈ Span({Ci,j + Di,j : (i, j) ∈ IN,1}). The
∗
1 against ΨDk,+ outputs the pair ( ˆρ
b(b−1)) which is a
adversary P
fake proof for ( ˆΘb(b−1), ˇΠb(b−1)).
This concludes the proof of soundness. Now we prove Zero-Knowledge.

b−b) which is a fake proof for (ˆcΔ, ˇd).

j , the coordinate of gi∗h(cid:4)

b(b−1), ˇσ

b−b, ˇσ

Theorem 7. The proof system is perfect quasi-adaptive zero-knowledge.
Proof. First, note that the vector ˇd ∈ ˇH2 output by the prover and the vector
output by S2 follow exactly the same distribution. This is because the rank of
ˇH is 1. In particular, although the simulator S2 does not know the opening of ˆc,
which is some b ∈ {0, 1}n, there exists wh ∈ Zq such that ˇd = ˇH
. Since R
is chosen uniformly at random in Z2×2
, the proof ( ˆΘb(b−1), ˇΠb(b−1)) is uniformly
distributed conditioned on satisfying check 2) of algorithm V. Therefore, these
elements of the simulated proof have the same distribution as in a real proof. This
fact combined with the perfect zero-knowledge property of ΨDk,+ and ΨDk,com
concludes the proof.

b
wh

(cid:22)

(cid:23)

q

QA-NIZK Arguments in Asymmetric Groups

625

5.3 Extensions

CRS Generation for Individual Commitments. When using individual
commitments (distribution b) from Sect. 5), the only change is that Δ is sampled
uniformly from Z2×2n
(the distribution of ˇH is not changed). Thus, the matrix
for some wg ∈ Zn
ˆG := Δ ˆU has 2n columns instead of n+1 and ˆcΔ := ˆG
q .
In the soundness proof, the only change is that in Game2, the extra columns are
also changed to span a one-dimensional space, i.e. in this game ˆgi, i ∈ [2n − 1]
and i (cid:6)= i

∗, are uniform vectors in the space spanned by ˆg2n.

b
wg

(cid:22)

(cid:23)

q

Bit-Strings of Weight 1. In the special case when the bit-string has only one
1 (this case is useful in some applications, see Sect. 6), the size of the CRS can be
made linear in n, instead of quadratic. To prove this statement we would combine
i∈[n] bi = 1 as
our proof system for bit-strings of Sect. 5.1 and a proof that
described above. In the deﬁnition of ( ˆΘb(b−1), ˇΠb(b−1)) in Eq. 8, one sees that
for all pairs (i, j) ∈ [n] × [n], the coeﬃcient of ( ˆCi,j, ˇDi,j) is bi(bj − 1). If i
∗ is
the only index such that bi∗ = 1, then we have:

(cid:6)

bi(bj − 1)( ˆCi,j, ˇDi,j) =

( ˆCi∗,j, ˇDi∗,j) =: ( ˆCi∗,(cid:6)=, ˇDi∗,(cid:6)=).

(cid:18)
i∈[n]

(cid:18)
j∈[n]

(cid:18)
j(cid:6)=i∗

Therefore, one can replace in the CRS the pairs of matrices ( ˆCi,j, ˇDi,j) by
( ˆCi,(cid:6)=, ˇDi,(cid:6)=), i ∈ [n]. The resulting CRS is linear in n.

6 Applications

Many protocols use proofs that a commitment opens to a bit-string as a building
block. Since our commitments are still of size Θ(n), our results may not apply
to some of these protocols (e.g. range proofs). Yet, there are several applications
where bits need to be used independently and our results provide signiﬁcant
improvements. Table 2 summarizes them.

Signatures. Some application examples are the signature schemes of [3–5,9].
For example, in the revocable attribute-based signature scheme of Escala et. al
[9], every signature includes a proof that a set of GS commitments, whose size is
the number of attributes, opens to a bit-string. Further, the proof of membership
in a list which is discussed below can also be used to reduce the size of Ring
Signature scheme of [6], which is the most eﬃcient ring signature in the standard
model. To sign a message m, among other things, the signer picks a one-time
signature key and certiﬁes the one-time veriﬁcation key by signing it with a
Boneh-Boyen signature under vkα. Then, the signer commits to vkα and shows
that vkα belongs to the list of Boneh-Boyen veriﬁcation keys (vk1, . . . , vkn) of
the parties in the ring R.

626

A. Gonz´alez et al.

Table 2. Comparison of the application of our techniques and results from the literature.
 In rows labeled as “Threshold GS” we give the size of the proof of satisﬁability
of t-out-of-n sets Si, where mx is the sum of the number of variables in ˆG in each set
i∈[n] Si.
Si, and ¯n is the total number of two-sided and quadratic equations in some
For all rows, we must add to the proof size the cost of a GS proof of each equation in
one of the sets Si. In the other rows n is the size of the list.

(cid:3)

Proof System

Threshold GS

Author

R`afols [26] (1)
R`afols [26] (2)
This work

Proof Size
(mx + 3(n − t) + 2¯n)g
2(n − t + 1)h + 2n(g + h)
2(n + 1)g + 10(g + h)

√
√
Dynamic list (ring signature) Chandran et al. [6] (16
√
(8
(4

R`afols [26]
This work

n + 4)(g + h)
√
nh
n + 6)g + 12
√
n + 14)g + (8
n + 14)h

Threshold GS Proofs for PPEs. There are two approaches to construct
threshold GS proofs for PPEs, i.e. proofs of satisﬁability of t-out-of-n equations.
One is due to [13] and consists of compiling the n equations into a single equation
which is satisﬁed only if t of the original equations are satisﬁed. For the case
of PPEs, this method adds new variables and proves that each of them opens
to a bit. Our result reduces the cost of this approach, but we omit any further
discussion as it is quite ineﬃcient because the number of additional variables
is Θ(mvar + n), where mvar is the total number of variables in the original n
equations.

The second approach is due to R`afols [26]. The basic idea behind [26], which
extends [14], follows from the observation that for each GS equation type tp, the
CRS space K is partitioned into a perfectly sound CRS space Kb
tp and a perfectly
witness indistinguishable CRS space Kh
tp.
In particular, to prove satisﬁability of t-out-of-n sets of equations from {Si :
i ∈ [n]} of type tp, it suﬃces to construct an algorithm Kcorr which on input
crsGS and some set of indexes A ⊂ [n], |A| = t, generates n GS common reference
strings {crsi, i ∈ [n]} and simulation trapdoors τi,sim, i ∈ Ac, in a such a way
that5:
(a) it can be publicly veriﬁed the set of perfectly sound keys, {crsi : crsi ∈ Kb
tp}
is of size at least t,
(b) there exists a simulator Scorr who outputs (crsi, τi,sim) for all i ∈ [n], and the
distribution of {crsi : i ∈ [n]} is the same as the one of the keys output by
Kcorr when crsGS is the perfectly witness-indistinguishable CRS.

5 More technically, this is the notion of Simulatable Veriﬁable Correlated Key Generation 
in [26], which extends the deﬁnition of Veriﬁable Correlated Key Generation
of [14].

QA-NIZK Arguments in Asymmetric Groups

627

The prover of t-out-of-n satisﬁability can run Kcorr and, for all i ∈ [n], compute
a real (resp. simulated) proof for Si with respect to crsi when i ∈ A (resp. when
i ∈ Ac).

R`afols gives two constructions for PPEs, the ﬁrst one can be found in [26],
App. C and the other follows from [26, Sect. 7]6. Our algorithm Kcorr for PPEs7
goes as follows:
– Deﬁne (b1, . . . , bn) as bi = 1 if i ∈ A and bi = 0 if i ∈ Ac. For all i ∈ [n], let
ˆzi := Comm(bi) = biˆu1 + riˆu2, ri ∈ Zq, and deﬁne τsim,i = ri, for all i ∈ Ac.
Deﬁne crsi := (Γ, ˆzi, ˆu2, ˇv1, ˇv2).
– Prove that {ˆci} opens to b ∈ {0, 1}n and that
The simulator just deﬁnes b = 0. The reason why this works is that when
bi = 1, (ˆzi− ˆu1) ∈ Span(ˆu2), therefore crsi ∈ Kb
P P E and when bi = 0, (ˆzi− ˆu1) /∈
Span(ˆu2) so crsi ∈ Kh

(cid:6)
i∈[n] bi = t.

P P E.

√

√
More Eﬃcient Proof of Membership in a List. Chandran et al. construct
a ring signature of size Θ(
n) [6], which is the most eﬃcient ring signature in
√
the standard model. Their construction uses as a subroutine a non-interactive
proof of membership in some list L = (ˆl1, . . . , ˆln) which is of size Θ(
n). The
trick of Chandran et al. to achieve this asymptotic complexity is to view L as
a matrix ˆL ∈ ˆGm×m, for m =
n, where the i, j th element of ˆL is ˆli,j := ˆl(i,j)
and (i, j) := (i − 1)m + j. Given a commitment ˆc to some element ˆlα, where
α = (iα, jα), their construction in asymmetric bilinear groups works as follows :
(cid:7)
(cid:7)
1. Compute GS commitments in ˇH to b1 . . . , bm and b
m, where bi = 1 if
1, . . . , b
∈ {0, 1} for all i, j ∈ [m], and
2. Compute a GS proof that bi ∈ {0, 1} and b

(cid:7)
j = 1 if j = jα, and 0 otherwise.

(cid:6)
i∈[m] bi = 1, and

i = iα and 0 otherwise, and b
(cid:6)
(cid:7)
j = 1.
j∈[m] b
(cid:6)
i∈[m] biˆl(i,j), for all j ∈ [m], is satisﬁed.
(cid:6)
j∈[m] b

3. Compute GS commitments to ˆx1 := ˆl(iα,1), . . . , ˆxm := ˆl(iα,m).
4. Compute a GS proof that ˆxj =
5. Compute a GS proof that ˆlα =

(cid:7)
j ˆxj is satisﬁed.

that

(cid:7)
j

With respect to the naive use of GS proofs, Step 2 was improved by R`afols [26].
Using our proofs for bit-strings of weight 1 from Sect. 5.3, we can further reduce
the size of the proof in step 2, see table.

We note that although in step 4 the equations are all two-sided linear equations,
 proofs can only be aggregated if the list comes from a witness samplable
distribution and the CRS is set to depend on that speciﬁc list. This is not useful
for the application to ring signatures, since the CRS should be independent of
the ring R (which deﬁnes the list). If aggregation is possible then the size of the

6 The construction in [26, Sect. 7] is for other equation types but can be used to prove

that t-out-of-n of crs1, . . . , crsn are perfectly binding for PPEs.

7 Properly speaking the construction is for PPEs which are left-simulatable in the

terminology of [26].

628

A. Gonz´alez et al.

√
proof in step 4 is reduced from (2g + 4h)
n to 4g + 8h. A complete description
of the proof can be found in the full version, where we also show that when
√
the CRS depends on the list and the list is witness samplable, the proof can be
further reduced to Θ( 3

n).

References

1. Abe, M., Groth, J., Ohkubo, M., Tango, T.: Converting cryptographic schemes
from symmetric to asymmetric bilinear groups. In: Garay, J.A., Gennaro, R. (eds.)
CRYPTO 2014, Part I. LNCS, vol. 8616, pp. 241–260. Springer, Heidelberg (2014)
2. Abe, M., Haralambiev, K., Ohkubo, M.: Signing on elements in bilinear groups
for modular protocol design. Cryptology ePrint Archive, Report 2010/133 (2010).
http://eprint.iacr.org/2010/133

3. Blazy, O., Fuchsbauer, G., Pointcheval, D., Vergnaud, D.: Signatures on randomizable 
ciphertexts. In: Catalano, D., Fazio, N., Gennaro, R., Nicolosi, A. (eds.) PKC
2011. LNCS, vol. 6571, pp. 403–422. Springer, Heidelberg (2011)

4. Blazy, O., Pointcheval, D., Vergnaud, D.: Compact round-optimal partially-blind
signatures. In: Visconti, I., De Prisco, R. (eds.) SCN 2012. LNCS, vol. 7485, pp.
95–112. Springer, Heidelberg (2012)

5. Camacho, P.: Fair exchange of short signatures without trusted third party. In:
Dawson, E. (ed.) CT-RSA 2013. LNCS, vol. 7779, pp. 34–49. Springer, Heidelberg
(2013)

6. Chandran, N., Groth, J., Sahai, A.: Ring signatures of sub-linear size without
random oracles. In: Arge, L., Cachin, C., Jurdzi´nski, T., Tarlecki, A. (eds.) ICALP
2007. LNCS, vol. 4596, pp. 423–434. Springer, Heidelberg (2007)

7. Escala, A., Groth, J.: Fine-tuning Groth-Sahai proofs. In: Krawczyk, H. (ed.) PKC

2014. LNCS, vol. 8383, pp. 630–649. Springer, Heidelberg (2014)

8. Escala, A., Herold, G., Kiltz, E., R`afols, C., Villar, J.: An algebraic framework
for Diﬃe-Hellman assumptions. In: Canetti, R., Garay, J.A. (eds.) CRYPTO 2013,
Part II. LNCS, vol. 8043, pp. 129–147. Springer, Heidelberg (2013)

9. Escala, A., Herranz, J., Morillo, P.: Revocable attribute-based signatures with
adaptive security in the standard model. In: Nitaj, A., Pointcheval, D. (eds.)
AFRICACRYPT 2011. LNCS, vol. 6737, pp. 224–241. Springer, Heidelberg (2011)
10. Freeman, D.M.: Converting pairing-based cryptosystems from composite-order
groups to prime-order groups. In: Gilbert, H. (ed.) EUROCRYPT 2010. LNCS,
vol. 6110, pp. 44–61. Springer, Heidelberg (2010)

11. Galbraith, S.D., Paterson, K.G., Smart, N.P.: Pairings for cryptographers. Discrete

Appl. Math. 156(16), 3113–3121 (2008)

12. Gennaro, R., Gentry, C., Parno, B., Raykova, M.: Quadratic span programs and
succinct NIZKs without PCPs. In: Johansson, T., Nguyen, P.Q. (eds.) EUROCRYPT 
2013. LNCS, vol. 7881, pp. 626–645. Springer, Heidelberg (2013)

13. Groth, J.: Simulation-sound NIZK proofs for a practical language and constant
size group signatures. In: Lai, X., Chen, K. (eds.) ASIACRYPT 2006. LNCS, vol.
4284, pp. 444–459. Springer, Heidelberg (2006)

14. Groth, J., Ostrovsky, R., Sahai, A.: Non-interactive zaps and new techniques for
NIZK. In: Dwork, C. (ed.) CRYPTO 2006. LNCS, vol. 4117, pp. 97–111. Springer,
Heidelberg (2006)

15. Groth, J., Sahai, A.: Eﬃcient non-interactive proof systems for bilinear groups. In:
Smart, N.P. (ed.) EUROCRYPT 2008. LNCS, vol. 4965, pp. 415–432. Springer,
Heidelberg (2008)

QA-NIZK Arguments in Asymmetric Groups

629

16. Groth, J., Sahai, A.: Eﬃcient noninteractive proof systems for bilinear groups.

SIAM J. Comput. 41(5), 1193–1232 (2012)

17. Hofheinz, D., Kiltz, E.: Secure hybrid encryption from weakened key encapsulation.
In: Menezes, A. (ed.) CRYPTO 2007. LNCS, vol. 4622, pp. 553–571. Springer,
Heidelberg (2007)

18. Joux, A.: A new index calculus algorithm with complexity L(1/4 + o(1)) in small
characteristic. In: Lange, T., Lauter, K., Lisonˇek, P. (eds.) SAC 2013. LNCS, vol.
8282, pp. 355–380. Springer, Heidelberg (2014)

19. Jutla, C.S., Roy, A.: Shorter quasi-adaptive NIZK proofs for linear subspaces. In:
Sako, K., Sarkar, P. (eds.) ASIACRYPT 2013, Part I. LNCS, vol. 8269, pp. 1–20.
Springer, Heidelberg (2013)

20. Jutla, C.S., Roy, A.: Switching lemma for bilinear tests and constant-size NIZK
proofs for linear subspaces. In: Garay, J.A., Gennaro, R. (eds.) CRYPTO 2014,
Part II. LNCS, vol. 8617, pp. 295–312. Springer, Heidelberg (2014)

21. Kiltz, E., Wee, H.: Quasi-adaptive NIZK for linear subspaces revisited. In: Oswald,
E., Fischlin, M. (eds.) EUROCRYPT 2015. LNCS, vol. 9057, pp. 101–128. Springer,
Heidelberg (2015)

22. Libert, B., Peters, T., Joye, M., Yung, M.: Non-malleability from malleability:
simulation-sound quasi-adaptive NIZK proofs and CCA2-secure encryption from
homomorphic signatures. In: Nguyen, P.Q., Oswald, E. (eds.) EUROCRYPT 2014.
LNCS, vol. 8441, pp. 514–532. Springer, Heidelberg (2014)

23. Libert, B., Peters, T., Yung, M.: Group signatures with almost-for-free revocation.
In: Safavi-Naini, R., Canetti, R. (eds.) CRYPTO 2012. LNCS, vol. 7417, pp. 571–
589. Springer, Heidelberg (2012)

24. Morillo, P., R`afols, C., Villar, J.L.: Matrix computational assumptions in multilinear 
groups. Cryptology ePrint Archive, Report 2015/353 (2015). http://eprint.
iacr.org/2015/353

25. Naor, M.: On cryptographic assumptions and challenges. In: Boneh, D. (ed.)

CRYPTO 2003. LNCS, vol. 2729, pp. 96–109. Springer, Heidelberg (2003)

26. R`afols, C.: Stretching Groth-Sahai: NIZK proofs of partial satisﬁability. In: Dodis,
Y., Nielsen, J.B. (eds.) TCC 2015, Part II. LNCS, vol. 9015, pp. 247–276. Springer,
Heidelberg (2015)

27. Shacham, H.: A cramer-shoup encryption scheme from the linear assumption
and from progressively weaker linear variants. Cryptology ePrint Archive, Report
2007/074 (2007). http://eprint.iacr.org/

