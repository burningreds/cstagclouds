Herbivore: A Scalable and Eﬃcient Protocol for Anonymous

Communication

Sharad Goel, Mark Robson, Milo Polte, and Emin G¨un Sirer

Cornell University, Ithaca NY 14850, USA

Abstract. Anonymity is increasingly important for networked applications amidst concerns over censorship 
and privacy. In this paper, we describe Herbivore, a peer-to-peer, scalable, tamper-resilient
communication system that provides provable anonymity and privacy. Building on dining cryptographer 
networks, Herbivore scales by partitioning the network into anonymizing cliques. Adversaries able
to monitor all network traﬃc cannot deduce the identity of a sender or receiver beyond an anonymizing 
clique. In addition to strong anonymity, Herbivore simultaneously provides high eﬃciency and
scalability, distinguishing it from other anonymous communication protocols. Performance measurements 
from a prototype implementation show that the system can achieve high bandwidths and low
latencies when deployed over the Internet.

1 Introduction

Even though strong anonymity and privacy guarantees are critical for many applications, current Internet
networking protocols provide no support for masking the identity of communication endpoints. An adversary 
that monitors Internet routers can determine which IP addresses have contacted which services.
Tracking software installed at the ISPs can map IP addresses back to individuals. While encryption protocols,
 such as SSL, make it computationally diﬃcult for attackers to decipher what was sent, they cannot hide
who sent it. The situation is particularly problematic when governments and large corporations monitor
online activity, track user behavior or censor communications.

In this paper, we describe a peer-to-peer, tamper-resistant, scalable anonymous communication protocol,
 called Herbivore. Herbivore has three critical properties: (1) it hides the identity of communication
endpoints, even from attackers with unrestricted wiretapping capabilities, (2) it scales well with large
numbers of users, and (3) it is eﬃcient in terms of bandwidth and latency.

Herbivore is structured as an overlay network on top of an untrusted substrate, like the Internet. It
provides strong anonymity by building on the information theoretic guarantees of dining cryptographer
networks (DC-nets) [2]. Speciﬁcally, Herbivore guarantees sender and receiver anonymity; that is, it is
computationally intractable for observers that monitor all network traﬃc, as well as participate in the
protocol, to deduce the origin or destination of a message beyond an anonymizing clique. Herbivore’s
scalability stems from a divide-and-conquer approach that partitions the network into anonymizing cliques.
Herbivore uses a decentralized, peer-to-peer approach to organize the global network securely into smaller
cliques in which anonymous communication can occur eﬃciently. Actual measurements from a prototype
deployed over the Internet demonstrate that the system can achieve high bandwidths and low latencies in
practice.

Overall, the Herbivore system provides a provably anonymous communication channel that can scale
to large numbers of participants and run eﬃciently over existing networks. Herbivore enables participants
to contact legacy services on the Internet through proxy nodes, though in this mode of usage, it guarantees
only the anonymity of the endpoint that is part of the Herbivore network.

The rest of this paper describes the design of Herbivore, examines its behavior analytically and presents
measurements from a prototype implementation. Section 2 describes previous work on anonymous communication 
protocols. Section 3 provides the necessary background on DC-nets. Section 4 describes the

2

operation of Herbivore, including the local and global network topology algorithms. Section 5 addresses
potential attacks on the network. In Section 6 we describe the structure of representative applications
built on top of Herbivore. Section 7 presents results from our prototype implementation. Finally, Section 8
summarizes our contributions.

2 Related Work

Three critical properties for anonymous communication protocols are strong anonymity, scalability, and
eﬃciency. By strong anonymity, we mean a system’s ability to protect the participants’ identities from an
adversary that is both capable of unlimited wiretapping (unlimited passive attacks), and compromising a
signiﬁcant fraction of participating nodes (active attacks). By scalability, we mean the ability of the system
to accommodate large numbers of participants and to decouple its performance from the number of total
nodes. By eﬃciency, we are referring to the eﬀective anonymous bandwidth of the system, that is, the
number of bits sent per anonymous bit transferred, as well as its latency.

Previous work on anonymous communication protocols can achieve any two, but not all three of these
critical properties. Past work can be grouped into three categories: source-rewriting systems, broadcast
protocols, and DC-nets.

Source-rewriting systems Source-rewriting systems provide anonymity via packet reshuﬄing. Mixes
[1] work by removing the timing correlation between arriving packets and outgoing packets. A mix is a
forwarder node that queues incoming packets for a period of time 0 ≤ t ≤ T such that, when ﬁnally sent,
the packets appear as if they may have originated from any one of the nodes that contacted that mix in
the last T seconds. Mixes work best when arranged in series, and need a constant amount of traﬃc to
retain anonymity while avoiding long packet delays. Tarzan [7] uses a decentralized, peer-to-peer approach
to construct such a series of mixes, called tunnels. Neither system is immune to statistical analysis, and
their latency is proportional to the degree of anonymity they provide.

In other source-rewriting protocols, including Onion Routing [19], Crowds [14], and Hordes [17], messages 
are sent through the network via random paths that deter packet traces. Each node that forwards
the message rewrites the source ﬁeld of the packet with its own id. Consequently, attackers with limited
wiretapping abilities cannot easily track packets back to their originators. In order to make it diﬃcult to
track a packet’s propagation through the network, the packets are encrypted and potentially reordered at
each node, though the systems diﬀer on how these operations are performed. In Onion Routing, the sender
picks a full path through the network and encrypts the packets in layers. Each node along the path reorders
the packets, strips oﬀ a layer of encryption and forwards them. In Crowds, the paths are determined locally
and on-the-ﬂy by the forwarders instead of a priori by the senders, and encryption is done via pair-wise key
exchange and symmetric encryption between forwarders. In both of these systems, returned packets follow
the reverse route from the sender. Hordes improves upon these two source-rewriting systems by replacing
the return path with a low latency multicast operation. Source rewriting is also used in peer-to-peer content 
distribution networks such as Freenet [3] and the Freedom Network [8] to obfuscate the identity of
request originators. While these systems are eﬃcient and scale well, they do not provide strong anonymity
guarantees. A passive adversary can perform traﬃc analysis to trace the packet through the intermediary
nodes to a sender and receiver. Further, source-rewriting incurs high latencies, as the round-trip times grow
linearly with the number of anonymizing forwarders traversed.
Broadcast protocols Broadcast protocols, such as P 5 [16], provide sender and receiver anonymity
by transmitting encrypted packets at a constant rate to all participants. When a node has no data packets
to send, it sends noise, which is then propagated throughout the network in the same manner as data
packets. This approach provides strong anonymity, as a passive eavesdropper cannot tell which packets
contain data and which packets are noise. Alone, a constant bit rate broadcast protocol would scale poorly
with increasing network sizes. P 5 scales by partitioning the network into anonymizing broadcast groups.

3

With this protocol, a node can send messages at a rate of 1/S with low packet loss and log S/S with high
packet loss, where S is the number of nodes in its anonymizing broadcast group. P 5 achieves anonymity
and scalability, but at a cost of eﬃciency. It can waste bandwidth and place large loads on the underlying
network, since accommodating high peak data bandwidths with this approach requires that the network
constantly run at the highest possible load. Overall, the constant bit rate limitation is not well-suited for
bursty data traﬃc, and eﬃciency is elusive under a scheme whose anonymity depends on propagating noise.
DC-Nets Introduced in 1988 [2], DC-nets are an elegant mechanism for strongly anonymous communication.
 Since they provide the basis of Herbivore, we describe their operation in detail in the next
section.

3 DC-nets Background

In this section, we informally describe the operation of DC-nets, and highlight the areas where Herbivore
makes contributions related to their basic operation. A formal speciﬁcation of DC-nets can be found in
Appendix A.

DC-nets propagate a bit of information in the following way: Suppose there are two participants, Alice
and Bob, one of whom (Bob) wants to communicate a one-bit message to Charlie. Alice and Bob ﬁrst toss
a coin in secret. Alice reports the truthful result of the coin toss to Charlie. Bob, on the other hand, reports
the true result of the coin toss only if he wants to transmit a 0. If he wants to transmit a 1, Bob lies about
the coin toss. Charlie deciphers the message by taking the XOR of the values sent by Alice and Bob. If
they both report 0 or 1, they are both telling the truth and the one-bit message is a zero; otherwise, one
of them is lying, and the one-bit message is a one. Since Charlie does not know if it was Alice or Bob who
lied about the coin toss, he can never determine who sent the message. This security guarantee is strong
and information-theoretic: No amount of computational power can help Charlie determine that it was Bob
who sent the message.

Turning this basic idea for one bit transmission into a general scheme for communication between
arbitrary numbers of hosts requires some modiﬁcations, originally outlined in [2]. First, for all participants
to be able to send and receive messages, the nodes have to be arranged in a connected key graph; that
is, Charlie needs to have shared secret keys with Alice and Bob. In addition to this key graph, the nodes
need to communicate with each other through a physical transmission network. Previous work considered
deploying DC-nets in a variety of topologies [11, 5]. Here, we prove that a star topology is optimal for the
communication requirements of DC-nets, and use it as part of the Herbivore intra-clique topology.

Second, a protocol is necessary to ensure that only one node sends a message at a time. If multiple nodes
try to simultaneously transmit in a DC-net, the network will in eﬀect transmit the XOR of the messages,
leading to collisions and corrupted messages. Previous work on DC-nets devoted additional bandwidth to
reservations, thereby reducing the likelihood of such collisions. These reservation schemes targeted a low
packet collision rate, and derived the amount of bandwidth to devote to reservations from this rate and
the birthday paradox. Depending on the essentially arbitrary choices of packet size and collision rate, this
reservation scheme can be quite ineﬃcient and entail large space overheads. Here, we relate the bandwidth
to be used for the reservation phase to the choice of the packet size and network load, and systematically
derive an equation for the size of the reservation block.

Third, self-organization typically requires some signaling among the participants, and in an anonymous 
network, this signaling may have to be done anonymously. This can be ineﬃcient if nodes simply
reserve a slot and then transmit their message, as transmissions in traditional DC-nets require bandwidth
proportional to the number of participants. Here, we present a scheme for probabilistic, anonymous and
unanimous agreement in a DC-net that requires each node send a constant, and in practice modest, number
of bits independent of clique size. Herbivore uses this signaling mechanism to control the local topology of
each anonymizing clique.

4

The preceding modiﬁcations turn the core idea for one-bit transmission from two hosts into a general
idea for sending anonymous packets between N participants. While this approach provides anonymity, it
is vulnerable to a range of denial-of-service attacks and does not scale well with increasing numbers of
participants. A malicious node can trivially disrupt the network by sending messages without a reservation.
 Worse, the anonymity guarantees provided by DC-nets make it diﬃcult to locate such disruptive
participants. Past work [20] has developed techniques for identifying and cleaving such malicious nodes out
of a DC-net. It relies on setting up “traps,” that is, random data sent for the express purpose of catching a
malicious disrupter, and can not only detect disruption but also identify the disrupters. In a model where
there is a single, global DC-net, the ability to speciﬁcally identify such malicious nodes and drop them from
the network is critical, as they can render the entire network unusable. However, the ability to cleave out
disrupters comes at a price: The network protocol is considerably more complex as it needs to make sure
that the trap mechanism itself is not abused by malicious nodes to cleave out legitimate participants, and
a substantial (O(N)) amount of the anonymous bandwidth is dedicated to traps. Further, the anonymous
bandwidth of a DC-net is limited by the slowest participant. Overall, DC-nets elegantly provide strong
anonymity, but suﬀer from eﬃciency and scalability problems.

4 Protocol

Herbivore simultaneously provides scalability, eﬃciency and strong anonymity. There are two components to
the Herbivore system. At the lowest level, a round protocol governs how bits are sent among the participating
nodes. This protocol achieves strong anonymity by building on DC-nets at the wire level. It extends the
basic DC-net scheme in several ways to utilize the network eﬃciently, detect tampering and facilitate
long-lived transactions. The round protocol provides eﬃcient and anonymous communication; however, its
performance is inversely proportional to the number of simultaneously active sessions, and malicious nodes
can aﬀect all participants. To scale well in the face of planetary scale networks and malicious participants,
Herbivore employs a global topology control algorithm to divide the network into smaller anonymizing
cliques. Herbivore guarantees that each clique will have at least k nodes, where k is a predetermined constant
that describes the degree of anonymity oﬀered by the system. New cliques are created automatically when
existing cliques grow too large to communicate eﬃciently. When the number of nodes in a clique falls below
k, the nodes in that clique are redistributed throughout the network. A secure entry control protocol deters
attempts by malicious nodes to subvert the global topology control algorithm.

In the next two sections, we describe the operation of the system from the top down. We ﬁrst treat the
round protocol as a black box, and describe how Herbivore’s global topology control algorithm organizes a
large network into a collection of small cliques. These cliques enable the algorithm to scale and to contain
malicious nodes. We then describe the round protocol used within a clique for anonymous data transmission
in detail, and describe how the system achieves eﬃciency.

4.1 Global Topology Control

The global topology of the Herbivore network is determined by an entry control protocol, which assigns
newly arriving nodes into cliques, and by a clique maintenance protocol, which rearranges existing nodes
when the number of participants within a clique is too many or too few.

Entry Control Protocol A node joins the Herbivore network by contacting any one of the participants
and following the entry control protocol. This protocol serves three purposes. First, it deters attacks
targeted at compromising the anonymity of speciﬁc nodes. If nodes could select which clique to join,
conspiring attackers could take over all but one member of a selected clique, and consequently trace all

transactions emanating from that clique to the remaining node. Second, it ensures that cliques are of
approximately equal size by randomizing the point of entry for newly arriving nodes. Finally, through a
challenge-based protocol, it limits the rate at which nodes can join the network, curbing the impact of
malicious nodes who attempt to launch denial of service attacks by rapidly joining the network in several
locations. The entry control protocol operates by assigning physical nodes uniformly distributed identiﬁers
in a virtual space, and subsequently grouping them into cliques of size k or more.

5

A simple and intuitively appealing scheme for entry control
would be to group nodes together by the hash of their IP addresses.
 Indeed, many peer-to-peer systems use the hash of an IP
address and a small salt (between zero and eight bits) to map the
physical participants onto a virtual ring [15, 18, 21, 10, 9]. Some
others allow the nodes to directly pick their location [13]. All such
systems are vulnerable to attack by an adversary which owns a
large number of IP addresses, and can thus pick a particular IP
address whose hash happens to map to a point of interest in the
overlay network. The salt makes these systems even less secure,
as it enables malicious nodes to pick their salt value to match the
desired location, in addition to their IP address. For instance, attackers 
with a class-A IP address and an 8-bit salt have 225+8
bits at their disposal to pick their point of entry into the network.
 These schemes are unsuitable for use in Herbivore, as the
freedom to judiciously select the point of entry would enable an
attacker to crowd out all but one legitimate node in a targeted
clique, exposing the transmissions of the remaining node. We
call such an attack a topology attack. Herbivore’s secure random
entry protocol is designed to prohibit topology attacks.

Fig. 1. The global topology of Herbivore 
is structured as a ring, with each
clique assigned a unique key. While
communication in Herbivore is primarily 
done at the clique level, nodes can
leverage this global backbone to communicate 
with other cliques

The entry protocol takes the decision on which clique to join
out of the hands of the joining node. Each node and each clique in Herbivore have a unique node key and
clique key, respectively. Let f and g be one-way functions. To enter the network, a node ﬁrst generates a
public/private key pair Kpublic/Kprivate. It then randomly generates vectors until it ﬁnds a y (cid:54)= Kpublic
such that the lower mk bits of f(Kpublic) equal those of f(y). The value g(Kpublic, y) forms the node key
for the entering node, which then joins the clique whose key is closest numerically to its node key. Any
available method can be used for locating this clique; however, distributed hash tables are a natural choice
as they provide a decentralized, peer-to-peer way of locating close objects given a key. In Herbivore, we
use the oﬀ-the-shelf Chord protocol [18, 9]. Having located the closest clique, the node ﬁrst presents the
pair (Kpublic, y). Each node computes f(Kpublic) and f(y), conﬁrms that that the lower mk bits match,
and checks that the key g(Kpublic, y) corresponds to its clique. If (Kpublic, y) has been previously presented
by another member of the clique, then the node is denied admission – this prevents a malicious node from
’inviting’ colluders into the clique. Finally, the clique collectively generates a random vector vchal, and
sends it to the entering node who should then return vresp = Kprivate(vchal). After the clique conﬁrms that
Kpublic(vresp) = vchal, the node is granted admission into the clique.

The computation involved for a node to legitimately enter the network is essentially determined by mk,
as generating the public/private key pair and performing the encryptions is relatively cheap. Let X be the
number of attempts before ﬁnding y with the lower mk bits of f(Kpublic) equal to those of f(y). Then

EX = 2mk. Furthermore, P (X > lEX) =(cid:0)1 − 1

2mk(cid:1)lEX

A malicious node may attempt to sidestep random entry in several ways. It is impractical to generate a
speciﬁc key g(Kpublic, y), since this involves computing the inverse of a one-way function. However, a node
may attempt to gain admission into a particular clique by repeatedly generating keys until it ﬁnds one

−l.

< e

6

which is suﬃciently close to the clique’s key KC. We can deter this method of attack by picking a large
mk. This safeguard has little impact on legitimate nodes since they only need to generate a key once, and
can use the same key whenever entering the network. The public/private key pair deters malicious nodes
from reusing the keys presented by other nodes. For added security, we time stamp the keys: Instead of
choosing random y, we require nodes to choose y with the lower bits encoded with the date. While this
forces honest nodes to generate new keys periodically, it makes it signiﬁcantly more diﬃcult for malicious
nodes to generate a large number of keys and then attack the network using this dictionary.

Overall, our secure random entry mechanism ensures that it is impractical for coordinated attackers to
take over a clique. For instance, an attacker that has compromised 90% of the total nodes participating in
Herbivore has only a 0.9127 ≈ 1.5 × 10−6 chance of taking over a clique of size 128.

Cliques can grow and shrink over time as nodes join and leave
the network. To ensure anonymity, Herbivore guarantees that
each clique has at least k participants at all times. Since each
participant is equally culpable for all packets in a DC-net, even
modest numbers for k suﬃce to provide anonymity. Large cliques,
however, can degrade performance. Herbivore maintains clique
sizes between k and approximately 3k by automatically fusing
existing cliques and splitting them when necessary.

3(cid:0)KCsucc

3(cid:0)KCsucc

− KCprev(cid:1) and KC2 = KCprev +

Fig. 2. When a clique’s size hampers
eﬃcient communication, it splits into
two new cliques that are equally spaced
in the gap left behind by the original
clique.

New cliques are created when there are 3k or more nodes in
a clique and all nodes in the clique agree to disband. (Section
4.2 discusses how the nodes come to this consensus.) Cliques
in Herbivore are arranged in lexicographic order by their clique
keys. The Chord protocol is used to maintain pointers to the
cliques immediately preceding (Cprev) and succeeding (Csucc) a
given clique C. During clique formation, the old clique key is
eliminated, and two new cliques, C1 and C2, are formed with
keys KC1 = KCprev + 1
2
ensure that malicious nodes cannot insert a new clique into the network, nodes in Csucc and Cprev examine
the node keys for the newly created clique before linking to them. Lastly, the nodes in the cleaved clique
re-enter the network using their original keys. Since the entry protocol provides a probabilistic guarantee
that node keys will be uniformly spaced, we can expect half of the nodes to go to C1 and half to go to C2.
Cliques are disbanded when the number of participants drops below k. The clique is destroyed entirely,
and the nodes independently re-enter the network. While there is a tradeoﬀ between anonymity and bandwidth,
 the choice of k, which in our current implementation is set to 64, is essentially arbitrary. In line
with the philosophy of P 5, we could have several independent Herbivore networks, each enforcing diﬀerent
minimum clique sizes. This would allow nodes to select their own anonymity to bandwidth ratio.

− KCprev(cid:1). To ﬁnalize the clique formation, Cprev and Csucc must link to the new cliques. To

4.2 Round Protocol

The round protocol governs the behavior of nodes within a given clique. It ensures that nodes can transmit
data anonymously, reserve bandwidth and detect tampering. In each round, ﬁxed amounts of data, corresponding 
to packets, are anonymously transferred in consecutively numbered slots. As described before,
bit-level transmissions in DC-nets require a random number stream. Herbivore ensures during clique entry
that each pair of nodes in a clique has secretly exchanged [4] a vector that is then used to seed a random
number generator. A round then proceeds in three phases:

7

Reservation Phase This phase assigns transmission slots to nodes in order to reduce collisions and
improve bandwidth utilization. Each node that would like to transmit during this round uniformly at
random picks a number i from {1, . . . , mr}, and then anonymously transmits the mr-bit vector with a
1 in the ith bit and zeros everywhere else. All others anonymously transmit the 0 vector. The vector
broadcast by the clique indicates the order of sending in the next phase. Since multiple nodes broadcast
the reservation block simultaneously, it is possible for their transmissions to collide. If an even number
of nodes attempt to reserve a given slot, the collision will be evident in the reservation phase, and they
will simply wait until the next round to transmit. If an odd number of nodes collide, the collision will
occur during the transmission phase.

Transmission Phase This is the phase in which data transmission occurs. Each node that has reserved a
slot anonymously transmits its packet in the appropriate slot; all other nodes anonymously transmit 0.
Each node is both transmitting and receiving in this phase. Speciﬁcally, the nodes who have reserved
a slot monitor the anonymous channel and monitor the packet sent anonymously. They can thus
detect bona-ﬁde collisions and tampering by malicious nodes: The packet received over the anonymous
channel will simply not match the data they intended to send in that slot. This is akin to collisions
in an Ethernet. A node that detects a collision waits until the next round to try to retransmit. After
a ﬁxed number of unsuccessful retries, it joins the network in a diﬀerent location. The integrity of the
transmitted data is protected by an MD5 checksum attached to each packet.

Exit Phase The purpose of the exit phase is to ensure that long-running network transactions are protected 
from traﬃc analysis. This phase consists of a vote to check if the current round is a suitable
time for changes in clique membership. A node may use this phase to anonymously signal to other
nodes that it is in the midst of a long-running transaction, and that they should delay their departure
from the clique if possible. This process is quite eﬃcient, requiring a constant number (mv) of bits
independent of clique size, but it is not binding, as nodes may leave or crash at any time.
Below, we describe and analyze the round protocol in more detail, and determine speciﬁc values for

system parameters.

Local Network Topology Logically, anonymizing cliques form a fully-connected graph, where every node
has a shared secret, and a corresponding random bit stream, with every other participant. The selection
of seeds for pseudo-random number generators is done securely [4], pairwise among participants when a
node joins a clique. This arrangement avoids having to trust any single coordinator node, while providing
full anonymity. Deciphering the identity of a message originator requires collusion by k − 1 members of the
clique.

Physically, anonymizing cliques in Herbivore are arranged in a star topology. Each node transmits the
XOR of its key streams and (if present) its message to the center of the star, which then transmits the
deciphered message to each of the k − 1 nodes. A star-shaped intra-clique network topology requires that
2(k − 1) bits be sent by the network in order for a node to transmit 1 bit anonymously.

The following lemma shows that the local star topology used by Herbivore is optimal for DC-nets.

Lemma 1. Consider a DC-net with k nodes and assume that a bit transmitted by one node is received by
anonymously broadcast a 1-bit message m. Then, (cid:80)k
exactly one other node. Let bi be the number of bits transmitted by node i while facilitating the clique to
i=1 bi ≥ 2(k − 1). That is, the network sends at least
2(k − 1) bits to propagate 1 bit anonymously.
Proof: Label the bits sent {mj}N
by a node. Without loss of generality, we can assume tj (cid:54)= tk for j (cid:54)= k. Then there is a time t

j=1 be the times at which the corresponding bit is received
(cid:48)
1 such that

j=1, and let {tj}N

exactly one node is able to deduce the message m. Call this node k1. But in order for k1 to have deduced
m, each of the other k − 1 nodes must have already transmitted the XOR of their keys and their individual
1, at least k − 1 bits have been transmitted. Finally,
(cid:48)
message (although not necessarily to k1). So by time t
1 none of the other k − 1 nodes are able to deduce the message, each of them requires at
(cid:48)
since at time t
least one additional bit of information. Because a bit transmitted by one node can only be received by one
(cid:117)(cid:116)
other node, we have the result.

8

Since the center node incurs a disproportionate
network load, Herbivore selects a new center for each
round by cycling through the clique members. As a
center, a malicious node can corrupt messages, inject
fake packets or slow down the network, but cannot
compromise anonymity. We note that leaf nodes can
also launch these attacks, and treat them in more detail 
in Section 5.

Overall, the fully-connected key graph preserves
anonymity, while the physical star topology assures
that the latency of transmission is independent of clique
size, and bandwidth is used eﬃciently.

Fig. 3. A Six Node Clique. While the network
topology is star-shaped to ensure high bandwidth
utilization and low latency, the key topology is a
complete graph to protect anonymity. Since the
center of the star has a disproportionate network
load, Herbivore selects a new center for each
round by cycling through the clique members.

Reservation Phase In this section, we discuss how we determine the size of the reservation vector used
in the ﬁrst phase of the round protocol and show that Herbivore is bandwidth eﬃcient. Previous work [2,
20] also posited a reservation phase but diﬀered from Herbivore in two important respects. First, to detect
disrupters, it advocated that all participants reserve and use at least one slot in each round regardless of
whether or not they had data to send. Second, it used a loose analysis to determine the ideal size for the
reservation vector. In contrast, Herbivore requires nodes to reserve an anonymous transmission slot only
when they have data to transmit, and proceeds systematically to determine the size of the reservation
vector, increasing bandwidth eﬃciency.

Here, we compute the size of the reservation vector by ﬁrst deriving a bound on the expected number
of bits sent by a node in the Herbivore network before it is able to anonymously transmit a packet. We
then minimize this expression as a function of the size of the reservation vector in order to eﬃciently use
bandwidth.

Assume packets of ﬁxed size p are transmitted in each round. Observe that packets collide only when
two or more nodes transmit simultaneously. Assume node nt is trying to send a packet. Let Y be the
number of bits nt must send until the packet is sent successfully. We are interested in bounding EY . Let
Xi be the number of bits sent by nt in round i and let Ai be the event that the packet was not sent
successfully in rounds {1, . . . , i− 1}. Also, let Ni be the number of nodes other than nt that try to transmit
in round i, and let Ci be the event that nt is the center of the clique’s star topology for round i. We make
the reasonable assumptions that for each i, we have independent Ai, Ni and Ci, and {Ni} are iid. Finally,
let mr be the number of bits used in the reservation phase and let c be the additional overhead that is
incurred in each round. Note that the number of nodes that actually transmit in a given round may be less
than the number of nodes that try to reserve a slot (due to collisions in the reservation phase). So,

9

(cid:35)

Xi1Ai

[(k − 2)1Zi + 1] [(Ni + 1)p + mr + c] 1Ai

(cid:35)

EY = E(cid:34) ∞(cid:88)
≤ E(cid:34) ∞(cid:88)

i=1

i=1

≤ 2 [(ENi + 1)p + mr + c]

≤ 2 [(ENi + 1)p + mr + c]

= 2

(ENi + 1)p + mr + c

1 − P (A)

∞(cid:88)
∞(cid:88)

i=1

i=1

P (Ai)

P (A)i−1

where A is the event the packet is not sent successfully in a given round. Now,

1 − P (A) =(cid:88)

k

(cid:18) mr − 1

(cid:19)x

mr

P (Ni = x) = Ef(Ni)

where f(x) =(cid:16) mr−1
mr (cid:17)x

. Since f is a convex function, by Jensen’s Inequality we have

1 − P (A) ≥ f(ENi) =(cid:18) mr − 1

(cid:19)ENi

.

mr

So,

EY ≤ 2

(ENi + 1)p + mr + c

mr (cid:17)ENi
(cid:16) mr−1

≈ [(ENi + 1)p + mr + c] eENi/mr .

√

Considering the equation above as a function of mr and taking derivatives, we see that it is minimized for
mr ≈ ENi
p. As the amount of data sent in each round increases, it becomes more important to avoid
collisions. With this choice of mr we have
EY ≤ 2

(ENi + 1)p + ENi

p + c

√

.

Furthermore,

p

EY , the ratio of anonymous bits sent by the node to total bits sent by that node satisﬁes

√

ENi

(cid:16)1 − 1
p(cid:16)1 − 1

p(cid:17)ENi
p(cid:17)ENi

ENi

√

√

p
EY

≥

p→∞−→

2(ENi + 1)p + ENi

1

2(ENi + 1) .

p + c

The above analysis suggested that the reservation vector should be of size mr = kr

p, where p is the
packet size, and kr is the expected number of nodes that will transmit in a given round. In practice, we

√

10

can approximate kr by a running exponentially-weighted average of the number of nodes that transmit in
a given round. With this choice of mr, we showed that a node will, on average, transmit no more than
approximately 2krp bits before successfully sending a packet anonymously. Note that this bound scales
according to the expected number of nodes that will actually send data anonymously, not the total number
of nodes in the clique. Consequently, nodes can achieve high anonymous bandwidth on a lightly loaded
Herbivore network, and still maintain high anonymity as determined by clique size.

Exit Phase Often, nodes would like to anonymously transmit multiple packets. For instance, a node may
want to send a message whose length exceeds the ﬁxed slot size in Herbivore, or a user may engage in a longrunning 
transaction with a web service. If the time frame for these transactions signiﬁcantly exceeds average
node lifetimes, an attacker may be able to analyze network traﬃc to compromise a sender’s identity. Recall
that Herbivore provides anonymity among the members who were in the clique at the time a message was
sent. If an identiﬁable stream of packets is sent from a clique at times t0, t1, ..., tn, the possible originator
must be one of the nodes that was in the clique at all of those times. Consequently, an intersection attack
might be feasible against long transactions and cliques that rapidly replace member nodes.

Herbivore has two protection measures against intersection attacks. The ﬁrst is for each node to monitor
its long-running transactions and determine whether it could be targeted for such an attack. That is, each
node continually launches this attack against itself, and terminates its long-running transaction whenever
its anonymity drops below a critical threshold. In our implementation, we chose this threshold to be
the minimum clique size k. Consequently, each Herbivore node hides its identity among at least k = 64
nodes. While eﬀective, this approach abruptly terminates communication when this threshold is reached.
To ensure that this is rare, Herbivore provides a third phase to the round protocol that limits changes to
clique membership during long-running transactions.

This new phase consists of an anonymous poll to discover whether any node would be adversely impacted
by a node departure. Nodes in the middle of sending an anonymous stream, uniformly at random generate
and anonymously transmit an mv-bit vector {vi}. All others anonymously transmit the 0 vector. To leave
the clique, nodes wait until the message broadcasted during this phase is identically 0. For example, if
exactly two nodes attempt to veto a node’s departure and they randomly generate the same vector, then
the broadcasted vector, which is the XOR of the two vectors, will be zero. The following lemma shows that
with high probability, nodes will successfully signal a veto.
Lemma 2. Assume we have k nodes in a clique, and kv ≥ 0 nodes attempt to veto. Let {Xi}mv
be the
mv-bit message broadcasted by the DC-net. That is {Xi} is the XOR of the randomly generated veto vectors.
If kv = 0, P0(Xi = 0) = 1, and for kv > 0,

1

where {vi} is any mv-bit vector. In particular,

Pkv({Xi} = {vi}) =

1
2mv

Pkv({Xi} (cid:54)= 0) = 1 − 1
2mv

.

Proof: The ﬁrst statement is clear. For kv > 0, an easy combinatorial argument yields that half of the
subsets of {1 . . . kv} have even order. Furthermore, since the 0 bit will be broadcast by the DC-net iﬀ an
(cid:117)(cid:116)
even number of nodes transmit a 0, Pkv(Xi = 0) = Pkv(Xi = 1) = 1
Note that for kv > 0 the distribution of {Xi} is independent of kv. Consequently, the above protocol
only indicates whether or not at least one veto was issued, but does not reveal speciﬁc information regarding
the number of nodes that veto.

2. The result follows immediately.

Node Failures While the exit phase delays the departure of cooperating nodes, malicious nodes may
leave despite a veto. Further, even non-malicious nodes may crash at any time. In this section, we examine
the resilience of Herbivore to random node failures. We assume a fail-stop failure model in this section,
and treat Byzantine failures as part of the active attacks in section 5.

11

Assume we have k nodes in a clique and let Xi(t) denote the number of times node i has failed up to
−t. Let X(t) be the

time t. We model Xi(t) as a parameter 1 Poisson process. Then, P (Xi(t) = 0) = e
number of nodes that have failed at least once up to time t. Then,

−t(cid:1)i(cid:0)e

−t(cid:1)n−i

.

(cid:18)n

i

(cid:19)(cid:0)1 − e

m(cid:88)

i=0

P (X(t) ≤ m) =

Since the exit phase ensures that wellbehaved 
clients will remain connected during
long-running anonymous transactions, we are
primarily concerned with nodes either crashing 
or users abruptly disconnecting from the
network. Consequently, we can expect relatively 
long mean lifetimes for nodes in the
network. Figure 4 shows how the number of
node failures scales for various numbers of
nodes and times. For example, if the mean
lifetime for a node is 10 hours, a member of
a 128 node clique can transmit an anonymous
stream for 1 hour and be very conﬁdent that
no more than 25 nodes will fail during that
time, leaving its identity concealed to 1 of 103
nodes. We ﬁnd this to be a conservative, and
acceptable, level of anonymity.

5 Attacks

size

Fig. 4. Expected node
clique
and failure
minm (P{at most m node failures by time t}) > .999),
where t is the time on the network relative to the mean
time between failures for a given node.

failures
function of
rate. The Y -axis displays

as

a

Herbivore is resilient to a wide array of attacks aimed at both compromising a node’s anonymity and
degrading the network’s performance. Here we describe possible attacks against the Herbivore network and
detail their impact.

Collusion and Occupancy Attacks If malicious nodes gather in a clique, they may share information
to compromise the anonymity of an honest node. Since we employ a complete key topology, colluding
nodes can only determine that they did not send a given message. Consequently, a node’s anonymity
is determined by the number of honest nodes in a clique. Herbivore’s random entry protocol, which
uniformly distributes malicious nodes across all cliques, deters attackers from targeting a speciﬁc clique.
For instance, in a 128-node clique, an attacker that has compromised 90% of the total nodes participating 
in Herbivore has only a 0.9127 ≈ 1.5 × 10−6 chance of taking over a given clique.

Sybil Attacks A small number of malicious nodes may attempt to overwhelm the system by joining a large
number of cliques under many false identities. While such Sybil attacks are theoretically impossible to
prohibit without external measures [6], Herbivore addresses the problem by rate limiting node entry
into the network. To enter the Herbivore network, nodes complete a computational challenge, which
we have shown is resilient to subversion.

20406080100120140160180102030405060Clique SizeNode Failures.01.05.1.2.312

Topology Attacks We rely on a variant of the Chord distributed hash function [18, 9] to provide the
mapping from clique keys to clique members. We treat the security of Chord as a separable problem
and do not analyze its resilience against attacks, though we note that the high level of redundant
routing information in Chord makes it diﬃcult for malicious nodes to subvert the system if each
lookup is repeated from diﬀerent starting points on the ring. Herbivore’s secure random entry protocol
prohibits topology attacks in which nodes target speciﬁc cliques in the network.

Intersection Attack By identifying long-running transactions and monitoring clique membership, an
attacker may try to subvert a node’s anonymity with an intersection attack. As discussed, we minimize
the impact of such attacks by introducing an exit phase in the round protocol. Consequently, we can
expect cooperating nodes to remain in their cliques for the duration of these transactions. Furthermore,
we have shown in section 4.2 that node failures do not signiﬁcantly aﬀect anonymity. For example, if
the mean lifetime of a node is 10 hours, a member of 128 node clique can transmit an anonymous
stream for 1 hour and be very conﬁdent that no more than 25 nodes will fail during that time, leaving
its identity concealed to 1 of 103 nodes. Finally, nodes in Herbivore continually launch an intersection
attack on themselves, and cease transmitting when their anonymity is suﬃciently compromised.

Statistical Analysis Very long-lived transactions in Herbivore are susceptible to statistical analysis: If
an attacker observes that node nv is disproportionately often in a clique that contacts a certain network 
service (e.g. a speciﬁc web site), then the attacker has statistical reason to believe that nv is
in fact the node contacting that service. While every packet transmitted in Herbivore is anonymized
among members of a clique, Herbivore does not protect transactions that are signiﬁcantly longer than
clique lifetimes. This is a fundamental limitation of any scheme that provides anonymity in a crowd;
participants need to monitor crowd sizes to gauge if they are suﬃcient for their application.

Coordinator Attack Since we use a star topology for intraclique transmissions, the central node represents 
a point of vulnerability. If the central node is compromised, it can tamper with transmissions in
that round by dropping, inserting or modifying packets. Herbivore relies on higher-level protocols, such
as SSL and TCP/IP, to prohibit or to recover from such attacks. Overall, the impact of a malicious
center node is limited to one out of every k rounds, when it acts as the center.

Exit Attack A malicious node could attempt to nullify the votes cast during the exit phase to incite
participating nodes to leave the clique during a long-lived transaction. Since center nodes can easily
nullify a veto, we employ multiple coordinators in the exit phase to reduce the likelihood of such an
attack. If a node could observe all broadcast vectors, that is, the XOR of all key streams and the
message, transmitted by all other k − 1 nodes, it could arbitrarily inﬂuence the outcome of the round
by judiciously choosing its own broadcast vector. Herbivore’s star topology prohibits this attack, as
the center node does not transmit its broadcast vector over the network.

Denial of Service Malicious nodes can decrease bandwidth by reserving too many slots, transmitting
without a reservation, or slowing down the round frequency. Similar problems are frequently encountered 
in any domain where there is a common shared channel, like the Ethernet. The ﬁnal line of
defense against such attacks is to simply join a diﬀerent clique. The randomized entry algorithm ensures 
that an attacker cannot feasibly follow a speciﬁc node through clique changes. We further note
that denial of service attacks require substantial bandwidth to launch. For example, if we have 106
cliques transmitting at 100 Kb/s, an attacker transmitting 10 Gb/s will only shut down 10% of the
network. Since round frequency is determined by the slowest node in a clique, a malicious node can
decrease bandwidth by slowing round frequency. However, we can eliminate nodes from a clique that
transmit too slowly. Since a malicious node at the center of the clique topology can make it appear as
if other nodes are transmitting too slowly, we require other members of the clique to conﬁrm a node’s
transmission speed before eliminating it from the clique.

13

6 Applications

Herbivore provides a general purpose anonymous communication channel that can accomodate many diverse 
applications. Herbivore functions as a virtual network-layer protocol and carries encapsulated IP
traﬃc at the anonymous layer. This approach has the beneﬁt of supporting many existing applications
with few or no modiﬁcations to current networking protocols or application binaries. In this section, we
examine some common application scenarios in order of increasing anonymity requirements and discuss
how Herbivore can be used to meet their needs.

Herbivore enables clients to contact traditional network services, such as existing web sites, anonymously.
 Since these services are not expected to participate directly in the Herbivore network, we rely on
proxies to ferry packets between the anonymous and the public network. Each Herbivore node wishing to
communicate with such a service uniformly at random selects one of the nodes in its clique, other than
itself, and anonymously asks for it to serve as a proxy. Selecting a proxy reduces the anonymity of the
sender by just one node, which the aﬀected node treats analogously to a single node failure in the clique.
Since Herbivore provides anonymity, not privacy, applications need to ensure that the data they send do
not betray their user’s identities. For instance, anonymous web browsers should not send cookies containing
usernames over the anonymous channel. An end-to-end encryption protocol will typically be necessary to
ensure that other nodes in the clique do not eavesdrop on the contents of such communication. In this
mode of deployment, Herbivore provides anonymity for clients, but the identities of the web services that
reside outside Herbivore are exposed.

When both communication endpoints are part of the Herbivore network, Herbivore can hide the identities 
of both communication endpoints from third parties. A good example of such an application is
messaging and two-way teleconferencing. These applications require a scheme to locate the receiver within
the greater Herbivore network, and to establish an anonymous channel between the sender and receiver.
The former task of locating users can be performed by ﬂooding the network with a connection request
C ) encrypted with the redestined 
for the receiver (e.g. the vector (x, K ns
cipient’s public key, where K ns
public is its public key, and x is a nonce;
we assume that keys are distributed through external, secure channels). Since Chord lends Herbivore a
connected network topology, several methods are available for eﬃcient broadcast, ranging from cycling
through the ring to ﬂooding to all known entries in the routing table. The receiving node, nr, responds by
sending the message (x, K nr
C . All further communication
occurs directly between ns and nr’s cliques. The random vector x deters replay attacks and provides each
message stream an ID so that nodes can maintain multiple messaging channels.

C is the sender ns’s clique key, K ns

C ), M D5(x, K ns

C ), encrypted with K ns

public, directly to clique K ns

public, K ns

public, K ns

Herbivore also supports strong anonymity guarantees for demanding applications such as anonymous
publishing. The central challenge in anonymous, censorship-resistant publishing is to hide the origin of
information from all other parties, including parties that may store or actively query for a particular
ﬁle. We use an approach inspired by Freenet [3] to hide the identity of a ﬁle originator, while enabling
anonymous queries, caching and retrievals of stored information. We assume that ﬁles are published under
descriptive names, such as “Marx & Engels/The Communist Manifesto,” and that participants query using
these names. A naive implementation would simply port Freenet to Herbivore, and have publishers answer
queries if they happen to store the ﬁle. This implementation is subject to an intersection attack: initially,
there is a single copy of the ﬁle, and if the sole publisher ever answers a query from within more than
one clique, his identity can be compromised. We address this problem by anonymously replicating the
document to all nodes within the original clique in response to a query. Since anyone in the clique could
have distributed the document, and since everyone in the clique has a copy, the identity of the original
publisher is concealed even if she were to move across multiple cliques and continue to distribute the
same ﬁle. The replication of the ﬁle across the clique can be performed eﬃciently, as the data packets are
broadcast to all clique members during the transfer to the original requester. This approach oﬀers stronger

14

anonymity guarantees than Freenet; namely, the identity of the original publisher is protected from all
parties, including passive adversaries as well as requesters and clique members.

7 Performance Evaluation

In this section, we present results from a prototype Herbivore implementation to show that the system
is eﬃcient and practical. To our knowledge, this is the ﬁrst implementation of a provably anonymous
communication system.

Our measurements were performed over the Internet using the PlanetLab infrastructure [12]. PlanetLab
is a collection of approximately 100 nodes scattered across 50 academic and industrial research organizations
around the globe. Each PlanetLab node has a 2GHz Pentium IV with 128KB cache and 2GB of RAM,
and is connected to other PlanetLab nodes via the public Internet. Consequently, the measurements shown
below directly measure actual performance in a shared wide-area network. Due to the restrictions on the
size of PlanetLab, we restrict our clique sizes to 10 to 40.

Fig. 5. Anonymous communication bandwidth in Herbivore 
between geographically separated nodes in the Internet.
 Error bars indicate interquartile ranges.

Fig. 6. Anonymous communication latency in Herbivore
between geographically separated nodes in the Internet.
Error bars indicate interquartile ranges.

Herbivore achieves high anonymous bandwidth and low messaging latency. Figures 5 and 6, respectively,
plot the median bandwidth and latency achieved by Herbivore over the Internet over 45 runs in November
2002. Due to transient loads and congestion in the Internet, the plots exhibit some variability, though
the interquartile ranges show that the performance of the system is robust across load variations during
diﬀerent times of the day. Overall, the bandwidth is high enough for web browsing, audio stream delivery
and highly compressed video applications, while the latency is low enough for messaging applications, when
the number of simultaneously active senders is small.

Note that the bandwidth and latency reported in Figures 5 and 6 will not degrade with increasing
numbers of hosts in the overall Herbivore network. These graphs plot performance as a function of clique
size. Since anonymous bandwidth and latency are sensitive to the slowest node within a clique, we see
some reduction in bandwidth and an increase in round latency as clique sizes grow. However, Herbivore’s

5101520253035404550100150200250Clique SizeBandwidth (Kb/s)Bandwidth1 Sender2 Senders3 Senders4 Senders510152025303540450.20.40.60.811.21.41.6Clique SizeTime (seconds)Latency1 Sender2 Senders3 Senders4 Sendersglobal topology control algorithm ensures that the performance will remain high by splitting the overall
collection of participants into smaller cliques. Consequently, the right hand side of these ﬁgures represents
the worst-case behavior one would expect from a Herbivore network of any size, assuming a well-provisioned
Internet backbone.

15

Fig. 7. Eﬀective bandwidth utilization ratio for varying
numbers of simultaneously active senders.

Fig. 8. Number of bits sent to transmit a constant
amount of data.

The following graphs provide insights into Herbivore’s performance. Figure 7 plots the eﬀective bandwidth 
utilization within a single clique as a function of simultaneously active senders. By eﬀective bandwidth
utilization, we mean the ratio of anonymous bits transmitted to the number of total bits sent over the wire.
The graph shows that bandwidth utilization in Herbivore is primarily aﬀected by the numbers of simultaneous 
senders in a clique, while anonymity is determined by clique size. Consequently, we can achieve
both a high degree of anonymity and high bandwidth on a lightly loaded Herbivore network. Figure 8
shows the total number of bits a client has to send to transmit a ﬁxed size stream. Collisions are rare,
and the measurement scales linearly with the number of simultaneously active participants in the network,
independent of clique size. Performance improves slightly at small clique sizes due to the star topology
used for transmission.

8 Conclusion

Herbivore is a peer-to-peer system that simultaneously provides strong anonymity, scalability and eﬃciency.
It makes several key contributions to provide all three of these properties at the same time. First, Herbivore
builds on the strong anonymity provided by dining cryptographer networks, and extends the basic protocol
by incorporating an eﬃcient reservation phase and voting protocol. Combined, these novel modiﬁcations to
DC-nets increase eﬀective anonymous bandwidth and facilitate long-lived anonymous transactions. Second,
Herbivore scales by partitioning the overall network into smaller anonymizing cliques. This decouples the
anonymization protocol from the size of the overall network, while it provides suﬃcient participants in an
anonymizing clique to provide eﬀective anonymity. Herbivore partitions the network into smaller cliques
using decentralized entry control and clique maintenance algorithms, layered on top of a distributed hash
table implementation. A secure random entry mechanism for a peer-to-peer network limits the ability of

101520253035400.10.150.20.250.30.350.40.450.50.550.6Clique SizeAnonymous Bits Sent/Total Bits SentBandwidth Utilization1 Sender2 Senders3 Senders 4 Senders101520253035400.40.60.811.21.41.61.82x 104Clique SizeBits Sent (Kb)Total Number of Bits Sent to Send 600 4Kb Anonymous Packets1 Sender2 Senders3 Senders 4 Senders16

malicious nodes to launch concerted attacks. Third, Herbivore is bandwidth and latency eﬃcient. Measurements 
on the public Internet across nodes distributed around the globe demonstrate that the system
achieves suﬃciently high bandwidth and low latency for a wide variety of applications. Herbivore provides
an optimality proof on the star topology used within a clique, presents a constant-space protocol for anonymous 
signaling within a DC-net, and analytically derives the optimal amount of bandwidth to devote to
reservations. Finally, the simplicity of the protocol makes the system analytically tractable, facilitates a
practical implementation and enables us to derive guaranteed bounds for its eﬃciency. Combined, these
properties make Herbivore a practical system that can be layered on top of the Internet to provide strong
anonymity.

Many real world applications rely critically on anonymity: whistle-blowers need secure anonymous
channels, patients need access to medical information without fear of reprisal by insurance companies,
and political dissenters need techniques for voicing their opinions without censorship. Current networking
protocols used on the Internet expose the identity of communicating endpoints. We hope that a practical,
scalable and eﬃcient system that provides strong anonymity will serve as the building-block for supporting
such applications online.

References

1. D. Chaum. Untraceable Electronic Mail, Return Addresses and Digital Pseudonyms. Communications of the

ACM, 24(2):84–88, 1981.

2. D. Chaum. The Dining Cryptographers Problem. Journal of Cryptology, 1(1):65–75, 1988.
3. I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong. Freenet: A Distributed Anonymous Information Storage

and Retrieval System. Lecture Notes in Computer Science, 2009, 2001.

4. W. Diﬃe and M. E. Hellman. New Directions in Cryptography. IEEE Transactions on Information Theory,

22(6):644–654, Nov 1976.

5. S. Dolev and R. Ostrovsky. Xor-Trees for Eﬃcient Anonymous Multicast and Reception. ACM Transactions

on Information and System Security, 3(2):63–84, May 2000.

6. J. Douceur. The Sybil Attack. In Proceedings of the First Workshop on Peer-to-Peer Systems, Cambridge, MA,

2002.

7. M. J. Freedman and R. Morris. Tarzan: A Peer-to-Peer Anonymizing Network Layer. In Proceedings of the 9th
ACM Conference on Computer and Communications Security (CCS 2002), Washington, D.C., November 2002.
8. I. Goldberg and A. Shostack. Freedom Network 1.0 Architecture, November 1999. http://www.freedom.net/.
9. S. Hazel and B. Wiley. Achord: A Variant of the Chord Lookup Service for Use in Censorship Resistant Peer-
to-Peer Publishing Systems. In Proceedings of the First Workshop on Peer-to-Peer Systems, Cambridge, MA,
2002.

10. P. Maymounkov and D. Mazieres. Kademlia: A Peer-to-Peer Information System Based on the XOR Metric.

In Proceedings of the First Workshop on Peer-to-Peer Systems, Cambridge, MA, March 2002.

11. A. Pﬁtzmann and M. Waidner. Networks Without User Observability - Design Options. Computers and

Security, 6(2):158–166, 1987.

12. PlanetLab. An Open Testbed for Developing, Deploying and Accessing Planetary-Scale Services, September

2002. http://www.planet-lab.org.

13. S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker. A Scalable Content Addressable Network.

Technical Report TR-00-010, University of California, Berkeley, Berkeley, CA, 2000.

14. M. K. Reiter and A. D. Rubin. Crowds: Anonymity for Web Transactions. ACM Transactions on Information

and System Security, 1(1):66–92, 1998.

15. A. Rowstron and P. Druschel. Pastry: Scalable, Distributed Object Location and Routing for Large-scale
Peer-to-peer Systems. In Proceedings of the 18th IFIP/ACM International Conference on Distributed Systems
Platforms (Middleware 2001), Heidelberg, Germany, Nov 2001.

16. R. Sherwood, B. Bhattacharjee, and A. Srinivasan. P5: A Protocol for Scalable Anonymous Communication.

In Oakland Security Conference, 2001.

17

17. C. Shields and B. N. Levine. A Protocol for Anonymous Communication over the Internet. In Proceedings of

the ACM Conference on Computer and Communications Security, pages 33–42, 2000.

18. I. Stoica, R. Morris, D. Karger, F. Kaashoek, and H. Balakrishnan. Chord: A Peer-to-Peer Lookup Service for

Internet Applications. In Proceedings of the ACM SIGCOMM Conference, San Diego, CA, Sep 2001.

19. P. F. Syverson, D. M. Goldschlag, and M. G. Reed. Anonymous Connections and Onion Routing. In Proceedings

of the IEEE Symposium on Security and Privacy, pages 44–54, Oakland, California, 4–7 1997.

20. M. Waidner and B. Pﬁtzmann. The Dining Cryptographers in the Disco: Unconditional Sender and Recipient
Untraceability with Computationally Secure Serviceability. Advances in Cryptology EUROCRYPT 89, LNCS434,
 1990.

21. B. Zhao, J. Kubiatowicz, and A. Joseph. Tapestry: An Infrastructure for Wide-area Fault-tolerant Location

and Routing. In Proceedings of the ACM SIGCOMM, pages 161–170, August 2001.

A DC-Nets

We now give a more formal description of DC-nets. Let G = (V, E) be a connected graph with vertex set
V = {v1, . . . vk} that represents the communicating nodes, and edge set E = {e1, . . . em}. By eij ∈ E we
denote the edge between vertices vi and vj. For each edge eij assume nodes vi and vj secretly pick a key
∈ Z2, i.e. only vi and vj know keij . Further suppose each node vi selects a message mi ∈ Z2 and then
keij
broadcasts bi ∈ Z2 where
bi ≡ mi + (cid:88){j|eij∈E}
Then we have(cid:80)i bi ≡(cid:80)i mi (mod 2), since
(cid:88){j|eij∈E}
n(cid:88)

(mod 2).

keij

i=1

keij = 2(cid:88)
≡ 0

e∈E

ke

(mod 2).

In particular, if m1, . . . , mk−1 = 0 then(cid:80)i bi ≡ mk (mod 2). Now, call A ⊂ V an anonymity set of S ⊂ E
if A is a connected component of (V, E \ S). Stated informally, by knowing only the values of {bi} and
{ke | e ∈ S}, we can deduce no more than(cid:80){i|vi∈A} mi. More precisely we have the following result [2]:
(m1, . . . mk). Then for (b1, . . . , bk) and (m1, . . . , mk) with(cid:80)i mi ≡(cid:80)i bi (mod 2), we have

Theorem 1. Using the notation above, let K = (ke1, . . . , kem) be a random variable with uniform distribution 
over Zm
2 , and let B(m, K) be the broadcasts from the nodes when they transmit messages m =

1
2k−1 .
In particular, the above probability is independent of the message m.

P(cid:0)B(m, K) = {bi}k
1(cid:1) =

Consequently, if G is the complete graph on n vertices, then vertices {v1, . . . , vj} that reveal to each
other their secret keys can only determine(cid:80)n

i=j+1 mi, not the speciﬁc messages {mi}.

