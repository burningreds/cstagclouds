The Meaning of Erasing in RDF under the

Katsuno-Mendelzon Approach

In Memory of Alberto O. Mendelzon

Claudio Gutierrezc Carlos Hurtadoc Alejandro Vaismanc
cDepartment of Computer Science, Universidad de Chile

{cgutierr,churtado,avaisman}@dcc.uchile.cl

ABSTRACT
The basic data model for the Semantic Web is RDF. In this
paper we address updates in RDF. It is known that the semantics 
of updates for data models becomes unclear when
the model turns, even slightly, more general than a simple 
relational structure. Using the framework of KatsunoMendelzon,
 we deﬁne a semantics for updates in RDF. Particularly 
we explore the behavior of this semantics for the
“erase” operator (which in general is not expressible in RDF).
Our results include a proposal of sound semantics for RDF
updates, a characterization of the maximal RDF graph which
captures exactly all consequences of the erase operation expressible 
in RDF, and complexity results about the computation 
of this graph and updates in RDF in general.

1.

INTRODUCTION

The Semantic Web is a proposal oriented to represent
Web content in an easily machine-processable way. The basic 
layer of the data representation for the Semantic Web
recommended by the World Wide Web Consortium (W3C)
is the Resource Description Framework (RDF) [12]. The
RDF model is more than a simple relational structure; its
expressivity turns more general the existential conjunctive
fragment of ﬁrst order logic by adding transitivity of some
predicates and inheritance axioms. From a database point
of view, it can be viewed as an extension of a representation
system along the lines of naive tables without negation [1].
In this paper we concentrate on the problem of updating
RDF data.
In the last two years the semantic web community 
has shown an increasing interest in this problem.
However, the existing proposals have so far ignored the semantic 
problems associated to the presence of blank nodes
and of RDFS vocabulary with built-in semantics [15, 17, 22,
14], and tackled the subject from a syntactical point of view.
Related to the update problem in RDF, some studies have
addressed changes in an ontology [13, 19], and more recently,

Copyright is held by the author/owner.
Ninth International Workshop on the Web and Databases (WebDB 2006),
June 30, 2006, Chicago, Illinois.

Supported by Millennium Nucleus Center for Web Research, Grant
P04-67-F, Mideplan, Chile, and the Project Procesamiento y Analisis
Semantico de Servicios Web, Fondecyt No. 1050642.

the representation and querying of temporal information in
RDF [6] has been also studied.

1.1 The Problem of Updates in RDF

Updates and Revision. The semantics of updates for data

models becomes diﬃcult when the model turns –even slightly–
more general than a simple relational structure [4]. For
knowledge bases, the abstract general problem of updating 
is: what should be the result of changing a theory T
with a sentence ϕ? As Katsuno and Mendelzon [10] argued,
the answer to this problem depends on the application at
hand. There is a fundamental distinction between update
(now in a technical sense) and revision [11, 10]. Update
means bringing the knowledge base up to date when the
world described by it changes; revise means incorporating
new information obtained about a static world. This discussion 
is relevant when facing updates in the RDF model.
Thus, the distinction between update and revision becomes
of central importance. On the one hand, one of the main
design goals of the RDF model is allowing distributed revisions 
of the knowledge base in the form of addition of information 
in a monotonic way [20]. By some classic results
of Gardenf¨ors [3], the notion of revision becomes trivial in
this setting. On the other hand, when viewing RDF from a
database point of view (i.e., huge but delimited repositories
of metadata, like metadata for a library, for instance), the
notion of update becomes relevant. In this paper we concentrate 
on this latter notion, and follow the approach of
Katsuno and Mendelzon [10].

Updates in RDF. Management, in particular maintainability,
 of RDF data needs a well deﬁned notion of update.
The problem becomes relevant since the standardization of
a query language for RDF [16]. We will show that the problem 
of characterizing these changes in RDF is far from being
trivial and raises interesting practical and theoretical issues
that, so far, have been overlooked.

Consider for example the case of a web music store that
uses Semantic Web technology for making it easier to ﬁnd
information about artists depending on their music styles.
This is a very dynamic environment, where artists and music 
styles are continuously being updated. Figure 1 shows
a small portion of this web site, where sc means “subclas-
sOf”, type indicates an instance of a class, and an edge
between two nodes represents a triple of the form, for instance 
(a, sc, c). Suppose we want to delete all triples containing 
the value artist in Figure 1 (a). The result, clearly,
is the one shown in Figure 1 (b), where dashed lines indicate

from tables to instances, and a set of allowed operations (like
insertion, join, and so on). If the exact result of all allowed
expressions can be computed, we have a strong representation 
system. Otherwise, we may limit to obtain approximate
answers (and we have a weak representation system). A result 
by Imielinsky and Lipski [9] states that representation
systems based on naive tables (a relation containing variables 
and constants) are weak for the standard relational operations 
not including negative selection nor set diﬀerence.
In [1] this result is extended to consider updates. They show
that, for naive tables, adding the insertion operation yields
a weak representation system. However, if Ω contains positive 
selection, projection, and deletion, we do not have a
weak representation system. This result is explained by the
fact that naive tables do not handle disjunction. The conclusion 
is that naive tables are adequate for querying but
not for updates. As RDF can be considered an extension of
a representation system based on the notion of naive tables
without negation, we conclude that, in order to be appropriate 
for handling update and erase, RDF would need negation
and disjunction.

Updates in graph databases. Updates have been also
studied in the context of graph databases. This is relevant
to our work because the RDF model is closely related to
graph data models [2]. In particular, the Graph-based data
model (GDM) and its update language GUL, introduced by
Hidders [8] are based on pattern matching. Two basic operations 
are deﬁned in GUL: addition and deletion. In the case
of deletion, there is a base pattern which contains a core pattern.
 The nodes, edges and class names that are not in core
pattern are deleted for every matching of the base pattern.
This approach is a promising line to implement in RDF the
semantic notions presented in this paper.

Updates in web databases: XML and RDF. XML
Updates have been extensively addressed in the XML world.
Tatarinov et al [18] proposed an XQuery extension that has
been the ﬁrst step leading to the proposal currently under
study at the W3C [21]. The W3C speciﬁed the properties 
required for update operators in XML. RDF Updates
have recently attracted the attention of the RDF community.
 Nevertheless, all proposals have so far ignored the semantic 
problems arising for updates associated to the existence 
of blank nodes and the presence of RDFS vocabulary
with built-in semantics. Sarkar [17] identiﬁed ﬁve update
operators, also based on [18]. These operators are: Add,
InsertAfter, Delete, Remove, and Replace, and presented algorithms 
for the Add and InsertAfter operations. Zhan [22]
proposed an extension to RQL, and deﬁned a set of update
operators. Both works deﬁne updates in an operational way,
and semantic issues are considered to a very limited extent.
Another approach was proposed by Ognyanov and Kiryakov
[15]. The main statement of this approach is that the two
basic types of updates in an RDF repository are the addition 
and the removal of a statement (triple). Then, the work
turns simply into a description of a graph updating procedure,
 where labels indicate a version of the graph at a certain
moment in time. Finally, Magiridou et al [14] recently proposed 
RUL, a declarative update language for RDF. They
deﬁne three operations, insert, delete and modify. The proposal 
is based on RQL and RVL. The main drawback of this
work is that it does not consider blank nodes and schema

Figure 1: Deleting all triples containing “artist”.

Figure 2: Deleting the triple (guitarplayer, sc, artist).

the deleted arcs and nodes. However, if we want to delete
the triple (guitarplayer, sc, artist), a reasonable semantics
for this operation must ensure that the triple above cannot 
be deduced from the updated database. This semantics
yields two possible results, depicted in Figures 2 (a) and
(b). Additionally, we have to decide what to do with the
triple (J.P age, type, artist): was it inserted directly, or was
deduced from the triples (J.P age, type, guitar player) and
(guitar player, sc, artist)? (see Section 3). In the former
case, it should stay; in the latter it should be deleted. What
is to be done? Expressing the new scenario is beyond the
expressivity of RDF. One of the goals of this paper is to
give a sound semantics for this operation. In this version,
we concentrate on ground graphs (i.e., RDF graphs without
blank nodes) and the operation of erase. In this direction,
we characterize the formulas expressible in RDF which remain 
logical consequences of a graph G after erasing from it
another graph H.

The paper is organized as follows. In Section 2 we discuss 
related work. Section 3 reviews RDF concepts and
presents a formalization of RDF. In Section 4 we introduce
our semantics for updates based on the Katsuno-Mendelzon
approach. Section 5 presents a characterization of erasing
in RDF. Section 6 studies the complexity of the update and
erase operations proposed. We conclude in Section 7.

2. RELATED WORK

Updates in knowledge bases and representation
systems. The semantics of an incomplete database (i.e.
a relational databases containing incomplete information)
is the set of all of its possible states. Updates are then
deﬁned over this interpretation. Thus, a deletion would
consist in eliminating a tuple from every possible database
state. Analogously, an insertion must be applied to all possible 
states. The notion of representation system comes in
to determine the degree in which the system is capable of
expressing the new state of the database. In short, a representation 
system is composed of a set of tables, a mapping

artistJ. Pageguitar playerperformertypetypescscscartistJ. Pageguitar playerperformertypetypescscsc(b)(a)guitar playerperformertypetypescscsc(b)artistJ. Pageguitar playerperformertypetypescscsc(a)J. Pageartistupdates, i.e., the issues that raise the most interesting theoretical 
issues. Leaving these issues out turns the problem
trivial. Thus, the authors basically end up dealing with
changes to instances of classes.

3. PROBLEM STATEMENT

3.1 Review of Basic RDF Notions

We present here a streamlined version of RDF. The material 
of this subsection can be found in [5] with more detail.
There is an inﬁnite set U (RDF URI references); an inﬁnite 
set B = {Nj : j ∈ } (Blank nodes); and an inﬁnite
set L (RDF literals). A triple (v1, v2, v3) ∈ (U ∪ B) × U ×
(U ∪ B ∪ L) is called an RDF triple.
In such a triple, v1
is called the subject, v2 the predicate and v3 the object. We
often denote UBL the union of the sets U , B and L.

Deﬁnition 1. An RDF graph (just graph from now on) is
a set of RDF triples. A subgraph is a subset of a graph. The
universe of a graph G, universe(G), is the set of elements of
UBL that occur in the triples of G. The vocabulary of G,
denoted voc(G), is the set universe(G)∩ (U ∪ L). A graph is
ground if it has no blank nodes. We also deﬁne the union of
two graphs G1, G2, denoted G1 ∪ G2, as the set theoretical
union of their sets of triples.

RDFS Vocabulary. There is a set of reserved words deﬁned
in the RDF vocabulary description language, RDF Schema
–just rdfs-vocabulary for us– that may be used to describe
properties like attributes of resources (traditional attributevalue 
pairs), and also to represent relationships between resources.
 In this paper –following [5]– we will restrict to a
fragment of this vocabulary which represents the essential
features of RDF. It is constituted by the classes rdfs:Class
[class] and rdf:Property [prop], and by the properties rdfs:
range [range], rdfs:domain [dom], rdf:type [type], rdfs: subClassOf 
[sc] and rdfs:subPropertyOf [sp]. We present a semantics 
for this fragment, based on the following set of rules.

GROUP A (Subproperty)

(a, type, prop)

(a, sp, a)

(a, sp, b) (b, sp, c)

(a, sp, c)

(a, sp, b) (x, a, y)

(x, b, y)

GROUP B (Subclass)

(a, type, class)

(a, sc, a)

(a, sc, b) (b, sc, c)

(a, sc, c)

(a, sc, b) (x, type, a)

(x, type, b)

GROUP C (Typing)

(a, dom, c) (x, a, y)

(x, type, c)

(a, range, d) (x, a, y)

(y, type, d)

(1)

(2)

(3)

(4)

(5)

(6)

(7)

(8)

B above, deﬁne G (cid:96)r G ∪ B iﬀ A ⊆ G.

Deﬁnition 2 (Deductive System). Let G be a graph.
For each rule r : A
Also deﬁne G (cid:96)s G(cid:48) iﬀ G(cid:48) is a subgraph of G.
Deﬁne G (cid:96) G(cid:48)
if there is a ﬁnite sequence of graphs
G1, . . . , Gn such that (1) G = G1; (2) G(cid:48) = Gn; and (3)
for each i, either, Gi (cid:96)r Gi+1 for some r, or Gi (cid:96)s Gi+1.
Deﬁnition 3. Let G be an RDF graph. The closure of
G, denoted cl(G), is the maximal set of triples G(cid:48) over
universe(G) plus the rdfs vocabulary such that G(cid:48) contains
G and G (cid:96) G(cid:48).

In the next section we will need the logical notion of a
model of a formula (an RDF graph). The model theory of
RDF (given in [7]) follows standard classical treatment in
logic with the notions of model, interpretation, and entailment 
(denoted |=). See [5] for details. Throughout this
paper we will work with Herbrand models, which turn out
to be special types of RDF graphs themselves. For a ground
graph G, a Herbrand model of G is any RDF graph that contains 
cl(G) (in particular, cl(G) is a minimal model). From
[5] the following results can be deduced.
Proposition 1. G |= H iﬀ cl(H) ⊆ cl(G).
Theorem 1. The deductive system of Deﬁnition 2 is sound
and complete for |=. That is, G1 (cid:96) G2 iﬀ G1 |= G2.
3.2 The Problem

Consider the simplest problem related to the erase operation 
that we can ﬁnd in RDF, and the associated semantic
and complexity issues, namely: delete a tuple t or a set of
tuples H, from an RDF graph G. To illustrate with a concrete 
example, let G = {(a, sc, b), (b, sc, c)}, and consider
the following problems:

Problem 1: Erase (a, sc, c) from G. Result: should (a, sc, c)

be derivable from G after the deletion?. If not, should we
delete (a, sc, b) or (b, sc, c)?

Problem 2: Erase (a, sc, b) from G. Result: before deletion,
 (a, sc, c) was implicit in G (it was entailed by G).
Should it still be in G after deletion?. Should deletion be
syntax-independent?
Problem 3: Erase {(a, sc, b), (b, sc, c)} from G. Result:
is it the empty set?. Either (a, sc, b) or (b, sc, c)?. Again,
should (a, sc, c) be in the result?

A standard approach in KB is to ensure that, after deletion,
 the statement t should not derivable from G, and that
the deletion should be minimal. The result should be expressed 
by another formula, usually in a more expressive
language. For example, if in G above we erase (a, sc, c), the
“faithful” result should be something like (a, sc, b)∨(b, sc, c).
But the problem is that we do not have disjunction in RDF.
In this paper we explore the behavior of the KatsunoMendelzon 
approach to deﬁne a semantics for update in
RDF and concentrate on the characterization of the erase
operation and its consequences over the formulas expressible
in RDF. We will limit ourselves to study these questions for
the case of ground graphs.

4. SEMANTICS OF UPDATE AND ERASE
In this section we address the problem introduced in Section 
3.2. We characterize update and erase operations (i.e.,
adding or deleting an RDF graph H to/from another RDF
graph G) using the Katsuno-Mendelzon approach, that is,
identifying a theory with the set of models that satisﬁes it.

4.1 Katsuno-Mendelzon approach for RDF

The K-M approach to updates can be characterized as
follows from a model-theoretic point of view: for each model
M of the theory to be changed, ﬁnd the set of models of the
sentence to be inserted that are “closest” to M . The set of
all models obtained in this way is the result of the change
operation. Choosing an update operator then reduces to
choosing a notion of closeness of models [4].
Deﬁnition 4. The operator ◦, representing the update of
G with H, is deﬁned as follows:

M od(G ◦ H) = m∈M od(G)

min(M od(H),≤m),

(9)

where min(M od(H),≤m) is the set of models of H minimal
under ≤m, which is a partial order depending on m.

We will use the following notion of distance between models,
 which gives us an order.

Deﬁnition 5 (Order). Let G, G1, G2 be models of RDF
graphs with voc(G) ⊆ voc(G2), voc(G1), and let G be a set of
models of RDF graphs. The symmetric diﬀerence between
two models G1 and G2, denoted as G1 ⊕ G2, is (G1 \ G2) ∪
(G2 \ G1). Then : (1) deﬁne a relation ≤G such that G1 ≤G
G2 (G1 is “closer” to G than G2) if and only if G1 ⊕ G ⊆
G2 ⊕ G; (2) G1 is ≤G-minimal in G if G1 is in G, and if
G2 ∈ G and G2 ≤G G1 then G2 = G1.
4.2 The notion of Update

Working with positive theories, the problem of update
is fairly straightforward. The only concern is keeping the
principle of irrelevance of syntax, i.e., the update should not
depend on the particular syntax of the sentences involved.

Theorem 2. Given the RDF graphs G and H, the update
of G with H, G ◦ H, is expressible as another RDF graph.
Formally, m ∈ (G + H) if and only if m ∈ M od(G ◦ H).

Proof. If m ∈ M od(G + H) then m ∈ M od(G) and
m ∈ M od(H). Then mG = m is the model in M od(G) such
that m is ≤mG -minimal in M od(H). Then, m ∈ M od(G ◦
H). Conversely, let m ∈ M od(H) and mG ∈ M od(G) such
that m is ≤mG -minimal. Then mG ⊆ m: otherwise, (m ∪
mG) <mG m, contradiction. Hence m |= (G + H).
Proposition 2. Let D, G, H be RDF graphs. Then, the
deﬁnition of update satisﬁes the following statements: (1)
D ◦ G |= G; (2) if D |= G then D ◦ G ≡ D; (3) if G1 ≡ G2
and H1 ≡ H2 then G1◦H1 ≡ G2◦H2 (irrelevance of syntax);
(4) (D ◦ G) + H |= D ◦ (G + H); (5) if D ◦ G |= H and
D◦ H |= G then D◦ G ≡ D◦ H. (Note that these statements
are an analogous, in our setting, of the K-M postulates for
update not involving disjunction).
4.3 The notion of Erase

Erasing statements from G means adding models to M od(G).

Deﬁnition 6. The operator •, representing the erasure, is
for graphs G and H, the semantics of
deﬁned as follows:
G • H is given by:

M od(G • H) = M od(G) ∪ m∈M od(G)

min(((M od(H))c,≤m)

(10)

and ( )c denotes complement. In words, the models of (G •
H) are those of G plus the collection of models mH (cid:54)|= H
such that there is a model m |= G for which mH is ≤mminimal 
among the elements of M od(H)c. Compare identity
(9).

Proposition 3. Let D, G, H be RDF graphs. Then, the
deﬁnition of erase satisﬁes the following statements: (1)
D |= D • G; (2) if D (cid:54)|= G then D • G ≡ D; (3) D • G (cid:54)|= G;
(4) if G1 ≡ G2 and H1 ≡ H2 then G1 • H1 ≡ G2 • H2;
(5) (D • G) + G |= D. (Note that these statements are an
analogous, in our setting, of the K-M postulates for erase
not involving disjunction).

Representing faithfully in the RDF language the notions
of update and erase deﬁned above is not possible in the
general case. The Update operator presents no diﬃculties,
and it is in fact an RDF graph (formula). However, the
Erase operator presents problems, arising from the fact that
we have neither negation nor disjunction in RDF.

5. CHARACTERIZING DELETION IN RDF
The following notion is the key to obtain a workable characterization 
of erase (expressed previously only in terms of
sets of models), based on the behavior over the formulas
expressible in RDF.

Deﬁnition 7 (Erase Candidates). Let G and H be RDF
graphs. Then the set of erase candidates of G and H, denoted 
ecand(G, H), is deﬁned as the set of maximal subgraphs 
G(cid:48) of cl(G) such that G(cid:48) (cid:54)|= H.
Proposition 4. Let G, H be RDF graphs. If m (cid:54)∈ M od(G)
and m ∈ M od(G•H), then there is a unique E ∈ ecand(G, H)
with m |= E.

Proof. Let m (cid:54)|= H and mG |= G such that m is ≤mG -
minimal. Consider the subgraph E = (m ∩ cl(G)). Clearly
m |= E, and hence E (cid:54)|= H. Claim: E ∈ ecand(G, H).
Assume E is not maximal with the property of not entailing
H. Then there is t ∈ (cl(G) \ E) with E ∪ {t} (cid:54)|= H. Then
consider m(cid:48) = cl(m∪ t). We have that m(cid:48) (cid:54)|= H and m(cid:48) <mG
m, a contradiction. The uniqueness of E follows from its
maximality.

Proposition 4 states that ecand(G, H) deﬁnes a partition
in the set of models deﬁned by G • H, and each such set is
“represented” by the RDF graph E. Note that the smaller
the size of ecand(G, H), the better the approximation to
G • H of each element in ecand(G, H), being the limit Theorem 
3:
Theorem 3. If ecand(G, H) = {E}, then (G • H) ≡ E.

We are ready for the theorem characterizing the RDF subgraph 
of cl(G) which captures exactly all consequences of
G • H expressible in RDF:

Theorem 4. For all formulas F of RDF,6 ecand(G, H) |=

F if and only if M od(G • H) ⊆ M od(F ).
The proof follows from Proposition 4.

5.1 Computing Erase Candidates
From the discussion above, it follows the relevance of computing 
erase candidates to approximate G• H. We will need
the notion of proof sequence based on the deductive system
from Section 3.

Deﬁnition 8 (Proof Sequence). Let G, H be RDF graphs.
Then a proof sequence of H from G is a sequence of RDF
graphs H1, . . . , Hn such that:
1. H1 ⊆ G and H ⊆ Hn.

2. For each pair Hi+1 and Hi one of the following holds:
(a) (Standard rules) Hi+1 = Hi ∪ {t}, for t1, t2 ∈ Hi
is the instantiation of a rule (see rules

and t1 t2
in Secc 3).

t

(b) (Mapping rule) µ(Hi+1) = Hi for a mapping µ.

Because of Theorem 1, proof sequences are sound and

complete for testing entailment.

The ﬁrst element in a proof sequence P will be called
base(P ). base(P ) is a minimal base for the graphs G, H iﬀ
it is minimal under set inclusion among the bases of proofs
of H from G, that is, for every proof P (cid:48) of H from G,
base(P ) ⊆ base(P (cid:48)). We refer to the set of minimal bases
of G, H as minbases(G, H).

We use the following notion of a cover for a collection of
sets. A cover for a collection of sets C1, . . . , Cn is a set C
such that C ∩ Ci is non-empty for every Ci.

Lemma 1. Let G, H be RDF graphs. C is a cover for the
set minbases(G, H) iﬀ (G \ C) (cid:54)|= H.

Proof. (If) If C is not a cover, then there is a minimal
base B ∈ (G \ C). Then there is a proof P for H from
G\ P , where base(P ) = B, contradicting that (G\ C) (cid:54)|= H.
(Only If) Suppose not. Then there is a proof P for H from
G \ C. We have that there is no minimal base B such that
B ⊆ base(P ). Hence base(P ) is a minimal base for G, H,
contradicting that C is a cover for all minimal bases.

Theorem 5. Let G, H, D be RDF graphs. Then C is a
minimal cover for the collection of sets minbases(G, H) iﬀ
(i) (G \ C) (cid:54)|= H and (ii) G \ C is a maximal subgraph G(cid:48) of
G such that G(cid:48) (cid:54)|= H.

Proof. Follows from Lemma 1. It can be easily veriﬁed
that the minimality of C implies the maximality of G \ C
and vice versa.
Corollary 1. Let G, H, D be RDF graphs. E ∈ ecand(G, H)
if and only if E = cl(G) \ C for C a minimal cover for the
collection of sets minbases(cl(G), H).

6. COMPLEXITY

In this section we study the complexity of computing an
erase operation (computing update is straightforward). We
show that computing erase candidates reduces to ﬁnding
cuts in a class of directed graphs that encode RDF graphs.
Finding erase candidates reduces to compute RDF graphs
we call delta candidates. We denote dcand(G, H) the set of
RDF graphs {(cl(G)\G(cid:48)) : G(cid:48) ∈ ecand(G, H)}. Each of the
graphs in dcand(G, H) will be called a delta candidate for
G, H. Notice that the delta candidates can be alternatively
deﬁned as minimal graphs D ⊆ cl(G) such that (cl(G)\D) (cid:54)|=
H.
6.1 Minimal Cuts

We will need the following standard notation related to
cuts in graphs. Let (V, E) be a directed graph. A set of

edges C ⊆ E disconnects two vertices u, v ⊆ V iﬀ each
path from u to v in the graph passes through a vertex in
C.
In this case C is called a cut. This cut is minimal if
the removal of any node from C does not yield another cut.
We also generalize cuts for sets of pairs of vertices yielding
multicuts. A minimal multicut for a set of pairs of nodes
(u1, v1), (u2, v2), . . . , (un, vn) is a minimal set of edges that
disconnects ui and vi. Given a graph G and a set of pairs
of nodes N , we denote by MinCuts(N, G) the set of minimal
multicuts of N in G. Notice that when N has a single pair
MinCuts(N, G) is a set of cuts.

We will show that, in general, an element in dcand(G, H)
is the union of two cuts: one deﬁned in a directed graph we
will denote G[sc], and the other in a graph denoted G[sp].
Given an RDF graph G, denote by G[sc] = (N, V, λ) the
labeled directed graph deﬁned in Table 1. For each triple of
the form speciﬁed in the ﬁrst column of the table, we have
the corresponding edge in V . The set of nodes N consists of
all the nodes mentioned in the edges given in the table. The
function λ : E → G maps each edge in E to a triple in G,
according to Table 1. The labeled directed graph G[sp] is
deﬁned similarly in Table 1. As notation, we use the letters
n and m to refer distinctly to nodes in G[sc] and G[sp],
respectively.

Triple
(a, sc, b)
(a, type, b)
(a, type, class)

(p, sp, q)
(a, p, b)
(p, dom, c)
(p, range, c)

Edge in G[sc]
(na, nb)
(na, nb)
(na, na)
Edges in G[sp]
(mp, mq)
(ma,b, mp) (mb,a, mp)
(mp, mc,dom)
(mp, mc,range)

Table 1: Description of the graphs G[sc] (above) and
G[sp] (below).

For an RDF triple t we deﬁne a set of pairs of nodes that
speciﬁed the cut problems related to the erase of the triple
t from an RDF graph G. The set t[sc, G] will contain pairs
of nodes in the graph G[sc] and the set t[sp, G] will contain
pairs of nodes in G[sp]. Formally, we denote by t[sc, G]
the pairs of nodes (u, v), u, v nodes in G[sc] as described
in Table 2 (second column). Analogously, we deﬁne t[sp, G]
using Table 2 (third column). As an example, for a triple
of the form (a, sc, b) in a graph G, (a, b, c)[sc, G] contains
the single pair of nodes (na, nb), where both nodes na, nb
belong to G[sc]. Notice that there is always a single pair of
nodes in t[sc, G], and the only case where t[sc, G] may have
several pairs of nodes is when t is of the form (a, type, b).

For an RDF graph U , U [sc, G] is the union of the sets

ti[sc, G], for the triples ti in U .
6.2 Complexity of Erase

For the sake of space, we will present here the case where
the graph to erase has a single triple. Our results can be easily 
generalized to computing erase candidates ecand(G, H)
for the case where H has several triples.
A delta dcand(G, t), will be deﬁned with two sets of graphs,
denoted dcandsc(G, t) and dcandsp(G, t). For each D ∈
dcand(G, t), D = D1 ∪ D2, for of any two RDF graphs

Triple t ∈ G t[sc, G]
(na, nb)
(a, sc, b)
(a, sp, b)
–
–
(a, p, b)
(a, type, c)
(na, nc)

t[sp, G]
–
(ma, mb)
(mab, mp)
pairs (ma,x, mc,dom) for all x
pairs (mx,a, mc,range) for all x

Table 2: Pair of nodes t[sc, G] and t[sp, G] associated
to a triple t in a graph G.

D1 ∈ dcandsc(G, t) and D2 ∈ dcandsp(G, t).
Proposition 5. Let G be an RDF graph, G(cid:48) = cl(G), and
consider a triple t. The following holds: (i) dcandsc(G, t) =
MinCuts(G(cid:48)[sc], t[sc, G(cid:48)]); (ii) dcandsp(G, t) = MinCuts(G(cid:48)[sp],
t[sp, G(cid:48)]).

Proof. (Sketch) Corollary 1 can be expressed in terms
of delta candidates as follows. Let G, H, D be RDF graphs.
Then D ∈ dcand(G, H) iﬀ D is a minimal cover set for
minbases(cl(G), H).
We sketch the proof for the case where t is of the form
(a, sc, b). In this case we can verify that minbases(G(cid:48), H)
corresponds to the RDF triples associated to the simple
paths (paths with no cycles) from na to nb in G[sc]. Therefore,
 it follows that the minimal cuts MinCuts(G(cid:48)[sc], t[sc, G(cid:48)]
are exactly the delete candidates dcand(G, t). Notice that
in the case where t is of the form (a, sc, b), dcand(G, t) =
dcandsc(G, t), because, in this case dcandsp(G, t) is empty.

Theorem 6. Let G, H be ground RDF graphs, and t be
a ground a triple. The problem of deciding whether E ∈
ecand(G, t) is in PTIME.

Proof. (Sketch) From Proposition 5, the problem reduces 
to determine if D = cl(G) \ E is a delta candidate
in dcand(G, t). Let G(cid:48) = cl(G), G(cid:48) can be computed in
polytime. The triples in D yield two sets of edges dcandsc
and dcandsp in the graphs G(cid:48)[sc] and G(cid:48)[sp], respectively.
Thus we have to test (i) whether t[sc, G(cid:48)] is a minimal cut
in G(cid:48)[sc] and (ii) whether t[sp, G(cid:48)] is a minimal (multi)cut
in G(cid:48)[sp]. In both cases the test can be done in PTIME by
simple reachability analysis in the graphs G(cid:48)[sc] and G(cid:48)[sp],
respectively. Testing whether a set of edges S is a minimal 
cut for (v1, u1) in a graph GR = (V, E) can be done
by performing polytime reachability analysis in the graph
as follows. To test whether S is a cut, delete from E the
edges in S, and test whether v1 reaches u1 in this new graph.
To test minimality, do the same test for each set of edges
S(cid:48) ⊂ S resulting from removing a single edge from S. S is
minimal iﬀ all of the S(cid:48)s are not cuts. We proceed similarly
for testing if a set of edges is a minimal multicut.

7. CONCLUSIONS

In this paper we considered an RDF database as a knowledge 
base, and treated the problem of updating the database
in the framework of the traditional proposals of knowledge
base updating. We characterized the update of a graph G
with a graph H within the framework of the K-M approach,
and deﬁned the meaning of the update and erase operations
in RDF on a solid foundation (considering, in the latter case,
that we do not have negation nor disjunction in RDF). We
also provided algorithms for calculating these operations, including 
a detailed complexity analysis. In future work we

will develop an update language for RDF, and extend our
study to more expressive languages, like OWL.

8. REFERENCES
[1] S. Abiteboul and G. Grahne. Update semantics for

incomplete databases. In International Conference on Very
Large Databases(VLDB’85), Stockholm, Sweden, 1985.

[2] R. Angles and C. Gutierrez. Querying RDF data from a

graph database perspective. In European Conference on the
Semantic Web (ECSW’05), pages 346–360, 2005.

[3] P. Gardenf¨ors. Conditionals and changes of belief. Acta

Philosophica Fennica, Vol. XX, pages 381–404, 1978.

[4] G. Grahne, A.O. Mendelzon, and P. Z. Revesz.

Knowledgebase transformations. Journal of Computer and
System Sciences, Vol 54(1), pages 98–112, 1997.
[5] C. Gutierrez, C. Hurtado, and A.O. Mendelzon.
Foundations of semantic web databases. In 23rd.
Symposium on Principles of Database Systems, pages
95–106, 2004.

[6] C. Gutierrez, C. Hurtado, and A. Vaisman. Temporal RDF.
In European Conference on the Semantic Web (ECSW’05)
(Best paper award), pages 93–107, 2005.

[7] Patrick Hayes(Ed.). RDF semantics. W3C Working Draft,

October 1st., 2003.

[8] A.J.H. Hidders. A graph-based update language for

object-oriented data models. Doctoral Thesis, Technische
Universiteit Eindhoven, The Netherlands, 2001.

[9] T. Imielinski and W. Lipski. Incomplete information in

relational databases. Journal of ACM, 31(4), pages
761–791, 1984.

[10] H Katsuno and A. O. Mendelzon. On the diﬀerence between

updating knowledge base and revising it. In International
Conference on Principles of Knowledge Representation and
Reasoning, pages 387–394, Cambridge, MA, 1991.

[11] A.M. Keller and M. Winslett. On the use of extended

relational model to handle changing incomplete
information. IEEE Trans. on Software Engineering,
SE-11:7, pages 620–633, 1985.

[12] O. Lassila and R.(Eds.) Swick. Resource description

framework (RDF) model and syntax speciﬁcation. W3C
Working Draft, 1998.

[13] A. Maedche, B. Motik, L. Stojanovic, R. Studer, and

R. Volz. Establishing the semantic web 11: An
infrastructure for searching, reusing, and evolving
distributed ontologies. In International Conference on
World Wide Web, pages 439–448, 2003.

[14] M. Magiridou, S. Sahtouris, S. Christophides, and

M Koubarakis. RUL: A declarative update language for
RDF. In International Semantic Web Conference, pages
506–521, 2005.

[15] D. Ognyanov and A. Kiryakov. Tracking changes in rdf(s)

repositories. In EKAW’02, pages 373–378, Spain, 2002.
[16] E. Prud’Hommeaux and A. Seaborne (Eds.). SPARQL

query language for rdf. W3C Working Draft, July, 2005.
[17] S. Sarkar and H.C. Ellis. Five update operations for rdf.
Rensselaer at Hartford Technical Report, RH-DOES-TR
03-04, 2003.

[18] I. Tatarinov, G. Ives, A. Halevy, and D. Weld. Updating

XML. In Proceedings of ACM SIGMOD Conference, pages
413–424, Santa Barbara, California, 2001.

[19] U. Visser. Intelligent information integration for the

semantic web. Lecture Notes in Artiﬁcial Intelligence
(3159), 2004.

[20] World Wide Web Consortium. RDF semantics, 2004.

http://www.w3.org/TR/rdf-mt.

[21] World Wide Web Consortium. XQuery Update Facility

Requirements (working draft), 2005.
http://www.w3.org/TR/2005/WD-xquery-update-
requirements-20050603/.

[22] Y. Zhan. Updating RDF. In 21st Computer Science

Conference, Rensselaer at Hartford, 2005.

