RDFS Update: From Theory to Practice

Claudio Gutierrez1, Carlos Hurtado2, and Alejandro Vaisman3

1 Computer Science Department, Universidad de Chile

2 Universidad Adolfo Iba˜nez, Chile

3 Universidad de la Rep´ublica, Uruguay

Abstract. There is a comprehensive body of theory studying updates
and schema evolution of knowledge bases, ontologies, and in particular
of RDFS. In this paper we turn these ideas into practice by presenting
a feasible and practical procedure for updating RDFS. Along the lines
of ontology evolution, we treat schema and instance updates separately,
showing that RDFS instance updates are not only feasible, but also deterministic.
 For RDFS schema update, known to be intractable in the
general abstract case, we show that it becomes feasible in real world
datasets. We present for both, instance and schema update, simple and
feasible algorithms.

1 Introduction

RDF has become one of the prime languages for publishing data on the Web,
thanks to initiatives like Linked Data, Open Data, Datagovs, etc. The next
step is to work on the evolution of such data, thus, facing the issue of information 
update. If one analyzes the data that is being published, the vocabulary
used includes the core fragment of RDFS plus some OWL features. This poses
strong challenges to the goal of updating such information. It is well-known
that the problem of updating and schema evolution in Knowledge Bases is both,
intractable and non-deterministic in the general case. For example, erasing a
statement ϕ (that is, updating the knowledge base so that the statement ϕ can
not be deduced from it) not only could take exponential time, but, there could be
many diﬀerent and equally reasonable solutions. Thus, there is no global solution
and the problem has to be attacked by parts.

In this paper we study the problem of updating data under the RDFS vocabulary,
 considering the rest of the vocabulary as constant. Many proposals
on updates in RDFS and light knowledge bases (e.g. DL-lite ontologies) have
been presented and we discuss them in detail in Section 5. Nevertheless, such
proposals have addressed the problem from a strictly theoretical point of view,
making them –due to the inherent complexity of the general problem– hard or
impossible to be used in practice.

Using the Katsuno-Mendelzon theoretical approach (from now on, K-M ap-
proach) for update and erasure [8], which has been investigated and proved
fruitful for RDFS (see [3,4,6]), we show that updates in RDFS can be made
practical. We are able to get this result by (a) following the approach typical in

G. Antoniou et al. (Eds.): ESWC 2011, Part II, LNCS 6644, pp. 93–107, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011

94

C. Gutierrez, C. Hurtado, and A. Vaisman

ontology evolution, where schema and instance updates are treated separately;
(b) focusing on the particular form of the deductive rules of RDFS; and (c) considering 
blank nodes as constants (which for current big data sets is a rather safe
assumption) [1]. In this paper we concentrate in the erasure operation (‘deleting’
a statement), because update (adding information) in RDFS, due to the positive
logic nature of it, turns out to be almost trivial [6]. Our two main results are,
a deterministic and eﬃcient algorithm for updating instances, and a reduction
of the update problem for schema to a graph theoretical problem in very small
graphs.

Regarding instance update, we show that due to the particular form of the
rules involved in RDFS [13], and using a case by case analysis, instance erasure
(i.e., erasing data without touching the schema) is a deterministic process for
RDFS, that is, it can be uniquely deﬁned, hence opening the door to automate it.
Then, we show that this process can be done eﬃciently, and reduces essentially to
compute reachability in small graphs. We present pseudo-code of the algorithms
that implement this procedure.

As for schema erasure, the problem is intrinsically non-deterministic, and worst,
intractable in general. A trivial example is a chain of subclases (ai, sc, ai+1) from
where one would like to erase the triple (a1, sc, an). The minimal solutions consist
in deleting one of the triples. In fact, we show that in general, each solution corresponds 
bi-univocally to the well-known problem of ﬁnding minimal cuts for certain
graphs constructed from the original RDF graph to be updated. This problem is
known to be intractable. The good news here is that the graphs where the cuts
have to be performed are very small (for the data we have, it is almost of constant
size: see Table 1). They correspond essentially to the subgraphs containing triples
with predicates subClassOf and subPropertyOf. Even better, the cuts have to be
performed over each connected component of these graphs (one can avoid cuts between 
diﬀerent connected components), whose size is proportional to the length
of subClassOf (respectively subPropertyOf) chains in the original graph. We also
present pseudo-code for this procedure.

The remainder of the paper is organized as follows. Section 2 reviews RDF
notions and notations and the basics of the K-M approach to erasure. Section 3
studies the theoretical basis of the erasure operations proposed, and Section 4
puts to practice the ideas presenting algorithms for eﬃciently computing erasure
in practice. Section 5 discusses related work. We conclude in Section 6.

2 Preliminaries

To make this paper self-contained we present in this section a brief review of
basic notions on RDF, and theory of the K-M approach to update in RDFS.
Most of the material in this section can be found in [5,6,13] with more detail.

Deﬁnition 1 (RDF Graph). Consider inﬁnite sets U (URI references); B =
{Nj : j ∈ N} (Blank nodes); and L (RDF literals). A triple (v1, v2, v3) ∈ (U ∪
B) × U × (U ∪ B ∪ L) is called an RDF triple. The union of U, B, L will be
denoted by U BL.

RDFS Update: From Theory to Practice

95

Table 1. Statistics of triples in schema, instances and sc, sp chains of some RDF
datasets. (The diﬀerence between # triples and #(schema + instances) is due the
predicates sameAs, sameClass, which being schema, do not have semantics in RDFS.)
# Triples # Schema #Instances {sc, sp}-Chain-length Most used voc.
Dataset
bio2rdf (1)
2,024,177
data.gov.uk 22,504,895
bibsonomy 13,010,898
58,920,361
dbtune
geonames
9,415,253
72,460,981
uniprot

1,963,738
16 22,503,962
0 12,380,306
418 58,248,647
9409247
72458497

type, label
type, value
type, value
type, label

type

type, reif.

685

0
12295

3
1
0
7
0
4

An RDF graph (just graph from now on) is a set of RDF triples. A subgraph
(cid:4)(cid:5)

is a subset of a graph. A graph is ground if it has no blank nodes.

A set of reserved words deﬁned in RDF Schema (called the rdfs-vocabulary)
can be used to describe properties like attributes of resources, and to represent
relationships between resources. In this paper we restrict to a fragment of this
vocabulary which represents the essential features of RDF and that contains the
essential semantics (see [13]): [range], rdfs:domain [dom], rdf:type [type], rdfs:
subClassOf [sc] and rdfs:subPropertyOf [sp]. The following set of rule schemas
captures the semantics of this fragment [13]. In each rule schema, capital letters
A, B, C, D, X, Y,... represent variables to be instantiated by elements of UBL.

GROUP A (Subproperty)

GROUP B (Subclass)

GROUP C (Typing)

(A, sp, B) (B, sp, C)

(A, sp, C)

(A, sp, B) (X, A, Y )

(X, B, Y )

(A, sc, B) (B, sc, C)

(A, sc, C)

(A, sc, B) (X, type, A)

(X, type, B)

(A, dom, C) (X, A, Y )

(X, type, C)

(A, range, D) (X, A, Y )

(Y, type, D)

(1)

(2)

(3)

(4)

(5)

(6)

Deﬁnition 2 (Proof Tree, Deduction). Let G, H be RDF graphs, and t a
triple. Then a proof tree of t from G is a tree constructed as follows: (1) The
root is t; (2) The leaves are elements of G; (3) If t is a node, then t has children
t1, t2 iﬀ t1 t2
is the instantiation of a rule (see rules above). If t has a proof tree
from G we will write G (cid:6) t.

t

96

C. Gutierrez, C. Hurtado, and A. Vaisman

A deduction of H from G is a set of proof trees from G, one for each t ∈ H.(cid:4)(cid:5)

Deﬁnition 3 (Closure). Let G be an RDF graph. The closure of G, denoted
cl(G), is the set of triples that can be deduced from G (under Deﬁnition 2), that
(cid:4)(cid:5)
is, cl(G) = {t : G (cid:6) t}.
The formalization of the K-M approach is based on the models of a theory. Thus
we need the logical notion of a model of a formula (of an RDF graph). The
model theory of RDF (given in [7]) follows standard classical treatment in logic
with the notions of model, interpretation, and entailment, denoted |= (see [5]
for details). Also, throughout this paper we work with Herbrand models, which
turn out to be special types of RDF graphs themselves. For a ground graph G,
a Herbrand model of G is any RDF graph that contains cl(G) (in particular,
cl(G) is a minimal model). Mod(G) will denote the set of such models of G. The
deductive system presented is a faithful counterpart of these model-theoretic
notions:
Proposition 1 (See [5,13]). (1) G |= H iﬀ cl(H) ⊆ cl(G); (2) The deductive 
system of Deﬁnition 2 is sound and complete for |= (modulo reﬂexivity of
sc and sp).1

2.1 Semantics of Erase in RDF

From a model-theoretic point of view, the K-M approach can be characterized
as follows: for each model M of the theory to be changed, ﬁnd the set of models
of the sentence to be inserted that are ‘closest’ to M. The set of all models
obtained in this way is the result of the change operation. Choosing an update
operator then reduces to choosing a notion of closeness of models.

Working with positive theories like RDFS, the problem of adding positive
knowledge (e.g. a triple, a graph H) to a given graph G is fairly straightforward.
In fact, for ground graphs it corresponds to the union of the graphs. (See [6]).
Thus, in what follows we concentrate in the ‘erase’ operation, that is, ‘deleting’
a triple t (or a graph H) from a given graph G. A standard approach in KB
is to ensure that, after deletion, the statement t should not be derivable from
G, and that the deletion should be minimal. The result should be expressed by
another formula, usually in a more expressive language. We next characterize the
erase operation using the K-M approach, which essentially states that, erasing
statements from G means adding models to Mod(G), the set of models of G.
Deﬁnition 4 (Erase Operator). The operator •, representing the erasure, is
deﬁned as follows: for graphs G and H, the semantics of G • H is given by:

Mod(G • H) = Mod(G) ∪

min(((Mod(H))c,≤m)

(7)

(cid:2)

m∈Mod(G)

1 As in [13], we are avoiding triples of the form (a, sc, a) and (b, sp, b), because this

causes no harm to the core of the deductive system (see [13]).

RDFS Update: From Theory to Practice

97

where ( )c denotes complement. In words, the models of (G • H) are those of G
plus the collection of models mH (cid:9)|= H such that there is a model m |= G for
which mH is ≤m-minimal among the elements of Mod(H)c.
(cid:4)(cid:5)
The following standard notion of distance between models gives an order which
is the one we will use in this paper. Recall that the the symmetric diﬀerence
between two sets S1 and S2, denoted as S1 ⊕ S2, is (S1 \ S2) ∪ (S2 \ S1).
Deﬁnition 5 (Order ≤m). Let G, G1, G2 be models of RDF graphs, and let G
be a set of models of RDF graphs. Then : (1) G1 ≤G G2 (G1 is ‘closer’ to G
than G2) if and only if G1 ⊕ G ⊆ G2 ⊕ G; (2) G1 is ≤G-minimal in G if G1 ∈ G,
and for all G2 ∈ G, if G2 ≤G G1 then G2 = G1.
(cid:4)(cid:5)
Representing faithfully in RDF the notions of erase deﬁned above is not possible
in the general case, given its lack of negation and disjunction. The next example
illustrates the problems.
Example 1. Let us consider the graphs G = {(a, sc, b), (b, sc, c)}, and H =
{(a, sc, c)}. Any graph G
(cid:4) representing the result of this update cannot contain
both (a, sc, b), and (b, sc, c), since this would derive (a, sc, c). Then, the result of
the update should be {(a, sc, b)}∨{(b, sc, c)}. Elaborating on this a little further,
in Equation 7, Mod(H)c are the models that cannot derive (a, sc, c). From these
models, min((Mod(H))c,≤m) contains the ones at distance ‘1’ from Mod(G),
namely {{(a, sc, b)},{(b, sc, c)}}. Any model that does not include (a, sc, b) or
(b, sc, c) is at distance ≥ 2 from M od(G). Moreover, any model including both
(cid:4)(cid:5)
triples would not be in (Mod(H))c since it would derive (b, sc, c).

2.2 Approximating Erase in RDF

Knowing that it is not possible in general to ﬁnd RDF graphs representing the
new state after erasure, we study the ‘closest’ RDF formulas that express it. In
this direction, we introduce the notion of erase candidate, which gives a workable
characterization of erase (expressed previously only in terms of sets of models).

Deﬁnition 6 (Erase Candidate). Let G and H be RDF graphs. An erase
(cid:4) (cid:9)|= H. We
candidate of G • H is a maximal subgraph G
denote ecand(G, H) the set of erase candidates of G • H.
(cid:4)(cid:5)
Example 2. For the RDF graph G of Figure 1 (a), the set ecand(G,{(a, sc, d)})
(cid:4)(cid:5)
is shown in Figure 2 (a).

(cid:4) of cl(G) such that G

The importance of ecand(G, H) resides in that it deﬁnes a partition of the set
of models of G • H, and a set of formulas whose disjunction represents erase:
Theorem 1 (See [6]). Let G, H be RDF graphs.
1. If E ∈ ecand(G, H), then E ∈ Mod(G • H).
2. If m ∈ Mod(G•H) and m (cid:9)∈ Mod(G), then there is a unique E ∈ ecand(G, H)

such that m |= E.

98

C. Gutierrez, C. Hurtado, and A. Vaisman

b

sc

sc

a

d

sc

e

scsc

sc

c

(a)

b

sc

sc

a

sc

sc

sc

d

sc

e

sc
sc

sc

sc

c

(b)

Fig. 1. (a) An RDF Graph G. (b) The closure of G.

sc

sc

a

sc

a

b

c

b

c

sc

sc

d

sc

e

a

sc

sc

scsc

sc

sc

d

sc

e

sc

a

sc

sc

scsc

b

c

b

c

sc

sc

d

sc

sc

e

sc

sc

d

sc

b

sc

sc

a

a

d

d

sc

sc

c

sc

e

a

sc

d

(a)

(b)

Fig. 2. (a) The set of erase candidates ecand(G,{(a, sc, d)}). (b) The set of minimal
bases minbases(cl(G),{(a, sc, d)}).

3. For all formulas F of RDF, (

H) ⊆ Mod(F ).

(cid:3)

E∈ecand(G,H) E) |= F if and only if Mod(G •

Items (1) and (2) in Theorem 1 state that if we had disjunction in RDF, erasure
could be expressed by the following ﬁnite disjunction of RDF graphs:

G • H “=” G ∨ E1 ∨ ··· ∨ En,

where Ej are the erase candidates of G • H. Item (3) states the fact that all the
statements entailed by G • H expressible in RDF are exactly represented by the
RDF graph deﬁned by the intersection of all the erase candidates graphs.
to G • H, being the limit the case when it is a singleton:
Corollary 1. If ecand(G, H) = {E}, then (G • H) ≡ E.

Note that the smaller the size of ecand(G, H), the better the approximation

(cid:4)(cid:5)

RDFS Update: From Theory to Practice

99

3 Computing the Erase in RDF
From the discussion above, it follows that approximating G • H reduces to ﬁnd
the erase candidates of this operation. For working purposes, it is easier to work
with the ‘complement’ of them in cl(G), that we will call delta candidates:

Deﬁnition 7 (Delta Candidates dcand(G, H)). The set of delta candidates,
denoted dcand(G, H), is the set of minimal graphs D ⊆ cl(G) such that (cl(G) \
(cid:4)(cid:5)
D) (cid:9)|= H.
Thus, the relationship between delta and erase candidates is the following:

dcand(G, H) = {(cl(G) \ E) : E ∈ ecand(G, H)}.

(8)

The remainder of this section provides a characterization of delta candidates,

based in the notion of proof tree (Deﬁnition 2).

Deﬁnition 8 (Bases and Minimal Bases). (1) The set of leaves of a proof
tree (of H from G) is called the base of such proof.

(2) A base B of H from G, is a minimal base iﬀ it is minimal under set-
(cid:4)
inclusion among all the bases of proofs of H from G (that is, for every base B
of H from G, it holds B ⊆ B
(cid:4)). We denote minbases(G, H) the set of minimal
(cid:4)(cid:5)
bases of G, H.

Example 3. For the graph G given in Figure 1 (a), the set minbases(cl(G),
(cid:4)(cid:5)
{(a, sc, d)}) contains the graphs given in Figure 2 (b).
We now need to deﬁne the notion of a hitting set.

Deﬁnition 9 (Hitting Set). A hitting set for a collection of sets C1, . . . , Cn
is a set C such that C ∩ Ci is non-empty for every Ci. C is called minimal if it
(cid:4)(cid:5)
is a minimal under set-inclusion.

(cid:4) of cl(G) such that G

Theorem 2. Let G, H, C be RDF graphs. Then, C is a hitting set for the collection 
of sets minbases(G, H) iﬀ (cl(G) \ C) (cid:9)|= H. Moreover, C is a minimal
(cid:4) (cid:9)|= H. (cid:4)(cid:5)
hitting set iﬀ cl(G)\ C is a maximal subgraph G
Proof. (sketch) Note that if C is a hitting set, its minimality follows from the
maximality of its complement, G \ C, and vice versa. Hence we only have to
prove that C is a hitting set for minbases(G, H) iﬀ (G \ C) (cid:9)|= H.
Now we are ready to give an operational characterization of delta candidates in
terms of hitting sets and minimal bases.
Corollary 2. Let G, H, C be RDF graphs. C ∈ dcand(G, H) if and only if C is
(cid:4)(cid:5)
a minimal hitting set for minbases(cl(G), H).
Proof. Follows from the Deﬁnition 7, Theorem 2, and the observation that C ⊆
cl(G) is minimal iﬀ cl(G) \ C is maximal.
(cid:4)(cid:5)

100

C. Gutierrez, C. Hurtado, and A. Vaisman

3.1 Erasing a Triple from a Graph

Now we are ready to present algorithms to compute the delta candidates. We reduce 
computing erase candidates to ﬁnding minimal multicuts in certain directed
graphs. The essential case is the deletion of one triple.

Deﬁnition 10 (Minimal Cut). Let (V, E) be a directed graph. A set of edges
C ⊆ E disconnects two vertices u, v ⊆ V iﬀ each path from u to v in the graph
passes through a vertex in C. In this case C is called a cut. This cut is minimal
if the removal of any node from C does not yield another cut.

Cuts can be generalized to sets of pairs of vertices yielding multicuts. A minimal 
multicut for a set of pairs of nodes (u1, v1), (u2, v2g), . . . , (un, vn) is a min-
(cid:4)(cid:5)
imal set of edges that disconnects ui and vi, for all i.

For a triple t in a graph G, we will show that the graphs in dcand(G, t) correspond
to certain cuts deﬁned in two directed graphs derived from G, that we denote
G[sc] and G[sp], deﬁned as follows:

Deﬁnition 11 (Graphs G[sc] and G[sp]). Given an RDF graph G, we denote
G[sc] = (N, E) the directed graph deﬁned in Table 2. For each triple of the form
speciﬁed in the ﬁrst column of the table, we have the corresponding edges in E.
The set of nodes N is composed of all the nodes mentioned in the edges given in
the table. The directed graph G[sp] is deﬁned similarly in Table 2. We use the
(cid:4)(cid:5)
letters n and m to refer to nodes in G[sc] and G[sp], respectively.

Table 2. Description of the construction of the graphs G[sc] (above) and G[sp] (below)

(na, nb)
(nt,a, nb)

Triple in G Edge in G[sc]
(a, sc, b)
(a, type, b)
Triple in G Edges in G[sp]
(p, sp, q)
(mp, mq)
(a, p, b)
(ma,b, mp)
(mp, mv,dom) for each nc →∗ nv in G[sc]
(p, dom, c)
(p, range, c) (mp, mv,range) for each nc →∗ nv in G[sc]

For an RDF triple t, the set of multicuts (set of pairs of nodes) associated to

the erasure of t from an RDF graph G, is deﬁned as follows:

Deﬁnition 12 (Set of edges t[sc, G] and t[sp, G]). The set t[sc, G] contains
the pairs of nodes (u, v) as described in Table 3 (second column) with u, v nodes
(cid:4)(cid:5)
in G[sc]. Analogously, we deﬁne t[sp, G] using Table 3 (third column).

Example 4. Let us consider graph G on the left hand side of Figure 3. The center
part and the right hand side show, respectively, the graphs G[sp] and G[sc], built
according to Table 2. For example, for the triple t = (d, sc, c), the sets of edges
are (d, sc, c)[sc, G] = {(nd, nc)} and (d, sc, c)[sp, G] = ∅. There are triples which

RDFS Update: From Theory to Practice

101

.

.

p

sp

sp

a

dom

sc

c

f

sc

e

sc

d

type

h

b

G

mc,dom

m
f,dom

.

.

mp

a,bm
G[sp]

nc

nf

ne

nd

n t,h

G[sc]

Fig. 3. An RDF graph G and its associated G[sc] and G[sp] graphs

give rise to multiple pairs of nodes. For example, for the triple t = (a, type, c) and
the graph in Figure 3, the sets contain the pairs (a, type, c)[sc, G] = {(nt,a, nc)}∩
(cid:4)(cid:5)
G[sc] = ∅, and (a, type, c)[sp, G] = {(mab, mc,dom), (mba, mc,dom)}.

Table 3. Construction of the pairs of nodes t[sc, G] and t[sp, G] associated to a triple
t. The minimal multicuts of them in G[sc] and G[sp] respectively, will give the elements
of dcand(G, t) (Theorem 3).

t ∈ G
(a, sc, b)
(a, sp, b)
(a, p, b)
(a, type, c) (nt,a, nc) pairs (ma,x, mc,dom) for all x

t[sc, G]
(na, nb) –
–
–

(ma, mb)
(mab, mp)

t[sp, G]

pairs (mx,a, mc,range) for all x

The next theorem shows that computing the delta candidates can be reduced
to compute minimal multicuts, in particular the set of cuts deﬁned in Table 3 in
the graphs deﬁned in Table 2.

Theorem 3. The elements of dcand(G, t) are precisely the triples of G that
correspond (according to the mapping in Table 2) to the minimal multicuts of
t[sc, G] in G[sc] plus the minimal multicuts of t[sp, G] in G[sp].

Proof. The proof is a case-by-case analysis of each form of t. For t = (a, dom, c)
or t = (a, range, c), the set dcand(G, t) = {t}, because t cannot be derived by
any rule, thus, G (cid:9)|= t if and only if t (cid:9)∈ G.

Case t = (a, sc, b). From the deduction rules in Section 2, t can be deduced
from G if and only if there is a path in G[sc] from na to nb (note that the only
rule that can derive t is (3)). Hence dcand(G, t) is in correspondence with the
set of the minimal cuts from na to nb in G[sc].

Case t = (a, sp, b). This is similar to the previous one. ¿From the deduction
rules, it follows that t can be only be deduced from G if there is a path in G[sp]

102

C. Gutierrez, C. Hurtado, and A. Vaisman

from ma to mb (by rule (1)). Thus dcand(G, t) is the set of the minimal cuts
from ma to mb in G[sp].

Case t = (a, type, c). To deduce t we can use rules (4), (5) and (6). Rule (4)
recursively needs a triple of the same form (a, type, d) and additionally the fact
that (d, sc, c). Thus, t can be derived from G if there is path in G[sc] from nt,a
to nc. Triple t can also be derived from (5) and (6). Let us analyze (5) (the other
case is symmetric). We need the existence of triples (a, P, x) and (P, dom, u)
and u →∗
c in G[sc], i.e., (u, sc, c). Then (a, P, x) can be recursively derived
by rule(2) (and by no other rule); (P, dom, u) should be present; and the last
condition needs (u, sc, c). Hence t can be derived if for some x there is a path
from ma,x to mc,dom in G[sp] (this explains the two last lines of Table 1).

Analyzing the rules, we can conclude that t is derivable from G if and only
if we can avoid the previous forms of deducing it. That is, producing a minimal
cut between nt,a and nc in G[sc] and a minimal multicut between the set of
pairs (max, mc,dom) for all x, and the set of pairs (my,a, mrange,c) for all y, in
the graph G[sp].

Case t = (a, p, b). Here, t can only be derived using rule (2). This needs the
triples (a, q, b) and (q, sp, p). With similar arguments as above, it can be shown
that t can be derived from G iﬀ there is path in G[sp] from ma,b to mp. Hence
(cid:4)(cid:5)
dcand(G, t) is the set of minimal cuts from ma,b to mp in G[sp].

The complexity of the above process is given essentially by the complexity of
ﬁnding minimal multicuts:

(cid:4) = cl(G), G

Theorem 4. Let G, H be ground RDF graphs, and t be a ground triple. The
problem of deciding whether E ∈ ecand(G, t) is in PTIME.
Proof. From Deﬁnition 6, the problem reduces to determine if D = cl(G)\ E is a
(cid:4) can be computed in polytime.
delta candidate in dcand(G, t). Let G
(cid:4)] is a minimal cut in
Theorem 3 shows that we have to test (i) whether t[sc, G
(cid:4)[sp]. In both cases
(cid:4)[sc] and (ii) whether t[sp, G
G
the test can be done in PTIME by simple reachability analysis in the graphs
(cid:4)[sc] and G
(cid:4)[sp], respectively. Testing whether a set of edges S is a minimal
G
cut for (v1, u1) in a graph (V, E) can be done performing polytime reachability
analysis in the graph as follows. To test whether S is a cut, delete from E the
edges in S, and test whether v1 reaches u1 in this new graph. To test minimality,
(cid:4) ⊂ S resulting from removing a single
do the same test for each set of edges S
(cid:4)s are not cuts. We proceed similarly
edge from S. S is minimal iﬀ all of the S
(cid:4)(cid:5)
for testing if a set of edges is a minimal multicut.

(cid:4)] is a minimal (multi)cut in G

3.2 Erasing a Graph from a Graph

The problem of computing erase candidates ecand(G, H) for the case where H
has several triples can be easily reduced to the previous one when H = {t}.
Lemma 1. Let G, H be ground RDF graphs in normal form (i.e. without redundancies,
 see [5]). (i) If E ∈ ecand(G, H), then there exists a triple ti ∈ H

RDFS Update: From Theory to Practice

103

such that E ∈ ecand(G,{ti}); (ii) If D ∈ dcand(G, H), then there exists a triple
ti ∈ H such that D ∈ dcand(G,{ti}).
Proof. (i) Suppose G (cid:9)|= H, then there is a triple ti ∈ H such that G (cid:9)|= ti, which
yields ecand(G, H) = {G} = ecand(G,{ti}). Now we assume that G |= H.
That is H ⊆ nf(G). Let T = (H \ I). T is non-empty because I (cid:9)|= H and
nf(E) = E. Now if T has more than one triple, then we add one triple of T to
(cid:4) ∈ ecand(G, H) which is greater than I contradicting that E is
I and obtain I
maximal. Therefore T must have exactly one triple, say tj. In this case can be
easily veriﬁed that E = ecand(G,{tj}). (ii) Follows directly from (ii).
The intuition of Lemma 1 is that each delete candidate in dcand(G, H) is also a
delete candidate of dcand(G,{ti}) for some triple ti in H. Therefore, the problem
of computing delete candidates reduces to ﬁnding the minimal sets among the
delete candidates associated to each triple in H.
The following result, consequence of Lemma 1(ii), yields a basic procedure for
computing delete candidates: ﬁnd the minimal cuts for ecand(G,{t}) for each
triple t ∈ H, and then ﬁnd the minimum among them.
Proposition 2. Let G and H be ground RDF graphs. Then
dcand(G, H) = min{D : D ∈ (cid:4)

t∈H dcand(G, t)}.

4 Computing the Delta Candidates in Practice
We have seen that if we had disjunction, erase could be expressed as G • H =
G ∨ E1 ∨ ··· ∨ En, where the Ei’s are the erase candidates. From each Ei we
get a delta candidate Di = cl(G) \ Ei. In Section 3 we studied how to compute
the Di’s borrowing standard machinery from graph theory. This computation
is hard in the general case. In practice, however, there are two factors which
turn this computation feasible. First, in RDFS data, as in most data models,
schemas are small and stable, and data are large and dynamic. Second, what
really matters when computing RDFS updates of schemas are small parts of the
schema, essentially the length of the subclass and subproperty chains. Table 1
shows some examples of well-known RDF datasets.

Taking into account these observations, we present practical and feasible algorithms 
for updating RDF data. We concentrate in the case of a single triple
which is the kernel of the operation (as can be deduced from Lemma 1).

4.1 Computing RDF Schema Erasure

We have already reduced the computation of erasure to that of computing the
set ecand(G, t). Algorithm 1 indicates the steps to be done. We have so far
studied the decision problem related to computing the set of erase candidates.
Generating ecand(G, H) (respectively dcand(G, H)) requires, in the worst case,
time exponential in the size of the graphs G[sp] and G[sc]. Indeed, the number of

104

C. Gutierrez, C. Hurtado, and A. Vaisman

Algorithm 1. Compute dcand(G, t) (General Case)
Input: Graph G, triple t
Output: dcand(G, t)
1: Compute G := cl(G)
2: Compute G[sc]
3: Compute G[sp]
4: Compute t[sc, G]
5: Compute t[sp, G]
6: Compute minimal multicults for t[sc, G] in G[sc, G]
7: Compute minimal multicults for t[sp, G] in G[sp, G]

cuts could be exponential. Standard algorithms on cut enumeration for directed
graphs can be adapted to our setting [10].

The good news is that what really matters is the size of the maximal connected
component of the graphs (one can avoid cuts between disconnected components).
In our case, the size of the connected components of G[sc] and G[sp] are small,
and a good estimation of it is the length of the maximal chain of sc and sp
respectively (very small in most real-world datasets). Based on the above, Algorithm 
2 would be a feasible one for updating schemas in most practical cases.

Algorithm 2. Update schema of G by erasing t
Input: Graph G, triple t
Output: G • t
1: Choose an ordering on predicates (see e.g.
2: Compute dcand(G, t)
3: Order the elements D ∈ dcand(G, t) under this ranking
4: Delete the minimal D from G

[9], 2.3)

4.2 Computing RDF Instance Erasure

For instance erasure, the situation is optimal, since it assumes that the schema of
the graph remains untouched. In this setting, we will show that (i) the procedure
is deterministic, that is, there is a unique choice of deletion (i.e., dcand(G, t) has
a single element); (ii) this process can be done eﬃciently.

Algorithm 3 computes dcand(G, t) for instances. The key fact to note is that
for instances t, that is, triples of the form (a, type, b) or (a, p, b), where p does
not belong to RDFS vocabulary, the minimal multicut is unique. For triples of
the form (a, p, b), it follows from Table 3 that one has to cut paths from mab
to mp in G[sp]. Note that nodes of the form mp are non-leaf ones, hence all
edges in such paths in G[sp] come from schema triples (u, sp, v) (see Table 2).
Because we cannot touch the schema, if follows that if there is such path, the
unique option is to eliminate the edge mab, which corresponds to triples (a, w, b)
in G. For triples of the form (a, type, b) the analysis (omitted here for the sake

RDFS Update: From Theory to Practice

105

Algorithm 3. Compute dcand(G, t) (Optimized version for Instances)
Input: Graph G, triple t
Output: dcand(G, t)
1: Compute G(cid:3)
:= cl(G)
2: Compute G(cid:3)
[sc]
3: Compute G(cid:3)
[sp]
4: Compute t[sc, G(cid:3)
]
5: Compute t[sp, G(cid:3)
]
6: if t = (a, type, b) then
[sc] }
7: D ← {(a, type, z) ∈ G : nz reaches nb in G(cid:3)
8: D ← D ∪ {(a, p, x) ∈ G : max reaches mb,dom in G(cid:3)
9: D ← D ∪ {(y, p, a) ∈ G : mya reaches mb,range in G(cid:3)
10: else
if
11:
12:
13:
14: end if
15: dcand(G, t) ← D

t = (a, p, b) then
D ← {(a, w, b) ∈ G : mab reaches mp in G(cid:3)

end if

[sp] }
[sp] }

[sp] }

of space) is similar, though slightly more involved. The cost of Algorithm 3 is
essentially the computation of the graphs G[sc] and G[sp] and then reachability
tests. Once the triples are ordered by subject and object (time O(n lg n)), the
rest can be done in linear time.

5 Related Work

Although updates have attracted the attention of the RDF community, only
updates to the instance part of an RDF graph have been addressed so far.
Sarkar [15] identiﬁes ﬁve update operators: and presented algorithms for two
of them. Zhan [18] proposes an extension to RQL, and deﬁnes a set of update 
operators. Both works deﬁne updates in an operational way. Ognyanov and
Kiryakov [14] describe a graph updating procedure based on the addition and
the removal of a statement (triple), and Magiridou et al [12] introduce RUL, a
declarative update language for RDF instances (schema updates are not stud-
ied). SPARQL/Update [17] is an extension to SPARQL to support updates over
a collection of RDF graphs. The treatment is purely syntactic, not considering
the semantics of RDFS vocabulary. In this sense, our work can be considered as
input for future enrichments of this language to include RDF semantics.

Konstantinidis et al. [9] introduce a framework for RDF/S ontology evolution,
 based on the belief revision principles of Success and Validity. The authors
map RDF to First-Order Logic (FOL), and combine FOL rules (representing
the RDF ontology), with a set of validity rules (which capture the semantics of
the language), showing that this combination captures an interesting fragment
of the RDFS data model. Finally, an ontology is represented as a set of positive

106

C. Gutierrez, C. Hurtado, and A. Vaisman

ground facts, and an update is a set of negative ground facts. If the update causes
side-eﬀects on the ontology deﬁned above, they chose the best option approach
based on the principle of minimal change, for which they deﬁne an order between
the FOL predicates. The paper overrides the lack of disjunction and negation in
RDF by means of working with FOL. Opposite to this approach, in the present
paper we remain within RDF.

Chirkova and Fletcher [3], building on [6] and in [9], present a preliminary
study of what they call well-behaved RDF schema evolution (namely, updates
that are unique and well-deﬁned). They focus in the deletion of a triple from an
RDF graph, and deﬁne a notion of determinism, showing that when deleting a
triple t from a graph G, an update graph for the deletion exists (and is unique),
if and only if t is not in the closure of G, or t is deterministic in G. Although
closely related to our work, the proposal does not study instance and schema
updates separately, and practical issues are not discussed.

Description Logics ontologies can be seen as knowledge bases (KB) composed
of two parts, denoted TBox and ABox, expressing intensional and extensional
knowledge, respectively. So far, only updates to the extensional part (i.e., instance 
updates) have been addressed. De Giacomo et al.
[4] study the nonexpressibility 
problem for erasure. This states that given a ﬁxed Description
Logic L, the result of an instance level update/erasure is not expressible in L
(for update, this has already been proved by Liu et al. [11]). Here, it is also
assumed that the schema remains unchanged (i.e., only the ABox is updated).
For update they use the possible models approach [16], and for erasure, the K-M
approach. Building also in the ideas expressed in [6], the authors show that for
a fragment of Description Logic, updates can be performed in PTIME with respect 
to the sizes of the original KB and the update formula. Calvanese et al. also
study updates to ABoxes in DL-Lite ontologies. They present a classiﬁcation of
the existing approaches to evolution, and show that ABox evolution under what
they deﬁne as bold semantics is uniquely deﬁned [2].

6 Conclusions

Following the approach typical in ontology evolution, where schema and instance
updates are treated separately, we proposed practical procedures for computing
schema and instance RDF erasure, basing ourselves on the K-M approach. We
focused in bringing to practice the theory developed on this topic. As one of
our main results, we have shown that instance erasure is deterministic and feasible 
for RDFS. Further, we presented an algorithm to perform it. For schema
erasure, the problem is non-deterministic and intractable in the general case.
However, we show that since schemas are very small in practice, it can become
tractable. Thus, we proposed an algorithm to compute schema updates, based
on computing multicuts in graphs. Future work includes developing an update
language for RDF based on the principles studied here, and implementing the
proposal at big scale.

RDFS Update: From Theory to Practice

107

Acknowledgements. This work was partly done during a visit of C. Gutierrez to
INCO, Univ. Republica, Uruguay. C. Gutierrez thanks Project Fondecyt 1110287.

References

1. Arenas, M., Consens, M., Mallea, A.: Revisiting blank nodes in rdf to avoid the
semantic mismatch with sparql. In: W3C Workshop: RDF Next Steps, Palo Alto,
CA (2010)
2. Calvanese, D., Kharlamov, E., Nutt, W., Zheleznyakov, D.: Evolution of DL − lite
knowledge bases. In: Patel-Schneider, P.F., Pan, Y., Hitzler, P., Mika, P., Zhang,
L., Pan, J.Z., Horrocks, I., Glimm, B. (eds.) ISWC 2010, Part I. LNCS, vol. 6496,
pp. 112–128. Springer, Heidelberg (2010)

3. Chirkova, R., Fletcher, G.H.L.: Towards well-behaved schema evolution. In:

WebDB (2009)

4. De Giacomo, G., Lenzerini, M., Poggi, A., Rosati, R.: On instance-level update
and erasure in description logic ontologies. J. Log. Comput. 19(5), 745–770 (2009)
5. Gutierrez, C., Hurtado, C.A., Mendelzon, A.O., P´erez, J.: Foundations of semantic
web databases. Journal of Computer and System Sciences (JCSS) 77, 520–541
(2010); This is the Journal version of the paper with same title Presented at the
PODS Conference Proc. PODS, pp. 95–106 (2004)

6. Guti´errez, C., Hurtado, C.A., Vaisman, A.A.: The meaning of erasing in RDF

under the katsuno-mendelzon approach. In: WebDB (2006)

7. Hayes, P. (ed.): RDF semantics. W3C Working Draft (October 1, 2003)
8. Katsuno, H., Mendelzon, A.O.: On the diﬀerence between updating knowledge base
and revising it. In: International Conference on Principles of Knowledge Representation 
and Reasoning, Cambridge, MA, pp. 387–394 (1991)

9. Konstantinidis, G., Flouris, G., Antoniou, G., Christophides, V.: A formal approach

for RDF/S ontology evolution. In: ECAI, pp. 70–74 (2008)

10. Lin, H.-Y., Kuo, S.-Y., Yeh, F.-M.: Minimal cutset enumeration and network reliability 
evaluation by recursive merge and BDD. In: IEEE Symposium on Computers
and Communications (ISCC 2003), Kiris-Kemer, Turkey, June 30 - July 3 (2003)
11. Liu, H., Lutz, C., Milicic, M., Wolter, F.: Updating description logic aboxes. In:

KR, pp. 46–56 (2006)

12. Magiridou, M., Sahtouris, S., Christophides, V., Koubarakis, M.: RUL: A declarative 
update language for RDF. In: Gil, Y., Motta, E., Benjamins, V.R., Musen,
M.A. (eds.) ISWC 2005. LNCS, vol. 3729, pp. 506–521. Springer, Heidelberg (2005)
13. Mu˜noz, S., P´erez, J., Gutierrez, C.: Minimal deductive systems for RDF. In: Franconi,
 E., Kifer, M., May, W. (eds.) ESWC 2007. LNCS, vol. 4519, pp. 53–67.
Springer, Heidelberg (2007)

14. Ognyanov, D., Kiryakov, A.: Tracking changes in RDF(S) repositories. In: G´omez-
P´erez, A., Benjamins, V.R. (eds.) EKAW 2002. LNCS (LNAI), vol. 2473, pp. 373–
378. Springer, Heidelberg (2002)

15. Sarkar, S., Ellis, H.C.: Five update operations for RDF. Rensselaer at Hartford

Technical Report, RH-DOES-TR 03-04 (2003)

16. Winslett, M.: Reasoning about action using a possible models approach. In: AAAI,

pp. 89–93 (1988)

17. WWW Consortium. SPARQL/Update: A language for updating RDF graphs

(2008), http://www.w3.org/Submission/SPARQL-Update/

18. Zhan, Y.: Updating RDF. In: 21st Computer Science Conference, Rensselaer at

Hartford (2005)

