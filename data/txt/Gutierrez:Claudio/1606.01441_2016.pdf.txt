Correlation and Substitution in SPARQL

Daniel Hern´andez Claudio Gutierrez Renzo Angles

Version January 14, 2018

Abstract

In the current sparql speciﬁcation the notion of correlation and substitution are
not well deﬁned. This problem triggers several ambiguities in the semantics. In fact,
implementations as Fuseki, Blazegraph, Virtuoso and rdf4j assume diﬀerent semantics.

In this technical report, we provide a semantics of correlation and substitution
following the classic philosophy of substitution and correlation in logic, programming
languages and sql. We think this proposal not only gives a solution to the current
ambiguities and problems, but helps to set a safe formal base to further extensions of
the language.

This work is part of an ongoing work of Daniel Hernandez. These anomalies in the
W3C Speciﬁcation of SPARQL 1.1 were detected early and reported no later than 2014,
when two erratas were registered (cf. https://www.w3.org/2013/sparql-errata#errata-query-8
and https://www.w3.org/2013/sparql-errata#errata-query-10).

6
1
0
2

 
l
u
J
 

2
1

 
 
]

B
D
.
s
c
[
 
 

2
v
1
4
4
1
0

.

6
0
6
1
:
v
i
X
r
a

1

1 Introduction

2

1 Introduction

The ﬁrst version of this technical report served as a starting point to restart
the discussion about the substitution and correlation in SPARQL. This issue
was discussed in several threads on the W3C public-sparql-dev mailing list (see
messages of Jun, 2016 in the mailing list archives1) and a W3C Community
Group2 was created to discuss and address problems with the speciﬁcation of
the EXISTS clause in SPARQL.

This new version of the report ﬁxes errors of the previous one and includes
a formalization of two alternative semantics that are currently implemented:
The ﬁrst by Blazegraph and Fuseki, a semantics where substitution is never
applied because variables that are not projected to resulting solutions are not
visible from outside. The second, by Virtuoso and rdf4j, where every variable
that is not projected to resulting solution are visible from outside, so they can
be substituted. Within the same formal framework, we show the semantics
presented in the previous technical report, where some variables are visible and
other are not.

The main idea of the formal framewok work as follows. Given a graph pattern
P and a solution mapping µ, the Standard Spec. of SPARQL introduces the
notion of substitute(P, µ), that is used to evaluate nested patterns. However,
as we show in this report, this function substitute is not well deﬁned and is
contradictory with other parts of the speciﬁcation.
In this tech report, we
deﬁne a similar function, which we call bind (to avoid clash names), that solves
the problems found. It basically normalizes the pattern P before applying the
mapping µ, giving a new structure norm(P ) that essentially renames variables
so that each one plays the same role in every occurrence.

Structure of this technical report Section 2 presents an example of correlation 
using substitution to exemplify ambiguities of the current speciﬁcation and
diﬀerences of implementations. Section 3 describes the problem with current
notion of substitution. In Section 4 we propose three alternative ways to deﬁne 
bind(P, µ) based in alternative deﬁnitions for norm(P). Section 5 discuss
how the proposed semantics are safe regarding with the use of blank nodes. Finally,
 in Section 6 we present several examples that illustrated how correlation
is evaluated in each semantics and how implementations match them.

2 Evaluation of correlated variables

Consider the following simple sparql query that selects people of country j
that have children, and consider as data the rdf graph depicted in Figure 1
below.

1 https://lists.w3.org/Archives/Public/public-sparql-dev/2016AprJun/
2 https://www.w3.org/community/sparql-exists/

Listing 1

2 Evaluation of correlated variables

3

1

2

3

4

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?parent }})}

:parent

:a

:b

:parent

:c

:parent

:d

:country

:country

:country

:j

:k

Fig. 1: RDF graph.

The engines Fuseki and Blazegraph give as solution two mappings: µa and
µb, where µa is {?parent 7→ :a} and µb is {?parent 7→ :b}. Virtuoso and rdf4j
(formerly Sesame), on the other hand, give a diﬀerent result, only µb. Why
these diﬀerences?

What does the W3C Spec. tell? The query has the form SELECT ?parent
WHERE {P FILTER (EXISTS {Q})}, where we will call P and Q respectively the
outer and the inner graph patterns. How to evaluate this query? The W3C
Spec. gives these two deﬁnitions that are relevant for this:

Deﬁnition 1 (Standard substitution, W3C Spec., §18.6). Let µ be a solution
mapping an P be a graph pattern. Then, substitute(P, µ) is the graph pattern
formed by replacing, for each x in dom(µ), every occurrence of a variable x in
P by µ(x).

Deﬁnition 2 (Evaluation of Exists, W3C Spec. §18.6). Let µ be the current
solution mapping for a ﬁlter and P a graph pattern: The value exists(P), given
D(G), is true if and only if eval(D(G), substitute(P, µ)) is a non-empty sequence.

In deﬁnition 2 above, the argument D(G) denotes that the evaluation is done
against the dataset D using the graph G. For the sake of the readability, in that
follows we use the notation JPKD instead of eval(D(G), P).

The result of the P FILTER (EXISTS {Q}) clause, according to the W3C Spec.,
should be the set Ω such that:3

Ω = {µ ∈ JPKD | Jsubstitute(Q, µ)KD is not empty}.

So, it seems that Virtuoso and rdf4j follow the standard here: First, evaluate
the pattern P, which give mappings µa and µb, and for each of them, perform

3 We will avoid the multiplicities in this report because the problems we report are independent 
of having set or multiset semantics.

2 Evaluation of correlated variables

4

1

2

3

4

5

1

2

3

4

5

the replacement in Q. As Jsubstitute(Q, µa)KD = ∅ and Jsubstitute(Q, µb)K 6= ∅,
the ﬁnal solution is the mapping µb.

In defense of Fuseki and Blazegraph, let us say that the W3C Spec. says
in other place (§12. Subqueries): “Note that only variables projected out of
the subquery will be visible, or in scope, to the outer query.” That is, the
variable :parent inside the WHERE clause is not visible from outside, and thus,
Q cannot be changed by any mapping µ (in the sense of Defn. 1). Thus the
FILTER (EXISTS {Q}) is true, and thus the two mappings µa and µb qualify as
ﬁnal solutions.

The situation becomes even more involved when one considers another way

of writing the previous query. Consider now the query in listing 2.

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

Listing 2

WHERE { ?child :parent ?chparent

FILTER (?chparent = ?parent) }})}

The listings 3 and 4 present the queries resulting of applying the substitution

on the inner graph pattern with the mappings µa and µb, respectively.

Listing 3

Listing 4

SELECT ?child
WHERE {

SELECT ?child
WHERE {

?child :parent ?chparent
FILTER (?chparent = :a)

?child :parent ?chparent
FILTER (?chparent = :b)

}

}

Only the second listing has solutions, so the evaluation of whole query returns
{µb}. Actually, in Virtuoso this query outputs the expected result, that is, {µb}.
On the contrary, in Fuseki and Blazegraph this query outputs no solutions.
These systems are following another part of the W3C Spec. (12. Subqueries):
“Due to the bottom-up nature of SPARQL query evaluation, the subqueries are
evaluated logically ﬁrst, and the results are projected up to the outer query.”
Thus, they probably consider that the inner query returns error because there
is a non-bound variable ?parent.

Engines Examples presented in this report where tested in Fuseki 2.4.04, Blazegraph 
Community Edition 2.1.05, Virtuoso Open Source Edition 76 and rdf4j
2.0 Milestone Builds7.

4 https://jena.apache.org
5 https://www.blazegraph.com
6 https://github.com/openlink/virtuoso-opensource/tree/stable/7
7 http://rdf4j.org

3 Problems with the current notion of substitution

5

3 Problems with the current notion of substitution

The previous examples show that problems arise when is not clear if occurrences
of a variable are correlated8 and, in particular, if substitution has to be applied
in a variable. In this section we will show that one of the main problems with
nested queries in sparql is that the notion of substitution is not well deﬁned.
We will present a solution to this issue, which in turns helps to ﬁx the whole
semantics of nesting.

First, consider the simple graph pattern Q:

SELECT ?x WHERE {:a :p ?x}

and let µ be the solution mapping {?x 7→ 1}. Then, substitute(Q, µ), understood
literally from the standard, means replacing every occurrence of ?x with 1, that
gives:

SELECT 1 WHERE {:a :p 1}

Thus, the substitution method of the W3C Spec. is not well deﬁned because it
breaks the grammar of the SELECT clause.9.

The notion of substitution was already present in SPARQL 1.0 in patterns
of the form P FILTER (C). In SPARQL 1.0 C is a Boolean clause, and here the
substitution works ﬁne because every occurrence of a variable could be replaced
without breaking the grammar. The only case that required a special treatment
was the function bound(?x) where ?x was not substituted, but checked if it was
in the domain of the current solution.

On the contrary, in SPARQL 1.1, the clauses EXISTS {Q} and NOT EXISTS
{Q} are ﬁlter constraints, thus allow nesting a graph pattern Q instead of the
Boolean clause in a ﬁlter. And a graph pattern may contain variables with
occurrences that are not replaceable (as we previously discussed) and variables
with occurrences that are not “visible from outside” Q. Thus, the naive substitution,
 consisting on just replacing all occurrences of a variable, cannot be
directly applied in SPARQL 1.1 as was in SPARQL 1.0.

4 Semantics of nested expressions with correlated variables

In this section we propose three alternatives for the function bind, that is deﬁned 
as alternative to the function substitute for evaluating nested queries with
correlated variables, two of which represent approaches existing in current implementations 
and the other the approach that was proposed in the previous
version of this report.

8 We use “correlated variables” and “correlation” to indicate the occurrence of a variable
x in and expression E whose value depends on the value of the occurrence of same variable x
in an expression containing E. The paradigmatic occurrence of correlation in SPARQL is the
expression Q EXIST FILTER (P).

9 This and more subtle problems that a naive notion of substitution brings are well know
in logic and algebra long ago. For example, a variable x cannot be substituted by a constant
in all its occurrences in the ﬁrst order formula ∀x p(x) or in an expression like Px∈A(x + a).

4 Semantics of nested expressions with correlated variables

6

4.1 The domain of a graph pattern

Given a graph pattern P, we denote as var(P) to the set of variables that occur
in P.

An interesting subset of var(P) is the one that includes the variables that
occur in the solutions of P, that we call the domain of P and denote as dom(P),
that is formally deﬁned as follows10:

dom(P) = {x ∈ dom(µ) | exists dataset D with µ ∈ JPKD.}

This deﬁnition of dataset cannot be used directly to compute the domain
of a graph pattern, because requires the veriﬁcation in all possible datasets.
The following lemma shows that it is possible to give a method to compute the
domain of a graph pattern using only its syntax.

Lemma 1 (In-domain variables). Given a graph pattern P and a variable ?x
occurring in P, then ?x ∈ dom(P) if and only if:

1. P is a basic graph pattern and ?x occurs in P.

2. If P is Q◦R where ◦ is ‘.’, UNION or OPTIONAL and ?x ∈ dom(Q) ∪ dom(R).

3. If P is Q MINUS R where ◦ is ‘.’, and ?x ∈ dom(Q).

4. If P is GRAPH ?x {Q}.

5. If P is GRAPH u {Q} and ?x ∈ dom(Q).

6. If P is VALUES (X) {B} and ?x occurs in the list of variables X.

7. If P is Q BIND (E AS ?x).

8. If P is Q BIND (E AS ?y) and ?x ∈ dom(Q).

9. If P is Q FILTER (C) and ?x ∈ dom(Q).

10. If P is SERVICE u {Q} and ?x ∈ dom(Q).

11. If P is SELECT X WHERE {Q} if X is a list such that one of its elements is

?x or has the form (E AS ?x).

Note that in the SPARQL speciﬁcation variables that are in the domain of
graph pattern are called in-scope and also deﬁned using the syntax (see 18.2.1
in the W3C Spec.). In this report we call them in-domain to stress the idea
that they deﬁne the domain of the output.

10 Recall that dom(µ) is the domain of variables of µ (those where µ is deﬁned) when µ is

considered as a partial function over the set of all variables of the universe.

4 Semantics of nested expressions with correlated variables

7

4.2 Syntax and variables roles

A variable in the syntax can play several roles. Two relevant ones are the
role of representing the the output of a computation (output role) and the one
representing the output of a previous computation (input role). For example,
in the expression let x be f(y) in { g(x,y) } in a functional language, the
variable x is playing the output role in the outermost occurrence and the input
role in the innermost occurrence. On the other hand, y plays the input role in
both occurrences.

These roles are crucial to understand how the substitution of variables by
values work. Indeed, when a variable is in the input role, we can substitute it
without breaking the syntax of the language. On the contrary, a variable in
the output role cannot be substituted, because values cannot be used to name
results of computations.

The question that arises is if we can distinguish the role of a variable occurrence 
in SPARQL. To answer this question, let us to consider the following
types of syntactic constructs in which variables occur:

Expression. In a comparison (e.g., ?x < 2), an scalar operation (e.g., 1+x) or an

scalar function (e.g., substr(?x, 4)).

Pattern. In a basic graph pattern (e.g., ?x :p ?y).

Naming. In any place that only variables are allowed (e.g., E AS ?x), except
when they occur in the bound(·) function (e.g., bound(?x)), that is an
special case.

The ocurrence of variables in the three types of constructs are associated with
the output or input roles as shown in Table 1.

Input Output

Expression
Pattern
Naming

×
×

×
×

Tab. 1: Possible variable roles in types of syntactic constructs.

In occurrences in expressions, it is clear that the variable can be substituted,
because it refers to a value to be used inside the expression. Similarly, in naming
occurrences, it is clear that the variable cannot be substituted, because breaks
the grammar. Moreover, the variable will be used to refer the value in a future
computation so its name cannot be forgotten nor changed.

In the case of occurrences in patterns the variable could have both roles.
Indeed, we can substitute the variable with a value without breaking the semantics,
 so the variable is playing the input role. On the other hand, if the
variable is not substituted, then it will bind a value from the data that will be
available for future computations, so it is playing an output role.

4 Semantics of nested expressions with correlated variables

8

The substitution of variables that are in syntactic constructs of type pattern 
(i.e., in a basic graph pattern) has another issue: A variable ?x that is
replaced by a value in a basic graph pattern P does not appear in the solutions
of evaluating P. Thus, the domain of P will be reduced after the substitution.

This, reduction in the domain of a graph pattern after a substitution, may
produce odd results. Indeed, let P and Q be respectively the basic graph patterns 
{?x :p ?y} and {?y :p ?z}. Let P′ and Q′ be the results of substituting 
?y by :b in P and Q, respectively. Let µ be the solution {?y 7→ :b}.
Then, the graph pattern P.Q has less solutions than P′.Q′ over the dataset
{(:a, :p, :b), (:b, :p, :c)}. This contradicts, the intuition that substituting variables 
with values restrict the results.

4.3 Normalization

The normalization of a graph pattern or expression P is deﬁned to avoid variables
with role ambiguity (i.e., that has simultaneously input and output roles) by
changing the structure of P and replacing every variable occurring in P with a
diﬀerent fresh variable for each scope that can be determined for the variable.
After the normalization process, variables that can be substituted will occur
only in syntactical constructs of type expression, so solving the issue described
at the end of the previous section.

Deﬁnition 3 (Normalization). The normalization of the pattern P, that we
denote as norm(P), is a triple (P′, d, g), where P′ is a pattern whose variables
must be all fresh and d and g are partial functions whose domain and ranges
are as follows:

d : var(P′) → dom(P),
g : var(P′) → var(P),

d is surjective and the domains of d and g are disjoint.

Intuitively, d and g are functions that associate (record) the correspondence
of the fresh variables of P′ with the corresponding original variables P. The
function d represents occurrences of variables that are in the solutions of P and
g represents occurrences of variables that can be substituted by values that µ
maps. The sets range(d) and range(g) could have elements in common. For
example, if P is the graph pattern Q.R then a variable can be in the domain of
Q and simultaneously be a global variable in R,

To give an intuition, here there is an illustration of a normalization in a

simple case. Let P be:

{:a :p ?x} . {:b :q ?y FILTER (?y < ?x)}.

The result of normalizing P is (P′, d, g) where P′ is

{:a :p x1} . {:b :q y1 FILTER (y1 < x2)}

4 Semantics of nested expressions with correlated variables

9

and d and g are respectively the functions

d := {x1 7→ ?x, y1 7→ ?y},
g := {x2 7→ ?x}.

(We use a diﬀerent notation for variables P′ to stress the idea that they are
fresh.) Note that in the pattern P′ in (P′, d, g) each variable plays a unique
role, and the functions d, g “tell” what is the role of each variable and their
relationships.

Note that this example uses a particular normalization according with a speciﬁc 
semantics. An alternative semantics may produce a diﬀerent normalization
(which is only designed to make the role of each variable independent of its
occurrence).

4.4 Substitution and correlated evaluation

We need a pair of notations before introducing the main notions. Given a partial
function f that maps variables to variables and an structure of expression A
where some of this variables occur, then f (A) denotes the result of renaming
consistently in A every variable x ∈ dom(f ) by f (x). Functions can be viewed
a set of ordered pairs. We will use the notation x 7→ f (x) instead of (x, f (x)) to
stress the notion of mapping. Thus, the symbol ∅ (used commonly to denote
empty sets) also denotes empty functions.

Now we are ready to present our main notion:

Deﬁnition 4 (Mapping substitution). Let P be a graph pattern, µ a solution 
mapping and d and g be functions that map variables to variables. Then
µ(P, d, g) is the graph pattern d(P′), where P′ is the graph pattern resulting of
the following substitutions in P:

1. For each binding x 7→ ?x in g substitute every occurrence of bound(x) by

TRUE if ?x ∈ dom(µ) or by FALSE if ?x 6∈ dom(µ).

2. Then, for each binding x 7→ ?x in g substitute every occurrence of x by

µ(?x) if ?x ∈ dom(µ) or by ?x if ?x 6∈ dom(µ).

Deﬁnition 5 (Main: Correlated graph pattern or expression). Let P be a graph
pattern or expression, µ be a solution and norm be a function that receives a
graph pattern and returns triple (P′, d, g) where P′ is a graph pattern and d and
g are functions that map variables to variables. Then:

bind(P, µ) = (cid:26) µ(norm(P)) . µ|dom(P)

µ(norm(P))

if P if a graph pattern,
if P if an expression.

Note that µ|dom(P) denotes the inline data that codify exactly the multiset containing 
the solution µ|dom(P) with multiplicity 1. For example, if µ|dom(P) is the
solution {?x 7→ 1, ?y 7→ 2} then it is codiﬁed as VALUES (?x ?y) {(1 2)}.

4 Semantics of nested expressions with correlated variables

10

The function bind can be used in any place where the function substitute is
used by the Standard Spec. For example, given a dataset D, the graph patterns
P and Q and the expression E, then:

JP FILTER (EXISTS {Q})KD = {µ ∈ JPKD | Jbind(Q, µ)KD is not empty}

JP BIND (E AS ?x)KD = JP KD ⋊⋉ {{?x 7→ Jbind(E, µ)KD}}

In what follows, we present three variants of the normalization function.
Each one, according to Deﬁnition 5 will give a particular semantics. Given a
graph pattern P and its normalization (P′, d, g), these variants diﬀer essentially
in the variables occurring in P that are included in the range of the function g.
Intuitively, variables that are excluded of the ranges of d and g can be considered
local, because the normalization renames them to fresh variables and does not
record the original names.

4.5 Semantics S1

According S1 all variables that are not in the domain of a graph pattern are
considered local. Thus, the normalization in S1 is deﬁned as follows:

Deﬁnition 6 (Normalization in S1). Given a graph pattern P, then norm(P) is
(P′, d, ∅) where:

1. d is a surjective function that maps fresh variables to variables in dom(P).

2. P′ is h(d−1(P)) where h is a function that maps variables in var(P)\dom(P)

to fresh variables.

At the end of this procedure is ensure that all local variables in P are substituted 
P′ with fresh variables that will be not substituted again because the third
component of the normalization is empty. This is summarized in the following
result.

Lemma 2. According the semantics S1, given a graph pattern P, a solution
mapping µ and a dataset D, then:

Jbind(P, µ)KD = JPKD ⋊⋉ {µ|dom(P)}

4.6 Semantics S2

Before deﬁning this semantics we need some deﬁnitions that will help us in the
notation.

Deﬁnition 7 (The ﬁlter clause). Given two variables ?y and ?y then F?x?y is
the operator FILTER (!(bound(?x) && bound(?y)) || ?x = ?y).

The operator F?x?y help us to rewrite a variable that is in the domain of a
graph pattern as a variable whose visibility is global according S2 and S3. For
example, let P and Q be the graph patterns {a :p ?x} and {:x :p ?y} F?x?y,
respectively. Then, intuitively JPKµ = JQKµ for every mapping µ.

4 Semantics of nested expressions with correlated variables

11

Deﬁnition 8 (Consequently renaming). Let be f and g be two functions that
map variables to variables where g is injective. Then, cr(f, g) is the function
g−1|A · f |A where A is range(f ) ∩ range(g) and “·” denotes the composition of
functions11.

If a graph pattern P is composed of the graph patterns Q and R, then results 
natural deﬁning the normalization of P as a composition of the respective
normalizations Q′ and R′ of its components. Because the normalization of these
components are performed independently, the variables in the domain may be
diﬀerent, thus it is needed to rename variables in one of the components to
make both renaming consequent in the outputs of both components. The following 
lemma show that given to renamings f and g where g is injective, then
cr(f, g) can be used to generate a function g′ that is compatible with f , that is
(cr(f, g))(g).

Lemma 3. Given two functions f and g that map variables to variables where
g is injective, then (cr(f, g))(g|A) = f |A.

At this point we are ready to proceed with the formalization of the normalization 
in the semantics S2.

Deﬁnition 9 (Normalization in S2). Given a graph pattern or expression P,
then:

1. If P is a basic graph pattern, then norm(P) is (d−1(P), d, ∅), where d is a

function that contains a binding x 7→ ?x for every variable ?x in var(P).

2. If P is SELECT X WHERE {Q} (where X is a list of variables), then norm(P)

is (P′, dP, gP), where:

P′ = SELECT X′ WHERE {Q′}

(Q′, dQ, gQ) = norm(Q)

(dom(P))

Q

dP = dQ|d−1
gP = gQ
X′ = d−1

P (X)

Note that d−1
Q (dom(P)) is the preimage in dQ of dom(P). That is, the set of
variables used in Q to rename variables that are projected in the solution
of P. Thus, dQ|d−1
(dom(P)) is the renaming of variables used in Q, restricted
to the domain of P. Similarly, d−1
P (X) is renaming of variables in X that is
consecuent with the renaming done in Q.

Q

Bindings x 7→ ?x in dQ such that ?x is not in the domain of P are not
included in dP nor in gQ. This, is interpreted as that the cocurrences of ?x
associated to this bindings are assumed local.

11 Note that that is if x ∈ dom(f ) and f (x) ∈ dom(g) then (f · g)(x) = g(f (x)).

4 Semantics of nested expressions with correlated variables

12

3. If P is Q ◦ R where ◦ is ‘.’, OPTIONAL or UNION, then norm(P) is (P′, dP, gP),

where:

P′ = Q′ ◦ f (R′)
(Q′, dQ, gQ) = norm(Q)
(R′, dR, gR) = norm(R)

dP = dQ ∪ f (dR)
gP = gQ ∪ gR
f = cr(dQ, dR)

Note that f is a renaming that ensure that the normalizations of Q and R
use the same common domain variables when they are combained.

4. If P is Q MINUS R, then norm(P) is (Q′ MINUS f (R′), dP, gP), where:

(Q′, dQ, gQ) = norm(Q)
(R′, dR, gR) = norm(R)

dP = dQ
gP = gQ ∪ gR
f = cr(dQ, dR).

The function f is a renaming that ensures that the variables used in the
variables that are common in domains of the normalizations of Q and R
are renamed to the the same fresh variables.

Note that variables that are in dom(R) \ dom(Q) are replaced with fresh
variables that are not included in the domains of dP and gP. Thus, they
are assumed local.

5. If P is GRAPH u {Q} where u is an IRI, then norm(P) is (GRAPH u {Q′}, d, g),

where norm(Q) = (Q′, d, g).

6. If P is GRAPH ?x {Q}, then norm(P) is (GRAPH x {Q′}, dP, gP), where:

(Q′, dQ, gQ) = norm(Q)

dP = (cid:26) dQ

if ?x ∈ range(d)

dQ ∪ {x 7→ ?x} otherwise (x is fresh)

gP = gQ.

7. If P is SERVICE u {Q} where u is an IRI, then norm(P) is (P′, d, g), where

norm(Q) = (Q′, d, g) and P′ = SERVICE u {Q′}.

4 Semantics of nested expressions with correlated variables

13

8. If P is Q FILTER (C), then norm(P) is (P′, dP, gP) where:

P′ = Q′ FILTER (f (C′)),

(Q′, dQ, gQ) = norm(Q),
(C′, ∅, gC) = norm(C),

dP = dQ,
gP = gQ ∪ f (gC),
f = cr(dQ, dC).

9. If P is VALUES (X) {B} where X is a list of variables and B is a list of
bindings to the variables, then norm(P) is (P′, d, ∅), where d has a binding
x 7→ ?x for each variable ?x in X and P′ = d−1(P).

10. If P is Q BIND (E AS ?x) then norm(P) is (P′, dP, gP) where:

P′ = Q′ BIND (f (E′) AS x)

(Q′, dQ, gQ) = norm(Q)
(E′, ∅, gE) = norm(E)

dP = dQ ∪ {x 7→ ?x},
gP = gQ ∪ f (gE),
f = cr(dQ, dE).

11. If P is an expression and {Q1, . . . Qn} is the set of graph patterns that are
directely contained into maximal occurrences of EXITS clauses in P (we
say that an EXITS clause occurrence i is maximal in P if does not occur
another EXITS clause j containing i in P). Then norm(P) is (Pn, ∅, gn)
computed recursively as follows:

(a) Let P0 be P and g0 be the function that include a binding x 7→ ?x
for every variable ?x in P that does not occur in any of the graph
patterns {Q1, . . . Qn}.

(b) For each Qk of the graph patterns in the maximal EXISTS clauses, let
k) be norm(Qk). Then, let Pk the result of replacing in Pk−1

(Q′
the occurrence of Qk by f (Qk) Fx1y1 . . . Fxmym where:

k, d′

k, g′

f = cr(g0, g′
k),
gk = gk−1 ∪ f (g′

k) ∪ h(d′
k)

and h be a function {y1 7→ x1, . . . , ym 7→ xm} that has a binding
y 7→ x for each binding x 7→ ?x in d′
k.

4.7 Semantics S3

In the rules 2 and 4, the semantics S2 assumes that pattern occurrences that are
not in the domain of a graph pattern are local, so they are not included in the

5 Substitution and blank nodes

14

global bindings. On the contrary, S3 assumes that they are global, so the query
is modiﬁed to move variables from graph occurrences to expression occurrences
using operations Fxy. After this transformation, substitution can be applied in
the same way that in semantics S2.

Deﬁnition 10 (Normalization in S3). Given a graph pattern or expression P,
then the normalization of P is computed using the same rules enumerated in the
deﬁnition of the normalization of S3, except the rules 2 and 4, that are replaced
with the following rules:

2. If P is SELECT X WHERE {Q} (where X is a list of variables), then norm(P)

is (P′, dP, gP), where:

P′ = SELECT X′ WHERE {Q′ Fx1y1 . . . Fxmym }

(Q′, dQ, gQ) = norm(Q)
dP = dQ|dom(P)
gP = gQ ∪ h(dQ|dom(Q)\dom(P))
X′ = d−1

P (X)

and h is a function {y1 7→ x1, . . . , ym 7→ xm} that has a binding y 7→ x for
each binding x 7→ ?x in dQ|dom(Q)\dom(P).

4. If P is Q MINUS R, then norm(P) is (P′, dP, gP) where:

P′ = Q′ MINUS {f (R′) Fx1y1 . . . Fxmym )}

(Q′, dQ, gQ) = norm(Q)
(R′, dR, gR) = norm(R)

dP = dQ
gP = gQ ∪ gR ∪ h(dR|dom(R)\dom(P))
f = cr(dQ, dR)

and h is a function {y1 7→ x1, . . . , ym 7→ xm} that has a binding y 7→ x for
each binding x 7→ ?x in dR|dom(R)\dom(P).

5 Substitution and blank nodes

Peter F. Patel-Schneider noticed in the W3C mailing list of SPARQL that substitution 
has problems with blank nodes and a semantics where every variable
can be substituted. Let P be the inner graph pattern of a query and ?x be a
variable that can be substituted in P, in particular with a blank node :b. Then,
there are the following options:

1. ?x occurs in a basic graph pattern and is substituted by :b. Then,
according the speciﬁcation :b is interpreted as an existential variable and
scoped to the basic graph pattern. Thus, :b may represent any element
on the graph, not only :b.

6 Correlation in implementations

15

2. ?x is in an expression occurrence. Then, the substitution of ?x by :b

restricts the resulting bindings to whose where ?x is bound to :b.

3. ?x is in the domain of P. Then, results of P that are not compatible with

{?x 7→ :b} are discarded.

The ﬁrst case results contradictory with the other two.
In fact, it does not
restrict the variable ?x as the other do (and as it is expected for substitution).
In the semantics S3 proposed in this technical report a variable ?x occurring
in a pattern occurrence is considered replaceable with values that come from the
current solution mapping. However, before this substitution the normalization
process moves ?x from the pattern occurrence to an expression occurrence using
a renaming of ?x to ?y and then using an operator F?x?y. Thus, we can conclude
the following lemma:

Lemma 4. The semantics S1, S2 and S3 are safe respect with the blank nodes
substitution issue.

6 Correlation in implementations

This section presents examples of how the proposed semantics work and how
diﬀerent implementations match them. Queries presented in this section are
run against the RDF graph depicted in Figure 1.

For each query, the actual results given by each implementation is shown at

the end of the section.

Example 1

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { ?child :parent ?parent })}

This query gets people of country :j having children. That is, select people
that has solutions for the inner query. The variable ?people is in-domain in the
inner graph pattern for all semantics. Thus, the results of inner graph pattern
are ﬁltered to be compatible with solutions of the outer query µa and µb. The
only solution that has results for the inner graph pattern is µb in each of the
three semantics S1, S2 and S3.

Example 2

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?parent }})}

This query is similar to the presented in Example 1. However, in this case the
variable ?parent in the inner query is in local according with S1 and S2, and

6 Correlation in implementations

16

global according with S3. Thus, the solutions are {µa, µb} for S1 and S2. On
the other hand, the result is {µb} for S3.

Example 3

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?chparent

FILTER (?chparent = ?parent) }})}

This query is similar to the presented in the previous examples. However, in
this case the variable ?parent in the inner query is global according with S2 and
S3, and local according with S1. Thus, the solutions are {µb} for S2 and S3. On
the other hand, the result is {} for S1. Indeed, the ﬁlter condition ?chparent
= ?parent gets an error, because ?parent is unbound .

Example 4

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?chparent

FILTER (bound(?parent)) }})}

This query checks if the variable ?parent is bound in the inner sub-select with
the build-in function bound(?parent). Thus, this query returns {µa, µb} in S2
and S3 and returns {} in S1.

Example 5

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?chparent

FILTER (?chparent = ?parent &&

bound(?parent)) }})}

This query is equivalent to the query of Example 3 according the studied semantics.
 The addition of the condition bound(?parent) must not aﬀect the
result.

Example 6

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child ?chparent

WHERE { ?child :parent ?chparent

6 Correlation in implementations

17

FILTER (?parent = 1 ||

?parent != 1 )}})}

In this example, the ﬁlter clause ?parent = 1 || ?parent != 1 is a tautology
when ?parent is bound. Otherwise, both sides of the disjunction are evaluated
as error so the whole clause gets an error. Thus, the output of this query is
{µa, µb} according S2 and S3 and {} according S1.

Example 7

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT *

WHERE { ?child :parent ?chparent

FILTER (?parent = 1 ||

?parent != 1 )}})}

This example is equivalent with Example 6. In fact, the semantics of the wildcard 
‘*’ is the list of all variables that are in-domain of the query.

Example 8

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?parent

FILTER (?parent = :c)}})}

In this query the variable ?parent has three occurrences. The ﬁrst is in the
outer graph pattern and the other two in the inner graph pattern. In any of the
semantics ?parent is bound to :a and :b in the solutions of the outer graph
pattern.

According S2 and S3 the variable ?parent is local in the inner graph pattern.
Thus it is bound to :a, :b and :c in the inner graph pattern. Then, the ﬁlter
clause of the inner graph pattern is true for :c. Thus, the result of this query
is {µa, µb}.

On the other hand, according S3 the variable ?parent is global in the inner
graph pattern. So, it is replaced with the values comming from the outer graph
pattern. None of this values satisfy the condition ?parent = :c. Thus, the
result of this query is {}.

Example 9

SELECT ?parent
WHERE { ?parent :country :j

FILTER ( EXISTS { SELECT ?child

WHERE { ?child :parent ?parent

FILTER (EXISTS{?parent :parent :d})}})}

6 Correlation in implementations

18

On the dataset used in these examples, This query seems to be equivalent to the
previous query (presented in Example 8), because the graph pattern ?parent
:parent :d only has solutions if ?parent is :c. Thus, in S2 and S3 the result
of this query is {}. On the other hand, in S1 the result of this query is {µa, µb}.

Example 10

SELECT *
WHERE { { { ?x :p ?y } OPTIONAL { ?y :q ?z } }

FILTER ( EXISTS { ?z :r ?v } ) }

Consider the following RDF graph that is the dataset D where we will evaluate
this query.

:p

:p

:p

:a

:e

:h

:b

:f

:i

:q

:q

:c

:g

:r

:d

Fig. 2: RDF graph.

The normalization of the inner graph pattern gives the same result in the
three semantics, because the variables ?z and ?v are in the domain of the inner
graph pattern. Thus, the evaluation of this query is the set Ω deﬁned as:

Ω = {µ ∈ JPKD | JQKD ⋊⋉ {µ} is not empty},

where P and Q are the outer and inner graph patterns, respectively. JPKD and
JQDK are respectively the sets {µabc, µefg, µhi} and {µcd} where:

µabc = {?x 7→ :a, ?y 7→ :b, ?z 7→ :c},
µefg = {?x 7→ :e, ?y 7→ :f, ?z 7→ :g},
µhi = {?x 7→ :h, ?y 7→ :i},
µcd = {?z 7→ :c, ?v 7→ :d}.

Thus, Ω = {µabc, µhi}.

Summary

The following table summarizes the results that the example queries get for
each of the studied semantics and the results that the studied implementations
actually output.

6 Correlation in implementations

19

#

1
2
3
4
5
6
7
8
9
10

S1

{µb}

S2

{µb}

{µa, µb}

{µa , µb}

{}
{}
{}
{}
{}

{µa, µb}
{µa, µb}
{µabc , µhi}

{µb}

{µb}

{µa , µb}
{µa , µb}
{µa , µb}
{µa , µb}
{µabc , µhi}

S3

{µb}
{µb}
{µb}

rdf4j

{µb}
{µb}
{µb}

{µb}

{µa , µb}
{µa , µb}

{}
{}

{µb}

{µa, µb}
{µa, µb}

{}
{}

Virtuoso

Fuseki

Blazegraph

{µb}
{µb}
{µb}

{}

{µb}

{µa, µb}
{µa, µb}
{µa, µb}

{}

{µb}

{µa, µb}

{µb}

{µa, µb}

{}
{}
{}
{}

{µa, µb}
{µa, µb}
{µa, µb}
{µabc , µhi}

{}
{}
{}
{}
{}

{µa, µb}
{µa, µb}
{µabc , µhi}

{µa , µb}

{µa , µb}

{µa, µb}

{µabc , µhi}

{µabc , µhi}

{µabc}

We distinguish two groups of implementations. Blazegraph and Fuseki match
S1 and Virtuoso and rdf4j matche S3. However, only Blazegraph and rdf4j
match their respectively semantics in all the examples.

Fuseki agree with S1 except in the query of Example 7 with . The queries
in the examples 6 and 7 are equivalent. However, in Fuseki the results diﬀer.
This seems as a bug of Fuseki.

Virtuoso agree with S3 except in the queries of examples 4, 8 and 10. The
result given in the query 4 seems as a bug, because it is contradictory that
?parent is unbound when it is bound in query 5. The result given in the query
8 require more study because it is not clear if it is a bug or it is motivated by
a diﬀerent interpretation of the correlation. The result given in the query 10
shows that there are an special treatment with unbound variables.

