Multi-resolution Time Series Discord Discovery

Heider Sanchez and Benjamin Bustos(B)

Department of Computer Science, University of Chile, Santiago, Chile

{hesanche,bebustos}@dcc.uchile.cl

Abstract. Discord Discovery is a recent approach for anomaly detection 
in time series that has attracted much research because of the wide
variety of real-world applications in monitoring systems. However, ﬁnding 
anomalies by diﬀerent levels of resolution has received little attention
in this research line. In this paper, we introduce a multi-resolution representation 
based on local trends and mean values of the time series. We
require the level of resolution as parameter, but it can be automatically
computed if we consider the maximum resolution of the time series. In
order to provide a useful representation for discord discovery, we propose 
dissimilarity measures for achieving high eﬀective results, and a
symbolic representation based on SAX technique for eﬃcient searches
using a multi-resolution indexing scheme. We evaluate our method over
a diversity of data domains achieving a better performance compared
with some of the best-known classic techniques.

Keywords: Time series · Anomaly detection · Discord discovery ·

Indexing

1 Introduction

In light of recent advancements in streaming technologies, the anomaly detection
in time series has become an important task in diﬀerent applications of monitoring 
systems, such as: analysis of video surveillance, multiple sensors in car and
aircraft crashes, tracking of objects in riot detection, traﬃc alert on roads, seismic 
signals, electrocardiograms (ECG), etc. To address the anomaly detection
in time series, we ﬁrst need to deﬁne the type of anomaly that ﬁts the application 
purpose and the data domain. It is a complex issue, because the anomaly
can be associated with outlier points (irregularities, change point), outlier subsequences 
(unusual patterns, novelty), or anomalous relation between variables.
The most common solutions for anomaly detection are built by machine learning
methods [2]. Usually, they are supervised learning techniques and need a time
series sample of “normal” behavior as training model, and in other cases a set
of unusual patterns is required. These sets are provided by a domain expert.

H. Sanchez—Work supported by a research grant from CONICYT-Chile.
B. Bustos—Supported by the Millennium Nucleus Center for Semantic Web Research
under Grant NC120004.

c(cid:2) Springer International Publishing AG 2017
I. Rojas et al. (Eds.): IWANN 2017, Part II, LNCS 10306, pp. 116–128, 2017.
DOI: 10.1007/978-3-319-59147-6 11

Multi-resolution Time Series Discord Discovery

117

However, in many real contexts, obtaining this prior knowledge is a diﬃcult
task. This is where Unsupervised Learning Techniques are used to try to identify 
signiﬁcant patterns, which adjust the knowledge model directly from the
input stream.

We focus this research on outlier subsequences, taking as baseline the Discord 
Discovery Process proposed by Keogh et al. [6]. They previously conducted
an important work to identify the most unusual subsequence of long time series
designing an unsupervised window-based method. The main characteristic of the
subsequences is their level of overlapping; consecutive subsequences are more
similar to each other. Accordingly, there is a necessity for optimal structures
that consider this property for eﬃcient searching. A series of related works about
discord discovery were proposed in the past decade [1,7,8,12]. The main objective 
of these related works was the detection eﬃciency, because the brute force
algorithm has a quadratic order regarding the total number of subsequences.
However, multi-resolution discord discovery has received little attention in this
research line.

In this paper, we introduce (1) a new multi-resolution representation based on
local trends and mean values of the time series. It becomes a parameter-free technique 
when we use the maximum level of resolution which will be deﬁned in this
work. We also propose (2) a symbolic representation derived from the numeric
representation by applying SAX quantization [9] on the trend and value components.
 It also provides us a lower bounding function for indexing time series
collection. The main contribution is (3) a multi-resolution discord discovery technique 
based on this time series representation. The eﬃcacy and eﬃciency of our
approach is experimentally evaluated over a diversity of data domains [5]. We
empirically demonstrate that our method outperforms conventional methods.

2 Background and Related Work

We associate an anomaly into a time series as a subsequence (unusual pat-
tern) which produces a qualitatively signiﬁcant change in the behavior of data.
Unusual patterns are outstanding subsequences that arbitrarily occur and are
associated with residual variation of the time series. This is contrary to the frequent 
patterns that regularly occur and are associated with cyclical or periodic
variation of time series, moreover, they are located into the normal observation
of the time series. Keogh et al. [6] introduced this new approach to avoid creating
a workable deﬁnition for “the most unusual subsequence”, and furthermore it is
an unsupervised method that does not require training data.
Deﬁnition 1 (Non-self match). Given a time series P , containing a subsequence 
Ci of length w and a matching subsequence Cj of the same length, we
say that Cj is a non-self match to Ci if |i − j| ≥ w, where p and q are their
respective starting positions in P .
Deﬁnition 2 (Time Series Discord). Given a time series P , the subsequence
Cj of length w is said to be the discord of P if Cj has the largest distance to its
nearest non-self match.

118

H. Sanchez and B. Bustos

This problem can be solved by a brute force search using a nested loop. The
outer loop takes each subsequence as a possible candidate, and the inner loop is
used to search the candidate’s nearest non-self match. The candidate that has
the greatest such value is the discord. The computational complexity is O(N 2),
where N is the number of subsequences. To improve this complexity, Keogh
et al. [6] proposed a generic algorithm for eﬃcient detection. This algorithm
requires two heuristics that generate two ordered lists of subsequences; one for
the outer loop and the other one for the inner loop. The heuristic Outer is
useful for quickly ﬁnding the best candidate, and the heuristic Inner is useful
for quickly ﬁnding the best nearest non-self match. We break out of the inner
loop if the distance is less than the best-so-far discord distance. Two main related
methods for discord discovery are HOT SAX [7] and HOT iSAX [1], which are
based on SAX representation [9]. SAX splits the time series into segments and
builds a new symbolic time series quantizing the mean values of each segment.
Both techniques build eﬃcient structures to ﬁnd the time series discord using
the discord discovery heuristics.

3 Multi-resolution Trend-Value Approximation

3.1 Why a Trend-Based Representation?

Esmael et al. claim that “using only the value approximation, causes a high
possibility to miss some important patterns in some time series data. SAX does
not pay enough attention to the shapes of the time subsequences and may produce 
similar strings for completely diﬀerent time series” [4]. In this way, several
piecewise approximations based on trend and value features have been recently
proposed [3,4,11]. We focus on the technique 1d-SAX proposed by Malinowski
et al. [11]. This is a compact binary representation to improve the retrieval performance 
using the same amount of information that SAX. Here, SAX is extended
by adding new symbols that represent the slope of each segment. The algorithm
uses linear regression to compute the slope. 1d-SAX works with alphabets of
diﬀerent sizes:

1d-SAX(P, m, αv, αs) = {(ˆv1, ˆs1),··· , (ˆvi, ˆsi),··· , (ˆvm, ˆsm)},

where ˆvi is the average value symbol from an alphabet of size αv, and ˆsi is the
slope symbol from an alphabet of size αs.

We also compare both methods, SAX and 1d-SAX, using an agglomerative
hierarchical clustering to group ﬁve time series in three diﬀerent classes (Fig. 1).
The time series is split into four segments. SAX only takes the mean value while
that 1d-SAX also considers the slope obtaining a better match between time
series 2 and 3 which belong to same class.

In this work, we extend the ability of the local trends to various levels of resolution.
 While the granularity parameter (number of segments) of the piecewise
approximation like SAX and 1d-SAX produces a horizontal segmentation, we propose 
a hierarchical segmentation induced by the resolution level. This segmentation

Multi-resolution Time Series Discord Discovery

119

XAS

XAS-d1

Fig. 1. A comparison of the ability of two time series representations to cluster ﬁve
members of the CBF dataset using the Euclidean distance.

provides greater advantages in design and optimization that will be discussed. Our
time series representation is called Multi-resolution Trend-Value Approximation
(MTVA). The basic idea is to generate trend-value pairs on each level of resolution,
 and then compute the similarity between two MTVA representations using
a distance measure. In addition, we design a symbolic representation to build a
multi-resolution indexing structure for discord discovery.

3.2 Bottom-Up Construction Algorithm
Given the times series P = {p1,··· , pn} and L as the level of resolution deﬁned
by the user, the MTVA representation of P is built following the next steps:
1. We start in the last resolution level L dividing the time series into M = 2L−1
segments of size w = n/M.
2. Let Y = {y1,··· , yw}, be a segment of P in the time segment X =
{x1,··· , xw}, we compute the linear regression on each segment by the function 
lr(x) = ax + b, where:

(cid:2)w
i=1(xj− ¯X)∗yj
(cid:2)w
i=1(xj− ¯X)2

– a =
– b = ¯Y − a ∗ ¯X
– ¯X and ¯Y are the average value of X and Y , respectively.
– The trend-value pair (v, s) of the segment Y is deﬁned by:

• v = a ∗ x1+xw
• s = arctan(a) is the slope,

2 + b is the mean value.

3. For the next resolution levels M = 2{L−2,L−3,··· ,0}, compute the trend-value

pair (v, s) for each segment as follows:
(cid:2)
– v = vi+vi+1
– s = arctan
– vi and xi is the mean value and the average time associated to a segment

vi+1−vi
xi+1−xi

(cid:3)

.

2

in the upper level (see Fig. 2).

120

H. Sanchez and B. Bustos

M T V A(P, 3) = {(v1, s1), ..., (v7, s7)}

Fig. 2. Construction of the Multi-resolution trend-value approximation.

4. The result is an array of all the trend-value pairs:

M T V A(P, L) = {(v1, s1), ..., (vm, sm)}.

Figure 2 shows the MTVA representation of the time series P up the third
level of resolution (L = 3). Parameter L can be automatically computed so
that the spatial complexity of the MTVA representation does not exceed the
space of the original time series, that is, adjusting the total number of segments
m ≤ n/2. On the other hand, m can be deﬁned in terms of the level of resolution
m = 2L − 1. Then solving both equations, we obtain that the maximum level of
resolution for P is Lmax = (cid:5)log2(n/2)(cid:6) + 1.

3.3 MTVA Distance

We ﬁrst need a cost function to measure the distance between trend-value pairs.
Given two pairs pi and qj, we deﬁne the cost function as follows:

cost(pi, qj) = |vp

i − vq

j|2 + |sp

i − sq

j|2,

2 and + π

where both value-domain and slope-domain should have similar range to avoid
that the distance is governed by only one of them. The slope ranges are between
− π
2 , we therefore normalize the time series by a standard normalization 
procedure (e.g. Z-distribution). We then propose a multi-resolution distance
M Dist to measure the dissimilarity between two MTVA representations executing 
the cost function on all levels of resolution:
2l−1(cid:4)

L(cid:4)

M Dist(P, Q) =

cost(pi, qi).

l=1

i=2(l−1)

Multi-resolution Time Series Discord Discovery

121

The computational time of executing M Dist is the sum of the time in each

level of resolution:

T (L) =

L(cid:4)

l=1

Ml =

L(cid:4)

l=1

2l−1 = 2L − 1.

If we compute the distance in the worst case where L is exactly log2(n/2) + 1,
the computational time is of order O(n), where n is the length of the original
time series. Therefore, M Dist in the worst case is theoretically as fast as the
classic distances that work over the raw representation.

3.4 Symbolic Representation
Discretization techniques are used to transform the numeric representation into
a sequence of symbols. This symbolic representation provides us greater ease of
interpretation and simplicity to manage time series collections.
Deﬁnition 3. “Breakpoints are a sorted list of numbers β = {β1, . . . , βα−1},
such that the area under a N(0, 1) Gaussian curve from βi to βi+1 = 1/α (β0
and βα area deﬁned as −∞ and +∞, respectively)” [9]. For example, if α = 4
then the breakpoints are {β1 = −0.67, β2 = 0, β3 = +0.67}.

L) for the slope. In this last case, we use the variance σ2

Gaussian Assumption. To transform the numeric pair pi = (vi, si) to a symbolic 
pair ˆpi = (ˆvi, ˆsi), we quantize separately both values using breakpoints that
produce equal-size areas under the Gaussian curve N(μ, σ2) (similar to 1d-SAX).
Gaussian discretization is feasible for normalized time series, since statistically
the mean value and the slope have a Gaussian distribution [10,11]. As in 1dSAX,
 the breakpoints are determined by the curve N(0, 1) for the mean value
L in terms
and N(0, σ2
of the level of resolution L because each level of resolution generates diﬀerent
slope distributions (Fig. 3), unlike the 1d-SAX that uses a slope variance in
terms of the size of the segment. Additionally, to apply the linear regression
between X and Y , we recommend that both variables have similar range. If
the time series is normalized in N(0, 1), then the temporal component X must
ﬁt in this interval size. In this work, we normalize the length of each segment
X = [1, w] → X = [−1, 1]. In this manner, the variance σ2
L is deﬁned in terms
of the level of resolution independently of the size of the segment.

L = 2

L = 4

L = 6

−1.5 −0.5

0.5

1.5

−1.5 −0.5

0.5

1.5

−1.5 −0.5

0.5

1.5

Fig. 3. Density of the slope varying the level of resolution in ECG time series.

122

H. Sanchez and B. Bustos

Alphabet Size. The alphabet size is delimited by the number of breakpoints
(Deﬁnition 3) and strongly inﬂuences over the compression ratio and the reconstruction 
error. To quantize the trend-value pair, we need two alphabets with size
αv and αs for the mean value and the slope respectively. For conformity, we use
binary symbols where α is power of two [13]. Thus for example, to compress the
numeric MTVA up the level 3 using αv = 4 and αs = 4, we need (2+2)∗(23−1)
bits, it is less than 4 bytes by time series. This symbolic representation will serve
us to diﬀerent applications like indexing and anomaly detection.

3.5

Indexing

To eﬃciently manage MTVA time series datasets, we use the symbolic representation 
to build a hash-based index, where each bucket ˆP envelops a set of similar
MTVA time series. To ﬁlter out distances in the similarity search, we design a
lower bounding function called MINDIST to measure the distance between the
query object Q and a bucket ˆP , so that it is less than the distance between Q
and any object P ∈ ˆP . Before deﬁning MINDIST, we ﬁrst need to deﬁne the
lower bounding function of the trend-value cost, which is denoted as follows:

LB cost(ˆpi, qi) = (Δv)2 + (Δs)2 ≤ cost(pi, qi), where

⎧
⎨
⎩

Δv =
i − βU i| vq
|vq
|βLi − vq
i | vq
0 else,

i > βU i
i < βLi

———
: βLi ≤ vp

i < βU i,

⎧
⎨
⎩

Δs =
i − βU i| sq
|sq
|βLi − sq
i| sq
0 else,

i > βU i
i < βLi

———
: βLi ≤ sp

i < βU i.

Value

Slope

LB cost(ˆpi, qi) = (βLi − vq
2
i )

+ (βLi − sq
2
i )

Fig. 4. Lower bounding trend-value cost. The blue line represents a trend-value pair
stored in our database and the green line is the query (Color ﬁgure online).

Multi-resolution Time Series Discord Discovery

123

The symbol ˆpi is derived from a trend-value pair pi that is located between
two breakpoints βU i < pi ≤ βLi, independently for each pair value (Fig. 4).
MINDIST is then calculated by following equation:

2l−1(cid:4)

M IN DIST ( ˆP , Q, l, α) = α +

LB cost(ˆpi, qi),

i=2(l−1)

where l is the current resolution level and α is the accumulated distance of the
previous levels.

4 Multi-resolution Discord Discovery

The main challenge of the discord discovery approach is to face its quadratic
complexity. In this sense, our MTVA representation together with the discord
discovery heuristics can be used to solve the anomaly detection in time series.
We propose a multi-resolution method called HOT MTVA, which increases the
level resolution of the index when a hash-bucket is overﬂowed (Fig. 5). This
indexing structure allows the perfect ﬁt to our MTVA representation. Moreover,
it is ﬂexible to control the level of resolution of the detected anomaly.

Fig. 5. Multi-resolution index model for the MTVA representation.

4.1 Building Algorithm
Given the times series P of length n, we use an overlapping sliding window of size
w (cid:10) n for extracting all the possible subsequences Ci, i ∈ {1, . . . , (n − w + 1)}
from P . The insertion procedure of a MTVA subsequence Ci into the indexing
structure R is described as follows. Unlike HOT iSAX, we apply hierarchical
quantization to access to hash tables (where each slot is a node) from the lowest
resolution to the maximum resolution. If a terminal node is full, we re-insert
all its associated objects into a hash table of higher level to provide additional
diﬀerentiation, so we create new nodes with the next resolution level of the
current node. We use a size threshold thmax to control the maximum number of
objects in a terminal node (the so-called bucket). As we can see, the indexing
level has dynamic behavior, its incremental value depends of the size of dataset
and the maximum level of resolution (Lmax).

124

H. Sanchez and B. Bustos

4.2 Discord Discovery Heuristics

The discordant subsequence is found applying the optimal discord discovery
procedure [7] using the following heuristics:

Outer Loop Heuristic: We ﬁrst visit all subsequences belonging to the bucket
that contains the minimum number of subsequences starting from the lowest
resolution level. Afterwards, we visit the rest of buckets in random order. This
heuristic ensures that the subsequences that are most isolated, in each resolution
level, will be visited at the beginning of the search as potential candidates.

Inner Loop Heuristic: We then use an inner loop to search the best non-self
match of each selected candidate Cj. We ﬁrst visit all subsequences contained

else if node is internal then

if child node was not visited then

[node, min d] = stack.pop()
if min d > best dist then

d = M IN DIST (child node.str, Cj, node.level, min d)
list.add([child node, d])

Break
list = ∅
for child node ∈ node.children do

Algorithm 1. NNM-Search for the Multi-resolution MTVA Index
Require: (Index R, Query Cj, Window Size w, Threshold Distance thdist)
1: stack.push([R.getN odeRoot(), 0])
2: best dist = ∞
3: best post = −1
4: while stack (cid:3)= ∅ do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
end if
32:
33: end while
34: Return (best dist, best pos)

end for
sorted list = argsort(list)
stack.push(sorted list)

objects = readBucket(node.str)
for Ci ∈ objects do

if |i − j| ≥ w then

d = M Dist(Ci, Cj)
if d < best dist then

best dist = d
best post = j

end if
if d < thdist then

Break

end if

end if

else if node is terminal then

end if

end for

(cid:2) inner loop

(cid:2) break out of inner loop

(cid:2) non-self match?
(cid:2) Multi-resolution Distance

(cid:2) break out of inner loop

Multi-resolution Time Series Discord Discovery

125

in the bucket from which Cj is retrieved. Afterwards, we apply the nearest nonself 
match search algorithm (NNM-Search, Algorithm 1) to visit the rest of the
buckets. This heuristic allows to ﬁrst visit all the subsequences most similar to
Cj increasing the probability of early termination of the loop.

The NNM-Search algorithm performs a hierarchical search across the internal 
nodes using a stack to maintain the nodes ordered in terms of MINDIST
(lines 10 – 17). MINDIST measures the minimum distance between the query
and the current node. The algorithm also applies two breaking statements to
break the inner loop as early as possible: one is associated to MINDIST (line 6)
and the other one is associated to the best-so-far discord distance (line 27).

5 Experimental Results

In this section, we evaluate the performance of our approach to address the anomaly 
detection problem. Eﬀectiveness will be evaluated over a set of 20 real cases
of anomalous time series (with diﬀerent sliding windows) collected by Keogh
et al. [5,6]. Eﬃciency will be evaluated using the same set of long time series
described by Sanchez et al. [12].

5.1 Eﬀectiveness of Our MTVA Representation

We ﬁrst evaluate the accuracy of our trend-value numeric representation over
all anomaly cases. The classic techniques use the Euclidean Distance as measure 
distance over the raw representation of the normalized subsequence. The
normalization process is used to homogenize all subsequences applying implicitly 
two transformations: translation and scaling. This has a problem, though:
the presence of local noise is ampliﬁed by the scaling transformation. This issue
is solved by using a context-dependent parameter ε > 0 for smoothing noisy
subsequences [9,12]. An important feature of our MTVA representation is that
the slope of the noisy segments trends to zero and thereby the unusualness of
noisy subsequences is reduced. Table 1 shows the results obtained by both techniques 
for six values of ε. We evaluate the MTVA using three diﬀerent resolution
levels. We note that the MTVA representation achieves a higher percentage of
true detections when increasing the resolution level to L = 4, this is the common 
maximum level for all the sliding windows. In this way, we assert that our
method is more robust to local noise than the classic ED. Furthermore, we can
improve this percentage up to 100% of true detections ﬁnding the best value for
ε in each of the time series. Additionally, we highlight the ﬂexibility of MTVA
for dynamically working in diﬀerent levels of resolution at runtime.

5.2 Eﬃciency of Our Multi-resolution Index

We accelerate the search using our multi-resolution method HOT MTVA and
compare it with two main state-of-the-art techniques: HOT SAX and HOT iSAX
(Sect. 2). We set the same quantitative information for each technique: αv = 4

126

H. Sanchez and B. Bustos

Table 1. Percentage of true detections using our MTVA representation.

ε

ED MTVA Distance

L = 2 L = 3 L = 4

0.025 60% 60% 67% 70%

0.050 77% 70% 83% 87%

0.075 73% 70% 80% 83%

0.100 80% 73% 83% 87%

0.125 83% 77% 83% 87%

0.150 77% 73% 77% 80%

best

100% –

100% 100%

and αs = 4 for the MTVA index, and αv = 8 for the SAX-based indexes. We
set empirically the maximum number of elements in a bucket as thmax = 50
and the maximum resolution level is restricted to L = 4. Additionally, we add a
search optimization strategy to the HOT SAX algorithm and call it HOT SAX*,
which consists in applying a MINDIST function in the bucket before of visiting
their associated subsequences [9]. Figure 6 shows the eﬃciency of the algorithms
in terms of the number of computed distances. We observe that HOT MTVA is
much more eﬃcient than the other techniques in terms of computed distances.
This eﬃciency advantage is due to multi-resolution properties of our method,
which allows to the outer loop heuristic to ﬁnd quickly the potential candidates
through the resolution levels.

 

s
e
c
n
a
t
s
i
d
d
e
t
u
p
m
o
c
 
f
o
 
r
e
b
m
u
N

1.E+07

1.E+06

)
e
l
a
c
s
 
g
o
l
(

1.E+05

1.E+04

1.E+03

1 K

2 K

4 K

8 K

1 6 K

3 2 K

time series length

HOT_SAX *

HOT_iSAX

HOT_MTVA

Fig. 6. Eﬃciency of our multi-resolution method in anomaly detection.

Multi-resolution Time Series Discord Discovery

127

6 Conclusions and Future Work

We proposed a multi-resolution time series representation (MTVA) which is composed 
of trend-value pairs obtained by applying linear regression linear in each
resolution segment. We also provided a distance measure and its lower bounding
function to perform eﬃcient searches. We demonstrated the utility of our MTVA
representation in Anomaly Detection, where we have highlighted the slope feature 
for mitigating the false unusualness of noisy subsequences. Furthermore, the
eﬃciency of our multi-resolution discord discovery algorithm outperformed the
best existing methods in terms of computed distances. One additional advantage
of the MTVA representation is that the level of resolution was more intuitive
and easier to ﬁne-tune than the number of segments in piecewise approximations.
 Nevertheless, one disadvantage of the trend-value approximation is that it
requires twice the space per segment. Adding a parameter to represent the trend
of the time series, it runs the risk of subtracting simplicity to our concise data
model if it is compared with the SAX technique. Our approach may be used as
baseline for ﬁnding anomalies in diﬀerent levels of granularity. We plan to focus
our method on online anomaly detection for massive streaming data.

References

1. Buu, H.T.Q., Anh, D.T.: Time series discord discovery based on iSAX symbolic
representation. In: Proceedings of Third International Conference on Knowledge
and Systems Engineering (KSE), pp. 11–18 (2011)

2. Chandola, V., Banerjee, A., Kumar, V.: Anomaly detection: a survey. ACM Comput.
 Surv. 41, 1–58 (2009)

3. Dan, J., Shi, W., Dong, F., Hirota, K.: Piecewise trend approximation: a ratiobased 
time series representation. Abstr. Appl. Anal. 2013(4) (2013)

4. Esmael, B., Arnaout, A., Fruhwirth, R.K., Thonhauser, G.: Multivariate time
series classiﬁcation by combining trend-based and value-based approximations.
In: Murgante, B., Gervasi, O., Misra, S., Nedjah, N., Rocha, A.M.A.C., Taniar,
D., Apduhan, B.O. (eds.) ICCSA 2012. LNCS, vol. 7336, pp. 392–403. Springer,
Heidelberg (2012). doi:10.1007/978-3-642-31128-4 29
www.cs.ucr.edu/∼eamonn/discords/

5. Keogh, E., Lin, J., Fu, A.: Univariate Time series discords datasets (2005). http://

6. Keogh, E.J., Lin, J., Fu, A.W.: HOT SAX: eﬃciently ﬁnding the most unusual
time series subsequence. In: Fifth IEEE International Conference on Data Mining,
pp. 226–233, November 2005

7. Keogh, E.J., Lin, J., Lee, S.H., Herle, H.V.: Finding the most unusual time series

subsequence: algorithms and applications. Knowl. Inf. Syst. 11, 1–27 (2007)

8. Kha, N.H., Anh, D.T.: From cluster-based outlier detection to time series discord
discovery. In: Li, X.-L., Cao, T., Lim, E.-P., Zhou, Z.-H., Ho, T.-B., Cheung, D.,
Motoda, H. (eds.) PAKDD 2015. LNCS, vol. 9441, pp. 16–28. Springer, Cham
(2015). doi:10.1007/978-3-319-25660-3 2

9. Lin, J., Keogh, E., Lonardi, S., Chiu, B.: A symbolic representation of time series,
with implications for streaming algorithms. In: Proceedings of 8th ACM SIGMOD
Workshop on Research Issues in Data Mining and Knowledge Discovery, pp. 2–11
(2003)

128

H. Sanchez and B. Bustos

10. Lin, J., Keogh, E.J., Wei, L., Lonardi, S.: Experiencing SAX: a novel symbolic

representation of time series. Data Min. Knowl. Discov. 15, 107–144 (2007)

11. Malinowski, S., Guyet, T., Quiniou, R., Tavenard, R.: 1d-SAX: a novel symbolic
representation for time series. In: Tucker, A., H¨oppner, F., Siebes, A., Swift, S.
(eds.) IDA 2013. LNCS, vol. 8207, pp. 273–284. Springer, Heidelberg (2013). doi:10.
1007/978-3-642-41398-8 24

12. Sanchez, H., Bustos, B.: Anomaly detection in streaming time series based
on bounding boxes. In: Traina, A.J.M., Traina, C., Cordeiro, R.L.F. (eds.)
SISAP 2014. LNCS, vol. 8821, pp. 201–213. Springer, Cham (2014). doi:10.1007/
978-3-319-11988-5 19

13. Shieh, J., Keogh, E.: iSAX: indexing and mining terabyte sized time series. In: Proceedings 
of 14th ACM SIGKDD International Conference on Knowledge Discovery
and Data Mining, pp. 623–631. ACM (2008)

