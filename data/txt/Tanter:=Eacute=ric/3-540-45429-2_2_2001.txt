Reﬂex – Towards an Open Reﬂective Extension

of Java

´Eric Tanter2, Noury M.N. Bouraqadi-Saˆadani1, and Jacques Noy´e1

1 ´Ecole des Mines de Nantes

La Chantrerie - 4, rue Alfred Kastler

B.P. 20722

F-44307 Nantes Cedex 3

{Noury.Bouraqadi, Jacques.Noye}@emn.fr

France

2 University of Chile

Faculty of Physics and Mathematics

Computer Science Department

Av. Blanco Encalada 2120, Casilla 2777

Santiago, Chile

etanter@dcc.uchile.cl

Abstract. Since version 1.1 of the Java Development Kit, the Java reﬂective 
facilities have been successively extended. However, they still
prove to be limited. A number of systems (e.g. MetaXa, Guaran´a, Kava,
Javassist) have addressed this limitation by providing reﬂective extensions 
of Java with richer MetaObject Protocols (MOPs). All these extensions 
provide a particular, monolithic, infrastructure that reﬂects the
commitment of the designer to particular trade-oﬀs between eﬃciency,
portability, expressiveness and ﬂexibility. Unfortunately, these trade-oﬀs
are not satisfactory for all applications, since diﬀerent applications may
have diﬀerent needs. This calls for breaking down the building of a reﬂective 
extension into diﬀerent components that can be specialized in
order to ﬁt speciﬁc needs. We qualify such a reﬂective extension as open.
In this paper, we present Reﬂex, a prototype open reﬂective extension of
Java. Reﬂex can be seen both as a reﬂective extension of Java and as a
ﬁrst step towards a framework for building such extensions.

1 Introduction

Our initial objective was to apply a reﬂective extension of Java to enhance mobile
agent systems with regards to the way the resources attached to a mobile agent
are handled upon migration (see [23]). Using a reﬂective extension in such an
application domain implied several strong requirements such as portability and
the ability to attach a metaobject to only some speciﬁc instances of a given class.
When looking around for appropriate reﬂective extensions, we could not ﬁnd
one that would ﬁt our needs. We therefore started implementing our own simple
extension based on Javassist [5]. In this extension [23], a reﬂective object was
attached to a unique metaobject which understood a single MOP (MetaObject

A. Yonezawa and S. Matsuoka (Eds.): REFLECTION 2001, LNCS 2192, pp. 25–43, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001

26

´Eric Tanter, Noury M.N. Bouraqadi-Saˆadani, and Jacques Noy´e

Protocol) method for trapping method invocations. That is, the metaobject was
activated on each invocation of a public method of its reﬂective object through
hooks introduced via code transformation. These hooks were looking as follows:

metaobj.trapMethodcall(args);

Later on, we discovered that, in some cases, it was necessary to give control
to metaobjects when their base object was being serialized. However this feature
was not oﬀered by our simple reﬂective extension. The code transformation process 
was extended in order to add to each reﬂective class a method of the Java
serialization API, writeReplace, automatically invoked when serialization occurs.
 This method was made to give control to the metaobject via the following
invocation:

metaobj.trapSerialize(args);

This means that the MOP was extended with a new method. The annoying
part of this was that the previously developed metaobjects were not compatible
with the new MOP, since they did not implement the new method. It was all
the more annoying as this extended MOP was only required for some particular
objects and metaobjects.

In fact, the issue we encountered there is a recurrent one. On the one hand,
there are high-level reﬂective extensions providing hardwired choices about MOP
deﬁnition and hook introduction, as well as about some important trade-oﬀs
such as performance vs. portability. What happens then if these choices are not
compatible with the application requirements? On the other hand, there are
low-level byte-code manipulation APIs allowing the deﬁnition of a custom-built
reﬂective extension, at some non-negligible development cost. There is no middle
ground, no reﬂective extension that would both limit the number of hardwired
choices and allow seamless customization and extension in order to suit the
requirements of a particular application or class of applications.

This paper suggests that providing such a reﬂective extension, which we
arguably qualify as open, is a worthwhile task. It presents Reﬂex, a prototype
open reﬂective extension of Java. Reﬂex can be seen both as a reﬂective extension
of Java and as a ﬁrst step towards a framework for building such extensions. This
introduces, besides the classical roles of metaobject programmer and end-user,
a new role in the development of a reﬂective application: the architect of the
metalevel, who is responsible for deﬁning, based on the framework as well as a
number of existing building blocks, a fully-deﬁned reﬂective extension.

The main ideas on which Reﬂex is based are the deﬁnition of a generic MOP

and the reiﬁcation of the code transformation process as an extensible entity.

The idea of a generic MOP replaces the idea of a global, all-encompassing,
MOP since needs in this regard are unpredictable. It is of course possible to
oﬀer a large MOP, but it will never cover all possible needs. In general, a MOP
method is devoted to handle a particular type of event occurring at the base
level, like method invocation, serialization, creation. . . Even if these types of
event could be completely identiﬁed, the way each type of event has to be dealt

