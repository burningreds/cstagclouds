Sequential Object Monitors

Denis Caromel1, Luis Mateu1,2, and ´Eric Tanter2,3

1 oasis project, Universit´e de Nice – CNRS – INRIA

2004, Rt. des Lucioles, Sophia Antipolis, France

denis.caromel@sophia.inria.fr

2 University of Chile, Computer Science Dept.
Avenida Blanco Encalada 2120, Santiago, Chile

{lmateu,etanter}@dcc.uchile.cl

3

obasco project, ´Ecole des Mines de Nantes – INRIA

4, rue Alfred Kastler, Nantes, France

etanter@emn.fr

Abstract. Programming with Java monitors is recognized to be diﬃcult,
 and potentially ineﬃcient due to many useless context switches induced 
by the notifyAll primitive. This paper presents SOM, Sequential
Object Monitors, as an alternative to programming with Java monitors.
Reifying monitor method calls as requests, and providing full access to
the pending request queue, gives rise to fully sequential monitors: the
SOM programmer gets away from any code interleaving. Moreover, useless 
context switches are avoided. Finally, from a software engineering
point of view, SOM promotes separation of concerns, by untangling the
synchronization concern from the application logic.
This paper illustrates SOM expressiveness with several classical concurrency 
problems, and high-level abstractions like guards and chords.
Benchmarks of the implementation conﬁrm the expected eﬃciency.

1 Introduction

Programming with Java monitors is hard because the semantics of the operations
wait/notifyAll is diﬃcult to understand for most programmers, and, even
when understood, getting the correct expected behavior can be cumbersome.
Moreover, the resulting programs are ineﬃcient because notifyAll awakes all
waiting threads, triggering lots of thread context switches which are expensive
in terms of execution time. Finally, from a software engineering point of view,
using Java monitors enforces a tangling of the synchronization concern with the
application logic.

In this paper we introduce a new concurrency abstraction called SOM,
Sequential Object Monitor, as an alternative to Java monitors. We developed a
100% pure Java library providing powerful and eﬃcient sequential object monitors.
 A SOM is a sequential monitor in the sense that the execution of a method
cannot be interleaved with that of another method: once a method starts executing,
 it is guaranteed to complete before starting the execution of another method.

M. Odersky (Ed.): ECOOP 2004, LNCS 3086, pp. 317–341, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004

318

D. Caromel, L. Mateu, and ´E. Tanter

We show that SOMs are (i) powerful because other high-level synchronization
abstractions (e.g., guards, chords) are easily expressed with SOMs, (ii) easier
to understand and use due to their sequential nature and ﬁnally, (iii) eﬃcient
because they require less thread context switches than standard Java monitors.
Performance measurements are provided to support our proposal. Finally, since
it is based on a reﬂective infrastructure, SOM makes it possible to completely
separate synchronization speciﬁcation from application logic, thus achieving a
clean separation of concerns [12], promoting reuse of both synchronization and
application code.

Section 2 discusses related work in the area of concurrency and establishes
the main motivation of our proposal. Section 3 presents SOM, through its main
principles, API, and some canonical examples. Section 4 exposes how concurrency 
abstractions such as guards [6,13,17] and chords [4] can be expressed in
SOM. Section 5 explores implementation issues, such as the SOM reﬂective infrastructure,
 how eﬃcient scheduling is obtained, and ﬁnally some benchmarks
validating our approach. Section 6 concludes with future work.

2 Related Work and Motivation

Two threads accessing simultaneously a shared data structure can lead the data
structure to an inconsistent state. Such a programming error is called a data race.
To avoid data races, programmers must synchronize the access to the shared data
structure. In this section we describe the diﬀerent mechanisms that have been
proposed to allow programmers to write thread-safe programs (i.e., programs
where data races do not occur).

2.1 Classical Synchronization Mechanisms

Monitors. A monitor is a language-level construct similar to a class declaration.
In a monitor, private variables and public operations are declared. The semantics
of the monitor ensures that concurrent invocations of operations are executed in
mutual exclusion, hence avoiding data races. Monitors were invented by Brinch
Hansen [7] and Hoare [16]. These monitors avoid thread context switches by
introducing condition variables (thread queues) to explicitly resume only one
thread instead of all threads. However, Brinch Hansen states in [8] that such
monitors are baroque and lack the elegance that comes from utter simplicity only.

Guards. Guards are a simple concept, easy to understand and reason about.
The idea of associating a boolean expression to indicate when a given operation
may be executed was ﬁrst introduced for the critical region construct [6]. These
boolean expressions evolved to become the guarded commands of [13] and [17].
The main problem with guards is to implement them eﬃciently, that is, without
requiring lots of thread context switches.

