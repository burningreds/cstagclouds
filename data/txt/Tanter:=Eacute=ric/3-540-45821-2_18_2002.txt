Altering Java Semantics via Bytecode

Manipulation

´Eric Tanter1, Marc S´egura-Devillechaise2, Jacques Noy´e2, and Jos´e Piquer1

1 University of Chile, Computer Science Dept.

Avenida Blanco Encalada 2120, Santiago, Chile,

{etanter,jpiquer}@dcc.uchile.cl

2 Ecole des Mines de Nantes, OCM group
La Chantrerie, 4, rue Alfred Kastler. B.P. 20722,

F-44307 Nantes Cedex 3, France,

{msegura,noye}@emn.fr

Abstract. Altering the semantics of programs has become of major
interest. This is due to the necessity of adapting existing software, for
instance to achieve interoperability between oﬀ-the-shelf components. A
system allowing such alterations should operate at the bytecode level in
order to preserve portability and to be useful for pieces of software whose
source code is not available. Furthermore, working at the bytecode level
should be done while keeping high-level abstractions so that it can be
useful to a wide audience. In this paper, we present Jinline, a tool that
operates at load time through bytecode manipulation. Jinline makes it
possible to inline a method body before, after, or instead of occurrences of
language mechanisms within a method. It provides appropriate high-level
abstractions for ﬁne-grained alterations while oﬀering a good expressive
power and a great ease of use.

1 Introduction

Altering the semantics of programs serves many objectives in software engineering,
 related to software adaptation. A particular case of software adaptation,
highlighted by Keller and H¨olzle in [1], is to make several oﬀ-the-shelf components 
interoperable [2]. To this end, Keller and H¨olzle proposed binary
component adaptation (BCA), a tool for performing coarse-grained alterations
on component binaries. However, coarse-grained alterations, usually limited
to modiﬁcations of the interface or of the type hierarchy, may turn out to be
insuﬃcient. Another objective addressed by alteration of program semantics is
that of separation of concerns [3], as emphasized by the work carried out within
the reﬂection community [4,5,6], and more recently, by the emerging paradigm of
aspect-oriented programming (AOP) [7]. In both cases, an important objective
is to separate the development of the functional core of an application from the
implementation of its non-functional concerns, such as persistency, distribution,
or security. The complete application is then obtained by merging the diﬀerent
parts together. Such a merging requires to perform ﬁned-grained alterations

D. Batory, C. Consel, and W. Taha (Eds.): GPCE 2002, LNCS 2487, pp. 283–298, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002

284

´E. Tanter et al.

within method bodies. The purpose of the work we present in this paper is to
provide a tool enabling such alterations with the appropriate level of abstraction.

In Java, portable transformation mechanisms require code rewriting. This
usually automated rewriting can be performed on source code or on bytecode.
The Java community has already developed an impressive set of tools transforming 
source code: AspectJ [8] to support AOP, Sun’s JavaScope project to
instrument source code, a Dylan-like macro system called Java Syntactic Extender 
[9] and a class-based macro system, OpenJava [10]. Nevertheless, in many
contexts, expecting source code availability is a mistake: oﬀ-the-shelf components 
usually ship in binary form, and sophisticated distributed systems, like
mobile agent platforms, usually rely on dynamic class loading. Therefore, while
still interesting in themselves, these tools are not generally applicable. This is
why we claim that transformation tools should operate on bytecode.

Available transformation tools based on bytecode rewriting are usually
inadequate for a wide and generic use. First, most of these tools oﬀer bytecodelevel 
abstractions. This is inadequate if the tool has to be used by a wide
audience, since precise knowledge of the bytecode language is required. This
point has been addressed by Javassist [11], which oﬀers high-level abstractions.
 Though targeted to structural reﬂection, Javassist can be used to
perform ﬁne-grained alterations. However, in this domain, Javassist suﬀers from
a limited expressive power and a lack of generality, as we will discuss in section 2.

In this perspective, we propose Jinline, a tool for altering Java semantics.
Jinline operates on bytecode, keeps high-level abstractions, oﬀers a good expressive 
power and generality. To summarize, Jinline makes it possible to inline
a method body before, after, or instead of a language mechanism occurrence1
within a method.

Traditionally, inlining means replacing a call to a function by an instance of
the function body [12]. What Jinline actually does is inserting code or replacing
code. The new code is deﬁned by a method and therefore the inserted code is
conceptually a method call, except that Jinline actually inlines this new method.
Hence, although Jinline cannot be qualiﬁed as an inliner, most of its job consists
of inlining pieces of code into others. In addition to this, Jinline provides two
diﬀerent sets of information:

1. Static information at inlining time. Jinline provides static information
that can be used to drive the inlining process. For instance, in the case of
a message send, it will provide the signature of the invoked method. This
helps to decide whether inlining should occur or not, which method should
be inlined and where (before, after, instead of).

2. Dynamic information at run time. Jinline ensures that the inlined
method will receive as arguments all the useful dynamic information that
1 By language mechanisms we refer to the standard mechanisms oﬀered by the language,
 such as message sending, accessing ﬁelds, casting, etc. A language mechanism
occurrence is a particular instance of a language mechanism in a piece of code.

