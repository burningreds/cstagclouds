Veriﬁable Security of Boneh-Franklin

Identity-Based Encryption(cid:2)

Gilles Barthe, Federico Olmedo, and Santiago Zanella B´eguelin

{Gilles.Barthe,Federico.Olmedo,Santiago.Zanella}@imdea.org

IMDEA Software Institute, Madrid, Spain

Abstract. Identity-based encryption (IBE) allows one party to send
ciphered messages to another using an arbitrary identity string as an encryption 
key. Since IBE does not require prior generation and distribution
of keys, it greatly simpliﬁes key management in public-key cryptography.
Although the concept of IBE was introduced by Shamir in 1981, constructing 
a practical IBE scheme remained an open problem for years.
The ﬁrst satisfactory solution was proposed by Boneh and Franklin in
2001 and constitutes one of the most prominent applications of pairingbased 
cryptography. We present a game-based machine-checked reduction 
of the security of the Boneh-Franklin IBE scheme to the Bilinear
Diﬃe-Hellman assumption, and analyze its tightness by providing an exact 
security bound. Our proof simpliﬁes and clariﬁes the original proof
by Boneh and Franklin and can be automatically veriﬁed by running a
trusted checker.

Keywords: Bilinear Diﬃe-Hellman problem, Boneh-Franklin scheme,
CertiCrypt,
iddentity-based encryption, pairing-based cryptography,
veriﬁable security.

1 Introduction

Identity-based cryptography is an approach to public-key cryptography in which
public keys can be arbitrary identity strings associated to users, e.g. their email
addresses. Identity-based cryptography signiﬁcantly reduces the cost and complexity 
of managing a public-key infrastructure because, in contrast to standard 
public-key systems, it does not require prior distribution and generation of
keys. Although the concept of identity-based cryptography was introduced by
Shamir in 1984 [14] and identity-based signature schemes are relatively easy to
construct, a solution to the problem of building a practical identity-based encryption 
scheme eluded cryptographers for years. The ﬁrst satisfactory solution
to this problem was proposed by Boneh and Franklin in 2001 [7] using the Weil
pairing, and constitutes one of the most prominent applications of pairing-based

(cid:2) Partially funded by European Project FP7-256980 NESSoS, French project ANR
SESUR-012 SCALP, Spanish project TIN2009-14599 DESAFIOS 10, and Madrid
Regional project S2009TIC-1465 PROMETIDOS.

X. Boyen and X. Chen (Eds.): ProvSec 2011, LNCS 6980, pp. 68–83, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

69

cryptography. Boneh and Franklin proved that this scheme is secure against
chosen-ciphertext attacks in the Random Oracle Model (ROM) under the Bilinear 
Diﬃe-Hellman assumption. The proof proceeds in two stages: ﬁrst, an
identity-based scheme BasicIdent is introduced and proved secure against chosenplaintext 
attacks; second, the BasicIdent scheme is transformed into a scheme
that is secure against chosen-ciphertext attacks by applying a variant of the
Fujisaki-Okamoto transformation [11]. A ﬂaw in the second part of this proof
was discovered and ﬁxed by Galindo [12]. Although, fortunately, in this case
the ﬁx did not require to modify the scheme or the underlying assumption, this
shows that some degree of wariness is needed when evaluating provable security
arguments.

Boneh and Boyen [6] and Waters [16] subsequently proposed other provablysecure 
IBE schemes that admit reductions in the standard model; Bellare and
Ristenpart [5] improve on the security bound of Waters’ scheme by removing
artiﬁcial abort steps from the proof. Over the last decade, more sophisticated
schemes have emerged, such as hierarchical [13] and anonymous [8] IBE schemes.
As the security proofs for such schemes are getting more and more involved,
it becomes increasingly diﬃcult to assess the correctness of the mathematical
arguments, or the tightness of the concrete security bounds.

Veriﬁable security [1, 2] is an emerging approach to provable security that
advocates using state-of-the-art tools to build fully formalized, independently
veriﬁable proofs of security of cryptographic systems. This approach has been
applied to prominent cryptographic constructions, including proofs of chosenciphertext 
security of OAEP encryption [2] and unforgeability of FDH signatures 
[17]. In this paper we follow this approach and use CertiCrypt [1] to build a
machine-checked game-based proof of the security of Boneh-Franklin BasicIdent
scheme. Our main contributions are the following: 1) We extend the CertiCrypt
framework with primitive operations for bilinear maps and mechanisms to reason 
about their algebraic properties; 2) We formalize a game-based proof of the
security of Boneh-Franklin BasicIdent scheme that is simpler than the original
one; 3) We analyze the tightness of the reduction and obtain an exact security
bound that coincides with the one in the original proof. To the best of our knowledge,
 the proof presented here constitutes the ﬁrst machine-checked proof of a
pairing-based cryptographic scheme, and paves the way to formally analyze the
provable security of other pairing-based constructions.

2 An Introduction to CertiCrypt

CertiCrypt [1] is a framework for building and verifying game-based proofs of
cryptographic systems that adopts a code-based view of games. CertiCrypt is
built on top of the general-purpose proof assistant Coq [15], that has been used
eﬀectively for verifying intricate results from mathematics and computer science.
The core of CertiCrypt is a formalization of the probabilistic programming

language used to represent games; the syntax of games is deﬁned as follows:

70

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

I ::= V ← E
| V $← DE
if E then C else C
|
| while E do C
| V ← P(E, . . . ,E)

deterministic assignment
random assignment
conditional
while loop
procedure call

C ::= skip
| I; C

nop
sequence

where V is a set of variables, E a set of expressions, DE is a set of expressions that
represent distributions from which values can be sampled in random assignments,
and P is a set of procedures that includes oracles and adversaries. Adversaries
are formalized as procedures with unknown code; the only requirement is that
adversaries execute in probabilistic polynomial-time and comply with an interface 
that speciﬁes a read/write access policy to global variables. The semantics
of a game G is given by a function (cid:2)G(cid:3) : M → D(M) which yields for any
initial memory m, mapping program variables to values, the (sub-)distribution
of ﬁnal memories resulting from executing G starting from m. We denote by
Pr [G, m : A] the probability of event A occurring after executing game G in an
initial memory m.

In order to formalize security proofs, CertiCrypt provides support for most
common reasoning patterns used in game-based proofs. In particular, CertiCrypt
supports program optimizations that are commonly used in bridging steps in
game-based proofs, such as game simpliﬁcations like expression propagation,
procedure call inlining, code motion, and dead code elimination. More importantly,
 CertiCrypt provides a mechanization of the Fundamental Lemma of GamePlaying 
(see Appendix A), that allows to bound the diﬀerence in the probability
of an event in two diﬀerent games by the probability of a designated failure
event. This allows to analyze simulation-based reductions that are not tight by
bounding the gap by the probability of failure of the simulation.

Following a foundational approach to veriﬁcation, the soundness of all the
above reasoning mechanisms is veriﬁed formally in the Coq proof assistant. This
is done using a relational Hoare logic, which manipulates judgments of the form

|= G1 ∼ G2 : Ψ ⇒ Φ

where G1, G2 are games and Ψ, Φ are binary relations over program memories.
The above judgment is valid if for any initial memories m1 and m2 satisfying
the pre-condition m1 Ψ m2, the distributions (cid:2)G1(cid:3) m1 and (cid:2)G2(cid:3) m2 are related
by the lifting of relation Φ to distributions. We refer the reader to [3, 1] for an
appropriate deﬁnition of lifting and a more thorough description of the logic.
Relational Hoare Logic subsumes observational equivalence, which is obtained
by restricting preand 
post-conditions in judgments to equality relations on
subsets of program variables.

Relational logic can be used to prove claims about the probability of events

in games by using the following rules:

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

71

m1 Ψ m2

m1 Ψ m2

|= G1 ∼ G2 : Ψ ⇒ Φ
Pr [G1, m1 : A] = Pr [G2, m2 : B]
|= G1 ∼ G2 : Ψ ⇒ Φ
Pr [G1, m1 : A] ≤ Pr [G2, m2 : B]

Φ → (A(cid:6)1(cid:7) ↔ B(cid:6)2(cid:7))

Φ → (A(cid:6)1(cid:7) → B(cid:6)2(cid:7))

We represent relations on states as ﬁrst-order formulae over tagged program
variables; we use the tags (cid:6)1(cid:7) and (cid:6)2(cid:7) to distinguish between the value of a
variable or formula in the left and right-hand side program, respectively, and =X
to denote the binary relation that relates memories that coincide on variables in
set X.

CertiCrypt inherits two essential features from the Coq proof assistant. First,
since Coq is a general-purpose proof assistant, CertiCrypt is modular and extensible 
and can be used to reason about arbitrary mathematical constructions. In
particular the language of expressions that games manipulate can be extended
by the user. We take advantage of this characteristic and extend the language
of expressions with values denoting elements of groups and a primitive operator
that denotes a bilinear map; we enrich the simpliﬁcation mechanism of CertiCrypt 
to compute normal forms of expressions involving this operator. Second,
since any Coq proof can be automatically veriﬁed using a small and trustworthy 
type checker, and the reasoning principles that are supported by CertiCrypt
are proved sound with respect to the semantics of games, the correctness of a
machine-checked proof can be reduced to a small trusted base. This trusted base
includes the security statement and the formalization of the semantics of games,
but not the proof itself, which is veriﬁed by the Coq type checker.

3 Preliminaries

3.1 Bilinear Maps and Bilinear Diﬃe-Hellman Assumption

1 = G1 \ {0}, and Z+

Let G1 and G2 be two cyclic groups of prime order q. In the remainder, we
use additive notation for G1 and multiplicative notation for G2. Moreover, we
q = {1, .., q − 1}. An admissible bilinear map is a
let G+
polynomially computable function ˆe : G1× G1 → G2 satisfying the following two
conditions:
Bilinearity: for any P, Q ∈ G1 and a, b ∈ Z, ˆe(aP, bQ) = ˆe(P, Q)ab;
Non-degeneracy: for any generator P of G1, ˆe(P, P ) is a generator of G2.

The Bilinear Diﬃe-Hellman (BDH) problem is a variant of the computational
Diﬃe-Hellman problem: given a quadruple of uniformly chosen values
(P, aP, bP, cP ) the goal is to compute ˆe(P, P )abc. The BDH assumption on a
family of groups equipped with an admissible bilinear map can be formalized in
terms of the following probabilistic game:

Game GBDH : P $← G+

1 ; a, b, c $← Z+

q ; z ← B(P, aP, bP, cP )

72

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

We deﬁne the advantage of an algorithm B in solving BDH as

Adv

B
BDH = Pr

(cid:2)

GBDH : z = ˆe(P, P )abc

(cid:3)

The BDH assumption holds if the advantage of every probabilistic polynomialtime 
procedure B is a negligible function of a security parameter that determines
the order of the groups in the family.

3.2 Identity-Based Encryption
In a typical setting, an IBE scheme involves a trusted third party, the Private
Key Generator (PKG). The PKG generates the scheme public parameters and a
master private key. On request of users, the PKG derives from the master key the
private decryption key associated to a public identity by running an extraction
algorithm. More formally, an IBE scheme is deﬁned as follows.
Deﬁnition 1 (Identity-Based Encryption scheme). An identity-based encryption 
scheme is speciﬁed by a quadruple of algorithms (Setup,EX ,E,D):
Setup: Given a security parameter η, the Setup algorithm generates the public
Extract: Given a master key mk and a public identity id ∈ {0, 1}(cid:2), EX (mk, id)
Encrypt: Given a public identity id and a message m, E(id , m) computes a
Decrypt: Given a private decryption key sk and ciphertext c, D(sk, c) returns
either the plaintext corresponding to the decryption of c, if it is a valid ciphertext,
 or a distinguished value ⊥ otherwise.

ciphertext c corresponding to the encryption of m under id;

parameters of the scheme and a master private key;

computes the corresponding decryption key sk;

1

Deﬁnition 2 (BasicIdent scheme). Let G1, G2 be two (families of) cyclic
groups of prime order q equipped with a bilinear map ˆe : G1 × G1 → G2, and let
H1 : {0, 1}(cid:2) → G+
, H2 : G2 → {0, 1}n be two hash functions for some n ∈ N.
BasicIdent is deﬁned by the following algorithms:
: P $← G+
: Qid ← H1(id); return aQid
: Qid ← H1(id); c $← Z+
return (cP, m ⊕ m(cid:3))
return v ⊕ H2(ˆe(sk, u))

Setup(η)
EX (a, id)
E(id , m)
D(sk, (u, v)) :

q ; Ppub ← aP ; return ((P, Ppub), a)

q ; m(cid:3) ← H2(e(Qid , Ppub)c);

1 ; a $← Z+

Deﬁnition 3 (Semantic security against chosen-plaintext attacks).
The semantic security of an IBE scheme against chosen-plaintext attacks is deﬁned 
by means of the following probabilistic experiment parametrized by an adversary 
A:

Game GIND-ID-CPA :
(params, mk) ← Setup(η);
(m0, m1, idA) ← A1(params);
b $← {0, 1};
c ← E(idA, mb);
bA ← A2(c)

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

73

The two phases of the adversary A are modelled by two procedures A1 and A2 that
can communicate through shared variables and have oracle access to a privatekey 
extraction oracle (but not to a decryption oracle). In the ﬁrst phase, A1
chooses two plaintexts and a challenge identity idA, while in the second phase
A2 outputs a guess bA for b. During the second phase of the experiment A2 is
not allowed to query idA to the extraction oracle. The IND-ID-CPA-advantage of
A is deﬁned as

Adv

A
IND-ID-CPA

def=

(cid:4)
(cid:4)(cid:4)
(cid:4)Pr [GIND-ID-CPA : b = bA] − 1
2

(cid:4)
(cid:4)(cid:4)
(cid:4)

An IBE scheme is semantically secure if every probabilistic polynomial-time adversary 
A has only a negligible advantage.

4 Security of the Boneh-Franklin BasicIdent Scheme

We prove that BasicIdent is semantically secure against chosen-plaintext attacks
in the Random Oracle Model under the Bilinear-Diﬃe Hellman assumption on
the underlying map ˆe(·,·). The formal security statement is speciﬁed in terms of
the IND-ID-CPA experiment instantiated to the BasicIdent scheme and appears
at the bottom of Figure 1. It takes the form of an implication, whose premise
ﬁxes the class of adversaries considered. Speciﬁcally, the statement considers any
well-formed IND-ID-CPA adversary A that makes at most qH1 queries to oracle
H1, at most qH2 queries to oracle H2, and exactly qEX queries to oracle EX , and
that does not query the EX oracle with the identity idA it chooses to attack.
An adversary A is well-formed if it does not read or write any global variables
besides its own. The conclusion of the statement upper bounds the advantage of
the adversary A in terms of the advantage of an algorithm B in solving the BDH
problem. The code of an algorithm B that uses A as a subroutine and achieves
the bound in the statement is given in the next section. Theorem 1 summarizes
in simpler terms the result that we prove, which coincides with the one given
in [7, Theorem 4.1].
Theorem 1 (IND-ID-CPA security of BasicIdent). Let A be an adversary
against the IND-ID-CPA security of BasicIdent. Suppose A executes within time
tA and makes at most qH1 > 0 queries to H1, qH2 > 0 queries to H2, and exactly
qEX > 0 queries to the extraction oracle EX . Then, there exists an algorithm B
that executes within time tB = O(tA) such that

Adv

BDH ≥ Adv
B

A
IND-ID-CPA

2 qqEXEX

qH2 (1 + qEX )1+qEX

≥ Adv

A
IND-ID-CPA

2 exp(−1)
qH2 (1 + qEX )

The proof is organized as a sequence of games (the sequence is given as input
to CertiCrypt); an outline is given in Figures 2-4. In the ﬁgure, each game is
shown alongside the code of the oracles made available to adversary A and
global variables are typeset in boldface. Fragments of code displayed inside a
box appear only in the game whose name is surrounded by the matching box.

74

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

Game GIND-ID-CPA :
L1, L2, L3 ← nil;
P $← G
1 ; a $← Z
+
+
q ;
Ppub ← aP ;
(m0, m1, idA) ← A1(P , Ppub);
d $← {0, 1};
y ← E(idA, md);
dA ← A2(y)

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3
Q ← H1(id );
return aQ

Oracle H1(id) :
if id /∈ dom(L1) then

R $← G
+
1 ;
L1(id) ← R
return L1(id )
Oracle H2(r) :
if r /∈ dom(L2) then
m $← {0, 1}n;
L2(r) ← m
return L2(r)

∀A. WF(A) ∧ Pr [GIND-ID-CPA : idA /∈ L3 ∧ |L1| ≤ qH1 ∧ |L2| ≤ qH2 ∧ |L3| = qEX ] = 1
=⇒ ∃B. Adv

B
BDH ≥ Adv

A
IND-ID-CPA

2qqEXEX

qH2 (1 + qEX )1+qEX

Fig. 1. Formal statement of the IND-ID-CPA security of BasicIdent

The initial game of the sequence is the game GIND-ID-CPA appearing in Figure 1.
In the ﬁrst transition from game GIND-ID-CPA to game G1, we inline the encryption
of the challenge ciphertext and extend the state of oracle H1 by instrumenting its
code with a list J that keeps track of the order of queries. In addition, for each of
the qH1 possible queries to H1, we toss a coin and store the result in a list T . The
coins are sampled independently following a Bernoulli distribution true ⊕p false,
that assigns true with probability p and false with probability 1 − p. We prove
that games GIND-ID-CPA and G1 are observationally equivalent with respect to d
and dA, and thus:

Pr [GIND-ID-CPA : d = dA] = Pr [G1 : d = dA]

(1)

Consider the following event:

Guessed def= T [J(idA)] ∧ ∀id ∈ L3. ¬T [J(id)]

Since the events d = dA and Guessed are trivially independent, we have that

Pr [G1 : d = dA ∧ Guessed] = Pr [G1 : d = dA] Pr [G1 : Guessed]

Furthermore, a straightforward calculation gives

Pr [G1 : Guessed] = p(1 − p)qEX

(2)

In game G2, we hoist the loop that samples the qH1 coins in T to the beginning
of the game and change the way oracle H1 answers to queries. To answer the
i-th hash query, H1 chooses uniformly a value v ∈ Z+
q and replies according to
the i-th entry in T : if it is true, replies with bvP , where b is uniformly chosen
at the beginning of the game; otherwise replies with vP . Since the value v acts
as a one-time pad, in both cases the answers are distributed uniformly and
independently from previous queries, and are thus perfectly indistinguishable

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

75

(cid:4)(cid:4)Pr [G1 : d = dA] − 1

(cid:4)(cid:4) p(1 − p)qEX =

2

2 Pr [G2 : Guessed]

(cid:4)(cid:4)

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3
Q ← H1(id );
return aQ

Oracle H1(id ) :
if id /∈ dom(L1) then
J (id ) ← |L1|;
R $← G
+
1 ;
L1(id) ← R
return L1(id )
Oracle H2(r) :
if r /∈ dom(L2) then
m $← {0, 1}n;
L2(r) ← m
return L2(r)
(cid:4)(cid:4)Pr [G2 : d = dA ∧ Guessed] − 1

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3
Q ← H1(id );
return aQ

Oracle H1(id ) :
if id /∈ dom(L1) then
J (id ) ← |L1|;
q ; V (id) ← v;
v $← Z
if T [|L1|] then

+

L1(id ) ← bvP
L1(id ) ← vP

else

return L1(id )
Oracle H2(r) :
if r /∈ dom(L2) then
m $← {0, 1}n;
L2(r) ← m
return L2(r)

2 Pr [G4 : Guessed]

(cid:4)
(cid:4)

(cid:4)
(cid:4)Pr [G4 : d = dA ∧ Guessed] − 1
Oracle H1(id ) :
if id /∈ dom(L1) then
J (id ) ← |L1|;
v $← Z
if T [|L1|] then

q ; V (id) ← v;

+

L1(id ) ← bvP
L1(id ) ← vP

else

return L1(id )
Oracle H2(r) :
if r /∈ dom(L2) then
m $← {0, 1}n;
L2(r) ← m
return L2(r)

+

+

q ; P $← G

Game G1 :
L1, L2, L3, J ← nil;
1 ; Ppub ← aP ;
a $← Z
(m0, m1, idA) ← A1(P , Ppub);
d $← {0, 1};
QA ← H1(idA);
c $← Z
m(cid:2) ← H2(ˆe(QA, Ppub)c);
y ← (cP , md ⊕ m(cid:2)
dA ← A2(y);
Coins

+
q ;

);

+

);

);

);

q ; P $← G

Game G2 G3 :
Coins;
L1, L2, L3, V , J ← nil;
a, b $← Z
+
1 ;
Ppub ← aP ;
(m0, m1, idA) ← A1(P , Ppub);
d $← {0, 1};
QA ← H1(idA); c $← Z
+
q ;
m(cid:2) ← H2(ˆe(QA, Ppub)c);
y ← (cP , md ⊕ m(cid:2)
v(cid:2) ← V (idA)
−1c mod q;
m(cid:2) ← H2(ˆe(QA, Ppub)v(cid:2)
y ← (v(cid:2)P , md ⊕ m(cid:2)
dA ← A2(y)
(cid:4)
(cid:4)Pr [G2 : d = dA ∧ Guessed] − 1
Game G3(cid:2) G4 :
Coins;
L1, L2, L3, V , J ← nil;
a, b, c $← Z
q ; P $← G
+
1 ;
Ppub ← aP ;
(m0, m1, idA) ← A1(P , Ppub);
QA ← H1(idA);
v(cid:2) ← V (idA)
−1c mod q;
if T [J(idA)] then
m(cid:2) ← H2(ˆe(P , P )abc)
else
bad ← true;
m(cid:2) ← H2(ˆe(QA, Ppub)v(cid:2)
m(cid:2) ← H2(ˆe(P , P )

abc

+

)

)

d $← {0, 1}; y ← (v(cid:2)P , md ⊕ m(cid:2)
dA ← A2(y)

(cid:4)
(cid:4) =
2 Pr [G2 : Guessed]

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3
Q ← H1(id );
if T [J (id)] then

return V (id )Ppub
else
bad ← true;
return aQ

return V (id)Ppub

);

Coins

def

= T ← nil; while |T | < qH1

do (t $← true ⊕p false; T ← t :: T )

Fig. 2. Outline of the proof of IND-ID-CPA security of BasicIdent

Oracle H1(id ) :
if id /∈ dom(L1) then

J(id) ← |L1|;
v $← Z
if T [|L1|] then

+
q ; V (id) ← v;

L1(id) ← bvP

else

L1(id) ← vP

return L1(id)
Oracle H2(r) :
if r /∈ dom(L2) then
if r = ˆe(P , P )abc
else m $← {0, 1}n
L2(r) ← m

else m ← L2(r)
return m

then m ← m(cid:2)

(cid:2)(cid:2)

(cid:2)(cid:2)

76

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

(cid:2)(cid:2)Pr [G4 : d = dA ∧ Guessed] − 1

2

Pr [G4 : Guessed]

(cid:2)(cid:2) =

(cid:2)(cid:2)Pr [G5 : d = dA ∧ Guessed] − 1

2

Pr [G5 : Guessed]

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3

Q ← H1(id);
return V (id )Ppub

+
q ; P $← G

Game G5 :
Coins;
L1, L2, L3, V , J ← nil;
+
a, b, c $← Z
1 ;
Ppub ← aP ; m(cid:2) $← {0, 1}n;
(m0, m1, id A) ← A1(P , Ppub);
QA ← H1(id A);
v(cid:2) ← V (id A)−1c mod q;
m(cid:2) ← H2(ˆe(P , P )abc);
d $← {0, 1}; y ← (v(cid:2)P , md ⊕ m(cid:2));
dA ← A2(y)

(cid:2)(cid:2)Pr [G5 : d = dA ∧ Guessed] − 1

2

Pr [G5 : Guessed]

(cid:2)(cid:2) =

(cid:2)(cid:2)Pr [G6 : d = dA ∧ Guessed] − 1

Pr [G6 : Guessed]

2

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3

Q ← H1(id);
return V (id )Ppub

+
q ; P $← G

Game G6(cid:2) G6 :
Coins;
L1, L2, L3, V , J ← nil;
+
a, b, c $← Z
1 ;
Ppub ← aP ; m(cid:2) $← {0, 1}n;
(m0, m1, id A) ← A1(P , Ppub);
QA ← H1(id A);
v(cid:2) ← V (id A)−1c mod q;
d $← {0, 1};
y ← (v(cid:2)P , md ⊕ m(cid:2));
dA ← A2(y)

Oracle H1(id ) :
if id /∈ dom(L1) then

J(id ) ← |L1|;
v $← Z
if T [|L1|] then

+
q ; V (id ) ← v;

L1(id ) ← bvP

else

L1(id ) ← vP

return L1(id)

Oracle H2(r) :
if r = ˆe(P , P )abc

then

bad ← true;
m ← m(cid:2);
if r /∈ dom(L2) then L2(r) ← m(cid:2)

else

if r /∈ dom(L2) then

m $← {0, 1}n; L2(r) ← m

else m ← L2(r)

return m

Fig. 3. Outline of the proof of IND-ID-CPA security of BasicIdent

from those of a random oracle. We prove this by ﬁrst proving the validity of the
following algebraic equivalence:

|= R $← G+

1 ; v ← (log R/ log Q) mod q ∼ v $← Z+

q ; R ← vQ : Ψ ⇒ Φ

where

Ψ def= Q(cid:6)1(cid:7) = Q(cid:6)2(cid:7) ∧ log Q(cid:6)1(cid:7) (cid:16)= 0

Φ def= ={v,R}

We then apply this equivalence twice to show that no matter what branch is
taken in the conditional in H1, the value of L1(id) will be uniformly distributed.
In one case, we take Q = bP , while in the other we simply take Q = P . We
conclude that

Pr [G1 : Guessed] = Pr [G2 : Guessed]

Pr [G1 : d = dA ∧ Guessed] = Pr [G2 : d = dA ∧ Guessed]

(3)
(4)

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

77

(cid:4)
(cid:4)Pr [G6 : d = dA ∧ Guessed] − 1

2

2 Pr [G6 : Guessed]

(cid:4)
(cid:4) ≤ Pr [G6 : S] = Pr [G7 : S]

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3
Q ← H1(id );
return V (id )Ppub

+

Game G7(cid:2) G7 :
Coins;
L1, L2, L3, V , J ← nil;
a, b, c $← Z
q ; P $← G
+
1 ;
Ppub ← aP ; m(cid:2) $← {0, 1}n;
(m0, m1, idA) ← A1(P , Ppub);
QA ← H1(idA);
v(cid:2) ← V (idA)
d $← {0, 1};
y ← (v(cid:2)P , md ⊕ m(cid:2));
R $← {0, 1}n; y ← (v(cid:2)P , R);
dA ← A2(y)

−1c mod q;

+
q ;

Game GBDH :
P $← G
1 ; a, b, c $← Z
+
z ← B(P, aP, bP, cP )
B(P0, P1, P2, P3) :
Coins;
L1, L2, L3, V ← nil;
P ← P0; Ppub ← P1; P (cid:2) ← P2;
(m0, m1, idA) ← A1(P , Ppub);
QA ← H1(idA);
v(cid:2) ← V (idA)
−1
;
R $← {0, 1}n; y ← (v(cid:2)P3, R);
dA ← A2(y);
i $← [1.. |L2|]; return fst(L2[i])

+

q ; V (id) ← v;

Oracle H1(id ) :
if id /∈ dom(L1) then
J (id ) ← |L1|;
v $← Z
if T [|L1|] then L1(id ) ← bvP
else L1(id ) ← vP
return L1(id )
Oracle H2(r) :
if r = ˆe(P , P )abc then
bad ← true;
if r /∈ dom(L2) then
else m ← L2(r)
else
if r /∈ dom(L2) then
else m ← L2(r)
(cid:3)
return m

m $← {0, 1}n; L2(r) ← m

m $← {0, 1}n; L2(r) ← m

Oracle H1(id ) :
if id /∈ dom(L1) then
v $← Z
if T [|L1|] then L1(id ) ← vP (cid:2)
else L1(id ) ← vP

q ; V (id) ← v;

+

return L1(id )
Oracle H2(r) :
if r /∈ dom(L2) then
m $← {0, 1}n; L2(r) ← m
else m ← L2(r)
return m

H2 Pr [G7 : S] ≤ Pr
q−1

(cid:2)

GBDH : z = ˆe(P , P )

abc

Oracle EX (id ) :
if id /∈ L3 then
L3 ← id :: L3
Q ← H1(id );
return V (id )Ppub

Fig. 4. Outline of the proof of IND-ID-CPA security of BasicIdent

q ; y ← zx mod q ∼ y $← Z+

Game G3 is obtained from game G2 by padding the random value c used to
encrypt md with the value V (idA)−1. To justify this transformation we prove
that the assertion 0 < V (idA) < q holds just before sampling c in G3, and apply
the rule:
(cid:2) x $← Z+

: (={z} ∧ 0 < z(cid:6)2(cid:7) < q) =⇒ ={x,y,z}
to show that the distribution of the challenge ciphertext y is the same in both
games. To prove the above assertion, we ﬁrst show that
∀id ∈ dom(L1). 0 < V (id) < q

q ; x ← z−1y mod q

is an invariant of A1 that it is established right after the initialization of L1
and that after making the oracle call H1(idA), the public key idA necessarily
belongs to the domain of L1. Therefore we have

Pr [G2 : Guessed] = Pr [G3 : Guessed]

Pr [G2 : d = dA ∧ Guessed] = Pr [G3 : d = dA ∧ Guessed]

(5)
(6)

78

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

(cid:5)
ˆe(P , P )abc

In game G4 we “inject” the challenge ˆe(P , P )abc into the ciphertext y and we
change the simulation of the extraction oracle to eliminate its dependency on the
private master key a. The former is achieved by replacing the bitstring m(cid:3) used
(cid:6)
to pad md with H2
, whereas the latter is achieved by replacing the
return expression of oracle H1 with V (id) Ppub.
Observe that if the coin T [J(idA)] used to decide how the hash value H1(idA)
is computed is true, then ˆe(QA, Ppub)v(cid:2)
= ˆe(P , P )abc. Furthermore, if for every
extraction query id we have T [J(id)] = false, then aH1(id) = V (id)Ppub. This
motivates the introduction of a hybrid game G3(cid:2), for which we prove the following
invariant:

(Ppub = aP ∧ L3 ⊆ dom(L1) ∧ ∀id ∈ dom(L1). 0 < V (id) < q)(cid:6)1(cid:7) ∧
(∀id ∈ dom(L1). L1(id) = if T [J(id)] then bV (id)P else V (id)P )(cid:6)1(cid:7)

from which we can prove that

Pr [G3 : d = dA ∧ Guessed] = Pr [G3(cid:2) : d = dA ∧ Guessed]

Now, games G3(cid:2) and G4 diﬀer only on code appearing after the ﬂag bad is set
and we can apply the Fundamental Lemma to prove that

Pr [G3(cid:2) : d = dA ∧ Guessed ∧ ¬bad] = Pr [G4 : d = dA ∧ Guessed ∧ ¬bad]

Observe that Guessed ⇒ ¬bad is a post-condition of both G3(cid:2) and G4, and
therefore

Pr [G3(cid:2) : d = dA ∧ Guessed] = Pr [G4 : d = dA ∧ Guessed]

Finally by transitivity we have

Pr [G3 : d = dA ∧ Guessed] = Pr [G4 : d = dA ∧ Guessed]

(7)

and analogously,

Pr [G3 : Guessed] = Pr [G4 : Guessed]

(8)
In game G5 we eagerly sample the hash value m(cid:2) that H2 gives in response to
query ˆe(P , P )abc. To formally justify this transformation we use the logic of
swapping statements presented in [4], which constitutes a general technique to
reason about inter-procedural code motion and can be readily specialized to deal
with this kind of bridging step. The logic yields equations

Pr [G4 : Guessed] = Pr [G5 : Guessed]

Pr [G4 : d = dA ∧ Guessed] = Pr [G5 : d = dA ∧ Guessed]

(9)
(10)

Our goal now is to make explicit that the message used to pad md during its
encryption is m(cid:2). Note that just inlining in G5 the call to H2 made when encrypting 
the challenge ciphertext would result in the inclusion of the conditional
statement

if ˆe(P , P )abc /∈ dom(L2) then L2(ˆe(P , P )abc) ← m(cid:2)

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

79

which depends on ˆe(P , P )abc, while we want to eﬃciently simulate an environment 
for A in terms of only P , aP , bP , and cP . We therefore introduce an
intermediate game G6(cid:2), where the oracle H2 does not store in its memory the
answer to a ˆe(P , P )abc query.
oracle H2 in G5 and by means of the following relational invariant
= m(cid:2)

The equivalence between games G5 and G6(cid:2) is proved by inlining the call to

(cid:5)
(cid:5)
ˆe(P , P )abc ∈ dom(L2) ⇒ L2
ˆe(P , P )abc
∀x (cid:16)= ˆe(P , P )abc(cid:6)1(cid:7). L2(cid:6)1(cid:7)(x) = L2(cid:6)2(cid:7)(x)

(cid:6)(cid:6)1(cid:7) ∧

I5→6(cid:2)

def=

(cid:6)

The equivalence between games G6(cid:2) and G6 relies on the dual invariant

I6(cid:2)→6

def=

(cid:5)
(cid:5)
ˆe(P , P )abc ∈ dom(L2) ⇒ L2
ˆe(P , P )abc
∀x (cid:16)= ˆe(P , P )abc(cid:6)1(cid:7). L2(cid:6)1(cid:7)(x) = L2(cid:6)2(cid:7)(x)

(cid:6)

(cid:6)(cid:6)2(cid:7) ∧

= m(cid:2)

From these two equivalences we have

Pr [G5 : Guessed] = Pr [G6 : Guessed]

Pr [G5 : d = dA ∧ Guessed] = Pr [G6 : d = dA ∧ Guessed]

(11)
(12)
Observe that if in game G6 the value ˆe(P , P )abc is never queried to H2, then the
second component of the challenge y looks completely random to the adversary.
This motivates the deﬁnition of game G7, where we also recover the usual implementation 
of H2 as a random oracle. To prove this, we introduce an intermediate
game G7(cid:2) that computes the challenge y given to the adversary as in game G6,
but whose implementation of oracle H2 is the same as in G7. This results in
two games G6 and G7(cid:2) that are syntactically identical except at program points
where the ﬂag bad is set. By the Fundamental Lemma we have

Pr [G6 : d = dA ∧ Guessed ∧ ¬S ∧ ¬bad]

= Pr [G7(cid:2) : d = dA ∧ Guessed ∧ ¬S ∧ ¬bad]

where S is an event deﬁned as

S def= ˆe(P , P )abc ∈ dom(L2)

Additionally, we prove that ¬S ⇒ ¬bad is an invariant of both G6 and G7(cid:2), and
thus

Pr [G6 : d = dA ∧ Guessed ∧ ¬S] = Pr [G7(cid:2) : d = dA ∧ Guessed ∧ ¬S]

We next prove that

Pr [G7(cid:2) : d = dA ∧ Guessed ∧ ¬S] = Pr [G7 : d = dA ∧ Guessed ∧ ¬S]

using the following algebraic property of exclusive-or, known as optimistic sam-
pling:
(cid:2) m(cid:2) $← {0, 1}n; R ← md ⊕ m(cid:2) ∼ R $← {0, 1}n; m(cid:2) ← md ⊕ R

: ={md} =⇒ ={md,m(cid:2),R}

80

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

This, together with the previous equation implies

Pr [G6 : d = dA ∧ Guessed ∧ ¬S] = Pr [G7 : d = dA ∧ Guessed ∧ ¬S]

Analogously, we have

Pr [G6 : Guessed ∧ ¬S] = Pr [G7 : Guessed ∧ ¬S]

Pr [G6 : ¬S] = Pr [G7 : ¬S]

(13)

(14)
(15)

In game G7 the challenge y becomes independent of the random bit d. Since the
guess dA of the adversary is now completely independent from d, the probability
of the guess being correct can be proven to be exactly 1/2, and hence
Pr [G7 : Guessed ∧ ¬S]

Pr [G7 : d = dA ∧ Guessed ∧ ¬S] =

(16)

1
2

(cid:2)

The ﬁnal game GBDH constitutes the desired reduction of the security of the
scheme to the BDH assumption. We prove the equivalence between G7 and GBDH
by coalescing the branches of the conditional in oracle H2, inlining the call
z ← B(P, aP, bP, cP ), and removing dead code. This equivalence gives
(cid:3)
(cid:2)
GBDH : ˆe(P, P )abc ∈ dom(L2)

(cid:3)
G7 : ˆe(P , P )abc ∈ dom(L2)

= Pr

(17)
IND-ID-CPA of adversary A in the initial game with
A

Pr

To relate the advantage Adv
the advantage Adv

BDH of B in the ﬁnal game we ﬁrst claim that
B

Pr

(cid:2)
G6 : Guessed ∧ ˆe(P , P )abc ∈ dom(L2)

IND-ID-CPA p(1 − p)qEX (18)
A
In Appendix B we show that combining equations (3)–(14) and (16), one gets
the inequality

(cid:3) ≥ 2 Adv

(cid:2)

(cid:3)
G6 : Guessed ∧ ˆe(P , P )abc ∈ dom(L2)
Pr
(cid:4)
(cid:4)(cid:4)
≥2
(cid:4)Pr [G1 : d = dA ∧ Guessed] − 1
2

(cid:4)
(cid:4)(cid:4)
Pr [G1 : Guessed]
(cid:4)

Inequality (18) follows from Equations (1), (2) and the independence of the
events d = dA and Guessed in G1.

We conclude from Equations (15) and (17):

Adv

B
BDH = Pr

(cid:3)

(cid:2)
≥ q−1H2Pr
= q−1H2Pr
= q−1H2Pr
≥ q−1H2Pr
≥ 2 q−1H2 Adv

(cid:2)
(cid:2)
(cid:2)
(cid:2)

GBDH : z = ˆe(P, P )abc

(cid:3)

GBDH : ˆe(P, P )abc ∈ L2 ∧ |L2| ≤ qH2
(cid:3)
G7 : ˆe(P , P )abc ∈ dom(L2)
(cid:3)
G6 : ˆe(P , P )abc ∈ dom(L2)
(cid:3)
G6 : Guessed ∧ ˆe(P , P )abc ∈ dom(L2)

IND-ID-CPA p(1 − p)qEX
A

The bound in the statement of the theorem is obtained by taking

which maximizes the factor p(1 − p)qEX .

p =

1

1 + qEX

(cid:18)(cid:19)

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

81

5 Conclusion and Future Work

Identity-based cryptography is an active ﬁeld of public-key cryptography. We
have demonstrated that the emerging approach promoted by veriﬁable security
naturally applies to identity-based schemes by building a fully formal, independently 
veriﬁable proof of the BasicIdent scheme of Boneh and Franklin. Overall,
the formal proof is about 3,500 lines of Coq, while our extension of CertiCrypt
required about 1,800 lines. Our proof is more detailed and simpler than the original 
proof. Since we were not able to reproduce some of the arguments in [7]
(e.g. Claim 1), we were compelled to ﬁnd alternative arguments that resulted in
a more compact proof.

A natural follow-up to the work presented here is to formally prove that the
application of the Fujisaki-Okamoto transformation to the Boneh-Franklin BasicIdent 
scheme yields an IND-ID-CCA-secure scheme—this can be done generically
for any IND-ID-CPA-secure scheme. Another interesting possibility is to weaken
the ROM assumption in the security proof of BasicIdent: when instantiated using 
e.g. the Weil pairing, the proof assumes the hash function H1 behaves like a
random oracle into an elliptic curve. We could instead assume just the existence
of a random oracle into the ﬁeld over which the elliptic curve is deﬁned, and
use it to build a function that is indiﬀerentiable from a random oracle into the
elliptic curve as shown by Brier et al. [10], thus recovering the same result under
a weaker assumption.

Other research directions include developing mathematical libraries for pairings,
 such as the Weil pairing or the Tate pairing, and proving the security of
other pairing-based systems, such as the Boneh-Boyen [6] and Waters [16] IBE
schemes, or the Boneh-Lynn-Shacham signature scheme [9].

References

1. Barthe, G., Gr´egoire, B., Heraud, S., Zanella B´eguelin, S.: Formal certiﬁcation of
ElGamal encryption. In: Degano, P., Guttman, J., Martinelli, F. (eds.) FAST 2008.
LNCS, vol. 5491, pp. 1–19. Springer, Heidelberg (2009)

2. Barthe, G., Gr´egoire, B., Lakhnech, Y., Zanella B´eguelin, S.: Beyond provable
security veriﬁable IND-CCA security of OAEP. In: Kiayias, A. (ed.) CT-RSA 2011.
LNCS, vol. 6558, pp. 180–196. Springer, Heidelberg (2011)

3. Barthe, G., Gr´egoire, B., Zanella B´eguelin, S.: Formal certiﬁcation of code-based
cryptographic proofs. In: 36th ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages, POPL 2009, pp. 90–101. ACM, New York (2009)

4. Barthe, G., Gr´egoire, B., Zanella B´eguelin, S.: Programming language techniques
for cryptographic proofs. In: Kaufmann, M., Paulson, L.C. (eds.) ITP 2010. LNCS,
vol. 6172, pp. 115–130. Springer, Heidelberg (2010)

5. Bellare, M., Ristenpart, T.: Simulation without the artiﬁcial abort: Simpliﬁed
proof and improved concrete security for Waters’ IBE scheme. In: Joux, A. (ed.)
EUROCRYPT 2009. LNCS, vol. 5479, pp. 407–424. Springer, Heidelberg (2009)

6. Boneh, D., Boyen, X.: Secure identity based encryption without random oracles.
In: Franklin, M. (ed.) CRYPTO 2004. LNCS, vol. 3152, pp. 197–206. Springer,
Heidelberg (2004)

82

G. Barthe, F. Olmedo, and S. Zanella B´eguelin

7. Boneh, D., Franklin, M.: Identity-based encryption from the Weil pairing. SIAM

J. Comput. 32(3), 586–615 (2003)

8. Boneh, D., Gentry, C., Hamburg, M.: Space-eﬃcient identity based encryption
without pairings. In: 48th Annual IEEE Symposium on Foundations of Computer
Science, FOCS 2007, pp. 647–657. IEEE Computer Society, Los Alamitos (2007)

9. Boneh, D., Lynn, B., Shacham, H.: Short signatures from the Weil pairing. Journal

of Cryptology 17, 297–319 (2004)

10. Brier, E., Coron, J.-S., Icart, T., Madore, D., Randriam, H., Tibouchi, M.: Efﬁcient 
indiﬀerentiable hashing into ordinary elliptic curves. In: Rabin, T. (ed.)
CRYPTO 2010. LNCS, vol. 6223, pp. 237–254. Springer, Heidelberg (2010)

11. Fujisaki, E., Okamoto, T.: How to enhance the security of public-key encryption
at minimum cost. In: Imai, H., Zheng, Y. (eds.) PKC 1999. LNCS, vol. 1560, p.
634. Springer, Heidelberg (1999)

12. Galindo, D.: Boneh-Franklin Identity Based Encryption Revisited. In: Caires, L.,
Italiano, G.F., Monteiro, L., Palamidessi, C., Yung, M. (eds.) ICALP 2005. LNCS,
vol. 3580, p. 102. Springer, Heidelberg (2005)

13. Horwitz, J., Lynn, B.: Toward hierarchical identity-based encryption. In: Knudsen,
L.R. (ed.) EUROCRYPT 2002. LNCS, vol. 2332, pp. 466–481. Springer, Heidelberg
(2002)

14. Shamir, A.: Identity-based cryptosystems and signature schemes. In: Blakely, G.R.,
Chaum, D. (eds.) CRYPTO 1984. LNCS, vol. 196, pp. 47–53. Springer, Heidelberg
(1985)

15. The Coq development team: The Coq Proof Assistant Reference Manual Version

8.3. (2010), http://coq.inria.fr

16. Waters, B.: Eﬃcient identity-based encryption without random oracles. In: Cramer,
R. (ed.) EUROCRYPT 2005. LNCS, vol. 3494, p. 557. Springer, Heidelberg (2005)
17. Zanella B´eguelin, S., Gr´egoire, B., Barthe, G., Olmedo, F.: Formally certifying the
security of digital signature schemes. In: 30th IEEE symposium on Security and
Privacy, S&P 2009, pp. 237–250. IEEE Computer Society, Los Alamitos (2009)

A Fundamental Lemma of Game-Playing

Lemma 1 (Fundamental Lemma). Let G1, G2 be two games and let A, B,
and F be events. If Pr [G1 : A ∧ ¬F ] = Pr [G2 : B ∧ ¬F ], then

|Pr [G1 : A] − Pr [G2 : B]| ≤ max(Pr [G1 : F ] , Pr [G2 : F ])

Proof.
|Pr [G1 : A] − Pr [G2 : B]|

= |Pr [G1 : A ∧ F ] + Pr [G1 : A ∧ ¬F ] − Pr [G2 : B ∧ F ] − Pr [G2 : B ∧ ¬F ]|
= |Pr [G1 : A ∧ F ] − Pr [G2 : B ∧ F ]|
≤ max(Pr [G1 : A ∧ F ] , Pr [G2 : B ∧ F ])
≤ max(Pr [G1 : F ] , Pr [G2 : F ])

A syntactic criterion can be applied to discharge the hypothesis of the lemma
for the case where A = B and F = bad. The hypothesis can be automatically
established by inspecting the code of both games: it holds if their code diﬀers

Veriﬁable Security of Boneh-Franklin Identity-Based Encryption

83

only after program points setting the ﬂag bad to true and bad is never reset to
false afterwards. Note also that if both games terminate with probability 1, then
Pr [G1 : bad] = Pr [G2 : bad], and that if, for instance, only game G2 terminates
with probability 1, it must be the case that Pr [G1 : bad] ≤ Pr [G2 : bad].

B Derived Equations

From Equations (13), (14) and (16) we can prove the following two inequalities:

Pr [G6 : d = dA ∧ Guessed] ≥ Pr [G6 : d = dA ∧ Guessed ∧ ¬S]
= Pr [G7 : d = dA ∧ Guessed ∧ ¬S]
=

1
2
1
2
1
2

Pr [G7 : Guessed ∧ ¬S]
Pr [G6 : Guessed ∧ ¬S]
Pr [G6 : Guessed] − 1
2

=

=

Pr [G6 : Guessed ∧ S]

and
Pr [G6 : d = dA ∧ Guessed]

= Pr [G6 : d = dA ∧ Guessed ∧ S] + Pr [G6 : d = dA ∧ Guessed ∧ ¬S]
≤ Pr [G6 : Guessed ∧ S] + Pr [G7 : d = dA ∧ Guessed ∧ ¬S]
= Pr [G6 : Guessed ∧ S] +
= Pr [G6 : Guessed ∧ S] +
1
2

Pr [G7 : Guessed ∧ ¬S]
1
2
Pr [G6 : Guessed ∧ ¬S]
1
2
Pr [G6 : Guessed ∧ S]

Pr [G6 : Guessed] +

=

1
2

which together with Equations (3)-(12) imply

Pr [G6 : Guessed ∧ S] ≥ 2

(cid:4)
(cid:4)
(cid:4)Pr [G1 : d = dA ∧ Guessed] − 1
(cid:4)
2

(cid:4)
(cid:4)
(cid:4)
Pr [G1 : Guessed]
(cid:4)

