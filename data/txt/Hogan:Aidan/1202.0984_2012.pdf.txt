OWL: Yet to arrive on the Web of Data?

Birte Glimm

Ulm University, Institute of

Artiﬁcial Intelligence,
89069 Ulm, Germany

Aidan Hogan
Digital Enterprise
Research Institute,
National University of
Ireland Galway, Ireland

ABSTRACT
Seven years on from OWL becoming a W3C recommendation, and
two years on from the more recent OWL 2 W3C recommendation,
OWL has still experienced only patchy uptake on the Web. Although 
certain OWL features (like owl:sameAs) are very popular,
other features of OWL are largely neglected by publishers in the
Linked Data world. This may suggest that despite the promise of
easy implementations and the proposal of tractable proﬁles suggested 
in OWL’s second version, there is still no “right” standard
fragment for the Linked Data community.
In this paper, we (1)
analyse uptake of OWL on the Web of Data, (2) gain insights into
the OWL fragment that is actually used/usable on the Web, where
we arrive at the conclusion that this fragment is likely to be a simpliﬁed 
proﬁle based on OWL RL, (3) propose and discuss such a
new fragment, which we call OWL LD (for Linked Data).

1.

INTRODUCTION

Under the initial impetus of the Linking Open Data project –
and guided by the Linked Data principles [3] and associated bestpractices 
– a rich vein of openly-available structured data has been
published on the Web using Semantic Web standards. Publishing
RDF on the Web is no longer conﬁned to academia and hobbyists:
the current “Web of Data” now features exports from various corporate 
and commercial bodies (e.g., BBC, New York Times, Freebase,
 BestBuy), online communities (e.g., Wikipedia, Geonames),
life-science corpora (e.g., DrugBank, Linked Clinical Trials) and
governmental bodies (e.g., data.gov, data.gov.uk, EuroStat). The
“Linked Open Data cloud” now depicts 295 interlinked datasets,
which together consist of an estimated 31.6 billion RDF triples.1

Although RDF provides standard syntaxes and a common datamodel 
for disseminating structured information, it oﬀers very little 
when it comes to giving semantics to the published data. RDF
Schema (RDFS) and OWL were developed to address this by providing 
a vocabulary for describing schema data. The special vocabulary 
terms of RDFS and OWL – such as rdfs:subClassOf or
owl:FunctionalProperty – have a well-deﬁned semantics, which
can be used to derive implicit consequences from the data.
1http://www4.wiwiss.fu-berlin.de/lodcloud/state/

2
1
0
2

 

b
e
F
1

 

 
 
]
L
D
.
s
c
[
 
 

1
v
4
8
9
0

.

2
0
2
1
:
v
i
X
r
a

This work has been funded in part by Science Foundation Ireland under
Grant No. SFI/08/CE/I1380 (Líon-2) and by an IRCSET postgraduate
grant.
CoRR Copyright 2012.

Markus Krötzsch
University of Oxford,

Department of Computer

Science, OX1 3QD

Oxford, United Kingdom

Axel Polleres

Siemens AG Österreich,
Siemensstrasse 90, 1210

Vienna, Austria

In terms of publishing, parts of the RDFS and OWL standards
have been adopted on the Web of Data. Linked Data literature recommends 
use of owl:sameAs relations to denote when two URIs
refer to the same resource [18, § 2.5.2]. Further, Linked Data guidelines 
recommend use of RDFS [18, § 4.4.2] for deﬁning terms and
interlinking vocabularies. As regards the broader OWL standard,
current guidelines explicitly mention use of owl:equivalentClass,
owl:equivalentProperty, owl:InverseFunctionalProperty and
owl:inverseOf [18, § 4.4.2]. However, other OWL features are not
mentioned.

In terms of standards, RDFS and OWL 1 pre-date the Linked
Data movement and are not directly tailored towards Linked Data
requirements. Although the informative entailment rules for supporting 
RDFS inferences are relatively straightforward, things like
the inﬁnitely many entailed axiomatic triples reduce its practicality 
[28]. In OWL 1 the situation is more complex: OWL 1 Full
further extends the RDFS semantics to the extent that reasoning
becomes undecidable.
In OWL 1 DL and OWL 1 Lite, where
the semantics are based on Description Logics, typical reasoning
tasks remain decidable, but are of exponential or harder worst-case
complexity. OWL 2 addresses the complexity issue by deﬁning
proﬁles [6]: fragments for which at least some reasoning tasks are
tractable. Reasoning with inconsistent data is, however, still problematic 
in any OWL fragment. Further, each proﬁle is a syntactic
subset of OWL DL such that RDF data must adhere to certain nontrivial 
conditions which are commonly not followed in Web ontologies 
[2, 38, 7]. However, OWL RL includes a ruleset called OWL
RL/RDF, which is applicable over arbitrary RDF data.

Although the OWL RL proﬁle is implementable using straightforward 
rule-based technologies, (as we will see) the proﬁle still
includes many features with sparse uptake in Linked Data vocabularies.
 Which features are prominently used is, however, unclear.
In order to clarify this, we survey a broad spectrum of RDF Web
data and measure uptake of individual RDFS and OWL features
used therein. Since datatypes also play a role for OWL reasoning,
 we additionally look at the use of datatypes in published data.
We further analyse to what extent OWL features are supported by
tools that provide the technical infrastructure for building complex
Semantic Web applications.

Our analysis suggests that a much simpler proﬁle of OWL might
be better targeted towards the current needs of the Linked Data
community. We thus propose OWL LD (for Linked Data) as a subset 
of the OWL RL proﬁle, using the insights of our survey to make
an informed decision as to which features of the RDFS and OWL
standards should be included in the proﬁle.

The remainder of the paper is structured as follows: In the next
section, we introduce some preliminaries. In Section 3, we present
our survey of the use of RDFS and OWL features on the Web, including 
a survey of datatypes. In Section 4, we analyse the tool
support for RDFS and OWL. Drawing upon our observations, we
propose and deﬁne the OWL LD proﬁle in Section 5, and discuss
formal aspects of reasoning over the proﬁle in Section 6. Next, in
Section 7 we give a synopsis of related work for empirical analyses
of RDFS and OWL data on the Web. We conclude in Section 8.

2. BACKGROUND

Before analysing the use of OWL in the web, we ﬁrst recall some
relevant features of RDF, RDFS, and OWL semantics and give a
summary of the existing OWL proﬁles.
2.1 RDF Graphs and Their Semantics

Given the set of URI references U, the set of blank nodes B,
and the set of literals L, the set of RDF constants is denoted by
C := U∪B∪L. We use CURIEs to denote URIs (e.g., owl:sameAs),
where the preﬁxes used in this paper can be looked up, e.g., at
http://preﬁx.cc/. We often use Turtle syntax; e.g., we may use
a as a shortcut for rdf:type. Finally, V denotes the set of RDF
variables ranging over C and we preﬁx variables with ‘?’.
An RDF triple (s, p, o) is a triple from the set of all RDF triples
G := U ∪ B × U × C, where s is called subject, p predicate, and o
object. We call a ﬁnite set of triples G ⊂ G an RDF graph.

Semantically, RDF graphs can be interpreted in a number of
ways based on various W3C recommendations. The simple semantics 
[17] considers only the graph structure of RDF, whereas
more elaborate semantics such as RDFS entailment [17] or the
OWL 2 Direct and RDF-Based Semantics (see below) provide special 
meanings for certain terms.

The common basis for all such semantics is that they are speciﬁed 
in terms of model theory: one deﬁnes interpretations together
with necessary and suﬃcient conditions that specify when an interpretation 
satisﬁes a graph. When deﬁning a semantics E (such
as RDF, RDFS, etc.) one often speaks of E-interpretations and
E-satisfaction. The set of all E-interpretations that E-satisfy a graph
G are called the E-models of G. Semantic entailment follows from
this notion: a graph G E-entails a graph G(cid:48), written G |=E G(cid:48), if and
only if every E-model of G is also an E-model of G(cid:48).
2.2 OWL and its Fragments

OWL 2 is an ontology language that provides advanced schema
modelling capabilities that can be used together with RDF data.
OWL 2 supersedes the earlier speciﬁcation “OWL 1” by introducing 
new modelling features, additional serialisations, updated conformance 
conditions and various corrections. When omitting the
version number, we thus mean the current standard OWL 2.

Every RDF graph can be considered as an OWL ontology and the
language of all RDF documents is called OWL Full to emphasise
that all such graphs should be viewed as ontologies. In applications,
however, OWL ontologies are usually viewed as being composed of
axioms, that can be more complex than single triples. For example,
the triple ex:a owl:sameAs ex:b . corresponds to the OWL axiom
SameIndividual(ex:a ex:b) whereas the axiom

ObjectPropertyRange(skos:member

ObjectUnionOf(skos:Concept skos:Container))

expands to the six RDF triples

skos:member rdfs:range _:x. _:x owl:unionOf _:x1 .
_:x1 rdf:ﬁrst skos:Concept. _:x1 rdf:rest _:x2 .
_:x2 rdf:ﬁrst skos:Container. _:x2 rdf:rest rdf:nil .

(1)

(2)

Additional conditions need to be imposed on RDF graphs to ensure
that they are in one-to-one correspondence to a collection of OWL

axioms. A syntactic subset of OWL Full for which this is possible is
OWL DL, which also imposes further restrictions that are useful for
computing semantic conclusions from the ontology [27]. It can still
be computationally expensive to draw conclusions from OWL DL
ontologies. To address this, OWL further deﬁnes three syntactically 
restricted sub-languages (proﬁles) of OWL DL called OWL
EL, OWL RL and OWL QL [6] (see also Table 2 later for a brief
feature comparison). OWL Full, OWL DL and the OWL proﬁles
together constitute the ﬁve language fragments of OWL. The essential 
features of RDF Schema (sub-classes and -properties, domain,
range) are covered by all of these fragments, but only OWL Full
supports arbitrary RDF documents.

Various further sub-languages of OWL have been proposed outside 
of the oﬃcial standard. The current proﬁles themselves have
been inspired by existing approaches: EL++ for OWL EL [24], DLLite 
[5] for OWL QL, and Description Logic Programs (DLP) [13]
and pD* [35] for OWL RL. Generally, these approaches aimed to
maximise the expressivity and thus approach the current standard
quite closely (albeit, only for OWL 1 features). DLP is deﬁned
as a syntactic fragment of OWL. Other languages – including pD*
– came about by extending RDFS with some additional features.
Allemang and Hendler proposed RDFS-Plus based on an informal
survey of practitioners and three criteria felt important for adop-
tion: pedagogism (intuitive and easy to learn), practicality (real
use-cases in modelling), and computational feasibility (not too hard
to implement) [1]. This language was later extended to RDFS 3.0
along similar principles [19]. Fisher et al. propose a similar proﬁle
to RDFS-Plus called L2, where the rationale for including or excluding 
features is given on an ad-hoc basis [11]. A more detailed
overview of the main features for these languages is also found in
Table 2.

2.3 OWL Semantics and Reasoning

OWL ontologies can be interpreted under two diﬀerent semantics 
that agree in important cases: the RDF-Based Semantics (RS)
[17] and the Direct Semantics (DS) [26]. Like in RDF(S), the semantics 
are deﬁned by specifying a model theory, i.e., by deﬁning
valid interpretations for ontologies based on semantic conditions.
In RS, these models are based on the representation of OWL axioms 
as RDF graphs and thus can be viewed as a reﬁned form of
RDF interpretation. In DS, models are directly deﬁned based on
the structure of OWL axioms in the conceptual framework of Description 
Logics (which in turn is based on ﬁrst-order logic). Due to
this, DS is only deﬁned for ontologies that belong to the OWL DL
language (or to any of its proﬁles) while RS can also be used on
OWL Full. Besides this restriction, OWL language fragments are
not tied to either semantics, leaving 9 valid combinations of syntactic 
fragment and formal semantics [34].

RS is arguably more robust since it is deﬁned for any RDF graph
while DS only works for ontologies in OWL DL. However, RS
entailment (of derived facts) is undecidable so that concrete implementations 
can compute only a subset of the conclusions that
the semantics speciﬁes. In contrast, there are complete implementations 
for computing entailments under DS, though with a high
(super-exponential) worst-case complexity if all of OWL DL is to
be covered. When further restricting to the OWL proﬁles, entailment 
checking under DS can even be done in polynomial time. For
RS, it is not known in general if the entailment problem becomes
simpler in these cases. It is known, however, that RS and DS yield
the same entailments on OWL RL under certain additional conditions,
 leading to a partial tractability result for RS for this particular
case [6]. Similar results could be obtained in other cases since DS
reasoning algorithms can typically be modiﬁed to obtain correct

(though often incomplete) RS reasoners.

DS reasoning in all of the OWL proﬁles and signiﬁcant parts of
OWL DL can be implemented using rules in a forward-chaining
manner. For OWL RL, an algorithm is suggested in the speciﬁcation 
[6], while other works have covered OWL EL [24] and parts
of OWL DL that also cover OWL QL [33]. For OWL QL, query
rewriting is a more common reasoning technique [5, 31]. There
are many diﬀerent reasoning techniques for OWL DL under DS,
though not all of them lead to polynomial algorithms when applied
to the OWL proﬁles. Two (necessarily incomplete) reasoning methods 
are known for RS: algorithms based on sets of derivation rules
like the ones for OWL RL and an approach based on using ﬁrstorder 
theorem provers [32].

3. SURVEY OF RDFS & OWL ADOPTION

ON THE WEB OF DATA

We now present an empirical survey of RDFS & OWL adoption
on the Web of Data. Our survey is conducted over the Billion Triple
Challenge 2011 corpus, which consists of 2.145 billion quadruples 
crawled from 7.411 million RDF/XML documents through
an open crawl ran in May/June 2011 spanning 791 pay-level domains.
 (A pay-level domain is a direct sub-domain of a top-level
domain (TLD) or a second-level country domain (ccSLD), e.g.,
dbpedia.org, bbc.co.uk. This gives us our notion of “domain”).
This corpus represents a broad sample of the Web of Data.
3.1 Measures Used

In order to adequately characterise the uptake of various RDF(S)
and OWL features used in this corpus, we present diﬀerent measures 
to quantify their prevalence and prominence.

First, we look at the prevalence of use of diﬀerent features, i.e.,
how often they are used. Here, we must take into account the diversity 
of the data under analysis, where few domains account for a
great many triples and many domains account for few triples, where
certain domains tend to publish many small documents and others
publish few large documents, and so forth [20]. We thus present
three statistics: (1) number of axioms using the feature [Ax], (2)
number of documents [Doc] and (3) number of domains [Dom].

Second, we look at the prominence of use of diﬀerent features.
We use PageRank to quantify our notion of prominence: PageRank
calculates a variant of the Eigenvector centrality of nodes (e.g., doc-
uments) in a graph, where taking the intuition of directed links as
“positive votes”, the resulting scores help characterise the relative
prominence of particular nodes on the Web [29, 15].

In particular, we ﬁrst rank documents in the corpus. To construct
the graph, we consider RDF documents as nodes, where a directed
edge (d1, d2) is extended from document d1 to d2 iﬀ d1 hosts RDF
data that contains (in any triple position) a URI that dereferences to
document d2. This notion of dereferenceable links is core to Linked
Data principles [3]. Note also that we follow redirects when checking 
dereferenceability. We then apply a standard PageRank analysis
over the resulting directed graph, using the power iteration method
with ten iterations. For reasons of space, we refer the interested
reader to [29] for more detail on PageRank, and [20] for more detail 
on the particular algorithms used in this paper.

Given these rank scores, for the diﬀerent RDF(S) and OWL features 
we then present (1) the sum of PageRank scores for documents

in which they are used [(cid:80) Rank]; (2) the max PageRank score of

the highest-ranked document in which it appears [max Rank]; (3)
the max PageRank position of that document in the ordering of the
7.411 million documents [max Pos].

In terms of intuition under the random surfer model of PageDocument 
URI

#
1 http://www.w3.org/1999/02/22-rdf-syntax-ns
2 http://www.w3.org/2000/01/rdf-schema
3 http://dublincore.org/2010/10/11/dcelements.rdf
4 http://www.w3.org/2002/07/owl
5 http://www.w3.org/2000/01/rdf-schema-more
6 http://dublincore.org/2010/10/11/dcterms.rdf
7 http://www.w3.org/2009/08/skos-reference/skos.rdf
8 http://xmlns.com/foaf/spec/
9 http://dublincore.org/DCMI.rdf
10 http://www.w3.org/2003/g/data-view
14 http://id.loc.gov/authorities/sh98002267
30 http://motools.sourceforge.net/doc/musicontology.rdfs
38 http://www.w3.org/.../wn20/schemas/wnfull.rdfs
43 http://vivoweb.org/ﬁles/vivo-core-public-1.2.owl
87 http://www.w3.org/2006/time
116 http://rdf.geospecies.org/ont/geospecies
129 http://motools.sourceforge.net/timeline/timeline.rdf
159 http://vocab.org/bio/0.1/termgroup2.rdf
259 http://www.ordnancesurvey.co.uk/.../geometry.owl
289 http://www.ordnancesurvey.co.uk/.../admingeo.owl
990 http://www.ordnancesurvey.co.uk/.../spatialrelations.owl

Rank

0.121
0.110
0.096
0.078
0.049
0.036
0.026
0.023
0.021
0.017
4.01E-3
2.38E-3
7.79E-4
6.11E-4
2.07E-4
1.22E-4
1.06E-4
8.11E-5
4.39E-5
4.01E-5
1.24E-5

Table 1: Top ten ranked documents and notable ranks (position
< 1, 000) mentioned later in Table 2

Rank [29], given an agent starting from a random location and
traversing documents on (our sample of) the Web of Data through

randomly selected dereferenceable URIs, the (cid:80) Rank value for

a feature approximately indicates the probability with which that
agent will be at a document using that feature after traversing ten
links. In other words, the score indicates the likelihood of an agent,
operating over the Web of Data based on dereferenceable principles,
 to encounter a given feature.

The graph extracted from the corpus consists of 7.411 million
nodes and 198.6 million edges. Table 1 presents the top ten ranked
documents in our corpus, which are dominated by core meta-vocabularies,
 documents linked therefrom, and other popular vocabularies;
 we also present the ranks of other notable documents mentioned 
in the following section.2
3.2 Survey of RDF(S)/OWL Features

Table 2 presents the results of the survey of RDF(S) and OWL
usage in our corpus, where for features with non-trivial semantics,
we present the measures mentioned in the previous section, as well
as support for the features in the diﬀerent reasoning proﬁles discussed 
in Section 2.2. We exclude rdf:type, which appeared in
90.3% of documents. We present the table ordered by the sum of

PageRank measure [(cid:80) Rank]; recall that Table 1 provides a legend

for notable documents (Pos<1,000).

In column BF, we indicate which features have expressions that
can be represented as a single RDF triple, i.e., which features do
not require auxiliary blank nodes of the form _:x or the SEQ production 
in Table 1 of the OWL 2 Mapping to RDF document [30].
This distinction is motivated by our initial observations that such
features are typically the most widely used in Web data.

Figure 1 gives a visual impression of the sum of PageRank measure 
for the listed features (log scale), where diﬀerent shades of
grey are used to indicate to which vocabulary a term belongs (e.g.,
distinguishing the terms new in OWL 2 from the ones already in
OWL 1).

Regarding prevalence, we see from Table 2 that owl:sameAs
is the most widely used axiom in terms of documents (1.778 mil2We 
ran another similar analysis with links to and from core
RDF(S) and OWL vocabularies disabled. The results for the feature
analysis remained similar. Mainly owl:sameAs dropped several
positions in terms of the sum of PageRank.

-

+
S
F
D
R
-

2
L

*
D
p

L
Q
-

-

-

- (cid:88) (cid:88) -

- (cid:88) (cid:88)∗ (cid:88) -
-
-

- (cid:88)∗

-

P
L
L
D
E
- (cid:88) -

S
F
D
L BF
Dom R
Doc
Ax
R
(cid:88)
48 (cid:88) -
-
8,049
17,509
1
1.21E-1
89 (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
44,492
51,540
1
1.21E-1
89 (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
43,247
1
97,288
1.21E-1
115,608 109 (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
1 1,164,620
1.21E-1
43 (cid:88) -
(cid:88)
19,904
39,606
1
1.21E-1
80 (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
6,080
11,490
2
1.10E-1
- (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
302,701 111
-
4
255,002
7.80E-2
- (cid:88) (cid:88) - (cid:88) (cid:88) (cid:88) (cid:88)
92
285,412
-
35,065
4
7.80E-2
- (cid:88)∗ (cid:88)∗ (cid:88)∗ (cid:88)∗ (cid:88)∗ (cid:88)∗
9 (cid:88)∗
-
23
31
1
1.21E-1
- (cid:88) (cid:88) - (cid:88) (cid:88) (cid:88) (cid:88)
-
82
234,483
23,888
4
7.80E-2
- (cid:88) - (cid:88) (cid:88) (cid:88) (cid:88)
-
-
55
172,290
216
4
7.80E-2
- (cid:88) (cid:88) (cid:88) -
- (cid:88) (cid:88)
-
34
298
3,222
7
2.63E-2
- (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
141
23
6
168
3.57E-2
- (cid:88) (cid:88) (cid:88) (cid:88) - (cid:88) (cid:88) (cid:88)
43
366
1,160
7
2.63E-2
- (cid:88) - (cid:88) (cid:88) (cid:88) (cid:88)
-
7
230
27
3,266
2.63E-2
- (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) - (cid:88) (cid:88)
14 3,450,554 1,778,208 117
4.01E-3
- (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
25,827
39
8
2.32E-2
- (cid:88) (cid:88)
75
-
24
8
2.32E-2
- (cid:88)∗
46,721
-
30
7
-
2.63E-2
- (cid:88) (cid:88) (cid:88) (cid:88) - (cid:88) (cid:88) (cid:88)
175
7
23
2.63E-2
- (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) - (cid:88) (cid:88)
30
223
7
2.63E-2
- (cid:88)∗ (cid:88)∗ (cid:88) (cid:88)∗ (cid:88)∗
-
15
-
3,854
10
-
1.65E-2
62 (cid:88) -
- (cid:88) -
-
159 7,791,545
-
-
-
8.11E-5
- (cid:88)∗
- (cid:88)∗ (cid:88)∗
-
-
20
108,989
38
-
7.79E-4
- (cid:88)∗
-
-
19
395,841
43
-
-
-
-
6.11E-4
- (cid:88)∗
- (cid:88)∗
43
223,994
24
-
-
-
-
6.11E-4
- (cid:88)∗
-
-
24
20,781
38
-
-
-
-
7.79E-4
- (cid:88)∗
- (cid:88)∗
- (cid:88)∗
-
-
11
736
87
2.07E-4
- (cid:88)∗ (cid:88) (cid:88) - (cid:88)
-
-
14
1,624
87
2.07E-4
- (cid:88) - (cid:88) (cid:88)∗ (cid:88)
-
13
2,324
129
-
1.06E-4
- (cid:88) (cid:88) (cid:88) (cid:88)
-
2
205
116
-
-
1.22E-4
- (cid:88) - (cid:88)
116
87
8
-
-
-
-
1.22E-4
- (cid:88) - (cid:88)
-
-
6
52
289
-
-
4.01E-5
-
-
-
-
-
1
89
259
-
-
4.39E-5
-
-
-
-
-
1
7
259
-
-
4.39E-5
-
-
-
-
-
1
95
289
-
-
4.01E-5
- (cid:88) (cid:88) (cid:88)
-
-
2
9
289
-
-
4.01E-5
- (cid:88)∗
289
1
1
-
-
-
-
-
-
4.01E-5
(cid:88)
- (cid:88) (cid:88) -
-
1
1
990
-
-
1.24E-5
- (cid:88)∗
- (cid:88)∗ (cid:88)∗
-
4
759
549,258
-
-
6.28E-8
- (cid:88) - (cid:88) - (cid:88) (cid:88)
-
7
691
486,354
6.81E-8
-
-
-
1
2
2.72E-7
70,414
-
-
-
2
2
4.28E-8 1,005,307
3.67E-8 1,336,720
1
1
-
-
-
- (cid:88) (cid:88) (cid:88)
-
-
1
4
2.43E-8 3,911,874

22,291
111
15,162
120
150
1,753
293,022
29,084
33,309
10,413
3,170
74
55
186
3
21
14
3
2
2
2
1
2
75
25
1
2
1
1

-
-
-
-
- (cid:88) - (cid:88)
-

-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-

-
-
-

-
-

-
-
-
-

-
-

(cid:80) Rank max Rank max Pos

Primitive

#
1 rdf:Property
2 rdfs:range
3 rdfs:domain
4 rdfs:subClassOf
5 rdfs:Class
6 rdfs:subPropertyOf
7 owl:Class
8 owl:ObjectProperty
9 rdfs:Datatype
10 owl:DatatypeProperty
11 owl:AnnotationProperty
12 owl:FunctionalProperty
13 owl:equivalentProperty
14 owl:inverseOf
15 owl:disjointWith
16 owl:sameAs
17 owl:equivalentClass
18 owl:InverseFunctionalProperty
19 owl:unionOf
20 owl:SymmetricProperty
21 owl:TransitiveProperty
22 owl:someValuesFrom
23 rdf:_*
24 owl:allValuesFrom
25 owl:minCardinality
26 owl:maxCardinality
27 owl:cardinality
28 owl:oneOf
29 owl:hasValue
30 owl:intersectionOf
31 owl:NamedIndividual (2)
32 owl:AllDiﬀerent
33 owl:propertyChainAxiom (2)
34 owl:onDataRange
35 owl:minQualifiedCardinality(2)
36 owl:qualifiedCardinality(2)
37 owl:AllDisjointClasses(2)
38 owl:maxQualifiedCardinality(2)
39 owl:ReﬂexiveProperty(2)
40 owl:complementOf
41 owl:diﬀerentFrom
42 owl:onDatatype
43 owl:disjointUnionOf
44 owl:hasKey(2)
45 owl:propertyDisjointWith (2)

5.74E-1
4.67E-1
4.62E-1
4.60E-1
4.45E-1
2.35E-1
1.74E-1
1.68E-1
1.68E-1
1.65E-1
1.60E-1
9.18E-2
8.54E-2
7.91E-2
7.65E-2
7.29E-2
5.24E-2
4.79E-2
3.15E-2
3.13E-2
2.98E-2
2.13E-2
1.42E-2
2.98E-3
2.43E-3
2.14E-3
1.75E-3
4.13E-4
3.91E-4
3.37E-4
1.63E-4
1.55E-4
1.23E-4
8.41E-5
8.40E-5
4.02E-5
4.01E-5
4.01E-5
1.30E-5
1.96E-6
7.18E-7
2.72E-7
6.31E-8
3.67E-8
2.43E-8

Not Used: rdfs:ContainerMembershipProperty, owl:AllDisjointProperties(2), owl:Annotation (2), owl:AsymmetricProperty(2),
owl:Axiom (2), owl:IrreﬂexiveProperty(2), owl:NegativePropertyAssertion (2), owl:datatypeComplementOf (2), owl:hasSelf (2)

Table 2: Survey of RDFS/OWL primitives used on the Web of Data and support in diﬀerent tractable proﬁles where ∗ denotes that
the semantics is not fully axiomatised by the OWL RL/RDF rules or that usage of the term is restricted under OWL Direct Semantics

lion; 24%) and domains (117; 14.8%). Surprisingly (to us), RDF
container membership properties (rdf:_*) are also heavily used.
Regarding prominence, we make the following observations:

(1) The top six features are those that form the core of RDFS [28].
(2) The RDF(S) declaration classes rdfs:Class, rdf:Property
are used in fewer, but more prominent documents than OWL’s versions 
owl:Class, owl:DatatypeProperty, owl:ObjectProperty.
(3) The top eighteen features are expressible with a single RDF
triple. The highest ranked primitive for which this is not the case
is owl:unionOf in nineteenth position, which requires use of RDF
collections (i.e., lists). Union classes are often speciﬁed as the domain 
or range of a given property: the most prominent such example 
is the SKOS vocabulary (the seventh highest ranked docu-
ment) which speciﬁes the range of the skos:member property as
the union of skos:Concept and skos:Container as in (1) above.
(4) Of the features new to OWL 2, the most prominently used is
owl:NamedIndividual in thirty-ﬁrst position. Our crawl was conducted 
nineteen months after OWL 2 became a W3C Recommendation 
(Oct. 2009); by means of a quick scan of the max Pos column 
of Table 2, we note that new OWL 2 features have had little 
penetration in prominent Web vocabularies during that interim.
Further, several OWL 2 features were not used at all in our corpus.
(5) owl:complementOf and owl:diﬀerentFrom are the least

prominently used original OWL features.

In terms of proﬁle support, we observe that RDFS has good
catchment for a few of the most prominent features, but otherwise
has poor coverage. Aside from syntactic/declaration features, from
the top-20 features, L2 misses functional properties(pos=12), disjoint
classes(15), inverse-functional properties(18) and union classes(19).
RDFS-Plus omits support for disjoint(15) and union classes(19). DLP
– as deﬁned by Volz [37, §A] – has coverage of all such features,
but does not support inverse-functional(18) datatype properties. pD*
does not support disjoint(15) or union classes(19).

Regarding the OWL proﬁles, OWL EL and OWL QL both omit
support for important top-20 features. Neither include functional(12)
or inverse-functional properties(18), or union classes(19). OWL EL
further omits support for inverse(14) and symmetric properties(20).
OWL QL does not support the prevalent same-as(16) feature. ConFigure 
1: The sum of PageRank for each of the listed features from Table 2 shown in logarithmic scale on the vertical axis

Lit

Doc

Dom D O2
68 (cid:88) (cid:88)
4.18E-2 2,919,518 1,092,048
22 (cid:88) (cid:88)
41,680
2.37E-2
75,215
41 (cid:88) (cid:88)
716,904
1.97E-2 1,015,235
76 (cid:88) (cid:88)
1.90E-2 1,629,224
475,397
39 (cid:88) -
550,257
1.82E-2
965,647
6 (cid:88) (cid:88)
357,723
1.63E-2 1,143,351
16 (cid:88) (cid:88)
339,731
1.61E-2 1,407,283
31 (cid:88) (cid:88)
400,448
1.52E-2 2,061,837
21 (cid:88) (cid:88)
341,156
671,613
9.09E-3
12 (cid:88) -
159,510
212,887
4.63E-3
26 (cid:88) (cid:88)
3.35E-3
9,230
10,926
31 (cid:88) (cid:88)
68,682
137,908
2.00E-3
9 (cid:88) (cid:88)
13,179
43,747
1.11E-3
4
-
28,299
28,541
6.99E-4
3 (cid:88) -
20,886
34,492
5.98E-4
2 (cid:88) (cid:88)
11,643
18,064
5.71E-4
11 (cid:88) (cid:88)
4.97E-4
1,580
791
3 (cid:88) -
1,132
2,250
2.50E-4
- (cid:88)
2
109
1.34E-4
19
5 (cid:88) -
3,080
6,763
8.49E-5
2 (cid:88) (cid:88)
1,890
1,423
5.11E-5
1 (cid:88) -
1,117
2,234
4.26E-5
1 (cid:88) (cid:88)
3.56E-5
2,900
1,450
1 (cid:88) (cid:88)
11
66
2.62E-7
1 (cid:88) (cid:88)
11
58
2.60E-7
3 (cid:88) -
4
23
8.88E-8
1 (cid:88) (cid:88)
1
6
6.71E-8
— — — —
—
—

-

Table 3: Survey of (std.) datatypes used on the Web of Data

quired to support each one. Thus, it is interesting to see which
datatypes are most commonly used on the Web of Data.

In our corpus, we found 278 diﬀerent datatype URIs assigned
to literals. Of these, 158 came from the DBpedia exporter which
models SI units, currencies, etc., as datatypes. Using analogous
measures as before, Table 3 lists the top standard RDF(S), OWL
and XSD datatypes as used to type literals in our corpus. We omit
max-rank statistics for brevity, and omit plain literals which were
used in 6.609 million documents (89%). D indicates the datatypes
supported by D-entailment with the recommended XSD datatype
map. O2 indicates the datatypes supported by OWL 2.

We observe from the table that the top four standard datatypes
are supported by both the traditional XSD datatype map and in

(cid:80) Rank

Primitive

#
1 xsd:dateTime
2 xsd:boolean
3 xsd:integer
4 xsd:string
5 xsd:date
6 xsd:long
7 xsd:anyURI
8 xsd:int
9 xsd:ﬂoat
10 xsd:gYear
11 xsd:nonNegativeInteger
12 xsd:double
13 xsd:decimal
14 xsd:duration
15 xsd:gMonthDay
16 xsd:short
17 rdf:XMLLiteral
18 xsd:gMonth
19 rdf:PlainLiteral
20 xsd:gYearMonth
21 xsd:positiveInteger
22 xsd:gDay
23 xsd:token
24 xsd:unsignedByte
25 xsd:byte
26 xsd:time
27 xsd:unsignedLong
– other xsd/owl dts. not used

versely, OWL RL has much better coverage, albeit having only partial 
support for union classes(19).

Summing up, we acknowledge that such a survey of RDFS and
OWL cannot give a universal or deﬁnitive indication of the most
important modelling features for Linked Data. Also, OWL 2 terms
might need some more time for adoption still. However, the results 
oﬀer useful insights into trends of adoption, which inform the
design of a novel OWL proﬁle tailored for the Web of Data.

3.3 Survey of Datatype Use

We now look at the use of datatypes on the Web of Data.
Aside from plain literals, the RDF semantics deﬁnes a single
datatype supported under RDF-entailment: rdf:XMLLiteral [17].
However, the RDF semantics also deﬁnes D-entailment, which provides 
interpretations over a datatype map that gives a mapping from
lexical datatype strings into a value space. The datatype map may
also impose disjointness constraints within its value space. These
interpretations allow for determining which lexical strings are valid
for a datatype, which diﬀerent lexical strings refer to the same value
and which to diﬀerent values, and which sets of datatype values are
disjoint from each other. An XSD-datatype map is then deﬁned
which extends the set of supported datatypes into those deﬁned for
XML Schema (1.0), including types for boolean, numeric, temporal,
 string and other forms of literals. Datatypes which are deemed
to be ambiguously deﬁned (viz. xsd:duration) or speciﬁc to XML
(e.g., xsd:QName), etc. are omitted.

The original OWL speciﬁcation recommends use of a similar set
of datatypes to that for D-entailment, where compliant reasoners
are required to support xsd:string and xsd:integer. Further, OWL
allows for deﬁning enumerated datatypes.

With the standardisation of OWL 2 came two new datatypes,
namely owl:real and owl:rational. Also, OWL 2 added support
for xsd:dateTimeStamp. However, XSD datatypes relating to
date, time and Gregorian calendar values are not supported. Further,
 OWL 2 introduced mechanisms for deﬁning new datatypes
by restricting facets of legacy deﬁned datatypes; however, we note
from owl:onDatatype in Table 2 that facet restrictions have only
one or two uses in our corpus.

Implementing the entire range of RDF, XSD and OWL datatypes
can be costly [10], with custom code (or an external library) reOWL 
2. However, OWL 2 does not support xsd:date(5) which is
prominently featured in our corpus, and does not support Gregorian
datatypes(10,15,18,20,22) nor xsd:time(26). Despite not being supported
by any standard entailment regime, xsd:duration(14) was used in
28 thousand documents across four diﬀerent domains.

Conversely, various standard datatypes are not used at all in the
data; e.g., xsd:dateTimeStamp, the “new” OWL datatypes, binary 
datatypes and various normalised-string/token datatypes.

4. AVAILABLE TOOL SUPPORT

When asking for the practical utility of certain OWL constructs,
it is crucial to consider the available tool support.
In this section,
 we survey the availability of software that provides the necessary 
technical infrastructure for building complex applications, i.e.,
databases, reasoners and libraries.

Even if no logical inferencing is required, tools that want to support 
a certain OWL feature usually need to be able to read OWL
documents that contain this feature or use a library for this task.
Conformance with the OWL standard even requires support for the
RDF/XML serialisation as an input format [34]. Parsing triples,
e.g., in RDF/XML or Turtle format, into OWL axioms is not an
easy task, since axioms can be composed of several RDF triples,
which might be distributed all over the document [30]. In addition,
 OWL axioms may require use of arbitrary-length RDF lists
which require particular attention to parse. Moreover, many RDF
triples are ambiguous and type declaration axioms are necessary
to resolve this. Further OWL-speciﬁc mechanisms such as imports
add to the diﬃculty of writing an OWL parser based on one for
RDF/XML or Turtle. Consequently, there are hardly any standalone 
libraries for parsing OWL (as opposed to RDF): we are only
aware of the Java-based OWL API [21].

For tools that cannot use the OWL API due to technical or legal
constraints, this puts up a major barrier for using OWL. Luckily,
OWL axioms that are represented in a single RDF triple do not
require the detection of complex triple patterns and can easily be
processed with the RDF libraries and parsers that are available for
many programming languages. The question of whether a feature
can be expressed in a single triple or not may thus already have
signiﬁcant consequences for the practical cost of supporting it.

Databases are another important class of tools for building RDF
applications and a sizeable amount of commercial and non-commercial 
systems is available today. Many of these systems evaluate
OWL features to provide improved query answering services. Table 
4 provides an overview of tools in that area. We restrict to
tools that have native support at least for rdfs:subClassOf and
rdfs:subPropertyOf reasoning (excluding, e.g., 5store), are developed 
for production use (excluding prototypes such as YARS2
[16] and QueryPie [36]) and that are meant to be used with large
amounts of instance data (excluding OWL EL tools such as ELK
[22]). The table lists the most frequently implemented features explicitly 
and describes proﬁle support in a separate column. We additionally 
mention the main inference strategy and the source of our
information.3

A number of tools support the (near-)complete OWL RL proﬁle.
Jena with the “OWL mini” ruleset has an incomplete implementation 
of OWL (1) DL features that can be viewed as an approximation 
of OWL RL. PelletDb and QuOnto are reasoning layers on top
of a database with support for OWL DL and OWL QL, respectively.

3We note that it is diﬃcult to verify whether the tools indeed hold
what they claim, e.g., in practice one might ﬁnd that the support is
not as complete as advertised. Nevertheless, we take each system’s
description as an indication of available support.

DLEJena uses Pellet to perform TBox (schema) reasoning, where
the resulting entailments and the OWL RL/RDF rules are used to
generate a set of ABox (instance) rules, which are then executed
using Jena’s RETE engine.

Contrasting with these fairly powerful implementations, we ﬁnd
a number of tools that support only a few selected semantic features,
 including some that only support a fragment of RDFS.

The reasoning algorithms that have been used are also important
in practice. Forward chaining (materialisation) often incurs signiﬁcant 
penalties for data updates, although there are approaches
to alleviate this, e.g., AllegroGraph advertises “dynamic materi-
alisation” as a compromise. Backward chaining, in contrast, affects 
query answering performance but allows for easier updates.
In the case of OWL QL (and RDFS), backward chaining can be
performed in a particularly eﬀective kind of query rewriting that
depends on the schema information only and is thus likely to scale
to bigger data volumes. The tableau approach of PelletDb, on the
other hand, is more demanding when used at query time but can
support all features of OWL DL.

Summarising, among the listed systems, three systems work with
the Direct Semantics of OWL (PelletDb, DLEJena and QuOnto),
whereas the other systems are rule-based and work directly with
RDF triples, usually via forward chaining. Thus, we conclude
that an implementation via rules and compatibility also with the
RDF-Based Semantics is an important criteria for comprehensive
tool support. Surprisingly, only two thirds of the tools support
owl:sameAs, which is one of the most popular features according
to our survey. A possible explanation is that owl:sameAs blows up
the size of the materialisation when using forward-chaining, so for
an eﬃcient support special optimisations are required, as, e.g., implemented 
in OWLIM or Oracle 11g [23]. Although, four systems
(nearly) support OWL RL, the complexity of a fully compliant and
eﬃcient implementation is still considered high [23].

Regarding datatypes, many triples stores use internal canonicalisation 
of typed literals, but full datatype reasoning is only sparsely
supported or documented; some tools such as OWLIM explicitly do
not support datatype rules of OWL RL. Datatype support in several
tools is, for example, surveyed by Emmons et al. [10].

5. DEFINING THE OWL LD PROFILE

In this section, we build upon our previous observations to suggest 
a simple OWL proﬁle that is adequate for the curent needs of
the Web. In the previous sections, we have identiﬁed a number of
key issues for OWL adoption on the Web:

1. Adequacy: features that are widely used on the Web should

be included.

2. Implementability: features that are more challenging to process 
and reason with should be avoided.

3. Robustness: noisy and unreliable data should not prevent the

use of ontological data in reasoning.

Comparing this to the design guidelines of RDFS-Plus [1], we
can see that adequacy relates to “practicality” while implementability 
subsumes to “computational feasibility”. We do not consider
“pedagogism” as a design goal since we did not assess how intuitive 
features are. In contrast, the work presented in Section 3 and
4 provides us with a much better understanding for assessing implementability 
and adequacy. Robustness has not been considered
as a design goal for RDFS-Plus while we ﬁnd it to be of great importance 
for making sense of Web data.

Each of the above requirements leads to a number of concrete aspects.
 Adequacy has been discussed in Section 3 based on a sample 
of published ontologies. Looking at Table 2, we can see that

sC sP ran dom sA tra sym inv iFP
(cid:88)
(cid:88) (cid:88)
PelletDb
(cid:88)
(cid:88) (cid:88)
DLEJena
(cid:88)
(cid:88) (cid:88)
OWLIM
(cid:88) (cid:88)
(cid:88)
Oracle 11g
(cid:88)
(cid:88) (cid:88)
Jena OWL mini
(cid:88)
(cid:88) (cid:88)
Virtuoso
(cid:88) (cid:88)
AllegroGraph
-
(cid:88)
(cid:88) (cid:88)
QuOnto
(cid:88) (cid:88)
Jena RDFS
-
Sesame RDFS Sail (cid:88) (cid:88)
-
(cid:88) (cid:88)
4store with 4rs
-

(cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88)
-
-
-
-
-
-
-
-

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
-
(cid:88)
-
-
-

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
-
-
-

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
-
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
-
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

Source

Algorithm

tableau http://clarkparsia.com/pelletdb/

Profile
OWL DL
OWL RL tableau, forward chaining
∼ OWL RL
forward chaining
forward chaining
OWL RL
∼ OWL RL
forward chaining http://openjena.org/inference/
—
—
OWL QL
—
—
—

forward chaining http://openjena.org/inference/
forward chaining http://www.openrdf.org/

forward chaining http://tinyurl.com/agraph-doc

query rewriting http://4sreasoner.ecs.soton.ac.uk/

query rewriting http://www.dis.uniroma1.it/quonto/

[25], http://lpis.csd.auth.gr/systems/DLEJena/
[4], http://www.ontotext.com/owlim
[23], http://tinyurl.com/oracle-sw

backward chaining http://virtuoso.openlinksw.com/rdf-quad-store/

Table 4: RDF database systems with reasoning support (sC: rdfs:subClassOf; sP: rdfs:subPropertyOf; ran:
rdfs:range;
dom: rdfs:domain; sA: owl:sameAs; tra: owl:TransitiveProperty; sym: owl:SymmetricProperty; inv: owl:inverseOf; iFP:
owl:InverseFunctionalProperty)

many of the most frequently used features are of a simple structure.
 In fact, owl:unionOf is the highest ranked feature that is not
expressed by a single triple in RDF serialisations of OWL.

Implementability was discussed in Section 4. We observed that
parsing OWL documents in RDF-based syntaxes (RDF/XML or
Turtle) is easier when restricted to features that can be expressed
by single triples, and which are thus directly represented in the
RDF data model of available tools. Moreover, inferencing is more
diﬃcult for some features than for others, even in rule-based approaches 
used commonly for OWL RL, e.g., support for list-based
(multi-triple) expressions that can be of arbitrary length [4].

Robustness requires a high tolerance against syntactic errors.
The RDF-Based Semantics has this feature and can always be applied,
 hence no special language design is needed. However, it is
also desirable to be able to apply the Direct Semantics to a fragment
as it yields stronger completeness guarantees for reasoning. Even
if RDF-Based entailments are desired, the completeness of DS reasoning 
methods can be used to obtain similar guarantees for RS [6,
Theorem PR1]. This kind of robustness can be accomplished by reducing 
the use of features for which OWL DL imposes additional
requirements, in particular cardinalities and property chains.

Another aspect of robustness is tolerance to inconsistencies. This
feature is generally available in OWL proﬁles that are not able to
express truly disjunctive information. Due to this, all inconsistencies 
are directly related to an individual or literal upon which
conﬂicting requirements are imposed (including the special case
of ill-typed literal values). Hence, it is easy to ignore (all elements 
involved in) inconsistencies and to continue reasoning on the
remaining consistent ontology to derive meaningful conclusions.
Any OWL proﬁle (or subset thereof) has this feature.

From these observations, we derive that it is a reasonable design
guideline for an OWL proﬁle to restrict to OWL axioms that are in
OWL RL and at the same time are expressed as single RDF triples.
This directly addresses implementability based on the above observations 
together with the fact that OWL RL is now widely implemented.
 Adequacy is addressed since the most important features
identiﬁed above are both in RL and expressed in single triples. Note
that the coverage of additional, rarely used features like reﬂexive
properties is not a concern from the viewpoint of adequacy (which
asks for coverage, not for exclusivity) and is not diﬃcult to implement 
in the restricted fragment either.

Robustness for interpretation in DS (i.e., as a subset of OWL DL)
is eased by the omission of property chains and (most) cardinalities 
(note that functionality remains). However, other restrictions
of OWL DL regarding the need for declarations, the non-existence
of inverse functional data properties, and the restrictions on blank
nodes are still relevant. We suggest to develop canonical (and thus

predictable) repair strategies for addressing these issues – specifying 
this is left to future work. Moreover, robustness suggests that,
similarly to OWL RL, arbitrary RDF graphs should be allowed
when using RS for reasoning. To reconcile these issues, we ﬁrst
deﬁne a syntactic OWL LD proﬁle as a subset of OWL RL (which
in turn imposes the syntactic restrictions of OWL DL) and we then
suggest an RS based extension of this proﬁle for reasoning with
arbitrary OWL Full ontologies.

Formally, we deﬁne OWL LD by restricting the OWL RL grammar 
[6]. Roughly speaking, we remove all deﬁnitions and mentions
of productions listed as follows:
Datatype entailment:

DataRange, DataIntersectionOf, DatatypeDeﬁnition

Boolean connectives & enums.:

*OneOf, *IntersectionOf, *UnionOf, *ComplementOf

Restriction classes:

*ValuesFrom, *HasValue, zeroOrOne, *Cardinality

Chains & keys:

propertyExpressionChain, HasKey

Negative property assertions:

sourceIndividual, target*, Negative*PropertyAssertion
We further restrict the productions for DiﬀerentIndividuals and
Disjoint* to not use the list-based syntaxes. The full grammar
can be found online [12]. All additional structural restrictions of
OWL DL are inherited from OWL RL. Note that all RL datatypes
are supported as well, though implementers may use our study in
Section 3 to select most relevant datatypes to support (the OWL
speciﬁcation generally allows conforming tools to answer entailment 
questions with Unknown if a used feature is not supported).
Comparing OWL LD with earlier approaches, it is interesting
to note that it can be viewed as a natural extension of languages
like L2, RDFS-Plus, RDFS 3.0 as discussed in Section 2 and 3. In
particular, RDFS 3.0 is already close to OWL LD which mainly
adds further OWL 2 constructs from OWL RL while only omitting
owl:AllDiﬀerent as the list-based variant of owl:diﬀerentFrom.
This adds to our conﬁdence that OWL LD is a natural OWL proﬁle
that can be motivated from a number of perspectives.
6. REASONING IN OWL LD

OWL LD falls into a syntactic subset of OWL DL and can be
processed by tools that implement DS entailment checking. On the
other hand, we can also restrict the OWL RL/RDF rules to obtain
a terse set of inference rules that yields sound but possibly incomplete 
entailment under RS; the full set is found in Table 5 at the end
of the paper. These rules are applicable to any RDF graph allowing
us to robustly draw sound conclusions from Web data.

The OWL LD ruleset comprises of rules of the form:

B1 ∧ . . . ∧ Bn → H (0 ≤ n ≤ 3)

where H is called the head and B1∧. . .∧Bn is the body. A rule with
an empty body (e.g., the rule cls-thing) is simply a fact. Multiple
atoms in rule heads (e.g., eq-ref) denote conjunctions that could also
be expressed using multiple rules with the same body. The datatype
rules are somewhat exceptional, however, and require custom logic
outside of a standard rule-engine. Moreover, some rules use false
in the head to express that an inconsistency is to be derived. An
inconsistency-tolerant system could already be realised by simply
not taking these conclusions into account for query answering.

Unlike OWL RL/RDF which encodes arbitrary-length lists in the
bodies of some of its rules, the bodies of OWL LD rules comprise
solely of a ﬁxed set of (a maximum of three) ternary RDF atoms of
the form T(s, p, o) where s, p, o ∈ C ∪ V. These restrictions simplify 
the use of the OWL LD rules in a variety of tools. Excluding
datatype support, since the rules can only derive triples that are built
from the set C of RDF constants that originally occur in the ontology 
and ruleset, the number of entailments is bounded by |C|3. This
bound is tight, e.g., the rules entail all possible triples from the RDF
graph owl:sameAs owl:sameAs a ; rdfs:domain owl:Thing .
Optimisations for rule-based systems as explored in many works
can be applied to implement the OWL LD inferencing eﬃciently.
Systems can eﬃciently support datatypes by, e.g., only checking
entailments as needed, or using canonicalisation techniques, etc.

We are now left to describe the relationship between DS and RS

for the OWL LD proﬁle.

Theorem 1. Let R contain the OWL LD entailment rules (Table 
5) and let O1 and O2 be OWL 2 ontologies that satisfy the
OWL LD grammar and the following properties:

1. neither O1 nor O2 contains an IRI that is used for more than
one type of entity (i.e., no IRI is used both as, say, a class and
an individual);

2. O1 does not contain SubAnnotationPropertyOf, AnnotationPropertyDomain 
or AnnotationPropertyRange;
3. each axiom in O2 is an assertion of the form as speciﬁed

below, for a, a1, and a2 named individuals:
(a) ClassAssertion(C a) where C is a class,
(b) ObjectPropertyAssertion(OP a1 a2) where OP is

an object property,

(c) DataPropertyAssertion(DP a1 a2) where DP is a

data property, or

(d) SameIndividual(a1 a2).

Furthermore, let RDF(O1) and RDF(O2) be translations of O1 and
O2, respectively, into RDF graphs [30]; and let FO(RDF(O1)) and
FO(RDF(O2)) be the translation of these graphs into ﬁrst-order
theories in which triples are represented using the T predicate.
Then, O1 entails O2 under the OWL 2 Direct Semantics [26] iﬀ
FO(RDF(O1)) ∪ R entails FO(RDF(O2)) under the standard ﬁrstorder 
semantics.

The proof of the Correspondence Theorem below follows immediately 
from the according theorem for OWL RL [6, Theorem PR1]
together with the fact that OWL LD is a restriction of OWL RL.
Like in the case of OWL RL, this result applies only to checking
the entailment of basic facts, not of OWL axioms in general.

7. RELATED WORK

Here we discuss related studies on the use of the RDFS and OWL
on the Web (related OWL proﬁles have been covered in Section 2).

One of the earliest comprehensive empirical studies of RDF Web
data was presented by Ding et al. in 2005 [8]. They report about the
prevalence of vocabulary terms in over 1.5 million RDF/XML Web
documents, where the bulk of data was described using the Friend
of a Friend (FOAF) and Dublin Core (DC) ontologies. The work
focuses on characterising the structure and distributions of the raw
data rather than issues relating to semantics or to RDFS and OWL.
Various works look at the syntactic proﬁles of OWL ontologies
on the Web [2, 38, 7]. Bechhofer and Volz identify and categorise
OWL DL restrictions violated by a sample group of 201 OWL ontologies 
(all of which were found to be in OWL Full); these include
incorrect or missing typing of classes and properties, complex object 
properties (e.g., functional properties) declared to be transitive,
 inverse-functional datatype properties, and so forth [2]. In a
later survey, Wang et al. study over 1,276 ontologies, where 924
(72.4%) were identiﬁed as being in OWL Full, although they proposed 
that 863 could be patched (93.4%) [38]. In a similar study,
d’Aquin et al. found that while 81% of 22,200 RDF Web documents 
surveyed fell into OWL Full, from the features used, 95%
would fall under the expressivity of the lightweight AL(D) Description 
Logic [7]. To summarise, these studies show that restrictions 
laid out in the OWL standard (speciﬁcally for the OWL Lite
and OWL DL dialects) are not well-followed by Web ontologies,
but that such ontologies are typically relatively inexpressive. These
works re-enforce the need for our RS-based extension of OWL LD.
More recent papers focus on analysing owl:sameAs adoption
on the Web of Data [9, 14]. Ding et al. provide a quantitative
analysis of the owl:sameAs graph extracted from the BTC-2010
dataset (the ancestor of our corpus) [9], summarising the use of
owl:sameAs to link between diﬀerent publishers of Linked Data.
In a similar vein, Halpin et al. [14] focus on the incorrect use of
owl:sameAs [14]; they employ four human judges to manually inspect 
500 such links sampled from Web data, where their results
suggest that owl:sameAs is often used imprecisely, although disagreement 
between the judges indicates that the quality of speciﬁc
owl:sameAs links can be subjective. Such surveys indicate that
reasoners must proceed cautiously when operating over Web data.

8. CONCLUSION

We have presented a comprehensive analysis of the current use
of OWL on the Web based on a large sample of RDF/XML documents.
 We conﬁrmed that OWL has indeed “arrived” on the Web
of Data, albeit to varying degrees for diﬀerent features.

Following Linked Data principles, we used a PageRank algorithm 
to assess the importance of individual documents. Our results
show that single-triple expressible OWL RL features are most important 
on the Web. A survey of existing tools conﬁrms that these
simple features tend to receive better support.

Based on these observations, we deﬁned the OWL LD proﬁle as
a sub-language of OWL RL and provided a rule-based reasoning
calculus for it. Though motivated by a new analysis of the current
ontology documents on the Web of Data, OWL LD is well-aligned
with the earlier proposals of RDFS-Plus and L2, indicating that it
is a natural proﬁle that can be motivated from various perspectives.
We argue that this is also due to the syntactic restriction of OWL
features to those that can be expressed using single RDF triples.
What may appear as a superﬁcial syntactic feature on a ﬁrst glance
actually identiﬁes exactly the cases in which OWL expressions are
fully aligned with the RDF data model. We argue that this bears
crucial advantages regarding not only tool support but also usability.
 We therefore believe that, even if OWL as a whole might never
arrive on the Web of Data, the OWL LD proﬁle is a natural ﬁt for
ontological (aka. vocabulary) modelling on the Web of Data.

9. REFERENCES
[1] D. Allemang and J. A. Hendler. Semantic Web for the

Working Ontologist: Eﬀective Modeling in RDFS and OWL.
Morgan Kaufmann/Elsevier, 2008.

[2] S. Bechhofer and R. Volz. Patching syntax in OWL

ontologies. In Proc. 3rd Int. Semantic Web Conf. (ISWC’04),
pages 668–682. Springer, 2004.

[3] T. Berners-Lee. Linked Data. W3C Design Issues, July 2006.
[4] B. Bishop and S. Bojanov. Implementing OWL 2 RL and
OWL 2 QL rule-sets for OWLIM. In Proc. OWLED 2011
Workshop on OWL: Experiences and Directions, 2011.

[5] D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini, and
R. Rosati. Tractable reasoning and eﬃcient query answering
in description logics: The DL-Lite family. J. of Automated
Reasoning, 39(3):385–429, 2007.

[6] B. Cuenca Grau, B. Motik, Z. Wu, A. Fokoue, and C. Lutz.

OWL 2 Web Ontology Language: Proﬁles. W3C
Recommendation, Oct. 2009.

[7] M. d’Aquin, C. Baldassarre, L. Gridinoc, S. Angeletou,

M. Sabou, and E. Motta. Characterizing knowledge on the
Semantic Web with Watson. In Proc. 5th Int. Workshop on
Evaluation of Ontologies and Ontology-based Tools, pages
1–10, 2007.

[8] L. Ding and T. Finin. Characterizing the semantic web on the
web. In Proc. 5th Int. Semantic Web Conf. (ISWC’06), pages
242–257. Springer, 2006.

[9] L. Ding, J. Shinavier, Z. Shangguan, and D. L. McGuinness.
SameAs networks and beyond: Analyzing deployment status
and implications of owl:sameAs in linked data. In Proc. 9th
Int. Semantic Web Conf. (ISWC’10), pages 145–160.
Springer, 2010.

[10] I. Emmons, S. Collier, M. Garlapati, and M. Dean. RDF

literal data types in practice. In SSWS 2011, 2011.

[11] F. Fischer, G. Ünel, B. Bishop, and D. Fensel. Towards a

scalable, pragmatic knowledge representation language for
the web. In Ershov Memorial Conf., pages 124–134, 2009.
[12] B. Glimm, A. Hogan, M. Krötzsch, and A. Polleres. OWL
LD Entailment Ruleset and Implementational Notes, Nov.
2011. http://www.semanticweb.org/OWLLD/.

[13] B. Grosof, I. Horrocks, R. Volz, and S. Decker. Description
logic programs: Combining logic programs with description
logic. In World Wide Web, 2004.

[14] H. Halpin, P. J. Hayes, J. P. McCusker, D. L. McGuinness,
and H. S. Thompson. When owl:sameAs isn’t the same: An
analysis of identity in linked data. In Proc. 9th Int. Semantic
Web Conf. (ISWC’10), pages 305–320. Springer, 2010.

[15] A. Harth, S. Kinsella, and S. Decker. Using naming authority

to rank data and ontologies for web search. In Proc. 8th Int.
Semantic Web Conf. (ISWC’09), pages 277–292, 2009.

[16] A. Harth, J. Umbrich, A. Hogan, and S. Decker. YARS2: A
federated repository for querying graph structured data from
the Web. In Proc. 6th Int. Semantic Web Conf. (ISWC’07),
pages 211–224. Springer, 2007.

[17] P. Hayes. RDF Semantics. W3C Recommendation, Feb.

2004.

[18] T. Heath and C. Bizer. Linked Data: Evolving the Web into a
Global Data Space (1st Edition). Morgan & Claypool, 2011.

[19] J. A. Hendler. RDFS 3.0. In W3C Workshop on RDF Next

Steps, June 2010.

[20] A. Hogan. Exploiting RDFS and OWL for Integrating

Heterogeneous, Large-Scale, Linked Data Corpora. PhD

thesis, DERI, NUIG, 2011.

[21] M. Horridge, S. Bechhofer, and O. Noppens. Igniting the
OWL 1.1 touch paper: The OWL API. In Proc. OWLED
2007 Workshop on OWL: Experiences and Directions,
volume 258. CEUR-WS.org, 2007.
classiﬁcation of EL ontologies. In Proc. 10th Int. Semantic
Web Conf. (ISWC’11). Springer, 2011.

[22] Y. Kazakov, M. Krötzsch, and F. Simanˇcík. Concurrent

[23] V. Kolovski, Z. Wu, and G. Eadon. Optimizing

enterprise-scale OWL 2 RL reasoning in a relational
database system. In Proc. 9th Int. Semantic Web Conf.
(ISWC’10), pages 436–452. Springer, 2010.

[24] M. Krötzsch. Eﬃcient rule-based inferencing for OWL EL.

In Proc. 22nd Int. Conf. on Artiﬁcial Intelligence (IJCAI’11),
pages 2668–2673, 2011.

[25] G. Meditskos and N. Bassiliades. DLEJena: A practical

forward-chaining OWL 2 RL reasoner combining Jena and
Pellet. J. of Web Semantics, 8(1):89–94, 2010.

[26] B. Motik, P. F. Patel-Schneider, and B. Cuenca Grau. OWL 2

Web Ontology Language: Direct Semantics. W3C
Recommendation, Oct. 2009.

[27] B. Motik, P. F. Patel-Schneider, and B. Parsia. OWL 2 Web

Ontology Language: Structural Speciﬁcation and
Functional-Style Syntax. W3C Recommendation, Oct. 2009.

[28] S. Muñoz, J. Pérez, and C. Gutierrez. Simple and eﬃcient
minimal RDFS. J. of Web Semantics, 7(3):220–234, 2009.

[29] L. Page, S. Brin, R. Motwani, and T. Winograd. The

PageRank Citation Ranking: Bringing Order to the Web.
Technical report, Stanford, 1998.

[30] P. F. Patel-Schneider, B. Motik, B. Cuenca Grau, I. Horrocks,

B. Parsia, A. Ruttenberg, and M. Schneider. OWL 2 Web
Ontology Language: Mapping to RDF Graphs. W3C
Recommendation, Oct. 2009.

[31] H. Pérez-Urbina, B. Motik, and I. Horrocks. Tractable query
answering and rewriting under description logic constraints.
J. of Applied Logic, 8(2):151–232, 2009.

[32] M. Schneider and G. Sutcliﬀe. Reasoning in the OWL 2 Full

ontology language using ﬁrst-order automated theorem
proving. In Proc. 23rd Int. Conf. on Automated Deduction
(CADE-23), pages 461–475. Springer, 2011.

[33] F. Simanˇcík, Y. Kazakov, and I. Horrocks.

Consequence-based reasoning beyond Horn ontologies. In
Proc. 22nd Int. Conf. on Artiﬁcial Intelligence (IJCAI’11),
pages 1093–1098, 2011.

[34] M. Smith, I. Horrocks, M. Krötzsch, and B. Glimm. OWL 2

Web Ontology Language: Conformance. W3C
Recommendation, Oct. 2009.

[35] H. J. ter Horst. Completeness, decidability and complexity of

entailment for RDF Schema and a semantic extension
involving the OWL vocabulary. J. of Web Semantics, 3, 2005.

[36] J. Urbani, F. van Harmelen, S. Schlobach, and H. Bal.

QueryPIE: Backward reasoning for OWL Horst over very
large knowledge bases. In Proc. 10th Int. Semantic Web
Conf. (ISWC’11). Springer, 2011.

[37] R. Volz. Web Ontology Reasoning with Logic Databases.

PhD thesis, Universität Karlsruhe, 2004.

[38] T. D. Wang, B. Parsia, and J. A. Hendler. A survey of the
web ontology landscape. In Proc. 5th Int. Semantic Web
Conf. (ISWC’06), pages 682–694. Springer, 2006.

y
t
i
l
a
u
q
E

ID
eq-ref
eq-sym
eq-trans
eq-rep-s
eq-rep-p
eq-rep-o
eq-diff1
prp-ap
prp-dom
prp-rng
prp-fp
prp-ifp
prp-irp
prp-symp
prp-asyp
prp-trp
prp-spo1
prp-eqp1
prp-eqp2
prp-pdw
prp-inv1
prp-inv2
s cls-thing

s
m
o
i
x
A
y
t
r
e
p
o
r
P

e
s
s
a
l
C

.
x
A
s
s
a
l
C

s
e
p
y
t
a
t
a
D

y
r
a
l
u
b
a
c
o
V
a
m
e
h
c
S

cls-nothing
cls-nothing2
cax-sco
cax-eqc1
cax-eqc2
cax-dw
dt-type1
dt-type2
dt-eq
dt-diff
dt-not-type

scm-cls

scm-sco
scm-eqc1
scm-eqc2
scm-op
scm-dp
scm-spo
scm-eqp1
scm-eqp2
scm-dom1
scm-dom2
scm-rng1
scm-rng2

Body
?s ?p ?o .
?x owl:sameAs ?y .
?x owl:sameAs ?y . ?y owl:sameAs ?z .
?s owl:sameAs ?s(cid:48) . ?s ?p ?o .
?p owl:sameAs ?p(cid:48) . ?s ?p ?o .
?o owl:sameAs ?o(cid:48) . ?s ?p ?o .
?x owl:sameAs ?y . ?x owl:diﬀerentFrom ?y .
(for each core annotation property ?p)
?p rdfs:domain ?c . ?x ?p ?y .
?p rdfs:range ?c . ?x ?p ?y .
?p a owl:FunctionalProperty . ?x ?p ?y1 . ?x ?p ?y2 .
?p a owl:InverseFunctionalProperty . ?x1 ?p ?y . ?x2 ?p ?y .
?p a owl:IrreﬂexiveProperty . ?x ?p ?x .
?p a owl:SymmetricProperty . ?x ?p ?y .
?p a owl:AsymmetricProperty . ?x ?p ?y . ?y ?p ?x .
?p a owl:TransitiveProperty . ?x ?p ?y . ?y ?p ?z .
?p1 rdfs:subPropertyOf ?p2 . ?x ?p1 ?y .
?p1 owl:equivalentProperty ?p2 . ?x ?p1 ?y .
?p1 owl:equivalentProperty ?p2 . ?x ?p2 ?y .
?p1 owl:propertyDisjointWith ?p2 . ?x ?p1 ?y . ?x ?p2 ?y .
?p1 owl:inverseOf ?p2 . ?x ?p1 ?y .
?p1 owl:inverseOf ?p2 . ?x ?p2 ?y .
—
—
?x a owl:Nothing .
?c1 rdfs:subClassOf ?c2 . ?x a ?c1 .
?c1 owl:equivalentClass ?c2 . ?x a ?c1 .
?c1 owl:equivalentClass ?c2 . ?x a ?c2 .
?c1 owl:disjointWith ?c2 . ?x a ?c1 , ?c2 .
(for each supported datatype ?dt)
(for each literal ?lt in the value space of datatype ?dt)
(for all ?lt1 and ?lt2 with the same data value)
(for all ?lt1 and ?lt2 with diﬀerent data values)
?lt a ?dt . (where ?lt is not in the value space of ?dt)

?c a owl:Class .
?c1 rdfs:subClassOf ?c2 . ?c2 rdfs:subClassOf ?c3 .
?c1 owl:equivalentClass ?c2 .
?c1 rdfs:subClassOf ?c2 . ?c2 rdfs:subClassOf ?c1 .
?p a owl:ObjectProperty .
?p a owl:DatatypeProperty .
?p1 rdfs:subPropertyOf ?p2 . ?p2 rdfs:subPropertyOf ?p3 .
?p1 owl:equivalentProperty ?p2 .
?p1 rdfs:subPropertyOf ?p2 . ?p2 rdfs:subPropertyOf ?p1 .
?p rdfs:domain ?c1 . ?c1 rdfs:subClassOf ?c2 .
?p2 rdfs:domain ?c . ?p1 rdfs:subPropertyOf ?p2 .
?p rdfs:range ?c1 . ?c1 rdfs:subClassOf ?c2 .
?p2 rdfs:range ?c . ?p1 rdfs:subPropertyOf ?p2 .

Head
?s owl:sameAs ?s . ?p owl:sameAs ?p . ?o owl:sameAs ?o .
?y owl:sameAs ?x .
?x owl:sameAs ?z .
?s(cid:48) ?p ?o .
?s ?p(cid:48) ?o .
?s ?p ?o(cid:48) .
false
?p a owl:AnnotationProperty .
?x a ?c .
?y a ?c .
?y1 owl:sameAs ?y2 .
?x1 owl:sameAs ?x2 .
false
?y ?p ?x .
false
?x ?p ?z .
?x ?p2 ?y .
?x ?p2 ?y .
?x ?p1 ?y .
false
?y ?p2 ?x .
?y ?p1 ?x .
owl:Thing a owl:Class .
owl:Nothing a owl:Class .
false
?x a ?c2 .
?x a ?c2 .
?x a ?c1 .
false
?dt a rdfs:Datatype .
?lt a ?dt .
?lt1 owl:sameAs ?lt2 .
?lt1 owl:diﬀerentFrom ?lt2 .
false
?c rdfs:subClassOf ?c . ?c rdfs:subClassOf owl:Thing .
?c owl:equivalentClass ?c . owl:Nothing rdfs:subClassOf ?c .
?c1 rdfs:subClassOf ?c3 .
?c1 rdfs:subClassOf ?c2 . ?c2 rdfs:subClassOf ?c1 .
?c1 owl:equivalentClass ?c2 .
?p rdfs:subPropertyOf ?p . ?p owl:equivalentProperty ?p .
?p rdfs:subPropertyOf ?p . ?p owl:equivalentProperty ?p .
?p1 rdfs:subPropertyOf ?p3 .
?p1 rdfs:subPropertyOf ?p2 . ?p2 rdfs:subPropertyOf ?p1 .
?p1 owl:equivalentProperty ?p2 .
?p rdfs:domain ?c2 .
?p1 rdfs:domain ?c .
?p rdfs:range ?c2 .
?p1 rdfs:range ?c .

Table 5: The OWL LD ruleset in Turtle/N3 style syntax where false in the head denotes inconsistency

