Using Description Logic to Maintain
Consistency between UML Models

Ragnhild Van Der Straeten1, Tom Mens2, Jocelyn Simmonds1, and

Viviane Jonckers1

1 Systems and Software Engineering Lab

Department of Computer Science

Vrije Universiteit Brussel

Pleinlaan 2, 1050 Brussel, Belgium

rvdstrae@vub.ac.be, jsimmond@dcc.uchile.cl, viviane@info.vub.ac.be

2 Service de G´enie Logiciel
Universit´e de Mons-Hainaut

6, Av. du Champs de Mars, 7000 Mons, Belgium

tom.mens@umh.ac.be

Abstract. A software design is often modelled as a collection of UML
diagrams. There is an inherent need to preserve consistency between
these diagrams. Moreover, through evolution those diagrams get modiﬁed 
leading to possible inconsistency between diﬀerent versions of the
diagrams. State-of-the-art UML CASE tools provide poor support for
consistency maintenance. To solve this problem, an extension of the UML
metamodel enabling support for consistency maintenance and a classiﬁcation 
of inconsistency problems is proposed. To achieve the detection
and resolution of consistency conﬂicts, the use of description logic (DL)
is presented. DL has the important property of being a decidable fragment 
of ﬁrst-order predicate logic. By means of a number of concrete
experiments in Loom, we show the feasibility of using this formalism for
the purpose of maintaining consistency between (evolving) UML models.

1 Introduction

A software design is typically speciﬁed as a collection of UML diagrams [17].
Because diﬀerent aspects of the software system are covered by many diﬀerent
UML diagrams, there is an inherent risk that the overall speciﬁcation of the
system becomes inconsistent and as such it is necessary to check the consistency
between related UML diagrams. Especially in the context of design evolution,
it is necessary to ensure that the overall consistency is preserved. Hence, it is
important to provide a means to detect and resolve the inconsistencies between
related UML diagrams and models.

A ﬁrst type of consistency, indicating consistency between diﬀerent models
within the same version, is called horizontal consistency. Evolution consistency
indicates consistency between diﬀerent versions of the same model.

P. Stevens et al. (Eds.): UML 2003, LNCS 2863, pp. 326–340, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

Using Description Logic to Maintain Consistency between UML Models

327

Unfortunately, current-day UML CASE tools provide poor support for maintaining 
consistency between (evolving) UML models. This results in less maintainable 
and comprehensible models.

To counter this problem, there is ﬁrst of all a need to specify the consistency 
between (evolving) models in a formal and precise way. The current UML
metamodel [17] provides poor support for consistency preservation and software
evolution, e.g. versions are not supported. Therefore, the ﬁrst contribution of this
paper is to show how such support can be integrated in the UML metamodel
with only some minor additions.

Based on the diﬀerent kinds of inconsistencies observed between UML models,
 a classiﬁcation of inconsistencies is proposed. To be able to detect and resolve
inconsistencies, both a formal speciﬁcation of model consistency and a formal
reasoning engine relying on this speciﬁcation is needed . Therefore, in this paper
we propose to use the formalism of description logic (DL) [2].

DL is a two-variable fragment of ﬁrst-order predicate logic that oﬀers a classiﬁcation 
task based on the subconcept-superconcept relationship. In most description 
logics, this classiﬁcation task is decidable and complete. While the
satisﬁability problem is undecidable in ﬁrst-order logic, most DLs have decidable 
inference mechanisms. These inference mechanisms allow to reason about
the consistencies of knowledge bases speciﬁed by DLs, as such these mechanisms
enable the identiﬁcation and resolution of consistency problems.

As description logic tool we chose Loom [16] because of its extensive query
language and associated production rule system. This allows us to specify UML
models, their evolution, consistency rules and also design improvements in a
straightforward way. As such, the crucial activity of detecting and resolving
design inconsistencies can be partially automated, thus increasing the maintainability 
of the software.

In the next section the developed UML proﬁle for model consistency is explained.
 Before introducing the running example used in this paper in section 4,
a possible classiﬁcation of inconsistencies is given in section 3. A motivation for
the use of description logic is given in section 5. Section 6 discusses some experiments 
and section 7 gives a summary of related work. We conclude in section
8.

2 UML Proﬁle for Model Consistency

With the current version of UML [17] we are not able to check model consistency
and to support model evolution. It must be possible to express the existence of
diﬀerent versions of a model. Therefore, a UML proﬁle for model consistency is
developed.

We deliberately conﬁne ourselves to three kinds of UML diagrams: class diagrams,
 sequence diagrams and state diagrams. Consequently, our UML proﬁle
consists of subsets of the Core, Model Management, Common Behaviour, Collaborations 
and State Machines packages of the UML metamodel. An overview
of the used subset of the Core package is shown in Figure 1. Remark that the
metaclass Modelelement is not displayed for reasons of clarity.

