2013 32nd International Conference of the Chilean Computer Science Society

Mobile Application Monitoring

Sebastian Vasquez, Jocelyn Simmonds

Departamento de Inform´atica

Universidad T´ecnica Federico Santa Mar´ıa

sebastian.vasquez@alumnos.usm.cl, jsimmond@inf.utfsm.cl

Abstract—To date, there are more than 800.000 applications
available on each of the two largest mobile application markets
(Google Play and Apple App Store), each reporting around 40
billion downloads in total. At this scale, it is impossible to analyze
each application for malware behavior before making them
available for download. Vendors mostly rely on user feedback
to remove malware from their marketplaces, so it can take a
while for these applications to be removed. In practice, users
must be very careful when picking which applications to install.
Moreover, it can be hard to detect a malware application once it
is installed, unless the application has noticeable side-effects. To
improve this situation, we propose a framework for performing
runtime monitoring of mobile applications against behavioral
correctness properties. These properties specify forbidden and
desired interactions between applications and the phone’s resources 
as sequences of events. The user can then determine
which applications to uninstall based on which properties they
violate. We have implemented a prototype of this framework
for the Android operating system. In this ﬁrst version of the
framework, the user must specify the properties to be monitored
directly as automata.

I.

INTRODUCTION

A smartphone is a mobile phone with enhanced computing
ability. These phones run an operating system, a software suite
that manages the phone’s hardware and also provides a library
of common services for applications. Android, Apple iOS and
Windows Phone are examples of popular smartphone operating
systems. Users have a choice between either installing native
applications on top of the phone’s operating system, or directly
visiting mobile websites (a website speciﬁcally tailored to
small screen sizes and resolutions) through a browser [12].
Native applications can be downloaded from ofﬁcial vendors
for the operating system, e.g., Google Play (formerly Android
Market) for Android phones and Apple’s App Store for iOS
phones, as well as third-party vendors, which are not afﬁliated
with the operating system vendor.

The worldwide amount of smartphone users is increasing
every year, which has lead to an increase in application development 
for this type of device. Vendors manage application
purchases through application marketplaces, making it easy to
distribute applications to a large audience. As a result, there
are many applications for these devices. Data from Dec. 2011
indicates that approximately 500 and 700 new applications are
released each week for Android and iOS, respectively [6].

Ofﬁcial vendors try to weed out low quality applications
and malware on a regular basis, but because of the large
number of applications being released per week, they cannot
manually check each application being published. Vendors
could try to statically analyze the application source code for
known “bad” or forbidden behaviors (like trying to access the

phone’s contact list after initializing a game). The problem
with this approach is that
the application source code is
required for this type of analysis, and any updates to an
application renders all previous static analyses invalid.

In practice, vendors ask developers to sign their applications 
with permissions, e.g., whether or not the application
needs full network access, or whether it has permission to
write to disk. These are made public, so the user can use this
information, as well as existing user feedback, to determine
whether or not they will install an application. However, this
does not guarantee that the application will behave as expected.
For example, if an application requires network access, Google
Play warns that “Using this service will incur data usage.
Malicious apps could cause excess data usage”.

Thus, the current approach to mobile security is to limit
application access to phone capabilities through permissions,
as well as to make users more aware of possible dangers.
Nevertheless, these measures are not enough in practice: operating 
systems have bugs that allow exploits, and users install
applications without making sure that
they are legitimate.
Moreover, in the past few years, many cases have been reported
where malware applications have been disguised as popular
applications. The malware version of the application includes
enough of the original application behavior and design to
convince the user that they have actually installed the real application.
 However, the malware version carries out extra tasks
while the user uses the application, like loading advertisements
in the background (using up the user’s available bandwidth) or
signing them up for unwanted SMS subscriptions (at cost to
the user) [2].

II. APPROACH AND IMPLEMENTATION

To improve this situation, we propose a client-side framework 
for performing runtime monitoring of mobile applications 
against behavioral correctness properties (an extension
of the framework presented in [11]). These properties specify
forbidden and desired interactions between applications and
the phone’s resources as sequences of events. For example, if
we want to make sure that a game does not use the phone’s
camera, we can deﬁne the following as a forbidden behavior:
the event start game (an application event) should never be
followed by a take photo event (a phone event), unless end
game occurred (another application event). The user must
specify the forbidden and desired interactions, as well as
indicate which applications should be monitored.

These properties are speciﬁed by the user as ﬁnite-state
automata, which are then used to check for behavioral conformance 
at runtime, by checking ﬁnite execution traces of the
monitored applications against these property speciﬁcations.

1522-4902/15 $31.00 © 2015 IEEE
DOI 10.1109/SCCC.2013.16

30

id of the applications that are to be monitored, as well as the
properties that must be checked (speciﬁed directly as automata
in our prototype). This component is responsible for sharing
these process ids with the rest of the components, as well as
constructing in-memory monitoring automata.

While the AEMF service is active, the BehaviorListener
component monitors the Android log ﬁles, sending new event
occurrences to the Inspector component. The Inspector is
responsible for parsing log events: when it parses an event that
belongs to the alphabet of one of the in-memory automata, it
sends it to the BehaviorManager component for processing.
The BehaviorManager keeps track of the current state of all
the in-memory monitoring automata, processing state transition
events when they occur. The Logger component keeps track
of which automata have transitioned into their ﬁnal state, as
this indicates which properties have been violated during the
current execution trace.

Note that it is important to limit the number of properties
being monitored at the same time, as the property automata are
constructed in memory – excessive memory use may trigger
application pausing and restarting, which may degrade the
user’s experience.

III. RELATED WORK

Mobile computing monitoring approaches currently focus
on checking Quality of Service (QoS) properties. Users can install 
applications that allow them to check battery use [1], track
their own broadband use [4], track their phones using GPS [5],
as well as track calls and SMS messages [9]. These approaches
monitor QoS properties in an ad-hoc manner, depending on
what is being monitored. Some of these applications, like [5],
[9], have themselves been classiﬁed as malware, since sensitive
information is accessed but an average user cannot detect if
the application is installed with the tools currently at their
disposal. Other monitoring approaches focus on monitoring
native application and mobile website performance [3], [8].

Other authors have focused on checking mobile applications 
for speciﬁc types of properties. For example, Yan et
al. [14] propose a technique for detecting resource leaks in
Android applications, i.e., resources which are requested but
never freed by an application. The authors propose several
test patterns that uncover resource leaks in the graphical user
interface (GUI) of an application, and they generate test cases
that may exercise these patterns from a ﬁnite-state model of
the application’s GUI. This approach is aimed at developers,
who can use the tool to detect resource leaks and ﬁx them
before making the application available.

Gibler et al. [7] have implemented a similar approach,
tries to identify
creating a static analysis framework that
potential
leaks of sensitive information like GPS location.
This was done by manually creating a mapping between the
Android API3 to the permissions they require to execute. For
example, an application can only use a method from the
camera API if it has been granted permission to do so. By
using this framework to analyze their applications, developers
can determine which permissions must be requested by their
applications.

3Application Programming Interface

Fig. 1. Sample property: AEMF reports that this automata reaches state q2
(a bad state) if our demo app tries to start the phone’s camera app.

When a property violation is discovered, our framework must
notify the user that a forbidden sequence of events has happened,
 and the user must then decide whether to shutdown
the application and uninstall it, or to ignore the notiﬁcation
and continue execution. Figure 1 shows an example of a userspeciﬁed 
property, where the ﬁnal (bad) state is reached if the
Test application tries to start the phone’s camera application.
We have implemented a proof-of-concept prototype of our
framework for Android-based smartphones, called the Android
Event Monitoring Framework (AEMF)1. We have chosen to
work with Android because it is an open-source, Linux-based
operating system. Moreover, it has quickly become the most
popular smartphone platform: Android reached 52.5% of the
global smartphone market share in 2011 [13], and this year
consolidated it place as market leader with a 74% market
share [10]. Our prototype is implemented in Java (∼ 30
classes), and is currently running on Android v.2.3.3.

AEMF works by analyzing the various (circular) log ﬁles
kept by the operating system (OS). Android logs the various
events it receives during execution in different log ﬁles:

•

•

•

•

/dev/log/radio: logs all events related to the use
of the telephone component of the smartphone, like
incoming and outcoming calls, searches for antennas,
etc.
/dev/log/event: logs all events related to the use
of of the smartphone’s hardware, like its sensors.
/dev/log/system: logs all events related to the
use of Android’s Application Framework layer. This
layer includes all the services that the operating system
offers third-party applications.
/dev/log/main: logs all other events.

These ﬁles are of a ﬁxed size: 64KB, 256KB, 64KB and
64KB, respectively, so older events are overwritten as needed.
By analyzing the log events as they are produced, we can
analyze an application’s behavior, determining how it interacts
with the smartphone and its resources without accessing the
application’s source code. Applications can also register for
OS-speciﬁc events2, but we have not considered them in this
prototype.

AEMF has been implemented as a service, so that phone
and application events can be processed as they are logged. Our
prototype consists of ﬁve components, shown in Fig. 2: FileReader,
 BehaviorListener, Inspector, BehaviorManager and
Logger. The FileReader component takes as input the process

1Available at https://github.com/svasquezm/aemf
2E.g., android.intent.action.BOOT_COMPLETED, which

broadcast once the phone has ﬁnished booting

is

31

Fig. 2. Arquitecture of the AEMF framework

Other approaches focus on detecting malware applications
by suggesting methods for ﬁnding similarities between known
malware applications and new application. Pairwise comparison 
between malware and new applications does not scale well,
so Zhou et al. [15] propose a module decoupling technique,
which partitions an application’s code into primary and nonprimary 
modules. A new application whose primary module
is similar to an existing malware application is classiﬁed as
a possible malware application. This type of analysis can be
used by security vendors and marketplaces to quickly check
applications for known malware behavior, and is similar to the
approach patented by Google.

IV. CONCLUSION

In this paper, we presented AEMF, a runtime monitoring
framework for Android mobile devices. This framework takes
as input the the process id of the applications to be monitored,
as well as a speciﬁcation of the properties that are to be
checked at runtime. During the normal use of the smartphone,
AEMF runs as a service, monitoring the events logged by
the OS, determining whether any of the input properties are
violated. We are currently working on improving the frame-
work’s user interface (we want users to specify properties, not
property automata), as well as improving its runtime overhead.
However, our initial experience with AEMF is promising.

REFERENCES

[1] A. Carroll and G. Heiser. An analysis of power consumption in a
In Proceedings of the 2010 USENIX Annual Technical

smartphone.
Conference, pages 1–12, Boston, MA, USA, Jun 2010.

[2] G. Cluley.

Fake

malware.
fake-instagram-app-android-malwar, April 2012.

Instagram app
devices with
http://nakedsecurity.sophos.com/2012/04/18/

infects

[3] Compuware. Compuware Gomez Mobile Monitoring.

http://www.

compuware.com/application-performance-management/mobile.html,
May 2012.

[4] H. Falaki, D. Lymberopoulos, R. Mahajan, S. Kandula, and D. Estrin. A
ﬁrst look at trafﬁc on smartphones. In Proceedings of the 10th annual
conference on Internet measurement, IMC ’10, pages 281–287, New
York, NY, USA, 2010. ACM.

32

[5] Family Safety Production. GPS Tracking Pro. https://play.google.com/

store/apps/details?id=com.fsp.android.c&hl=en, May 2012.

[6] S. Freierman.
a Fast Pace.
one-million-apps-and-counting.html, December 2011.

One Million Mobile Apps, and Counting at
http://www.nytimes.com/2011/12/12/technology/

[7] C. Gibler, J. Crussell, J. Erickson, and H. Chen. Androidleaks:
Automatically detecting potential privacy leaks in android applications
on a large scale. In Proceedings of the 5th International Conference on
Trust and Trustworthy Computing, TRUST’12, pages 291–307, Berlin,
Heidelberg, 2012. Springer-Verlag.

[8] Keynote. Mobile Web Perspective. http://www.keynote.com/products/

mobile quality/content and applications/mobile web perspective.
html, May 2012.

[9] Mobile Spy. Mobile Spy - Spy Software for Smartphones. http://www.

mobile-spy.com, May 2012.

[10] S. Loveridge.

2013.

for Q1

Android smartphones take 74 per cent market
http://www.trustedreviews.com/news/

share
android-smartphones-take-74-per-cent-market-share-for-q1-2013,
May 2013.
J. Simmonds. Dynamic Analysis of Web Services. PhD thesis, University
of Toronto, Toronto, 2011.

[11]

[12] C. Tossell, P. Kortum, A. Rahmati, C. Shepard, and L. Zhong. Characterizing 
web use on smartphones. In Proceedings of the 2012 ACM
annual conference on Human Factors in Computing Systems, CHI ’12,
pages 2769–2778, New York, NY, USA, 2012. ACM.

[13] V.

Chowney.

market.

phone
8279-android-doubles-market-share-to-take-52-5-of-smartphone-market,
May 2011.

takes
smart-
http://econsultancy.com/cl/blog/

52.5% of

Android

[14] D. Yan, S. Yang, and A. Rountev. Systematic testing for resource leaks
in Android applications. In IEEE International Symposium on Software
Reliability Engineering, pages 411–420, 2013.

[15] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast, scalable
detection of ”piggybacked” mobile applications. In Proceedings of the
Third ACM Conference on Data and Application Security and Privacy,
CODASPY ’13, pages 185–196, New York, NY, USA, 2013. ACM.

