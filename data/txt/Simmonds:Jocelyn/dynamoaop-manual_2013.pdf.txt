DynamoAOP - User Manual

Domenico Bianculli, Carlo Ghezzi

January 28, 2008

Contents

1 DynamoAOP overview

2 Technical info

3 Deployment

3.1 Install
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2 Conﬁgure/Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4 Tutorial

4.1 WS-CoL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.2 Demo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5 Appendix

5.1 WS-CoL grammar
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5.2 Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

References

1 DynamoAOP overview

1

1

3
3
3

3
3
6

7
7
9

10

Dynamo-AOP1 is a framework for monitoring functional properties of external services which a BPEL [2]
process interacts with, to realize a composite service.
It is based on the conceptual model proposed in
[3], but, with respect to the original design, its architecture is based on the dynamic aspectization of the
BPEL engine executing the monitored service compositions, achieved by using AspectJ [5] as an AOP [6]
language.

2 Technical info

Provider USI

Introduction Framework for monitoring functional properties of external services with which a BPEL process 
interacts

Development status Prototype completed

Intended audience Service aggregators/providers that describe service compositions in BPEL

License GPLv3 (open source)

Language Java, AspectJ

1Part of this work has been developed by Lorenzo D’Ercole and Luca Gallupi, as part of their master theses, under the supervision

of Luciano Baresi and Sam Guinea.

1

Environment (set-up) The following components need to be installed in order to run Dynamo-AOP:

• the Apache Tomcat servlet container (assumed to be installed in the directory $TOMCAT-DIR

and running on port 7080), available at http://tomcat.apache.org/

• the JBoss application server (assumed to be installed in the directory $JBOSS-DIR and running

on port 8080), available at http://www.jboss.org/

• the ActiveBPEL BPEL engine, available at http://www.active-endpoints.com
• (optional) a mail server, to support the notify recovery strategy.

The current version of Dynamo-AOP has been tested using Apache Tomcat ver. 5.5.23, JBoss Application 
Server ver 4.2, ActiveBPEL ver 2.1.
The following libraries are also required:

• ANTLRv2, available at http://www.antlr2.org/
• Apache Axis, available at http://ws.apache.org/axis/
• Apache XMLBeans, available at http://xmlbeans.apache.org/
• Apache Xerces 2, available at http://xerces.apache.org/xerces2-j/index.html
• Castor, available at http://www.castor.org
• Jakarta Commons Discovery, available at http://commons.apache.org/discovery/
• Jakarta Commons Logging, available at http://commons.apache.org/logging/
• CommonJ Timer and Work Manager for Application Servers, available at http://dev2dev.

bea.com/wlplatform/commonj/twm.html

• Javamail, available at http://java.sun.com/products/javamail/
• JAXP, available at https://jaxb.dev.java.net/
• Jaxen, available at http://jaxen.org/
• JAX-RPC, available at https://jax-rpc.dev.java.net/
• JBoss EJB3, available at http://labs.jboss.com/jbossejb3/
• JBoss Web Services, available at http://labs.jboss.com/jbossws/
• Saxon XSLT processor, available at http://saxon.sourceforge.net/
• StAX, available at http://stax.codehaus.org/
• Sun Java Streaming XML Parser (JSR 173), available at http://java.sun.com/webservices/

docs/1.5/sjsxp/ReleaseNotes.html

• WSDL for Java API, available at http://sourceforge.net/projects/wsdl4j
• XML Pull Parser (XPP), available at http://www.extreme.indiana.edu/xgws/xsoap/

xpp/

• XSUL, available at http://www.extreme.indiana.edu/xgws/xsul/

Platform Java 5

Download both sources and binaries are available at http://plastic.isti.cnr.it/download/

tools

Documents see WP4 tools repository web site and deliverables D4.1 and D4.2

Tasks N/A

Bugs N/A

Patches N/A

Contact domenico.bianculli@lu.unisi.ch

2

3 Deployment

3.1 Install
To actually install the Dynamo-AOP monitoring framework you have to:

• copy from the Dynamo-AOP distribution

ConfigurationManager.jar, HistoricalVariable.jar, MonitorLogger.jar
in the directory $JBOSS-DIR/server/default/deploy.

• copy from the Dynamo-AOP distribution ae rtbpel.jar, in the directory
$TOMCAT-DIR/shared/libs, overwriting the original ActiveBPEL ﬁle.
• copy from the Dynamo-AOP distribution invoker.jar in the directory

$TOMCAT-DIR/common/libs.

• install a copy of antlr-2.7.6.jar, antlrdebug_1.0.0.jar, jaxb-api.jar,

jaxb-impl.jar, jaxb-xjc.jar, jaxb1-impl.jar, mail.jar, jsr173_api.jar,
saxon8-dom.jar, saxon8-jdom.jar, saxon8-sql.jar, saxon8-xom.jar,
saxon8-xpath.jar, saxon8.jar, xbean_path.jar, xbean.jar, xmlpublic.jar, aspectjrt.jar,
xpp3-1.1.3.4.M.jar, xsul-2.0.9_2.jar, stax-1.1.1.jar in the directory $TOMCAT-DIR/common/libs.

• install a copy of axis.jar, commons-logging.jar, commons-discovery-0.2.jar, jaxrpc.jar,

saaj.jar, wsdl4j-1.5.1.jar, castor-0.9.6-xml.jar,
commonj-twm.jar, jaxen-1.1-beta-8.jar, ssaj-api.jar, xercesImpl.jar,
saxon8-dom.jar in the directory $TOMCAT-DIR/shared/libs.

3.2 Conﬁgure/Usage

1. launch the JBoss application server using the command $JBOSS-DIR/bin/run.sh and wait for
the completion of the starting phase; check that JBoss is running by typing in your browser http:
//localhost:8080: you should see the start page of the application server.

2. launch the Apache Tomcat servlet container using the command $TOMCAT-DIR/bin/catalina.sh
run and wait until the message “ActiveBPEL In-Memory Conﬁguration Started” is displayed on the
console. Check that Tomcat is running by typing in your browser http://localhost:7080. To
check that ActiveBPEL is running, visit http://localhost:7080/BpelAdmin: you should see the
ActiveBPEL administration tool. On it, click on Conﬁguration and uncheck the box labelled “Validate
Input/Output messages against schema”.

3. deploy your BPEL process, as illustrated in ActiveBPEL user guide.

4. conﬁgure monitoring for the deployed process. This step assumes an interaction with the ConﬁgurationManager,
 which — in the ﬁrst prototype of Dynamo-AOP — is done by directly accessing the API
of the component, as shown in the “Dynamo Supervision Manager” application, also distributed within
the framework (see next section).

4 Tutorial

In this section we will ﬁrst review WSCoL, the language used to specify monitoring properties; then, we will
describe the demo application bundled with Dynamo-AOP.

4.1 WS-CoL
WSCoL (Web Service Constraint Language) is the language used inside Dynamo-AOP to deﬁne monitoring
properties; it is based on JML [7], with some conceptual and syntactical differences due to the adaption to
the world of web services. Its main features are:

3

• Allowing to deﬁne and predicate on variables containing the data originating both within and outside

the monitored BPEL process, and to retrieve data previously stored in a storage component.

• Using predeﬁned variable functions for data manipulation.
• Using typical boolean, relational and arithmetic operators.
• Predicating on sets of variables through the use of the universal and existential quantiﬁers, and aggregate 
operators.

WSCoL allows to attach monitoring properties to the activities of a BPEL process that interact with
external services. Properties can be preand 
post-conditions. Indeed, one can attach a pre-condition to an
invoke activity, and a post-condition to an invoke, a receive and a pick activity.
All monitoring properties have three parameters:

• priority: it represents the “importance” of the rule and can be an integer ranging from 1 to 5. Each
process can then deﬁne a threshold value that makes monitoring properties active or not, allowing for
dynamically changing the amount of activities performed for monitoring the process.

• validity: it deﬁnes time constraints on when a monitoring properties should be considered.
• trusted providers: it’s a list of service providers for which monitoring is not necessary.
In its simplest deﬁnition, a monitoring property states relationships that must hold between variables.

WSCoL supports three kinds of variables:

• internal: an internal variable corresponds to a datum that originates within the process being monitored.
 Usually, WSCoL internal variables deﬁne a form of data extraction from complex BPEL variables,
 by using XPATH [8] expressions. For example, to extract the value of a sub-element easting
from the sub-element start of the element parameters of a complex BPEL variable named getRouteIn,
one can use the notation
$(getRouteIn/parameters/start/easting), i.e. by concatenating the variable name preﬁxed
by a dollar sign, with the XPATH expression matching the value of interest.

• external: An external variable indicates a monitoring datum that originates outside of the process in
execution, such as a contextual datum. WSCoL assumes that the data source of an external variable
can be queried through a web service interface and provides a function to invoke it: (return<X> (W, O, Ins, Out))
where

– X indicates the XSD type returned by the data source web service; it can be Int, String, Bool.
– W represents the location of the WSDL of the data source web service.
– O represents the name of the web method of the data source web service.
– Ins represents the input message that one has to send when calling the data source web service.


– Out represents an XPATH expression indicating the data extraction to apply to the output message 
returned from the data source web method, to get the desired value.

• historical: Historical variables consist of monitoring data that are related to previous activations of the
Dynamo-AOP framework, related either to other processes or previous steps in the same process.
Historical variables are deﬁning using the store construct, as follows: store $east_historical=($getRouteIn/parameters/start/easting);.
Previously stored historical variables can be retrieved using the retrieve function
(retrieve(pID,uID,iID,kID,type,alias,n))
where pID identiﬁes the process family, uID is the user-id of the user who run the processes, iID
identiﬁes the instance within the process family, kID identiﬁes an invoke activity in the process, type
speciﬁes if the historical variables was stored in a preor 
post-condition; alias is the name of the
variable used in the store operation, n is the maximum number of results that should be returned by
the query.

4

Moreover, variables may be aliased. This feature is provided both for allowing for less verbose expressions
and for referring multiple times to a variable, whose value has been collected only once. Aliases are deﬁned
using the let keyword as shown below:
let $east=($getRouteIn/parameters/start/easting);.

Variables can be manipulated using data-type speciﬁc functions, invoked on the variable using the dot
notation. Numeric functions include abs(), ceiling(), floor() and round(). The available string
functions are: compare(string), replace(pattern, replace),
substring(start, len), length(), contains(string), startsWith(string),
endsWith(string). For example, to get the length of the string value referred by the alias east, one
can write $east.length().

WSCoL allows to use universal and existential quantiﬁers to express constraints over sets of value. The

syntax is: (quantifier $alias name in range def; constraint def)
where quantifier can be forall or exists. A universal quantiﬁer indicates a parametric constraint that
must be true for each and every value (at least one, in the case of the existential quantiﬁer) the parameter
can assume in a given range. alias name and range def deﬁnes respectively a variable alias and a ﬁnite
range for the values it can assume; constraint def deﬁnes the parametric constraint that must hold.

Aggregate operators allows to deﬁne assertions on set of values. The syntax is

(operator $alias name in range def; assertion def)
where operator is one among max, min, avg, sum, product; range def is a variable that returns a set
of values, and alias name is an alias that can be used as a parameter in assertion def.

When a violation of a property is detected, some sort of recovery action should be performed.

In
our framework we have not investigated any speciﬁc recovery strategy but, by simplifying the work presented 
in [4], we just provides three simple primitives: ignore, which ignores the violation and allows the
process to continue, halt, which stops the execution of the process, and notify(msg, addr), which
sends an email with the text msg to the recipient addr. These strategies can be structured using an
if-elseif-else statement and/or boolean operators. For example, if a value is found to have a value
below a certain threshold, we might want to differentiate the recovery strategy on the basis of the difference
with respect to the threshold, as shown below:

if ($hRes < 80;)

{ halt() and notify("Low resolution, dba@localhost)}

elseif ($hres > 80; && $hRes < 120;)

{ignore () and notify("Medium resolution, dba@localhost)}

else {ignore()}

The complete grammar of WSCoL is listed in the apppendix of this section.
Let’s now see some examples of WSCoL properties.

Location: /process/sequence/invoke[@name=’InvokeMap’]
Supervision priority: 2
Monitoring rule:

let $hRes=returnInt(
’http://127.0.0.1:8080/ImageVerifierServiceBean?wsdl’,
’getHRes’,
$MapResponse/result,
/Response/result);
$hRes<= 150;

Recovering rule: {ignore()}

In this example, a property is associated to the invoke activity named InvokeMap. The getHRes web
method of an external data collector service ImageVerifierServiceBean is called by passing it — as
a parameter — the result element of the internal variable MapResponse. Once the service sends back
its return message, the desired value is obtain through data extraction (/Response/result). This value
is assigned to the hRes variable (actually, an alias), by means of the let statement. The actual property
then checks if this variable is less than or equal to 150.
The recovery rule of this property is to ignore the fault and continue with the execution of the process.
Moreover, a priority of 2 is associated with this property. The meaning is that every time the process is
executed with a global priority of 2 or less the property is veriﬁed. On the other hand, if the global process

5

priority is higher than or equal to 3 then the property is ignored.
Another sample property is

Location: /process/sequence/invoke[@name=’InvokeGPS’]
Supervision priority: 4
Monitoring rule:

($CoordResponse/result/easting).length==7) &&
($CoordResponse/result/easting).endsWith(’E’);

Recovering rule: {halt()}

The above property states that the easting element (supposed to be of type string) of the result element
of the CoordResponse internal variable, must be seven characters long and that it must end with the
character ’E’. The recovery rule just makes the process execution terminate. Moreover, a priority of 4 is
associated to this property.

4.2 Demo
In the software distribution, you will ﬁnd a complete web application that can be used to see how the
monitoring framework works.

The application contains a BPEL process, PizzaDeliveryCompany, which you should deploy in
the BPEL engine; at the end of the deployment you should see the process listed in the Deployed Processes 
section of the ActiveBPEL control panel, as shown in Figure 1. Before using the demo application,

Figure 1: Process PizzaDeliveryCompany deployed successfully.

you should deploy some web services in the application server, by copying all the *.jar ﬁle from the
demo directory to $JBOSS-DIR/server/default/deploy. In the same directory, you should also copy
dynamo.war, which contains the “Dynamo Supervision Manager”, a web application developed to to control 
the behavior of the monitoring framework; it can be reached at http://localhost:8080/dynamo.
The main page of this application contains two links: one to set the properties of the monitored processes 
and the other to access the Dynamo-AOP demo, also available directly at http://localhost:
8080/dynamo/DemoManager.jsp. This page contains the various steps through which you can interact
with the BPEL process. The execution of step #1 will attach some monitoring rules to the process, as shown
in Figure 2. The execution of the monitor process can then be monitored on the output console of Tomcat,
as shown in Figure 3. The structure and the priority of the rules attached to a monitored process can be
modiﬁed using the “Dynamo Supervision Manager”, as shown in Figure 4.

6

Figure 2: The result of inserting two monitoring rules.

Figure 3: Output console of the monitored process

5 Appendix

5.1 WS-CoL grammar

(cid:104)analyzer(cid:105) ::⇒ (cid:104)rules(cid:105) | (cid:104)recovery(cid:105)
(cid:104)recovery(cid:105) ::⇒ (cid:104)complete-strategy(cid:105) | strategy
(cid:104)complete-strategy(cid:105) ::⇒ (cid:104)ifStrategy(cid:105) (cid:104)elseIfStrategy(cid:105)* (cid:104)elseStrategy(cid:105)?
(cid:104)ifStrategy(cid:105) ::⇒ if (cid:104)condition(cid:105) (cid:104)strategy(cid:105)
(cid:104)elseIfStrategy(cid:105) ::⇒ elseif (cid:104)condition(cid:105) (cid:104)strategy(cid:105)
(cid:104)elseStrategy(cid:105) ::⇒ else (cid:104)strategy(cid:105)
(cid:104)condition(cid:105) ::⇒ ( (cid:104)rules(cid:105) )
(cid:104)strategy(cid:105) ::⇒ { (cid:104)steps(cid:105) }
(cid:104)steps(cid:105) ::⇒ (cid:104)rec-step(cid:105) (or (cid:104)rec-step(cid:105))*
(cid:104)rec-step(cid:105) ::⇒ (cid:104)actions(cid:105)
(cid:104)actions(cid:105) ::⇒ action (and (cid:104)action(cid:105))*
(cid:104)action(cid:105) ::⇒ (cid:104)identiﬁer(cid:105) ( (cid:104)list(cid:105)? )
(cid:104)rules(cid:105) ::⇒ (cid:104)sub-rule(cid:105) ((==> | <== | <==>) (cid:104)sub-rule(cid:105))* ;
(cid:104)sub-rule(cid:105) ::⇒ (cid:104)and-expression(cid:105) (|| (cid:104)and-expression(cid:105))*

7

Figure 4: Monitoring rules modiﬁed with the “Dynamo Supervision Manager”

(cid:104)and-expression(cid:105) ::⇒ (cid:104)equals-expression(cid:105) (&& (cid:104)equals-expression(cid:105))*
(cid:104)equals-expression(cid:105) ::⇒ (cid:104)relational-expression(cid:105) ((== | !=) (cid:104)relational-expression(cid:105))?
(cid:104)relational-expression(cid:105) ::⇒ (cid:104)operator-expression(cid:105) ((> | >= | < | <= ) (cid:104)operator-expression(cid:105))?
(cid:104)operator-expression(cid:105) ::⇒ (cid:104)basic-expression(cid:105) ((+ | - | * | / | %) (cid:104)basic-expression(cid:105))*
(cid:104)basic-expression(cid:105) ::⇒ (cid:104)dot-expression(cid:105) | (cid:104)variable(cid:105) | (cid:104)exists(cid:105) | (cid:104)forall(cid:105) | (cid:104)let(cid:105) | (cid:104)store(cid:105) | (cid:104)avg(cid:105) | (cid:104)min(cid:105) | (cid:104)max(cid:105)
| (cid:104)sum(cid:105) | (cid:104)product(cid:105) | true | false | (cid:104)NUMBER(cid:105) | (cid:104)string-value(cid:105)
(cid:104)forall(cid:105) ::⇒ ( forall $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)exists(cid:105) ::⇒ ( exists $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)dot-expression(cid:105) ::⇒ (cid:104)variable(cid:105) . (cid:104)identiﬁer(cid:105) ( (cid:104)list(cid:105)? )
(cid:104)let(cid:105) ::⇒ let $ (cid:104)identiﬁer(cid:105) = (cid:104)sub-rule(cid:105)
(cid:104)store(cid:105) ::⇒ store $ (cid:104)identiﬁer(cid:105) = (cid:104)sub-rule(cid:105)
(cid:104)avg(cid:105) ::⇒ ( avg $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)sum(cid:105) ::⇒ ( sum $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)min(cid:105) ::⇒ ( min $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)max(cid:105) ::⇒ ( max $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)product(cid:105) ::⇒ ( product $ (cid:104)identiﬁer(cid:105) in (cid:104)variable(cid:105) ; (cid:104)sub-rule(cid:105) )
(cid:104)variable(cid:105) ::⇒ ( ((cid:104)ivar(cid:105) | (cid:104)evar(cid:105) | (cid:104)hvar(cid:105)) ) | ((cid:104)ivar(cid:105) | (cid:104)evar(cid:105) | (cid:104)hvar(cid:105))
(cid:104)ivar(cid:105) ::⇒ $ (cid:104)identiﬁer(cid:105) (cid:104)xpath-expression(cid:105)?
(cid:104)evar(cid:105) ::⇒ (cid:104)returnType(cid:105) ( (cid:104)string-value(cid:105) , (cid:104)string-value(cid:105) , (cid:104)string-value(cid:105) , (cid:104)xpath-expression(cid:105) )
(cid:104)returnType(cid:105) ::⇒ returnInt | returnBool | returnString
(cid:104)hvar(cid:105) ::⇒ retrieve ( (cid:104)string-value(cid:105) (, (cid:104)string-value(cid:105))? (, (cid:104)NUMBER(cid:105)) , (cid:104)xpath-expression(cid:105) , (cid:104)NUMBER(cid:105) , $
(cid:104)identiﬁer(cid:105) (, (cid:104)NUMBER(cid:105)) )
(cid:104)alias(cid:105) ::⇒ $ (cid:104)identiﬁer(cid:105)
(cid:104)list(cid:105) ::⇒ (cid:104)sub-rule(cid:105) (, (cid:104)sub-rule(cid:105))*
(cid:104)string-value(cid:105) ::⇒ (cid:104)sub-string-value(cid:105) (+ (cid:104)sub-string-value(cid:105))*
(cid:104)sub-string-value(cid:105) ::⇒ (cid:104)identiﬁer(cid:105) | (cid:104)literal(cid:105) | (cid:104)variable(cid:105)
(cid:104)xpath-expression(cid:105) ::⇒ (cid:104)union-expression(cid:105)
(cid:104)location-path(cid:105) ::⇒ (cid:104)absolute-location-path(cid:105) | (cid:104)relative-location-path(cid:105)
(cid:104)absolute-location-path(cid:105) ::⇒ (/ | //) ((cid:104)i-relative-location-path(cid:105) | ε)
(cid:104)relative-location-path(cid:105) ::⇒ (cid:104)i-relative-location-path(cid:105)
(cid:104)i-relative-location-path(cid:105) ::⇒ (cid:104)step(cid:105) ((/ | //) (cid:104)step(cid:105))*
(cid:104)step(cid:105) ::⇒ (((cid:104)axis(cid:105) | ε) (((((cid:104)identiﬁer(cid:105) :)? ((cid:104)identiﬁer(cid:105) | *) )) | (cid:104)special-step(cid:105)) (cid:104)predicates(cid:105)*) | (cid:104)abbr-step(cid:105)
(cid:104)predicates(cid:105)*

8

(cid:104)special-step(cid:105) ::⇒ processing-instruction ( (cid:104)identiﬁer(cid:105)? ) | (comment | text | node) ( )
(cid:104)axis(cid:105) ::⇒ (cid:104)identiﬁer(cid:105) :: | @
(cid:104)predicate(cid:105) ::⇒ { (cid:104)predicate-expr(cid:105) }
(cid:104)predicate-expr(cid:105) ::⇒ (cid:104)expr(cid:105)
(cid:104)expr(cid:105) ::⇒ (cid:104)or-expr(cid:105)
(cid:104)primary-expr(cid:105) ::⇒ (cid:104)variable-reference(cid:105) | ( (cid:104)expr(cid:105) ) | (cid:104)literal(cid:105) | (cid:104)number(cid:105) | (cid:104)function-call(cid:105)
(cid:104)literal(cid:105) ::⇒ (cid:104)LITERAL(cid:105)
(cid:104)number(cid:105) ::⇒ (cid:104)NUMBER(cid:105)
(cid:104)variable-reference(cid:105) ::⇒ $(cid:104)identiﬁer(cid:105)
(cid:104)function-call(cid:105) ::⇒ (cid:104)identiﬁer(cid:105) ( (cid:104)arg-list(cid:105)? )
(cid:104)arg-list(cid:105) ::⇒ (cid:104)argument(cid:105) (, (cid:104)argument(cid:105))*
(cid:104)argument(cid:105) ::⇒ (cid:104)expr(cid:105)
(cid:104)union-expr(cid:105) ::⇒ (cid:104)path-expr(cid:105) (| (cid:104)path-expr(cid:105))*
(cid:104)path-expression(cid:105) ::⇒ (cid:104)location-path(cid:105) | (cid:104)ﬁlter-expr(cid:105) (cid:104)absolute-location-path(cid:105)?
(cid:104)ﬁlter-expr(cid:105) ::⇒ (cid:104)primary-expr(cid:105) (cid:104)predicate(cid:105)?
(cid:104)or-expr(cid:105) ::⇒ (cid:104)and-expr(cid:105) (or (cid:104)and-expr(cid:105))*
(cid:104)and-expr(cid:105) ::⇒ (cid:104)equality-expr(cid:105) (and (cid:104)equality-expr(cid:105))*
(cid:104)equality-expr(cid:105) ::⇒ (cid:104)relational-expr(cid:105) ((= | !=) (cid:104)relational-expr(cid:105))?
(cid:104)relational-expr(cid:105) ::⇒ (cid:104)additive-expr(cid:105) ((< | <= | > | >= ) (cid:104)additive-expr(cid:105))?
(cid:104)additive-expr(cid:105) ::⇒ (cid:104)mult-expr(cid:105) ((+ | -) (cid:104)mult-expr(cid:105))?
(cid:104)mult-expr(cid:105) ::⇒ (cid:104)unary-expr(cid:105) ((* | /) (cid:104)unary-expr(cid:105))?
(cid:104)unary-expr(cid:105) ::⇒ (cid:104)union-expr(cid:105) | - (cid:104)unary-expr(cid:105)

5.2 Architecture
Figure 5 depicts the Dynamo-AOP monitoring framework, by illustrating the dependencies existing between
the various components and the technologies used in the implementation. The Conﬁguration Manager is a

Figure 5: Dynamo-AOP components architecture

storage component for all the properties that have to be monitored. The ActiveBPEL engine is a modiﬁed
version of ActiveBPEL [1] in which we embed monitoring. This is achieved by following an aspect oriented
programming approach [6]. The engine is a Java program in which we weave the cross-cutting monitoring 
features via AspectJ [5]. ActiveBPEL works by creating an internal tree representation of the process
being executed.
In this tree, each node represents a single BPEL activity in the process deﬁnition, and
is an appropriate extension of the AEActivityDefinition class. Each node contains the information
necessary to perform the particular activity it is associated with. At run time, the tree is visited and the
deﬁnition classes are used by the engine to instantiate appropriate AEActivityImpl classes, all of which
implement a common interface. Amongst other things, this interface provides an execute method where
the activity’s primary action is performed. For example, a scope activity will set up its internal variables,

9

ActiveBPEL EngineMonitoring Manager(AspectJ Advice)Conﬁguration Manager(persistent EJB)Data Analyzer(Java)Data Collector(Jax-WS)Invoker(Java)Storage(persistent EJB)while an invoke activity will perform the appropriate external invocation. To perform monitoring, we intercept 
the process after the execute method is called for the various BPEL activities. These are the points
where the Monitoring Manager (implemented as an AspectJ advice) is activated. Its main responsibility is
data collection, both from within the process and from the outside world, through the Data Collector. The
collected data, together with the monitored property, are sent to the Data Analyzer, which ﬁrst retrieves
external data and/or historical variables by calling the Invoker and the Storage, respectively, and then analyzes 
the property, passing the result of the evaluation back to the Monitoring Manager. At this point, before
returning control to the process, the Monitoring Manager executes the recovery code if a monitoring rule
has been violated.

References

[1] Active Endpoints.

Activebpel engine architecture.

architecture.html, 2007.

http://www.activebpel.org/docs/

[2] T. Andrews, F. Curbera, H. Dholakia, Y. Goland, J. Klein, F. Leymann, K. Liu, D. Roller, D. Smith,
S. Thatte, I. Trickovic, and S. Weerawarana. Business Process Execution Language for Web Services,
Version 1.1, May 2003.

[3] L. Baresi and S. Guinea. Towards dynamic monitoring of WS-BPEL processes. In ICSOC 2005: Proceedings 
of the 3rd International Conference on Service Oriented Computing, volume 3826 of Lecture
Notes in Computer Science, pages 269–282. Springer, 2005.

[4] S. Guinea. Dynamo: a Framework for the Supervision of Web Service Compositions. PhD thesis,

Politecnico di Milano, 2007.

[5] G. Kiczales, E. Hilsdale, J. Hugunin, M. Kersten, J. Palm, and W. G. Griswold. An overview of AspectJ.
In ECOOP 2001 - Object-Oriented Programming, 15th European Conference, Proceedings, volume
2072 of Lecture Notes in Computer Science, pages 327–353. Springer, 2001.

[6] G. Kiczales, J. Lamping, A. Mendhekar, C. Maeda, C. V. Lopes, J. Loingtier, and J. Irwin. Aspect-oriented
programming. In ECOOP’97 - Object-Oriented Programming, 11th European Conference, Proceedings,
volume 1241 of Lecture Notes in Computer Science, pages 220–242. Springer, 1997.

[7] G. T. Leavens, A. L. Baker, and C. Ruby. JML: A notation for detailed design. In H. Kilov, B. Rumpe, and
I. Simmonds, editors, Behavioral Speciﬁcations of Businesses and Systems, pages 175–188. Kluwer
Academic Publishers, Boston, 1999.

[8] W3C. XML path language (XPATH). on-line at: http://www.w3.org/TR/xpath, 1999.

10

