Product Line Architecture for a Family of

Meshing Tools(cid:2)

Mar´ıa Cecilia Bastarrica1, Nancy Hitschfeld-Kahler1, and Pedro O. Rossel1,2

1 Computer Science Department, FCFM, Universidad de Chile, Chile

2 Dept. Computaci´on e Inform´atica, Universidad Cat´olica del Maule, Chile

{cecilia|nancy|prossel}@dcc.uchile.cl

Abstract. Meshing tools are traditionally built in a one by one basis
without reusing already developed parts. However, there are several concepts 
within this application domain that are present in most tools. Developing 
software components implementing these concepts is extremely
time consuming and requires highly specialized programmers. Software
product lines is a way of systematically reusing assets. We propose a layered 
product line architecture for meshing tools. We specify it formally
using xADL, and we show that it ﬁts some already built tools.

1 Introduction

A mesh is a discretization of a domain; meshing tools generate and manage these
discretizations. Meshing tools are inherently sophisticated software due to the
complexity of the concepts involved, the big amount of interacting elements they
manage, and the application domains where they are used. They need to accomplish 
speciﬁc sophisticated functionality while still having a good performance;
lately, however, modiﬁability and ﬂexibility have also become relevant.

There are many domains where meshing tools are used ranging from mechanics 
design to medicine [6], each domain requires slightly diﬀerent functionality.
Software engineering practices have seldom been used in meshing tool development 
though there have been some eﬀorts lately mainly building general purpose
libraries and using object-orientation and design patterns. In the software product 
line approach, the product line architecture (PLA) is reused by all software
products in the family [3]. Therefore, the PLA should be carefully designed making 
sure it will produce software that complies with the desired requirements.

We present the PLA for a family of meshing tools that promotes ﬂexibility
and modiﬁability, so diﬀerent existing algorithms, data structures, data formats
and visualizers could be combined in diﬀerent ways to produce diﬀerent tools.
Our PLA follows the layered architectural pattern [4]. Sometimes it is argued
that layered architectures penalize performance, but we have seen that performance 
does not degrade signiﬁcantly with the proposed PLA. We formally deﬁne
the PLA using xADL 2.0 [5]; this language has shown to be appropriate to specify
PLAs. We show already implemented tools as examples of our product family.
(cid:2) The work of Nancy Hitschfeld was supported by Fondecyt N◦1061227. The work of
Pedro Rossel was supported by grant No. UCH 0109 from MECESUP, Chile.

M. Morisio (Ed.): ICSR 2006, LNCS 4039, pp. 403–406, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006

404

M.C. Bastarrica, N. Hitschfeld-Kahler, and P.O. Rossel

2 Product Line Architecture

Independently of the application domain, any meshing tool should provide certain 
general functionality: read the domain geometry and physical values, generate 
an initial mesh, reﬁne, dereﬁne or smooth a mesh according to a quality
criterion, and ﬁnally store the mesh into a ﬁle.

The PLA limits the product line scope, but at the same time it should be
ﬂexible to allow designers to build all desired tools. Flexibility and interchangeability 
guide our PLA design, this is why we chose a layered architecture. Figure 1
shows the speciﬁcation of the meshing tool PLA using ArchStudio [1]. The architecture 
is composed by four layers: User Interface, Algorithms, Model and Input
Output. In xADL, each layer is deﬁned as a structure; Figure 2 shows the xADL
speciﬁcation of the Refine module.

Fig. 1. Meshing Tool PLA

Reﬁne and/or improve represent the core functionality of a meshing tool.
In our PLA, both are presented as optional even though it may seem counter
intuitive. The Face module in the Model layer is also optional; in 3D tools there
must exist a Face module, but it is meaningless in 2D.

As we can see in Figures 1 and 2, Refine exposes two interfaces, called
Reﬁne.Top and Reﬁne.Bottom, respectively. The former has the direction in,

Product Line Architecture for a Family of Meshing Tools

405

- <types:component types:id=“Reﬁne” xsi:type=“types:Component”>

<types:description xsi:type=“instance:Description”>

Reﬁne module</types:description>

- <types:interface types:id=“Reﬁne.Top” xsi:type=“types:Interface”>

<types:description xsi:type=“instance:Description”>

Top interface</types:description>

<types:direction xsi:type=“instance:Direction”> in</types:direction>

</types:interface>
- <types:interface types:id=“Reﬁne.Bottom” xsi:type=“types:Interface”>

<types:description xsi:type=“instance:Description”>

Bottom interface< /types:description>

<types:direction xsi:type=“instance:Direction”> out</types:direction>

</types:interface>
+ <options:optional xsi:type=”options:Optional”>

</types:component>

Fig. 2. Refine Module Speciﬁcation

and the latter out; so this component can be used by any component in the
upper layer, and it may use other modules in the lower layer, following the rules
of the layered architectural pattern. As Refine is optional, its xADL speciﬁcation
includes the options:optional tag indicating optionality.

3 Product Instantiation

Designing a meshing product has two stages: component type selection and implementation 
selection. First, the component types are chosen; here some of the
optional component types may not be included. Then, a particular implementation 
is chosen for every selected component type. Thus, diﬀerent meshing tools
may diﬀer in their functionality or in their implementation. For example, simulating 
semiconductor devices using the control volume method requires to have
anisotropic Delaunay conforming meshes where no part of a Voronoi region of an

Table 1. 2D control volume mesh and 3D control volume mesh

Comp. Description
Type
Selector Allows to enter a speciﬁc improvement region and criterion, and also to choose the following
Initial Reads the already generated Delaunay mesh
Improve Applies the Delaunay improvement algorithm to the speciﬁed region with a certain criterion
to the boundary
Final Post-processes

the mesh eliminating obtuse angles opposite

algorithm to be applied (either Improve or Final)

(Non obtuse boundary algorithm)

is invoked

Criterion Improvement criteria such as Maximum edge vertex connectivity and Maximum angle
Region Region to be improved; Whole geometry is used, but it may also be Circle
Selector Allows to enter a list of criteria and their associated regions, and then the whole process
Initial Reads the geometry and generates a ﬁrst coarse mesh (Fit Device Geometry)
Reﬁne Divides element in order to ﬁt physical and geometric parameter values (Refine Grid)
Final
Region Regions where the reﬁnement is applied, e.g. cuboid or rectangle, among others
Criterion Doping Difference and Longest Edge as the main reﬁnement criteria
Format Outputs

Improves elements in order to fulﬁll the Voronoi region requirement and generates the ﬁnal
mixed element mesh (Make Irregular Leaves Splittable)

(Write Geometrical Information and Write Doping Information)

understandable

the mesh

a

format

in

by

the

visualizer

406

M.C. Bastarrica, N. Hitschfeld-Kahler, and P.O. Rossel

internal point is outside the domain. In 2D, this is fulﬁlled if there is no obtuse
angle opposite to boundary/interface edges. In 3D, for each boundary face the
center of the smallest circumsphere must be inside the domain. Large angles
inside the domain and high vertex edge connectivity must also be avoided.

In [2], a tool for the simulation of semiconductor devices using the control
volume method is described. Here the mesh is read in a format the tool is able to
understand, so the Format component has a dummy functionality. This tool is
used for improving and post-processing a mesh already generated and reﬁned by
another tool. A tool for semiconductor simulation in 3D is described in [7]. In this
case, the mesh is composed of diﬀerent types of elements, i.e. cuboides, prisms,
pyramids and tetrahedra. The implementation is based on a modiﬁed octree
approach. Even though it was not developed with SPL concepts in mind, it ﬁts
the PLA with little eﬀort. The component types chosen and the implementations
for each tool are described in the ﬁrst and second part of Table 1, respectively.

4 Conclusion

We proposed a layered PLA for a meshing tool SPL and we showed that a
variety of diverse meshing tools ﬁt its structure: control volume meshes for 2D
and 3D. By formally specifying the PLA using xADL, we got an architecture
that was simple enough to be easily understood, while general enough to be able
to capture the abstractions behind a wide variety of meshing tools. Having an
integrated graphical and textual modeling tool greatly helped in this process.

References

1. ArchStudio 3. Architecture-Based Development Environment. Inst. SW Research,

Univ. of California, Irvine, 2005. http://www.isr.uci.edu/projects/archstudio/.

2. Mar´ıa Cecilia Bastarrica and Nancy Hitschfeld-Kahler. Designing a product family

of meshing tools. Advances in Engineering Software, 37(1):1–10, Jan 2006.

3. Jan Bosch. Design and Use of Software Architectures. Addison Wesley, 2000.
4. Frank Buschmann et al. Pattern Oriented Software Architecture. Wiley, 1996.
5. Eric M. Dashofy et al. A Comprehensive Approach for the Development of Modular 
Software Architecture Description Languages. ACM Transactions on Software
Engineering and Methodology, 14(2):199–245, 2005.

6. Rod W. Douglass et al. Current views on grid generation: summaries of a panel
discussion. Numerical Heat Transfer, Part B: Fundamentals, 41:211–237, Mar 2002.
7. Nancy Hitschfeld et al. Mixed Element Trees: A Generalization of Modiﬁed Octrees
for the Generation of Meshes for the Simulation of Complex 3D Semiconductor
Device Structures. IEEE Trans. on CAD-ICS, 12(11):1714–1725, Nov 1993.

