Coordination Patterns to Support Mobile Collaboration 

Andrés Neyem, Sergio F. Ochoa, and José A. Pino 

Department of Computer Science, Universidad de Chile, 

Blanco Encalada 2120, Santiago, Chile 

{aneyem,sochoa,jpino}@dcc.uchile.cl 

Abstract. The increasing popularity of portable devices and advances in wireless 
 communication  technologies  push  the  development  of  mobile  groupware 
applications.  Mobile  applications  are  challenging  for  software  designers  because 
the use of centralized components is not recommended, the communication 
service cannot be ensured and the software must run on computer devices 
with little hardware resources. Frequently, data and services interoperability is 
also required for collaborators. A design patterns system is presented as a way 
to deal  with  these  modeling  requirements;  it  is  intended  to  help modeling  the 
coordination services required to support mobile collaboration. These patterns 
serve as  educational and communicative media for developers, students or researchers 
on how to design services for mobile collaborative applications. They 
also foster the reuse of proven solutions.  

Keywords:  Coordination  patterns,  groupware  mobile  applications,  design 
guidelines, mobile collaboration. 

1   Introduction 

Collaborative systems provide support for groups of persons while they communicate 
and coordinate their activities to reach a common goal [10]. Both communication and 
coordination  are  required  to  support  collaboration.  Communication  refers  to  the  information 
 exchange  among  cooperating  group  members,  and  coordination  relates  to 
coordinate group tasks. 

Building collaborative systems has always been a complex undertaking because it 
involves  issues  that  are  not  relevant  while  developing  single-user  systems,  such  as 
human-to-human communication and awareness, group dynamics, users' social roles, 
group memory, and other organizational and social factors. Trying to deal with these 
issues, the CSCW community has designed solutions to support communication and 
coordination  in  stable  communication  scenarios  (wired  networks)  and  the  obtained 
results are highly applicable. However, the current advances in wireless communication 
and mobile computing have brought new challenges, needs and opportunities for 
collaboration in several scenarios [27].  

Most communication and coordination solutions designed to support collaboration 
on  wired networks are inapplicable to wireless networks.  This occurs because  wireless 
networks have dynamic topologies and thus, it is impossible to ensure availability 
of communication among collaborators or access to centralized data/services [2], [20]. 

R.O. Briggs et al. (Eds.): CRIWG 2008, LNCS 5411, pp. 248–265, 2008. 
© Springer-Verlag Berlin Heidelberg 2008 

 

Coordination Patterns to Support Mobile Collaboration 

249 

In turn, the design of coordination services that support collaboration in mobile scenarios 
 gets  complicated.  Examples  of  these  coordination  services  are  user/session 
management,  roles  support,  shared  data  space  management  and  message  delivery. 
These services now should not use centralized components [20], should allow mobile 
users to be autonomous and collaborate on-demand [22], [26], should allow interoperability 
of data and services [20], [22] and probably these services will have to run 
on mobile computer devices with little hardware resources [2], [20].  

This  paper  proposes  a  design  patterns  system  [28]  intended  to  help  software  designers 
to  model the coordination services required to support mobile collaboration. 
Next section describes the mobile collaboration considering four different work scenarios,
 and the requirements to design the coordination services for each one. Section 
3 presents the related work. Section 4 describes the proposed patterns system to deal 
with  the  design  challenges  of  coordination  services.  Finally,  section  5  presents  the 
conclusions and future work. 

2   Mobile Collaboration 

Mobile  collaboration  has  increasingly  become  an  important  issue  in  CSCW.  However,
 efforts to understand the implications that mobile work and mobile collaboration 
have on groupware design are still a research subject [1], [2], [11], [13], [24]. Mobile 
groups are highly varied in the ways they organize work, in the physical dispersion of 
mobile workers, and in the styles of collaboration that take place among workers [3], 
[16], [30]. While trying to make sense of this diversity, there exist efforts to describe 
and  classify  these  variants  by  focusing  on  specific  types  of  mobility  [15],  types  of 
physical distributions that occur in mobile groups [16], and levels of coupling among 
mobile collaborators [25], [8]. 

These research contributions show that mobile workers are those who have to work 
out of office, move around locally or remotely. Their tasks must be performed on the 
site  within  a  specific  timeframe  or  they  have  to  work  at  different  locations  with  a 
carried “portable office” with limited resources. They often work based on an irregular 
schedule with narrow time windows for action. Mobile workers have to cope with 
great uncertainty and interference. Therefore, in order to understand the implications 
that  mobile  work  and  mobile  collaboration  have  for  the  design  of  coordination  services,
  we  found  it  is  necessary  to  provide  a  conceptual  framework  to  analyze  and 
explore the vision of time and place in the context of mobility (Fig. 1). This classification 
is a variant of the traditional time space taxonomy proposed by Ellis at al. [10]. 

This conceptual framework lets developers analyze the interactions among several 
mobile workers, considering time and space dependence when carrying out an interaction.
 Next sections describe each of the quadrants of this framework. 

2.1   Different Time / Different Place 

The first quadrant of Fig. 1 indicates the interactions between two mobile workers can 
be  done  independently  of  the  timeframe  they  have  available  to  collaborate  and  the 
place  where  they  are  located. This  type  of  collaboration  is  possible just  if  there  are  
 

250 

A. Neyem, S.F. Ochoa, and J.A. Pino 

Synchronous
Asynchronous

Place

Different

Particular

These  interactions  can 
be  done  independently 
of time and place. They 
can  be  done  anytime 
and anywhere.

These  interactions  can 
be  done  independently 
of  the  place  but  at  a 
certain 
in  a 
certain order.

time  or 

e
m
T

i

t
n
e
r
e
f
f
i

D

r
a
l
u
c

i
t
r
a
P

These interactions need 
to  be  done  at  a 
particular place but they 
can be done anytime.

These  interactions must 
be  done  at  a  particular 
place and time.

t
o

 

p
a
r
t
i
c
u
l
a
r
 
t
i

m
e

A
n
y

 
t
i

m
e
 
c
h
a
n
g
e
s
 

Fig. 1. The conceptual framework to analyze the mobile workers interactions 

Any place changes to particular place 

 

one or more intermediary components (a server or mobile collaborative units) able to 
keep and communicate a set of ordered messages between the sender and the receiver. 
Let  us  assume  a  mobile  worker  wants  to  collaborate  with  a  partner  working  at  a 
distant location and in a different timeframe. Then, the requester can send a coordination 
message to the destination actor through the (intermediary) mobile workers that 
are close to him/her. Such message will eventually be propagated when mobile actors 
physically move; thus, the coordination message eventually could be delivered to the 
destination actor. The coordination message typically has information allowing these 
actors to hold a meeting. For example, a message indicating the reason (or need) to 
collaborate, and a list of places and times frames where the requester will be in the 
future or a phone number to coordinate a meeting. 

2.2   Different Time / Particular Place 

This quadrant means the interactions among collaborators can be done anytime, but at 
a specific place. An example of such type of interactions occurs when inspectors work 
in  construction  scenarios.  Typically  each  construction  site  has  a  main  contractor, 
which  outsources  several  parts  of  the  construction  project,  e.g.  electrical  facilities, 
gas/water/communication  networks,  painting  and  architecture.  Some  of  these  subcontracted 
companies likely work during different time periods but in the same place. 
While  inspecting,  engineers  revise  various  parts  of  the  facilities  and  record  the  advances 
on a mobile groupware application. The main contractor is in charge of keeping 
track of the construction project updates. In order to get a whole view of the state 
of the project, all inspectors  of sub-contracted companies  need to  go to a particular 
place to synchronize their information with the main contractor. Thus, they are able to 
detect incomplete or contradictory information with other sub-contractors. 

2.3   Particular Time / Different Place 

This quadrant indicates interactions among actors must be done during a specific time 
frame, but including different places. The delivery of healthcare services to patients at 

 

Coordination Patterns to Support Mobile Collaboration 

251 

their homes presents an example of this interaction scenario. Each patient is typically 
treated by a team, including therapists, nurses, social workers, and home health aides. 
Workers physically move and work out at different locations in a particular time. 
They spend most of the day in the community and they may only spend minimal time 
in the office. Typically these persons have particular timeframes during the labor day 
to  collaborate  among  them  in  order  to  coordinate  care  plans  for  some  patients.  The 
collaboration process could be done by phone or through a mobile groupware system. 

2.4   Particular Time / Particular Place 

The  fourth  quadrant  means  some  interactions  need  to  be done  in  certain  places  and 
within a certain period. The relief efforts at a disaster site  make an example of this 
interaction scenario. When a disaster occurs in an urban area, there is minimal availability 
 of  communications  services  [22].  Therefore,  the  participating  organizations 
(police,  firefighters,  medical  personnel  and  government  agencies)  have  to  go  to  the 
command post to get basic information about the affected buildings (e.g. maps, probable 
 people  locations  and  vulnerable  points),  exit  routes,  resources  deployed  in  the 
area  and  tasks  assignments.  If  these  first  responders  update  the  shared  information 
received from the command post, i.e. because it was wrong, then the updated information 
should be carried to the command post and communicated to the disaster deci-
sion-makers in order to disseminate the new information. 

2.5   Requirements to Support Mobile Collaboration 

The  previous  conceptual  framework  shows  there  are  many  work  scenarios  where 
mobile collaboration need to be supported. Provided the actors’ mobility, the interaction 
scenarios can change from one quadrant to another one. This section summarizes 
the  groupware  requirements  that  are  need  to  support  the  interaction  scenarios  described 
by the conceptual framework. 

Autonomy. Collaborative mobile applications should work as autonomous solutions in 
terms  of  communication,  data  and  functionality.  This  is  because  wireless  networks 
have a high disconnection rate and their communication threshold is short [20].  

Interoperability.  Since  mobile  workers  could  include  unknown  persons  trying  to  do 
casual  or  opportunistic  collaboration,  their  mobile  groupware  applications  should 
offer communication, data and services interoperability.  

Shared information availability. Shared information supporting collaborative applications 
 in  these  scenarios  need  to  be  highly  replicated  due  to  frequent  disconnections 
(even using access points).  

Variability of the work context. Since users are on the move to carry out their activities,
 their work context can frequently change. Some attributes, such as network topology 
and the Internet/servers access, will change from one location to the next one.  

Use  of  hardware  resources.  Collaborative  mobile  applications  should  operate,  in 
many cases, with constrained hardware resources; e.g., the case in which these solutions 
need to run on Personal Data Assistants (PDAs). Therefore, the communication 
and coordination services should be lightweight. 

252 

A. Neyem, S.F. Ochoa, and J.A. Pino 

Low  coordination  cost.  Tasks  are  often  strongly  partitioned  among  workers.  This 
partitioning  minimizes  coordination  demands  and  it  allows  people  to  work  autonomously 
 and  in  parallel  [24].  Ideally,  the  coordination  process  should  be  unattended 
[22]. 

Awareness  of  users’  reachability.  Mobile  workers  need  to  know  when  a  particular 
user  is  reachable,  because  they  do  on-demand  collaboration.  Hence,  awareness 
mechanisms  indicating  user  reachability  should  be  embedded  in  mobile  groupware 
applications.  

Deployment ease. An important factor is the speed of having the device ready to operate.
 A quick boot-up time will let workers productively use dead times. Applications – 
in particular, these workspaces – should also self-configure automatically after bootup 
[22]. 

3   Related Work 

There are several experiences reporting the  use of collaborative  mobile applications 
[20]. Although some of these applications are fully-distributed, they do not describe 
or evaluate the strategies used to support coordination in mobile collaborative scenarios.
 Thus, the potential design solutions cannot be evaluated when they are formalized 
through  design  patterns  or  reused  in  future  applications.  Schümmer  and  Lukosch 
argue that groupware reuse should focus on design reuse rather than code reuse [28]. 
These researchers also propose a patterns system for groupware for stationary scenarios,
 therefore they do not consider the users mobility.    

Jørstad et al. have proposed and describe a set of generic coordination services for 
distributed (but stable) work scenarios [14]. These services include locking, presentation 
control, user presence management and communication control. Other researchers 
 have  also  proposed  similar  solutions  to  support  coordination  on  fixed  networks 
[4], [6], [12]. However, the contextual variables influencing the collaboration scenario 
(e.g.  communication  instability  and  low  feasibility  to  use  servers)  and  the  mobile 
work  (e.g.  use  of  context-aware  services  and  support  for  ad-hoc  coordination  proc-
esses)  make such solutions  unsuitable to  support  mobile collaboration. Next section 
presents the patterns system we propose to structure the coordination services in order 
to support mobile collaboration. 

4   Patterns System 

We propose the use of a layered and fully-distributed architecture for mobile groupware 
 applications  since  collaboration  is  based  on  communication  and  coordination 
[10].  The  advantages  of  the  layered  architecture  have  already  been  discussed  and 
recognized by the software engineering community [5], [7], [9]. Figure 2 shows the 
crosslayer  pattern,  which  structures  the  basic  functionality  of  a  mobile  groupware 
application. 

 

Coordination Patterns to Support Mobile Collaboration 

253 

Mobile Collaborative Applications 

Collaboration Layer 

r
e
y
a
L
s
s
o
r
C

Ad Hoc Environment, Ad Hoc Collaborative Session, 

Mobile User, Role, Ad Hoc Shared Repository, Replicated 
Resources, Replicated Resources Synchronization,       

Ad Hoc Context Management 

Coordination Layer 

Patterns for Messages Communication 

Communication Layer 

Fig. 2. Layered architecture to support mobile collaboration 

 

The coordination patterns system proposed by this article focuses on the services of 
the coordination  layer. These  patterns  use (through the  API) the  services provided by 
the communication layers. Communication services were also grouped and specified in 
a patterns system for ad-hoc communication [18]. Next section briefly describes these 
patterns using the description language proposed by Schümmer and Lukosch [28]. 

4.1   CrossLayer 

Context.  Groupware  applications  separate  functionality  in  three  basic  concerns: 
communication,  coordination  and  collaboration.  Each  layer  provides  services  and 
records data related to such services. These services are different in term of concerns 
and granularity. The interaction between services related to different concerns is hier-
archical: communication <-> coordination and coordination <-> collaboration. Interoperability 
among these services is required to support mobile collaboration, because 
frequently  the  service  provider  and  the  consumer  run  on  two  different  computing 
devices.  

Problem. If the services provided by the groupware system are  not  well structured, 
the system will be limited in terms of scalability, maintainability and adaptability.  

Solution. The services related to different concerns can be grouped in different layers 
of  a  software  architecture.  Designers  can  thus  separate  concerns  and  increase  the 
system scalability,  maintainability and adaptability. The platform also gets sound to 
deal  with interoperability issues. The architecture  should be fully replicated to cope 
with the mobile users’ autonomy. Thus, we can view the collaboration scenario as a 
dynamic mesh without centralized components.  

Groupware  services  and  public  data  structures  belonging  to  each  layer  should  be 
accessible through an API in order to keep the services independence and the access 
control. The interaction protocol between services is part of each layer, and it can be 
dynamically selected based on contextual information. For example,  mobile devices 
with  little  hardware  resources  require  lightweight  mechanisms  for  data  sharing  or 

254 

A. Neyem, S.F. Ochoa, and J.A. Pino 

peers  discovery.  If  an  application  running  on  a  laptop  must  interact  with  a  service 
running  on  a  PDA,  contextual  information  about  the  PDA’s  hardware  resources 
(stored in a particular layer) will be needed to dynamically adapt the interaction protocol 
between them. 

Related Patterns. The most related pattern is layer [9] but it is not focused on dis-
tributed/groupware systems or services interoperability. 

Related  Mobile  Groupware  Requirements.  Autonomy,  interoperability  and  deployment 
ease. 

4.2   Coordination Patterns 

The coordination patterns concern the provision of services required by mobile work-
ers’ applications to coordinate the operations on the shared resources (e.g. files, sessions 
 and  services).  This  coordination  is  made  individually  (per  mobile  unit)  and  it 
generates a consistent view of the group activities. Figure 3 shows this patterns system. 

 

Ad-hoc Session

Public-subscribe 

Session 

Private-subscribe 

Session

Irreconcilable 

Resources 

Reconcilable 
Resources 

Ad Hoc         Collaborastores 
shared data in 

tive Session

has 

transfers data through 

Ad Hoc             

Shared Repository 

s
h
o
w
s
 

Mobile User 

has 

Role

defines access rights to

Ad Hoc View 

manages user’s groups through 

Ad Hoc Environment 

Replicate Resources 

s
y
n
c
h
r
o
n
i
z
e
 
d
a
t
a
 
t
h
r
o
u
g
h

 

u
s
e
s
 

Replicated Resources 

Synchronization 

Ad Hoc Context 

Management 

senses through

Fig. 3. Coordination Patterns System for Mobile Groupware Applications 

One-to-many 
Synchronization 

One-to-one 

Synchronization 

 

4.2.1   Ad Hoc Environment 

Context.  Mobile  collaborative  applications  can  require  several  work  sessions.  Each 
session groups users and shared data and services. Mobile users need to know which 

 

Coordination Patterns to Support Mobile Collaboration 

255 

sessions are currently available in order to try to access those relevant ones for them, 
or otherwise to create a new work session to collaborate with team mates.  

Problem. It is not possible to use a centralized list of the current available work sessions 
due to the mobile collaboration process feature mentioned in section 3. It means 
the list of work sessions with the respective participants must be kept in a distributed 
way and the system has to ensure its information integrity. 

Solution. This pattern proposes an ad-hoc environment to deal with this problem. It 
contains a fully distributed list of work sessions available for each mobile user. Each 
mobile unit (and mobile user) has an instance of this list and a set of services to reconcile 
the local list with the list of team mates.  

The  local  ad  hoc  environment  maintains  information  with  the  environment  ID 
(there is one for each user), description, creator and the list of available work sessions 
available.  It  also  contains  the  list  of  sessions  where  the  local  user  is  member.  The 
integrity  of  the  information  stored  in  each  ad  hoc  environment  can  be  kept  using  a 
reconciliation service such as the one proposed by Messeguer et al. [18]. This information 
can be used by the mobile groupware application to implement a mechanism 
of user connection awareness or support to on-demand collaboration. The advantages 
of this solution are the following ones: 

(cid:131)  One mobile application may support several work sessions composed of several 
mobile users. 

(cid:131)  A  session  member’s  work  should  not  interfere  with  the  work  of  other  ses-

sion’s members, even if they are working on shared objects. 

(cid:131)  The environment can provide general services to support shared workspaces. 
Examples of the services are files transfer, message delivery, peer detection 
and user/session awareness. 

Related Mobile Groupware Requirements. Awareness of users’ reachability, variability 
of the context, use of hardware resources and deployment ease. 

4.2.2   Ad Hoc Collaborative Session 
Context.  Mobile  users  require  on-demand  collaboration  based  on  some  goals,  e.g. 
common work or similar interests. Typically they share data, knowledge or services 
as  part  of  this  collaboration  process.  The  interaction  among  mobile  users  should  be 
protected in order to avoid unauthorized access to resources shared among them. 

Problem. Similar to the ad hoc environment, mobile collaboration requires managing 
sessions in a distributed way and keeping the integrity of the information shared by 
the session members. Access control to shared resources based on each mobile user’s 
role for a session is also required. Given the users’ mobility, work sessions should be 
dynamically splitable or unifiable depending on the availability of a communication 
link among session members. 

Solution. The solution to this problem is to use an ad-hoc collaborative session. The 
management of these sessions is done in a fully distributed way; therefore each mobile 
unit has to do it locally and keeping synchronized with the rest of the session members. 
Similar to traditional groupware sessions [12], ad hoc collaborative sessions have a list 

256 

A. Neyem, S.F. Ochoa, and J.A. Pino 

of supported roles (rights to access the shared resources), users members (with roles), a 
shared dataspace, and a session type considering the access control for users (ad hoc, 
public or private session). 

A work session is created when the first user is registered as member of it and it is 
deleted  when  the  last  user  is  unregistered.  A  session  is  potentially  alive  even  if  no 
users are currently connected, but there are registered users. The work session types 
matching  mobile  collaboration  are  the  following  ones:  ad-hoc,  public-subscribe  and 
private-subscribe. The ad-hoc session is an open public resource that can be accessed 
by any user connected to the wireless network. The public-subscribe session involves 
a  simple  subscription  process.  Typically,  users  request  a  session  subscription  and 
automatically obtain the right to access it. Finally, private-subscribe sessions require a 
subscription  process  carried  out  by  invitation.  Each  invitation  has  associated  a  user 
role. If the mobile worker accepts the invitation, then s/he will play such role in that 
session. The strategy for session management must allow mobile users participate in 
more than one session.  

Every mobile user must have a local private and a shared repository for each session 
s/he  belongs.  It  allows  her/him  to  share  resources  on-demand.  When  a  user  logs  in  a 
session, s/he becomes visible and s/he can access the shared resources of such session. 
At that moment, the user’s local shared resources become visible to the rest of the session 
members. When a user leaves a session, the local private and shared resources are 
kept available for him/herself, by allowing the user work asynchronously. 

Typically, not all users have the same rights to access shared resources. The rights 
are related to the user’s role for each session s/he is working on and indicates the user 
capability to carry out certain operations or processes on the shared resources. Mobile 
users  usually  have  many  work  sessions  with  certain  assigned  role.  Therefore,  they 
need a mobile environment organizing and eventually coordinating multiple working 
sessions or user groups playing several roles. Sessions, users and roles management 
should be fully-distributed since the mobile environment should be autonomous. 
Related  Mobile  Groupware  Requirements.  Autonomy,  shared  information  availability,
 awareness of users’ reachability, low coordination cost and deployment ease. 

4.2.3   Ad Hoc Shared Repository 
Context. Team members doing mobile collaboration produce information as a result 
of the individual and collaborative work. These persons are frequently disconnected, 
perform activities autonomously and work in parallel; therefore they need instances to 
share and synchronize their information.  

Problem.  Since  mobile  workers  have  to  be  autonomous,  the  resources  required  by 
them  during  an  activity  should  be  reachable  all  the  time.  Nevertheless,  the  mobile 
groupware  applications  are  not  able  to  support  collaboration  accessing  centralized 
dataspaces. Therefore, the shared dataspace should be fully distributed. It means the 
shared  information  will  be  replicated  in  the  mobile  units  used  by  the  work  session 
members. This replication adds inconsistency to shared resources and the reconciliation 
process increases its complexity.  

 

Coordination Patterns to Support Mobile Collaboration 

257 

Solution. A solution to this problem involves the use of an ad-hoc data shared repository.
 This component is a fully distributed dataspace embedding two mechanisms to 
keep consistency of the shared resources among session members. 

Typically session members have a local (private) repository to store the private resources 
and a shared (public) repository to store the resources they want to share with 
the partners. The shared repository contains two types of information resources: irreconcilable 
and reconcilable. The irreconcilable resources are those pieces of information 
that the system has no information about their internal structure. The consistency 
among these resources is kept just through file transfer. On the other hand, a reconcilable 
resource is a piece of information with a well-known internal structure; therefore 
it can be synchronized with other copies of such resource (from other mobile users) in 
order to obtain a consistent representation of it. The sharing process and the data consistency 
are done using synchronization processes. 

Since the structure of XML documents is flexible and it can be dynamically analyzed,
  we  recommend  using  such  format  to  implement  the  shared  resources  and  to 
reconcile  information.  Every  mobile  host  has  to  maintain  two  types  of  XML  docu-
ments:  versions  and  editions.  Versions  contain  changes  that  have  been  performed 
locally  (without  communicating  them  to  the  other  hosts).  Editions  are,  in  a  sense, 
stable versions; they contain changes that have been agreed with another host, after a 
reconciliation  process.  Therefore,  an  edition  can  have  both  versions  and  editions  as 
directed descendents in the version  graph,  whereas a  version does not  have descendants,
 because first it has to be upgraded to an edition. Consequently, versions always 
contain the most recent information. 

Related  Mobile  Groupware  Requirements.  Autonomy,  interoperability,  shared 
information availability, low coordination cost, and deployment ease. 

4.2.4   Replicated Resources Synchronization 
Context. Mobile users work autonomously most of the time and they carry out sporadic 
on-demand collaboration processes to keep updated the local dataspace. Even if 
the collaboration process is tightly coupled, the users’ mobility may cause disconnections 
and inconsistencies on the shared information. 

Problem. Data consistency in fully distributed scenarios usually involves synchronization 
 processes.  These  processes  define  which  replicas  exchange  updated  packets 
and in which direction the exchange will be done. When the synchronization process 
has to be done  using a  Mobile Ad  hoc Network (with dynamic topology)  including 
heterogeneous  devices,  the  synchronization  processes  will  be  affected  by  several 
factors. Examples of such factors are: bandwidth between mobile devices, computing 
power of the involved devices, network topology and latency of changes. In addition, 
this synchronization process must be done in a short time period, because frequently 
reconciliations  are  done  as  unattended  (background)  processes  triggered  while  the 
user is on the move. Since the period of contact among mobile collaborators cannot be 
ensured, the reconciliation process should be as fast as possible. 

Solution.  The  reconciliation  algorithm  proposed  to  perform  the  synchronization  
of  shared  resources  is  simple;  it  uses  a  mechanism  to  control  possible  conflicts  between 
different replicas. The main design goal of this algorithm was to minimize data 

258 

A. Neyem, S.F. Ochoa, and J.A. Pino 

transfers,  as  a  way  to  reduce  the  synchronization  process  duration.  The  algorithm 
transmits just the differences between data structures and, at the same time, is able to 
reconstruct diverging replicas from a common previous edition on the  same  host in 
order to reconcile them locally. Then, the result of the reconciliation is propagated to 
the other hosts, communicating only the changes done on the common latest edition. 
Figure 4 shows an example of synchronization of two documents using the reconciliation 
algorithm. The reconciliation process starts when Host A sends a reconciliation 
request to Host B. It receives the request and starts a local reconciliation using 
the information sent by A. We refer to the copy of the document stored on Host A as 
DocA and that maintained on Host B as DocB. Let us also suppose that, after the execution 
of the first part of the protocol, the document DocCE has been choosen as Latest 
Common Edition [19]; i.e., DocCE is base document of the XMLTreeDiff algorithm 
[17]. Host A computes XMLTreeDiff  with DocCE and DocA as arguments (DocCE is 
the base document, whereas DocA is the modified document). The output of the execution 
of this method will be the “diff” document Docdiff, which will be sent to Host 
B.  After  receiving  Docdiff,  B  executes  XMLTreeMerge  with  DocCE  and  Docdiff  as 
arguments  in  order  to  reconstruct  DocA  locally.  Therefore,  Host  B  now  has  a  local 
copy of DocA and, naturally, DocB. Thus, the reconciliation between these two documents 
 is  performed  on  Host  B  without  exchanging  information  with  Host  A  during 
the execution of the algorithm. 

It  is  possible  to  reconcile  DocA  and  DocB  using  the  XMLTreeReconcile  component.
 The arguments of this component are: the local copy of the document DocB, the 
remote copy DocA and the latest common edition DocCE. The output will be a “reconciled 
 document”  called  DocCEn.  The  final  step  is  the  generation  of  the  reconciled 
 

Host A 

Host B 

Doc_A  Doc_CE 

XMLTreeDiff 

Doc_Diff 

Doc_CE  Doc_Diffn 

XMLTreeMerge 

Doc CEr 

Doc_Diff  Doc_CE 

XMLTreeMerge 

Doc_A  Doc_B  Doc_CE 

XMLTreeReconcile 

Doc_CEr  Doc_CE 

XMLTreeDiff 

Doc_Diffn 

 

Fig. 4. The reconciliation algorithm 

 

Coordination Patterns to Support Mobile Collaboration 

259 

document  on  Host  B.  This  action  is  executing  the  XMLTreeDiff  again  with  DocCE 
and DocCEn as arguments, in order to compute a new “diff” document. Afterwards, the 
document  Docdiffn  is  sent  to  Host  A,  and  XMLTreeMerge  executes  with  DocCE  and 
Docdiffn as arguments. Now, Hosts A and B store the reconciled copy, which will be 
the new latest common edition. 
Related  Mobile  Groupware  Requirements.  Shared  information  availability,  low 
coordination cost, and use of hardware resources. 

4.2.5   Replicate Resources 

Context. Users produce data as a result of the mobile collaboration process. This data 
is stored in local files that mobile users share to support collaboration.  

Problem. Users’ mobility causes high disconnection rate when transfering a file between 
 mobile  units. This disconnection rate forces to design a robust  mechanism to 
support this service. Moreover, the service should be fast and simple enough to run on 
small computing devices. 

Solution. The solution to this problem is to provide a FileTransfer component which 
is in charge to manage all the file transfer processes. This component implements a 
transparent way to share these files through multicast or unicast transmission among 
users interacting in a work session. The file transfer is based on the distribution of a 
set of small information pieces which can be sent in any order from the sender to the 
receiver. When a user decides to download certain remote file, the component creates 
a download request. Then, the file transfer manager uses the contextual information 
(i.e. hardware features of the interacting mobile computing devices, and the distance 
between them) to determine the appropriate block size in which the file will be broken 
down before being transmitted. The block size is relevant  to consider because it directly 
influences the performance of the file transfer process.  

Furthermore,  increasing  the  file  transfer  performance  typically  involves  several 
other mechanisms. These include reusable data channels to eliminate the high startup 
costs during the secure authentication, but  most  importantly,  multiple data channels 
for parallel file transfers. In case only part of the file is needed on the remote  user, 
partial file transfers are allowed in either block or striped mode. 

Related  Mobile  Groupware  Requirements.  Shared  information  availability,  and 
low coordination cost. 

4.2.6   Mobile User 
Context.  Users  participating  in  a  mobile  collaborative  process  need  to  be  uniquely 
identified regardless of the computing device they are using. Provided this is an ondemand 
process, mobile users need to know the identities of the potential collaborators 
who are currently available. 

Problem. Users need a transparent mechanism allowing them to be uniquely identified 
regardless of the mobile device they are using. A similar identification is required 
for the potential collaborators (other mobile users in the same area). The information 

260 

A. Neyem, S.F. Ochoa, and J.A. Pino 

about users’ and neighbors’ IDs should be managed in a fully distributed way, due to 
the aforementioned restrictions. 

Solution. The solution to this problem is to have a data structure, that we have called 
mobile  user,  containing  the  local  user  information  required  to  support  the  mobile 
collaboration and to implement user presence. This structure is local to each mobile 
device and it is shared among users in order to keep a common view from the users 
participating in a work session. 

Mobile Unit ID     

(Real ID)

Virtual (User) ID 

User Role 

User Visibility 

List of Neighbors 

 

Fig. 5. Mobile user data structure 

Session ID 

Array of VIs 

SID 1 

SID 3 

SID 4 

…  …  …  … 

…  …  … 

…  …  …  …  …  … …

VI  RI 

VI3  …
VI6  …
VI7  …
VI9  …

Fig. 6. Matching VIs and RIs 

 

The  mobile  user  data  structure  contains 
the mobile unit ID, the virtual (user) ID, the 
user’s role, the visibility attribute and the list 
of  neighbors  (Fig.  5).  The  user’s  virtual 
identity (VI) is a unique ID which is linked 
to  the  IP  address  of  the  user’s  device.  This 
VI is linked to the real identity (RI) which is 
the  permanent  user’s  ID.  User  sessions  can 
be implemented as dynamic arrays of virtual 
identities  (Fig.  6).  On  the  other  hand,  the 
user visibility attribute allows implementing 
privacy policies, and awareness of user roles 
and  user  availability.  The  list  of  neighbors 
includes  the  set  of  potential  collaborators 
available during a particular period.  

This list can be updated by two mechanisms: (1) peers discovery and (2) list synchronization.
 Peers discovery involves sending a message to a peer destination. If the 
destination is reached, a message is returned to the sender indicating the list of interim 
visited nodes. Such data is used to update the local list of reachable mobile units and 
neighbors. Then, a change-propagation mechanism can be triggered to the rest of the 
session members. In that case, the list update is done using a typical synchronization 
process.  

Related  Mobile  Groupware  Requirements.  Awareness  of  users’  reachability, 
autonomy, and low coordination cost. 

4.2.7   Role 
Context.  Mobile  collaborative  applications  usually  require  support  for  mobile  users 
with different rights to access the shared information.  

Problem. Users having the same access rights should be treated in the same way by 
the  groupware  system.  Fully  distributed  access  control  management  to  shared  resources 
is needed because mobile collaboration processes require autonomy.  

 

Coordination Patterns to Support Mobile Collaboration 

261 

Solution. The solution involves assigning a role to each mobile user in each session 
that he/she belongs to. The user’s role is linked to the user’s VI and RI (Fig. 5) and it 
defines the access rights of that user over the shared resources. Taking into account 
the reusability of this proposal, we can consider the role as a class maintaining information 
related to its name, the session to which it belongs and list of access rights to 
the shared resources (data and services). The role class has to implement methods to 
store an instance, to erase an instance, to check if a role exists, to check if a mobile 
user has enough rights to access a shared resource, and to request a list of roles available 
in certain sessions. 

Related  Mobile  Groupware  Requirements.  Awareness  of  users’  reachability, 
shared information availability, and low coordination cost. 

4.2.8   Ad Hoc View 

Context. The user’s role sets the user’s access rights on the shared resources (data and 
services); thus, users with the same role should have access to the same resource list. 
Problem. Since the shared resources in an ad hoc session are distributed but no fully 
replicated, frequently users with the same role have access to different lists of shared 
resources.  Mobile  collaboration  requires  keeping  the  coherence  of  the  access  to 
shared resources as much as possible, in order to avoid data islands (generating unnecessary 
parallel work) inside a work session. 
Solution.  The  solution  to  this  problem  is  to  use  an  ad  hoc  view  of  the  shared  resources.
  This  view  contains  a  list  of  resources  with  their  access  grants,  which  are 
available for all users having a specific role. There is a view per role. Users with the 
same role should have access to the same list. These lists are reconcilable as a way to 
keep the coherence of each view. The only difference that is allowed between the lists 
of  two  users  having  the  same  role  is  the  resources  availability.  Although  all  shared 
resources are visible, some of them are reachable (if they are locally stored or they are 
replicable from a neighbor’s dataspace) and other ones are unreachable (if neither the 
current mobile unit nor its neighbors have the resource). In order to increase the availability 
of the shared resources, a user can ask for a particular view that tries to replicate 
(in the local shared dataspace) the remote resources that are currently visible but 
unavailable for him/her.  

The ad hoc view can also be considered as a class interacting with the role class 
presented  in  the  previous  section.  This  class  should  provide  methods  to  store  and 
delete an instance, to check if a view exists, and to refresh and reconcile a view. 

Related Mobile Groupware Requirements. Shared information availability. 

4.2.9   Ad Hoc Context Management 
Context. By context we mean the variables that can influence the behavior of mobile 
applications;  it  includes  computing  devices  internal  resources  (e.g.  memory,  CPU 
speed or screen size) and external resources (e.g. bandwidth, quality of the network 
connection,  and  mobile  hosts’  location  and  proximity).  Both  types  of  variables  are 
relevant to support coordination processes. However, the external variables are more 
dynamic  in  mobile  scenarios  than  the  internal  ones;  therefore,  it  is  usually  very  

262 

A. Neyem, S.F. Ochoa, and J.A. Pino 

challenging to sense, store and appropriately use the information they contain. Mobile 
applications need to be aware of the context in which they are being used to be able to 
adapt to heterogeneity of hosts and networks as well as variations in the user’s environment.
  Furthermore,  context  information  can  be  used  to  optimize  application  behavior 
compensating resource scarcity.  
Problem.  Contextual  information  is  changing  all  the  time  while  doing  mobile  collaborative 
 work.  Mobile  collaborative  applications  have  to  sense  it,  store  it  and  
appropriately  use  it.  Since  this  information  is  used  by  the  groupware  system  to  dynamically 
adapt its behavior, such information has to be available all the time and it 
has to be as complete as possible. Usually there are computing devices participating 
in the collaboration process which are not able to sense some context variables; however,
 they are able to use this information if another device provides it to them. 

Solution.  The  solution  to  this  problem  involves  the  creation  of  an  ad  hoc  context 
manager.  This  component  has  to  be  fully  distributed  and  it  must  store,  update  and 
monitor current status of the context. Mobile groupware applications will adapt their 
functionality based on that information to cope with the changes in the work scenario 
(e.g., a mobile worker gets isolated or networking support is not available anymore). 
For instance: 

(cid:131) 

(cid:131) 

(cid:131) 

If you want to provide a service which is dependent on the place where the 
user is located, then the context manager needs to implement a model of each 
place as a full-fledged object and assign a set of command objects with corresponding 
services to that object. 
If you want to adapt the application behavior according to different time intervals,
 then the context manager must use condition/action rules to support 
the behavioral adaptations. 
If you want to extend existing software to add context-aware behaviors, then 
the context manager must have a  functionality that wraps the corresponding 
class  with  an  object  which  delegates  the  request  to  the  component  implementing 
 the  adaptation  (e.g.  a  rule  object  or  rule  manager).  This  solution 
uses the Decorator pattern to unobtrusively add new code. 

It must be noted the context manager has to be carefully engineered in order to reduce 
the use of limited resources, such as battery, CPU, memory or network bandwidth. 
A  service-oriented  approach  can  be  useful  to  design  and  implement  this  component, 
because it deals with the heterogeneity of computing devices and resources shortage. 
Related Mobile Groupware Requirements. Variability of the context, use of hardware 
resources, and awareness of users’ reachability. 

4.3   Summary 

It is possible to draw a correspondence matrix considering the proposed patterns and 
the requirements for mobile collaboration presented in section 2 (Fig. 7). This matrix 
allows developers to select one or more design patterns in order to deal with a particular 
requirement. Furthermore, it is important to mention the proposed fully distributed  

 

 

 

Coordination Patterns to Support Mobile Collaboration 

263 

 
t
x
e

t

n
o
C
 
c
o
H
d
A

 

 
 
 

 
t

n
e
m
e
g
a
n
a
M

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
c
o
H
d
A

 

 
 
y
r
o

t
i
s
o
p
e
R
d
e
r
a
h
S

 

 
 
 
 
s
e
c
r
u
o
s
e
R
d
e
a
c

t

 

i
l

p
e
R

 
 

i

n
o
s
s
e
S

 
 

n
o

i
t

i

a
z
n
o
r
h
c
n
y
S

 
 
s
e
c
r
u
o
s
e
R
e
a
c

t

 

i
l

p
e
R

 
 
r
e
s
U
e

 

l
i

b
o
M

 
 

l

e
o
R

 
 

i

w
e
V
 
c
o
H
d
A

 

 
 

e
v
i
t

a
r
o
b
a

l
l

o
C
 
c
o
H
d
A

 

 
 
t

n
e
m
n
o
r
i
v
n
E
 
c
o
H
d
A

 

 

s
n
r
e
t
t
a
P

 
 
r
e
y
a
L
s
s
o
r
C

Requirements 

Autonomy 

Interoperability  

Shared information availability  

Variability of the work context  

Use of hardware resources  

Low coordination cost  

Awareness of users’ reachability  

Deployment ease  

Fig. 7. Correspondence matrix 

architecture  provides  autonomy  to  the  groupware  solutions.  Also,  the  separation  of 
design concerns in several layers provides flexibility and scalability. 

The proposed patterns system has been implemented on a middleware platform and 
a  variety  of  applications  are  currently  using  these  coordination  services  [21],  [22]. 
These  applications  include  mobile  collaborative  software  to  support  disaster  relief 
operations, to conduct inspections in construction sites and to manage exams in computer 
science courses [21], [23]. 

5   Conclusions and Further Work 

Mobile collaboration has brought the opportunity to support work activities in scenarios 
where workers have to be on the move to carry out a job. Several researchers have 
envisioned a positive impact on the productivity and the quality of work when users 
follow a mobile collaboration strategy [29], [27]. However, the features of these collaborative 
 activities  bring  new  challenges  to  groupware  system  designers.  Requirements,
 such as user autonomy, low coordination cost and high availability of shared 
resources, impose several constraints on the communication and coordination services 
required to support mobile collaboration. For example, no centralized components can 
be used because the users’ mobility can make these resources inaccessible.  

This paper presents a patterns system to support the design of coordination services 
required  by  mobile  collaborative  applications.  These  patterns  deal  with  most  of  the 
stated  requirements.  These  patterns  serve  as  educational  and  communicative  media 
for developers, students or researchers on how to design coordination mechanisms for 
mobile collaborative applications. They also foster the reuse of proven solutions. 

264 

A. Neyem, S.F. Ochoa, and J.A. Pino 

At  the  moment,  these  patterns  have  shown  to  be  useful  to  design  both,  mobile 
groupware applications and a middleware to support collaborative systems [21]. The 
reuse  of  these  designs  and  the  implementation  of  the  proposed  solutions  have  been 
quite simple. However, the authors have been involved in each one of these testing 
experiences. Therefore, future work is required to carry out evaluations with external 
groupware  developers  in  order  to  determine  the  real  contribution  of  this  proposal. 
Moreover, the patterns system should be extended to support devices that use mobile 
telephone systems. 

 

Acknowledgments.  This  work  was  partially  supported  by  Fondecyt  (Chile),  grants 
Nº: 11060467 and 1080352 and by MECESUP (Chile) Project Nº:UCH0109. Andrés 
Neyem’s  work  was  partially  supported  by  the  Scholarship  for  Thesis  Completion 
from Conicyt. 

References 

1.  Alarcon, R., Guerrero, L.A., Ochoa, S.F., Pino, J.A.: Analysis and Design of Mobile Collaborative 
 Applications  using  Contextual  Elements.  Computing  and  Informatics 25(6), 
469–496 (2006) 

2.  Aldunate, R., Larson, G., Nussbaum, M., Ochoa, S., Herrera, O.: Understanding the Role 
of Mobile Ad hoc Networks in Non-traditional Contexts. In: IFIP Int. Conf. on Mobile and 
Wireless Comm. Networks, pp. 199–215. Springer, Boston (2006) 

3.  Andriessen, J.H.E., Vartiainen, M.: Mobile virtual work: A new paradigm? Springer, Heidelberg 
(2006) 

4.  Arvola, M.: Interaction Design Patterns for Computers in Sociable Use. International Journal 
of Computer Applications in Technology 25(2/3), 128–139 (2006) 

5.  Avgeriou,  P.,  Zdun,  U.:  Architectural  Patterns  Revisited  -  A  Pattern  Language.  In:  10th 
European Conference on Pattern Languages of Programs, pp. 1–39. UKV Konstanz, Konstanz 
(2005) 

6.  Avgeriou,  P.,  Tandler, P.:  Architectural  Patterns  for  Collaborative  Applications.  International 
Journal of Computer Applications in Technology 25(2/3), 86–101 (2006) 

7.  Buschmann,  F.,  Meunier,  R.,  Rohnert,  H.,  Sommerlad,  P.,  Stal,  M.:  Pattern  orinented 

Software Architecture - A System of Patterns. John Wiley & Sons, Chichester (1996) 

8.  Churchill, E.F., Wakeford, N.: Framing mobile collaboration and mobile technologies. In: 
Brown, B., Green, N., Harper, R. (eds.) Wireless world: social and interactional implications 
of wireless technology, pp. 154–179. Springer, New York (2001) 

9.  Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers, J., Little, R., Nord, R., Stafford, J.: 
Documenting  Software  Architectures:  Views  and  Beyond.  Addison-Wesley,  Reading 
(2003) 

10.  Ellis, C.A., Gibbs, S., Rein, G.L.: Groupware: some issues and experiences. Communications 
of the ACM 43(1), 38–58 (1991) 

11.  González,  V.M.,  Tentori,  M.E.,  Morán,  E.B.,  Favela,  J.,  Martínez,  A.I.:  Understanding 
mobile  work  in  a  distributed  information  space:  implications  for  the  design  of  ubicomp 
technology.  In:  2nd  Latin  American  Conference  on  Human-Computer  Interaction,  
pp. 52–63. ACM Press, New York (2005) 

12.  Guerrero, L.A., Fuller, D.: A Pattern System for the Development of Collaborative Applications.
 Journal of Information and Software Technology 43(7), 457–467 (2001) 

 

Coordination Patterns to Support Mobile Collaboration 

265 

13.  Guerrero, L.A., Ochoa, S.F., Pino, J.A., Collazos, C.A.: Selecting Computing Devices to 

Support Mobile Collaboration. Group Decision and Negotiation 15(3), 243–271 (2006) 

14.  Jørstad, I., Dustdar, S., Van Thanh, D.: Service Oriented Architecture Framework for collaborative 
services. In: 14th IEEE International Workshops on Enabling Technologies: Infrastructure 
for Collaborative Enterprise, pp. 121–125. IEEE Press, New York (2005) 

15.  Kristoffersen, S., Ljungberg, F.: Mobility: From Stationary to Mobile Work. In: Braa, K., 
Sorensen, C., Dahlbom, B. (eds.) Planet Internet, pp. 137–156. Studentlitteratur, Sweden 
(2000) 

16.  Luff,  P.,  Heath,  C.:  Mobility  in  collaboration.  In:  ACM  Conference  on  ComputerSupported 
Cooperative Work, pp. 305–314. ACM Press, New York (1998) 

17.  Mascolo, C., Capra, L., Zachariadis, S., Emmerich, W.: XMIDDLE: A Data-Sharing Middleware 
for Mobile Computing. Journal on Personal and Wireless Communications 21(1), 
77–103 (2002) 

18.  Messeguer, R., Ochoa, S.F., Pino, J.A., Navarro, L., Neyem, A.: Communication and Coordination 
Patterns to Support Mobile Collaboration. In: 12th International Conference on 
Computer  Supported  Cooperative  Work  in  Design,  pp.  565–570.  IEEE  CS  Press,  New 
York (2008) 

19.  Neyem, A., Ochoa, S., Pino, J.: A Strategy to Share Documents in MANETs using Mobile 
Devices.  In:  8th  International  Conference  on  Advanced  Communication  Technology,  
pp. 1400–1404. IEEE CS Press, New York (2006) 

20.  Neyem,  A.,  Ochoa,  S.F.,  Pino,  J.A.:  Designing  Mobile  Shared  Workspaces  for  Loosely 
Coupled  Workgroups.  In:  Haake,  J.M.,  Ochoa,  S.F.,  Cechich,  A.  (eds.)  CRIWG  2007. 
LNCS, vol. 4715, pp. 173–190. Springer, Heidelberg (2007) 

21.  Neyem, A., Ochoa, S.F., Pino, J.A.: Integrating Service-Oriented Mobile Units to Support 
Collaboration in Ad-hoc Scenarios. Journal of Universal Computer Science 14(1), 88–122 
(2008) 

22.  Ochoa, S., Neyem, A., Pino, J., Borges, M.: Supporting Group Decision Making and Coordination 
in Urban Disasters Relief Efforts. Journal of Decision Systems 16(2), 143–172 
(2007) 

23.  Ochoa, S.F., Neyem,  A., Bravo, G., Ormeño, E.: MOCET:  A MObile Collaborative Examination 
 Tool.  In:  Smith,  J.M.,  Salvendy,  G.  (eds.)  HCI  2007.  LNCS,  vol. 4558,  
pp. 440–449. Springer, Heidelberg (2007) 

24.  Perry,  M.,  O’hara,  K.,  Sellen,  A.,  Brown,  B.,  Harper,  R.:  Dealing  with  mobility:  understanding 
 access  anytime,  anywhere.  ACM  Transactions  on  Computer-Human  Interaction 
8(4), 323–347 (2001) 

25.  Pinelle,  D.,  Gutwin,  C.:  A  Groupware  Design  Framework  for  Loosely  Coupled  Workgroups.
  In:  9th  European  Conference  on  Computer-Supported  Cooperative  Work,  
pp. 65–82. Springer, Netherlands (2005) 

26.  Pinelle, D., Gutwin, C.: Loose coupling and healthcare organizations: adoption issues for 
groupware deployments. Computer Supported Cooperative Work 15(5-6), 537–572 (2006) 
27.  Schaffers,  H.,  Brodt,  T.,  Pallot,  M.,  Prinz,  W.:  The  Future  Workplace  -  Perspectives  on 

Mobile and Collaborative Working. Telematica Instituut, The Netherlands (2006) 

28.  Schümmer,  T.,  Lukosch,  S.:  Patterns  for  Computer-Mediated  Interaction.  John  Wiley  & 

Sons, West Sussex (2007) 

29.  Tarasewich,  P.:  Designing  Mobile  Commerce  Applications.  Communications  of  the 

ACM 46(12), 57–60 (2003) 

30.  Wiberg,  M.,  Ljungberg, F.: Exploring  the  vision  of  anytime,  anywhere  in  the  context  of 
mobile  work. In: Malhotra, Y. (ed.) Knowledge Management and Virtual Organizations, 
pp. 157–169. Idea Group Publishing (2001) 

