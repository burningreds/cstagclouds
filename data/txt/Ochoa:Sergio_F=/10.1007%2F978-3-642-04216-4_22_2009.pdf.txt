Communication Patterns to Support Mobile 

Collaboration 

Andrés Neyem1, Sergio F. Ochoa2, and José A. Pino2 

1 Department of Computer Science, Pontificia Universidad Católica de Chile 

aneyem@ing.puc.cl 

2 Department of Computer Science, Universidad de Chile 

{sochoa,jpino}@dcc.uchile.cl 

Abstract. The mobility of the collaborators, the diverse technologies available 
to support them and the continuous change in the collaboration scenarios bring 
new  challenges  to  design,  implement,  and  reuse  communication  software  for 
these  complex  systems.  This  article  presents  a  design  patterns  system  to  help 
modeling the communication services required to support mobile collaboration. 
These patterns serve as educational media for developers, students or researchers 
on how to design communication services for mobile collaborative applications.
 The patterns also foster the reuse of proven solutions.  

Keywords: Communication patterns, mobile collaboration.  

1   Introduction 

Advances in mobile computing and wireless technologies are opening new possibilities 
to use them to support various collaborative activities. However, efforts to understand 
the implications that mobile work and mobile collaboration have on groupware 
design  are  still  a  research  subject  [5].  Mobile  groups  are  highly  varied  in  the  ways 
they organize work, in the physical dispersion of mobile workers, and in the styles of 
collaboration  [1].    Several  researchers  have  described  and  classified  these  mobility 
variants [6] and levels of coupling among mobile collaborators [10]. 

These research contributions show there is a wide variety of work scenarios where 
mobile  collaboration  needs  to  be  supported.  The  design  and  implementation  of  the 
groupware  solutions  for  those  scenarios  imply  several  requirements  and  challenges 
derived from the type of work to be supported and the features of the work and activity 
contexts [5]. Neyem et al. [8] presented a list of requirements to design the coordination 
services; however, that proposal does not include the communication support. 
Modeling  the  communication  support  is  always  an  important  part  of  the  groupware 
application  design,  because  the  coordination  and  collaboration  mechanisms  will  depend 
on it. 

In order to help design this application concern, this paper proposes a design patterns 
system. Next section describes those patterns. Section 3 discusses related work. 
Section 4 presents the conclusions and future work. 

L. Carriço, N. Baloian, and B. Fonseca (Eds.): CRIWG 2009, LNCS 5784, pp. 270–277, 2009. 
© Springer-Verlag Berlin Heidelberg 2009 

 

Communication Patterns to Support Mobile Collaboration 

271 

2   Communication Patterns System 

A patterns system is a network of interconnected patterns which may help to define 
sequences  of  structure-preserving  transformations.  This  section  presents  a  patterns 
system  to  deal  with  communication  services  for  mobile  groupware.  The  particular 
patterns definition and the relations among them can ease the designers’ work during 
the design process [12]. 

The  communication 
patterns  system  shown 
in Fig. 1 focuses on the 
provision  of  services 
for  message  exchange 
among  mobile  work-
ers’  applications.  Based 
on  that,  a  mobile  collaborative 
 application 
can 
send  messages 
(notifications, 
commands,
  or  events)  to 
other users in the wireless 
 network.  Next 
sections  briefly  describe 

these  patterns 
following  the  nomenclature 
 proposed  in  [12].  An  extended  version  of  the  system  can  be  found  
in [9]. 

Fig. 1. Communication Patterns System for Mobile Groupware 
Applications 

2.1   Ad Hoc Messaging 

Context. A mobile groupware environment consists of several applications connected 
via a wireless network. These applications need to interact with each other, exchange 
data or access each other’s services in order to coordinate the work performed by a 
group of mobile users (collaborators). 

Problem.  Mobile  nodes  of  the  wireless  network  have  frequent  disconnections  and 
variable transmission rates. Therefore, a communication infrastructure enabling applications 
to communicate and coordinate on-demand (loosely-coupled) is needed. 

Solution. The solution is based on an ad hoc messaging system. A messaging system 
move  messages  from one  mobile node to another one,  since nodes and the  wireless 
networks connecting them are inherently unreliable. A messaging system overcomes 
these limitations by repeatedly trying to transmit the message until it succeeds. Under 
ideal circumstances, the message is successfully transmitted on the first try, but circumstances 
are often not ideal. On the other hand, it is important to consider the messaging 
 system  interconnects  several  existing  mobile  groupware  systems,  and  thus  it 
must be able to communicate, share data and operate in a unified manner in response 
to a set of common requests.  

272 

A. Neyem, S.F. Ochoa, and J.A. Pino 

2.2   Messaging Channel 

Context.  A  mobile  groupware  environment  keeps  separate  the  groups  of  mobile  
applications  needing  to  communicate  among  them  by  using  an  ad  hoc  messaging 
system. Thus, the ad hoc messaging system keeps a set of connections enabling applications 
to communicate by transmitting information in predictable ways.  
Problem. The ad hoc messaging system might proactively deliver the message, or it 
might hold the message until the recipient is able to retrieve it. Therefore, this system 
must provide a means to connect a set of clients and service providers, which communicate 
by sending and receiving messages.  

Solution. Structuring the solution based on messaging channels. Messaging Channels 
are  logical  pathways  to  transport  messages  through  message-based  communication. 
Each  channel  endpoint  has  a  sender/receiver  application.  A  sender  application  is  a 
program sending a  message by  writing the  message to a channel, and a receiver retrieves 
a  message from a channel. Two typical  messaging  channels  need to be sup-
ported:  a)  Point-to-Point  Channel,  ensures  only  one  consumer  consumes  any  sent 
message; and b) Broadcast/multicast Channel, describes a single input channel splitting 
into multiple output channels - one for each receiver.  

On the other hand, when an application is writing a custom transport, it must decide 
 which  message  exchange  patterns  are  required  for  each  message  delivery.  The 
application can use three message exchange patterns when it sends a message: a) One-
way: a client sends a message using a fire and forget exchange; b) Request-Response: 
a message is sent, and a reply is received; and c) Dual: the sender and receiver send 
messages to each other, using one-way or request-response messaging.  

2.3   Ad Hoc Messages 

Context. Mobile applications use a messaging channel to communicate among them. 
A message channel is the pipe transporting messages between a sender and a receiver.  

Problem. Mobile groupware applications need to communicate with each other in a 
unified and on-demand  manner. Therefore, some  way enabling  transmission of data 
units from one application to another one in a loosely coupled fashioned is needed.  

Solution. Any data transmitted via an ad hoc messaging system,  must be converted 
into one or more messages to be sent through messaging channels. The message itself 
is simply a data structure (such as a record or an object) consisting of two basic parts: 
a) Header: information describing the data being transmitted and to be used by the ad 
hoc messaging system; and b) Body: the data being transmitted.  

The sender application can send three types of messages: a) Command Message: to 
control  another  application  or  a  series  of  other  applications;  b)  Event  Message:  for 
reliable,  asynchronous  event  notification  between  applications;  and  c)  RequestResponse 
Message: it is used when a client needs a reply from a provider. 

2.4   Message Router 

Context.  Ad  hoc  mobile  networks  are  not  supported  by  infrastructure  (i.e.  access 
points). The nodes in the network use wireless communication and a dynamic topolCommunication 
Patterns to Support Mobile Collaboration 

273 

ogy for data dissemination and gathering. These features let ad hoc networks be useful 
to support on-demand collaboration between mobile workers.  

Problem.  The  current  wireless  communication  norms  supporting  mobility  have  a 
limited communication threshold. For example, the Wi-Fi (IEEE 802.11x) threshold 
is about 200 meters in open areas and 20 meters in built areas. Most groupware solutions 
need to extend the communication threshold as much as possible to increase the 
interaction scope; hence, routing mechanisms are required to allow it. 

Solution.  The  solution  involves  the  provision  of  a  distributed  message  router  (it  is 
present in each mobile unit) which consumes messages from various message channels,
 it splits them in packets and then it routes them to the receiver. On the other side, 
the recipient router rebuilds the  message based on the received packets. The packet 
delivery service should offer an intermediate solution between the routing and flooding 
techniques in order to achieve high reliability with moderate performance degradation.
 The routing algorithm can follow a gossip-based approach, where each node 
forwards a message with some probability, reducing the overhead of the routing protocols.
  This  algorithm  exhibits  bimodal  behavior  in  sufficiently  large  networks:  in 
some executions, the gossip dies out quickly and hardly any node gets the message; in 
the remaining executions, a substantial percentage of the nodes get the message. 

2.5   Message Mediator 

Context. Any mobile collaborative application consists of a number of services that 
provide  functionalities  supporting  the  collaboration  process  (e.g.  data  synchronization,
  peers  discovery  or  context  sensing).  These  services  are  divided  among  several 
computing devices exposing their logic and computation.   

Problem. The services  used  as support of the collaboration process are designed to 
carry  out  a  particular  task.  However,  if  additional  functionality  is  included  in  these 
services, they become complex, difficult to coordinate, maintain and evolve.  

Solution. The solution proposes a separation of concerns  of the  services supporting 
the collaboration process. The idea is to use a message mediator as an intermediary 
between the messaging channel and the service providers. The mediator is a component 
consuming messages from a channel and coordinating and distributing them to 
the corresponding service providers, and vice versa. The Service Provider is a component 
receiving service requests from the mediator, processing them, and returning 
the corresponding results. Therefore, when a message mediator receives a message, it 
identifies  the  corresponding  service  provider  and  sends  the  message  to  that  component.
 The service provider could be dynamically created by the mediator or could be 
selected from a pool of available components. Each provider can run in its own thread 
in order to process messages concurrently.  

2.6   Message Proxy 
Context. Mobile collaborative applications need to interact with each other, exchanging 
data or accessing remote  services  in order to allow collaboration among  mobile 
workers. When developing the client-side applications, clients need to access remote 
services using remote invocation methods.  

274 

A. Neyem, S.F. Ochoa, and J.A. Pino 

Problem. Accessing the services of a remote component requires using a specific data 
format and networking protocol. Hard-coding the format and protocol directly into the 
client application makes it difficult to maintain, evolve and reuse.  

Solution. The solution proposes to use a message proxy in the client’s address space, 
which  is  in  charge  of  managing  the  invocations  to  remote  services.  The  message 
proxy provides a service interface allowing groupware applications to treat the remote 
services  as  local  ones.  The  proxy  maps  the  client  invocations  to  specific  message 
formats and protocols, which are used to send these invocations across the network. 
Thus, the proxy transforms the concrete service invocation and its parameters, into a 
particular message which is understandable by the network. The proxy uses the regular 
mechanism to send the message to the remote service provider. Then, the message 
proxy  transforms  the  results  returned  by  the  remote  provider,  in  order  to  deliver  a 
piece of data that is understandable for the client. The proxy is a no-blocking component;
 therefore, this resource will not easily become a bottleneck.  

2.7   Message Endpoint 

Context. The mobile groupware application and the messaging system are two separate 
software pieces. The application provides functionality for the users, whereas the 
messaging  system  manages  the  messaging  policies  implementing  communication 
processes. Whenever delivering a service request, the messaging channel, the message 
proxy and mediator must identify the next node in the communication chain. 

Problem.  Univocally  identifying  the  service  provider  and  consumer  in  a  mobile  ad 
hoc network is not enough to support messages delivery. Identification of a number 
interim components participating in the communication chain (e.g., the IP address of 
the mobile devices, and the user/service/mobile application ID) is also needed.  

Solution.  The  interacting  services  must  connect  to  the  messaging  channel  using  a 
specialized  component  named  message  endpoints.  These  components  represent  post 
addresses  where  messages  can  be  delivered.  The  information  of  both  endpoints 
(sender and receiver) is part of the message. Depending on the communication stage, 
the component processing the message will be able to extract the information related 
to the endpoint to determine the next one in the communication chain. When a client 
has data to communicate, it passes this data to its associated message endpoint, which 
first converts the data into a message understandable by the messaging system, and it 
adds  the  information  related  to  the  corresponding  endpoints.  Then,  it  submits  the 
message to the messaging system, which analyzes the endpoint information stored in 
the message in order to identify the destination node. Then, the message mediator of 
the destination node analyzes the endpoint information to identify the corresponding 
service provider. Something similar occurs when the results are sent back to the service 
requester. 

2.8   Communication Contract 

Context.  Mobile  groupware  applications  should  be  able  to  communicate  with  each 
other,  even  if  they  run  in  heterogeneous  remote  computing  devices.  Therefore,  the 

 

Communication Patterns to Support Mobile Collaboration 

275 

messaging between those components must be compatible, or at least understandable 
by their respective runtime environments. 

Problem.  It  is  inconvenient  to  pre-establish  the  rules  governing  the  interactions 
among mobile nodes in mobile ad hoc collaboration. This is so because the interaction 
scenario is highly dynamic, and the users are not sure about the features of the next 
interaction process. Interoperability, flexibility and scalability of the solution depend 
on the way this issue is addressed. 

Solution.  The  solution  is  to  use  contracts  to  regulate  the  communication  between  a 
service  provider  and  a  consumer.  Contracts  are  agreements  made  by  two  parts  and 
related to a particular issue. These agreements allow the applications to have a common 
 understanding on the communication protocols, operations, and  message structures 
exchanged between two nodes. A contract is typically defined on the fly  and it 
is the result of a negotiation process. Thus, applications become flexible and interoperable 
 when  using  contracts.  Four  contract  types  have  been  identified:  a)  Protocol 
Contract  specifies  transport  protocols,  message  encodings,  security  options,  and 
transactional capabilities; b) Service Contract describes the operations a mobile application 
 can  perform  when  interacting  with  other  applications;  c)  Data  Contract  describes 
the structure of the data that will be exchanged between the applications; and 
d) Message Contract describes the structure of the messages to be exchanged.  

2.9   Sensemaking Ad Hoc Context 

Context. By context we mean the variables which can influence the behavior of mobile 
 applications;  it  includes  internal  resources  (e.g.  memory,  CPU  speed  or  screen 
size) and external resources (e.g. bandwidth, and signal stability) of mobile devices. 
Both types of variables are relevant to provide support for coordination processes.  

Problem. Contextual information is changing all the time while doing mobile collaborative 
work. Mobile collaborative applications have to sense it, store it and appropriately 
use it. Since this information is used by the groupware system to dynamically adapt its 
behavior, such information has to be available all the time and it has to be as complete 
as possible.  

Solution. The solution to this problem is the creation of an ad hoc context manager. 
This  component  has  to  be  fully  distributed  and  it  must  store,  update  and  monitor 
status of the context variables. Such information should be used by the coordination 
layer  and  then  stored  in  the  public  (shared)  space,  because  it  could  be  shared  with 
other  mobile  nodes,  and  the  updates  of  that  information  should  be  incremental  in 
order to avoid losing other contextual information.  

Mobile groupware applications will adapt their functionality based on that information 
to cope with the changes in the work scenario (e.g., a mobile worker gets isolated 
or networking support is not  available anymore). It  must be noted the context  manager 
 has  to  be  carefully  engineered  in  order  to  reduce  the  use  of  limited  resources, 
such  as  battery,  CPU,  memory  or  network  bandwidth.  A  service-oriented  approach 
can be useful to design and implement this component, because it deals with the heterogeneity 
of computing devices and resources shortage. 

276 

A. Neyem, S.F. Ochoa, and J.A. Pino 

2.10   Patterns System Summary 

A study presented by Neyem et al. [8] shows a list of requirements to consider during 
the  design  of  mobile  collaborative  applications:  autonomy,  interoperability,  use  of 
hardware  resources,  low  coordination  cost,  awareness  of  users’  reachability  and 
deployment  ease.  Thus,  it  is 
possible  to  draw  a  correspondence 
 matrix  considering  the 
proposed  patterns  and  these 
requirements  (Fig.  2).  The 
matrix  allows  developers  to 
select  one  or  more  design 
patterns to deal with a particular 
requirement.  

The  proposed  patterns  system 
 has been implemented on 
a  middleware  platform  and  a 
variety  of  applications  are 
currently  using  these  coordi-
[9].  These 
nation  services 
applications 
include  mobile 
collaborative  software  to  support 
disaster relief operations, to conduct inspections in construction sites and to manage 
exams in computer science courses [9]. 

Fig. 2. Correspondence matrix 

3   Related Work 

There  are  several  experiences  reporting  the  design  and  use  of  collaborative  mobile 
applications  [3],  [5],  [12],  however  they  do  not  describe  the  strategies  used  to  deal 
with  the  typical  communication  services  in  mobile  groupware.  A  similar  situation 
occurs  with  the  middleware  and  platforms  supporting  distributed  work  [7],  [11]. 
Therefore these potential design solutions cannot be reused in future applications.     

Some researchers have proposed communication for fixed networks [2], [4]. However,
 the contextual variables influencing the collaboration scenario (e.g. communication 
 instability  and  low  feasibility  to  use  servers)  and  the  mobile  work  (e.g.  use  of 
context-aware  services  and  support  for  ad-hoc  coordination  processes)  make  such 
solutions unsuitable to support mobile collaboration.  

4   Conclusions and Further Work 

Developing  mobile  groupware  applications  to  support  collaborative  work  is  a  challenging 
task. Since this is a recent research area, software must overcome challenges 
in  technical  implementation,  collaboration  support  and  users’  adoption.  This  paper 
presents a patterns system to support the design of communication services required 
by mobile collaborative applications. These patterns deal with most of the stated requirements.
 They also serve as educational and communicative media for developers, 

 

Communication Patterns to Support Mobile Collaboration 

277 

students  or  researchers  on  how  to  design  communication  mechanisms  for  mobile 
collaborative applications. They also foster the reuse of proven solutions. 

At  the  moment,  these  patterns  have  shown  to  be  useful  to  design  both,  mobile 
groupware  applications  and  a  middleware  to  support  collaborative  systems  [9].  The 
reuse  of  these  designs  has  been  quite  simple  for  the  authors  and  development  team 
members. However, persons outside the development team have not experienced the 
system yet. Therefore, future work is required to carry out evaluations with external 
groupware developers in order to determine the real contribution of this proposal.  

 

Acknowledgments.  This  work  was  partially  supported  by  Fondecyt  (Chile),  grants 
Nº: 11060467 and 1080352 and LACCIR grant Nº R0308LAC004.  

References 

1.  Andriessen, J.H.E., Vartiainen, M.: Mobile virtual work: A new paradigm? Springer, Heidelberg 
(2006) 

2.  Avgeriou, P., Tandler, P.: Architectural Patterns for Collaborative Applications. Int. J. of 

Computer Applications in Technology 25(2/3), 86–101 (2006) 

3.  Baloian, N., Zurita, G., Antunes, P., Baytelman, F.: A Flexible, Lightweight Middleware 
Supporting  the  Development  of  Distributed  Applications  across  Platforms.  In:  Proc.  of 
CSCWD 2007, pp. 92–97. IEEE CS Press, Australia (2007) 

4.  Guerrero, L.A., Fuller, D.: A Pattern System for the Development of Collaborative Applications.
 J. of Information and Software Technology 43(7), 457–467 (2001) 

5.  Herskovic,  V.,  Ochoa,  S.F.,  Pino,  J.A.:  Modeling  Groupware  for  Mobile  Collaborative 

Work. In: 13th CSCWD Int. Conf., pp. 384–389. IEEE CS Press, Chile (2009) 

6.  Kristoffersen, S., Ljungberg, F.: Mobility: From Stationary to Mobile Work. In: Braa, K., 
Sorensen,  C.,  Dahlbom,  B.  (eds.)  Planet  Internet,  pp.  137–156.  Planet  Internet,  Lund 
(2000) 

7.  Mascolo, C., Capra, L., Zachariadis, S., Emmerich, W.: XMIDDLE: A Data-Sharing Middleware 
for Mobile Computing. J. on Pers. & Wireless Comm. 21(1), 77–103 (2002) 

8.  Neyem, A., Ochoa, S.F., Pino, J.A.: Coordination Patterns to Support Mobile Collaboration.
  In:  Briggs,  R.O.,  Antunes,  P.,  de  Vreede,  G.-J.,  Read,  A.S.  (eds.)  CRIWG  2008. 
LNCS, vol. 5411, pp. 248–265. Springer, Heidelberg (2008) 

9.  Neyem, A.: A Framework for Supporting Development of Groupware Systems for Mobile 

Communication Infrastructures. Ph.D. Thesis, Universidad de Chile (November 2008) 

10.  Pinelle,  D.,  Gutwin,  C.:  A  Groupware  Design  Framework  for  Loosely  Coupled  Workgroups.
 In: 9th ECSCW Conference, pp. 65–82 (2005) 

11.  Russello, G., Chaudron, M., van Steen, M.: An experimental evaluation of self-managing 

availability in shared data spaces. Sc. of Comp. Programming 64(2), 246–262 (2007) 

12.  Schümmer,  T.,  Lukosch,  S.:  Patterns  for  Computer-Mediated  Interaction.  John  Wiley  & 

Sons, West Sussex (2007) 

