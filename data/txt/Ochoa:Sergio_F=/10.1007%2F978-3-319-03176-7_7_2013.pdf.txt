Context-Aware Self-adaptations: From

Requirements Speciﬁcation to Code Generation

Tom´as Ruiz-L´opez1, Carlos Rodr´ıguez-Dom´ınguez1, Mar´ıa Jos´e Rodr´ıguez1,

Sergio F. Ochoa2, and Jos´e Luis Garrido1

1 Department of Software Engineering, University of Granada
Periodista Daniel Saucedo Aranda s/n, 18.071 Granada Spain
{tomruiz,carlosrodriguez,mjfortiz,jgarrido}@ugr.es
2 Department of Computer Science, University of Chile

sochoa@dcc.uchile.cl

Abstract. Embedding context-aware self-adaptation mechanisms in pervasive 
systems is key to improve their acceptance by the users. These
mechanisms involve a precise deﬁnition of the software structures that
enable adding, removing or replacing components of the system to perform 
the adaptations. Typically the deﬁnition of these mechanisms is a
complex and time consuming task. This paper presents a model-driven
engineering approach to generate these context-aware self-adaptation
mechanisms. The use of models transformations to deﬁne these mechanisms 
helps to reduce the complexity and eﬀort required to deﬁne them.
In order to illustrate the usefulness of the proposed approach, this paper
reports its application to the development of a context-aware notiﬁcation
service.

Keywords: context-awareness, self-adaptation, model-driven engineering,
 software engineering.

1

Introduction

Context-awareness is a key feature of pervasive systems, which allows them to
sense, reason and react to environmental changes (i.e. context changes). From
a software engineering point of view, it oftentimes involves the self-adaptation
of the system components (e.g. adding, removing or replacing services), in order
to address the new situation and consequently to fulﬁll the speciﬁc goals of the
system.

Although there is an extensive research work on context-awareness to support 
the development of pervasive systems [14], there are no clear guidelines
about how to design (structure and behavior) pervasive systems guaranteeing
their context adaptation capability. This situation put developers of pervasive
systems in an uncomfortable position, since they have to address a complex and
transversal design feature (i.e. the context-aware self-adaptation capability) using 
ad hoc solutions. The literature reports that employ ad hoc solutions usually
increase the development eﬀort and complexity, and this reduces the project success 
rate. Moreover, the technological evolution aﬀecting these systems and the

G. Urzaiz et al. (Eds.): UCAmI 2013, LNCS 8276, pp. 46–53, 2013.
c(cid:2) Springer International Publishing Switzerland 2013

Context-Aware Self-adaptations: From Requirements To Code

47

Fig. 1. Diﬀerent context situations where the notiﬁcation service makes use of the
appropriate mechanism for delivering information

heterogeneity of the devices involved on these solutions [10], demands counting
on design guidelines and models to embrace diﬀerent platform-speciﬁc implementations,
 with the minimum impact for developers; i.e., the development process
of pervasive systems should ideally be done in an automatic or semi-automatic
way.

This paper presents a model-driven engineering (MDE) approach to support
the development of pervasive systems. The proposal stems from the combination
of two engineering methods, REUBI [10] and SCUBI [11], which were intended
to address respectively the requirements speciﬁcation and the design phase of
this kind of systems. The proposed approach leads to improve the development
process using model transformation techniques to automatically derive the speciﬁc 
design models, from the requirements speciﬁcation (i.e. requirement model)
of a pervasive system. Then, the source code of the application is automatically
generated applying transformations to the design models. The aim of this proposal 
is to help developers to specify the system adaptations at a high level
of abstraction and, after applying the proposed transformations, derive the appropriate 
structure and behavior of the system at design and implementation
levels.

The rest of this paper is structured as follows. Section 2 describes the proposed 
approach, explaining how a model-driven strategy is applied to generate
a context-aware self-adaptive system. Section 3 indicates the technology used
to implement the models and the transformations. Section 4 presents the related 
work. Finally, the main results from this approach are summarized and
the future work is outlined in Section 5.

2 Context-Aware Self-adaptations in Pervasive Systems

This section introduces the proposed development approach, which is complementary 
to the use of a regular software process. The usefulness of this approach
is illustrated through its application in the development of a context-aware notiﬁcation 
service.

As depicted in Figure 1, this service provides notiﬁcations to users using
diﬀerent mechanisms; for instance, when the user is watching TV, notiﬁcations

48

T. Ruiz-L´opez et al.

are shown on the screen; when s/he is doing the housework, notiﬁcations are
delivered using a voice synthesizer; and when the user is sleeping, the service does
not deliver notiﬁcations not to disturb the user. In the following subsections, the
requirements of this system are modeled following the REUBI notation [10], and
also the corresponding transformations used to automatically obtain the system
design and code are presented.

2.1 Requirements Speciﬁcation

Several mechanisms can be used to deliver notiﬁcations to a user, however their
suitability depends on the user context. Therefore the notiﬁcation mechanism
to be used in the system should be carefully chosen in order to maximize the
user acceptance. This is a well-known problem that can be solved applying the
Context-sensitive I/O pattern [12]. This pattern states that each input/output
mechanism that is going to be embedded into a service, is related to the context
situations where this service will be used.

Fig. 2. Notiﬁcation service requirements in REUBI notation

Thus, as depicted in Figure 2, the three notiﬁcation mechanisms (i.e., displaying 
a graphic on the screen, playing a synthesized voice, and silencing the
notiﬁcations) were considered to reach such a goal. Each mechanism will be
used in a particular situation; e.g. when the user is watching TV, doing housework 
or sleeping, respectively. These situations need to be characterized through
their attributes (context variables) in order to distinguish changes among them.
This requirements speciﬁcation is a model that represents the context-aware
notiﬁcation service at a high abstraction level.

2.2 Transforming Requirements into Design

Once the requirements have been modeled, the ﬁrst model transformation is
applied. In order to deﬁne these transformations, a metamodel-based approach
has been followed [2]. This approach relates elements between the source (i.e.,
requirements) and target (i.e., design) metamodels in order to describe the transformation 
to be performed. Table 1 describes the correspondences between the

Context-Aware Self-adaptations: From Requirements To Code

49

Table 1. Correspondence between REUBI and SCUBI elements in the transformations
between models

Source element

Target Element

Description

Goal

Functional Interface

Manager Component

Control Component

Operationalization Component

Context Situation

Context Consumer

Adaptation Rules

Adaptation Component

It captures the abstract functionality
that enables the goal achivement. In the
notiﬁcation service, it contains methods
to perform the delivery of notiﬁcations.

It is in charge of forwarding the requests
to an appropriate mechanism in order
to fulﬁll a goal. It acts as a proxy between 
the service consumers and the components 
that implement the notiﬁcation
strategies.

It is in charge of ﬁne-tuning the behavior
of the manager component. It indicates
the manager which of the notiﬁcation alternatives 
should be applied at a given
moment.

It implements the actual behavior of the
abstract functionality to fulﬁll a goal.
In the example, each of the three alternatives 
correspond to a component that
provide notiﬁcations in a diﬀerent way.

It is a component that listens to the relevant 
events that can trigger an adaptation.


It contains information about the conditions 
where an adaptation should occur,
and which are the components that must
change.

It contains the adaptation rules and runs
the reasoning procedure to determine if
the service adaptation must be applied
or not.

elements in the REUBI and SCUBI metamodels, and also the rationale behind
these relationships.

Figure 3 depicts the results of applying this model transformation. In the
obtained design we can identify diﬀerent components, each one with speciﬁc
concerns. These components are responsible of responding to the requests, managing 
which one of them is in charge of responding and receiving the relevant
events, when the system triggers a self-adaptation process during runtime.

Fig. 3. Notiﬁcation service design in SCUBI notation

50

T. Ruiz-L´opez et al.

It is important to note that the modiﬁcation of the requirement model only
aﬀects to certain parts of the design model. Thus, if new notiﬁcation mechanisms
are introduced, the system design is able to admit them as new components
that implement the desired functionality. Similarly, if new context situations are
introduced, or the existing ones are modiﬁed, only the components dealing with
context sensing and the adaptation rules are subject to changes. Therefore, the
resulting system design can be modiﬁed with an almost minimal eﬀort.

2.3 Generating Code from the Design

In order to obtain an implementation of the notiﬁcation service, a code generation 
strategy has been devised. The strategy considers mapping each element of
the design metamodel, to a component template that contains the source code
that implements such an element. Multiple template ﬁles can be created for different 
programming languages. Also, diﬀerent ﬁle formats can be used to store
the adaptation rules.

Figure 4 depicts the code generated, based on the described template-based
approach, for a particular component and also for the interface it provides. These
templates are ﬁlled with data from each entity, such as their name, method
signatures, attributes and (in some cases) methods to instantiate and manage
them.

Fig. 4. Code generation example for a component and its interface

Fig. 5. Example of a runtime self-adaptation process

Context-Aware Self-adaptations: From Requirements To Code

51

The generated code has been devised to perform a runtime adaptation process
as depicted in Figure 5. For instance, if the user sits to watch TV, an event is
triggered notifying the system that TV is on. The context listener receives this
event and, since it is interesting to the notiﬁcation service, decides to trigger an
adaptation process. This event triggers the execution of the rule corresponding
to the situation watching TV. Thus, the adaptation component sends a message
to the selector telling it to apply the corresponding action to the situation.
As the result of the adaptation process, the selector sends a message to the
notiﬁcation manager setting the graphic notiﬁcation component as the result of
the adaptation process.

3

Implementation Aspects of the Proposal

In order to test the proposal, it has been implemented using the model transformation 
facilities provided by diﬀerent Eclipse plugins. The metamodels have
been described using the Eclipse Modeling Framework (EMF). Models conform
to them are described in an XMI ﬁle, using a textual notation.

The Atlas Transformation Language (ATL) has been used to describe the
model transformations. This language aims to follow the Query-View-Transformation 
(QVT)[8] standard. It provides mechanisms to specify declarative rules,
but also provides mechanisms to incorporate imperative blocks in some transformations.
 The ATL ﬁle uses the metamodels described in EMF and deﬁnes the
correspondence between their elements. Then, the ATL ﬁle is provided with the
source model in XMI format as input, and outputs another XMI ﬁle as a result.
Regarding the code generation, the Acceleo plugin has been chosen. It follows
the Model to Text (MOFM2T)[7] standard, consisting of the deﬁnition of template 
ﬁles which are ﬁlled with information from an XMI ﬁle. In this case, we
have created templates for code generation in the Java programming language.
Also, in order to store the adaptation rules, an XML ﬁle is generated.

The process is started with an input requirements model that is created conforming 
the REUBI metamodel. Then, an ATL transformation is performed and,
as a result, a design model conforming the SCUBI metamodel is generated. Finally,
 this model is used as input for the Acceleo plugin and diﬀerent Java ﬁles
are generated with the resulting code1.

4 Related Work

Several research works that have applied the principles of model-driven engineering 
(MDE) applied to the development of pervasive system can be found
in the bibliography. Some of them are focused on speciﬁc aspects of the development.
 For instance, Cirilo et al. [1] present an approach to provide transformations 
oriented to interface adaptations based on context changes. Similarly,

1 For the sake of clarity and conciseness, implementation details have been ommitted
from the paper, but all the ﬁles can be found in:
http://www.ugr.es/∼tomruiz/MDAContext.zip

52

T. Ruiz-L´opez et al.

MDE techniques have been applied to hide the management of low-level components 
to developers, when they have to use wireless sensor networks [9] to
implement pervasive systems. Harrington et al. [3] provide a MDE approach
focused on planning and optimization algorithms for pervasive environments.
Although these approaches are useful, they are not general. Therefore they are
not reusable in diﬀerent development contexts.

On the other hand, Lu et al. [5] present a formal methodology, based on Petri
Nets, to systematically assess the design of context-aware systems. However, this
work does not provide guidelines to implement the system once it is formally
modeled.

There are some other proposals that try to provide wide perspective of the
pervasive systems design. Seridi et al. [13] provide a metamodel and a tool for
context speciﬁcation. Similarly, Serral et al. [14] provide mechanisms to represent 
and manage the context information. They also provide a code generation
mechanism to obtain an implementation of the system. Their focus is on context
management, rather than in how the software should be structured to ease the
self-adaptation process.

Finally, the most similar approach to the presented proposal can be found
in [4]. A component-based design method is applied to perform self-adaptations
based on context changes. However, our proposal aims to raise the abstraction
level and it considers the speciﬁcation of the self-adaptations at the requirements
level.

5 Conclusions and Future Work

This paper proposes and describes a complete methodological approach to support 
the development of pervasive systems, especially focused on addressing
context-aware self-adaptations. The proposal follows a MDE approach to: (1)
derive a system design that meets speciﬁc requirements, and (2) generate code
that implements such a design. The usefulness of the proposed approach has been
illustrated through the development of a context-aware notiﬁcation service.

The proposal aims to raise the abstraction level in which it is possible to
specify the self-adaptations of a pervasive system. In the proposed approach
these adaptations are speciﬁed at the requirements level, and then they are
transformed into design and code using automatic models transformations. This
strategy speeds up the development process, since the software engineers do not
need to focus on certain aspects that can be (semi-)automatically addressed. It
also provides more reliable software, since this task is automatized. The methodology 
needs to be validated and applied to some more projects in order to know
which are its strengths and limitations.

The next steps also consider developing a graphical modeling tool that helps
developers to implement requirements models, and understand the design models
obtained after applying the transformations. Moreover, more transformations
between elements will be explored in order to address more complex situations.

Context-Aware Self-adaptations: From Requirements To Code

53

Acknowledgements. This research work is funded by the Spanish Ministry
of Economy and Competitiveness through the project TIN2012-38600, the Innovation 
Oﬃce from the Andalusian Government through project TIN-6600,
and The Spanish Ministry of Education, Culture and Sports through the FPU
Scholarship.

References

1. Cirilo, C.E., do Prado, A.F., de Souza, W.L., Zaina, L.A.: Model driven RichUbi:
a model driven process for building rich interfaces of context-sensitive ubiquitous
applications. In: Proceedings of the 28th ACM International Conference on Design
of Communication, pp. 207–214 (2010)

2. Czarnecki, K., Helsen, S.: Classiﬁcation of model transformation approaches. In:
Proceedings of the 2nd OOPSLA Workshop on Generative Techniques in the Context 
of the Model Driven Architecture, vol. 45(3), pp. 1–17 (2003)

3. Harrington, A., Cahill, V.: Model-driven engineering of planning and optimisation
algorithms for pervasive computing environments. Pervasive and Mobile Computing 
7(6), 705–726 (2011)

4. Hussein, M., Han, J., Colman, A.: An approach to model-based development of
context-aware adaptive systems. In: IEEE 35th Annual Conference Computer Software 
and Applications (COMPSAC), pp. 205–214 (2011)

5. Lu, T., Bao, J.: A Systematic Approach to Context Aware Service Design. Journal

of Computers 7(1), 207–217 (2012)

6. Object Management Group, Model Driven Architecture (2003),

http://www.omg.org/mda/

7. Object Management Group, MOF Model To Text Transformation (2008),

http://www.omg.org/spec/MOFM2T/

8. Object Management Group, Meta Object Facility

2.0 Query/View/

Transformation, QVT (2011), http://www.omg.org/spec/QVT/

9. Rodrigues, T., Dantas, P., Delicato, F.C., Pires, P.F., Miceli, C., Pirmez, L., Huang,
G., Zomaya, A.Y.: A Model-Based Approach for Building Ubiquitous Applications
Based on Wireless Sensor Network. In: S´enac, P., Ott, M., Seneviratne, A. (eds.)
MobiQuitous 2010. LNICST, vol. 73, pp. 350–352. Springer, Heidelberg (2012)

10. Ruiz-L´opez, T., Noguera, M., Rodr´ıguez, M.J., Garrido, J.L., Chung, L.: REUBI:
a Requirements Engineering Method for Ubiquitous Systems. Science of Computer
Programming (2012) (in press)

11. Ruiz-L´opez, T., Rodr´ıguez-Dom´ınguez, C., Noguera, M., Rodr´ıguez, M.J., Garrido,
J.L.: Towards a Component-based Design of Adaptive, Context-sensitive Services
for Ubiquitous Systems. In: Proceedings of the 8th Workshop on Artiﬁcial Intelligence 
Techniques for Ambient Intelligence (AITAmI 2013) (2013)

12. Ruiz-L´opez, T., Noguera, M., Rodr´ıguez, M.J., Garrido, J.L.: Requirements Systematization 
through Pattern Application in Ubiquitous Systems. In: Ambient
Intelligence-Software and Applications, pp. 17–24 (2013)

13. Seridi, H., Bouacha, I., Benselim, M.S.: Development of context-aware web services
using the MDA approach. International Journal of Web Science 1(3), 224–241
(2012)

14. Serral, E., Valderas, P., Pelechano, V.: Towards the model driven development of
context-aware pervasive systems. Pervasive and Mobile Computing 6(2), 254–280
(2010)

