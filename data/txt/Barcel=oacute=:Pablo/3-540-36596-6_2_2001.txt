Characterizing and Computing Semantically

Correct Answers from Databases with

Annotated Logic and Answer Sets

Pablo Barcel´o1, Leopoldo Bertossi2, and Loreto Bravo3

1 University of Toronto, Department of Computer Science, Toronto, Canada.

2 Carleton University, School of Computer Science, Ottawa, Canada.

pablo@cs.toronto.edu

3 Pontiﬁcia Universidad Catolica de Chile, Departamento de Ciencia de

bertossi@scs.carleton.ca

Computaci´on, Santiago, Chile. lbravo@ing.puc.cl

Abstract. A relational database may not satisfy certain integrity constraints 
(ICs) for several reasons. However most likely most of the information 
in it is still consistent with the ICs. The answers to queries
that are consistent with the ICs can be considered sematically correct
answers, and are characterized [2] as ordinary answers that can be obtained 
from every minimally repaired version of the database. In this paper
we address the problem of specifying those repaired versions as the minimal 
models of a theory written in Annotated Predicate Logic [27]. It is
also shown how to specify database repairs using disjunctive logic program 
with annotation arguments and a classical stable model semantics.
Those programs are then used to compute consistent answers to general
ﬁrst order queries. Both the annotated logic and the logic programming
approaches work for any set of universal and referential integrity constraints.
 Optimizations of the logic programs are also analyzed.

1 Introduction

In databases, integrity constraints (ICs) capture the semantics of the application
domain and help maintain the correspondence between that domain and its
model provided by the database when updates on the database are performed.
However, there are several reasons why a database may be or become inconsistent
wrt a given set of integrity constraints (ICs) [2]. This could happen due to the
materialized integration of several, possibly consistent data sources. We can also
reach such a situation when we need to impose certain, new semantic constraints
on legacy data. Another natural scenario is provided by a user who does not
have control on the database maintenance mechanisms and wants to query the
database through his/her own semantics of the database. Actually such a user
could be querying several data sources and needs to impose some semantics on
the combined information.

More generally speaking, we could think ICs on a database as constraints
on the answers to queries rather than on the information stored in the database

L. Bertossi et al. (Eds.): Semantics in Databases, LNCS 2582, pp. 7–33, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

8

P. Barcel´o, L. Bertossi, and L. Bravo

[32]. In this case, retrieving answers to queries that are consistent wrt the ICs
becomes a central issue in the development of DBMSs.

In consequence, in any of the scenarios above and others, we are in the
presence of an inconsistent database, where maybe a small portion of the information 
is incorrect wrt the intended semantics of the database; and as a an
important and natural problem we have to characterize and retrieve data that
is still correct wrt the ICs when queries are posed.

The notion of consistent answer to a ﬁrst order (FO) query was deﬁned in
[2], where also a computational mechanism for obtaining consistent answers was
presented. Intuitively speaking, a ground tuple ¯t to a ﬁrst order query Q(¯x) is
consistent in a, possibly inconsistent, relational database instance DB, if it is
an (ordinary) answer to Q(¯x) in every minimal repair of DB, that is in every
database instance over the same schema and domain that diﬀers from DB by a
minimal (under set inclusion) set of inserted or deleted tuples. In other words,
the consistent data in an inconsistent database is invariant under sensible restorations 
of the consistency of the database.

The mechanism presented in [2] has some limitations in terms of the ICs and
queries that can handle. Although most of the ICs found in database praxis are
covered by the positive cases in [2], the queries are restricted to conjunctions
of literals. In [4,6], a more general methodology based on logic programs with
a stable model semantics was introduced. There is a one to one correspondence
between the stable models of the logic programs and the database repairs. More
general queries could be considered, but ICs were restricted to be “binary”, i.e.
universal with at most two database literals (plus built-in formulas). A similar,
 independent approach to database repair based on logic programs was also
presented in [26].

The basic idea behind the logic programming based approach to consistent
query answering is that since we need to deal with all the repairs of a database,
we had better specify the class of the repairs. From a manageable logical speciﬁcation 
of this class diﬀerent reasoning tasks could be performed, in particular,
computation of consistent answers to queries.

Notice that a speciﬁcation of the class of database repairs must include information 
about (from) the database and the information contained in the ICs.
Since these two pieces of information may be mutually inconsistent, we need
a logic that does not collapse in the presence of contradictions. A non classical
logic, like Annotated Predicate Calculus (APC) [27], for which a classically inconsistent 
set of premises can still have a model, is a natural candidate. In [3], a new
declarative semantic framework was presented for studying the problem of query
answering in databases that are inconsistent with respect to universal integrity
constraints. This was done by embedding both the database instance and the
integrity constraints into a single theory written in APC, with an appropriate,
non classical truth-values lattice Latt.

In [3] it was shown that there is a one to one correspondence between some
minimal models of the annotated theory and the repairs of the inconsistent database 
for universal ICs. In this way, a non monotonic logical speciﬁcation of the

