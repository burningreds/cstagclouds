Semantic Acyclicity for Conjunctive Queries:

Approximations and Constraints

Pablo Barcel´o(B)

DCC, Center for Semantic Web Research, University of Chile, Santiago, Chile

pbarcelo@dcc.uchile.cl

Abstract. Evaluation of conjunctive queries (CQs) is NP-complete, but
becomes tractable for syntactically deﬁned fragments. One of the oldest
and most studied such fragments is the class of acyclic CQs. Here we
look at the problem of semantic acyclicity, i.e., given a CQ q, is there an
acyclic CQ q(cid:2)
that is equivalent to it? This notion is important in CQ
evaluation, as semantically acyclic CQs can be evaluated in polynomial
time. The notion of semantic acyclicity itself is decidable, with the same
complexity as the usual static analysis tasks for CQs, i.e., NP-complete.
Unfortunately, semantic acyclic is not general enough for practical
purposes, as only CQs whose core is acyclic belong to this class. In this
tutorial we present two approaches that have been developed to make the
notion more ﬂexible and take better advantage of the ideas that underlie
it. These are computing approximations and making use of semantic
information in the form of constraints. For approximations, we look at
the case when q is not semantically acyclic and explain how to ﬁnd and
evaluate those acyclic CQs q(cid:2)
that are as “close” as possible to q in
terms of containment. As for constraints, they enrich semantic acyclicity
since they can be applied on a CQ q to produce an acyclic reformulation
of it. We present results that establish the boundary of decidability for
semantic acyclicity under usual database constraints such as tuple and
equality-generating dependencies, and show their applicability in query
evaluation.

1 Extended Abstract

Query optimization is a fundamental database task that amounts to transforming 
a query into one that is arguably more eﬃcient to evaluate. The database
theory community has developed several principled methods for optimization
of conjunctive queries (CQs), many of which are based on static-analysis tasks
such as containment [1]. In a nutshell, such methods compute a minimal equivalent 
version of a CQ, where minimality refers to number of atoms. As argued
by Abiteboul, Hull, and Vianu [1], this provides a theoretical notion of “true
optimality” for the reformulation of a CQ, as opposed to practical considerations 
based on heuristics. For each CQ q the minimal equivalent CQ is its core
q(cid:2) [15]. Although the static analysis tasks that support CQ minimization are
NP-complete [9], this is not a major problem for real-life applications, as the
input (the CQ) is small.
c(cid:3) Springer-Verlag Berlin Heidelberg 2016
J. V¨a¨an¨anen et al. (Eds.): WoLLIC 2016, LNCS 9803, pp. 104–108, 2016.
DOI: 10.1007/978-3-662-52921-8 7

Semantic Acyclicity for Conjunctive Queries

105

An important shortcoming of the previous approach, however, is that there
is no theoretical guarantee that the minimized version of a CQ is in fact easier to
evaluate (recall that, in general, CQ evaluation is NP-complete [9]). We know,
on the other hand, quite a bit about classes of CQs which can be evaluated
eﬃciently. It is thus a natural problem to ask whether a CQ can be reformulated
as one in such tractable classes, and if so, what is the cost of computing such
reformulation. Following Abiteboul et al., this would provide us with a theoretical 
guarantee of “true eﬃciency” for those reformulations. Here we concentrate
on one of the oldest and most studied tractability conditions for CQs; namely,
acyclicity. It is known that acyclic CQs can be evaluated in linear time [19].
More formally, we study the following problem (we write q ≡ q(cid:2) to denote
that q and q(cid:2) are equivalent, i.e., they have the same output over every database):

PROBLEM : Semantic Acyclicity

INPUT :
QUESTION : Is there an acyclic CQ q(cid:2) s.t. q ≡ q(cid:2)?

A CQ q

Basic properties of semantic acyclicity, such as the complexity of (1) checking
whether a CQ is semantically acyclic, and (2) evaluating semantically acyclic
CQs, are by now well-understood. In particular:
1. It is known that a CQ q is semantically acyclic iﬀ its core q(cid:2) is acyclic (recall
that such q(cid:2) is the minimal equivalent CQ to q). It follows that checking
semantic acyclicity of CQs is NP-complete (see, e.g., [5,11]).

2. Regarding evaluation, semantically acyclic CQs can be evaluated eﬃciently

[10,11,14].

Item (1) tells us that if q is semantically acyclic, then the only reason why
q is not acyclic in the ﬁrst hand is because it has not been minimized. Therefore,
 semantic acyclicity is not really diﬀerent from usual minimization, which
severely restricts its applicability in practical scenarios. Two approaches have
been developed in the literature to enrich this notion and take better advantage
of its underlying ideas. These are computing approximations and make use of
semantic information in the form of constraints, as we explain next.

1.1 Approximations

When a CQ q is not semantically acyclic, it might be convenient to compute
an acyclic approximation of it. This corresponds to an acyclic CQ q(cid:2) such that
(1) q(cid:2) never returns false answers with respect to q, and (2) q(cid:2) is as “close” as
possible to q among all acyclic CQs that satisfy q. In order to satisfy (1), we
need q(cid:2) to be contained in q (denoted q(cid:2) ⊆ q), which means that the result of
q(cid:2) is contained in that of q over every database. To formalize (2), the following
deﬁnition is often used in the literature [4,5]:

there is no acyclic CQ q(cid:2)(cid:2)

such that q(cid:2) ⊂ q(cid:2)(cid:2) ⊆ q.

P. Barcel´o

106
That is, there is no acyclic CQ q(cid:2)(cid:2) that is closer to q than q(cid:2) with respect to the
partial order deﬁned by the containment relation ⊆.

We will present the following important properties of acyclic approximations

based on [4]:

– Approximations always exist: Every CQ q has an acyclic overapproximation.
Moreover, the set of all acyclic approximations of a CQ q can be computed in
exponential time.

– Evaluating approximations is ﬁxed-parameter tractable: In particular, computing 
the results of all approximations of q over a database D can be done in
time |D|· 2O(|q|). When D is large, this constitutes an important improvement
over the general cost of CQ evaluation, which is |D|O(|q|).
We also present an exponential lower bound on the number of acyclic approximations 
of CQs and establish DP-completeness of the problem of checking
whether q(cid:2) is an acyclic approximation of q.

1.2 Taking Advantage of Constraints

It is known that semantic information about the data, in the form of integrity
constraints, alleviates query optimization by reducing the space of possible reformulations.
 Here we concentrate on the two most important classes of database
constraints; namely, tuple-generating dependencies (tgds) and equality-generating
dependencies (egds).

Earlier, we deﬁned CQ equivalence over all databases. Adding constraints
yields a reﬁned notion of CQ equivalence, which holds over those databases that
satisfy a given set of constraints only. But ﬁnding a minimal equivalent CQ in
this context is notoriously more diﬃcult than before. This is because basic static
analysis tasks such as containment become undecidable when considered in full
generality. This motivated a long research program for ﬁnding larger “islands of
decidability” of such containment problem, based on syntactical restrictions on
constraints [2,6–8,16,17].

It is an easy observation that the presence of constraints enriches the notion
of semantic acyclicity. This is because constraints can be applied on CQs to
produce acyclic reformulations of them. We present basic properties of semantic
acyclicity in the presence of constraints based on recent results [3,13]. More in
particular, we study the following problems:

– Decidability: For which classes of tgds and egds is the problem of semantic
acyclicity decidable? In such cases, what is the computational complexity of
the problem?

– Evaluation: What is the computational cost of evaluating semantically acyclic

CQs under constraints?

Semantic Acyclicity Under tgds. We notice that having a decidable CQ containment 
problem is a necessary condition for semantic acyclicity to be decidable
under tgds. Surprisingly enough, it is not a suﬃcient condition. This means that,

Semantic Acyclicity for Conjunctive Queries

107

contrary to what one might expect, there are natural classes of tgds for which
CQ containment but not semantic acyclicity is decidable. In particular, this is
the case for the well-known class of full tgds (i.e., Datalog programs). In conclusion,
 we cannot directly export techniques from CQ containment to deal with
semantic acyclicity.

In view of the previous result, we concentrate on classes of tgds that (a) have a
decidable CQ containment problem, and (b) do not contain the class of full tgds.
These restrictions are satisﬁed by several expressive languages considered in the
literature. Such languages can be classiﬁed into three main families depending
on the techniques used for studying their containment problem: (i) guarded tgds
[6], which contain inclusion and linear dependencies, (ii) non-recursive [12], and
(iii) sticky sets of tgds [7]. We show that for all of them semantic acyclicity is
decidable; more in particular, it is (a) 2EXPTIME-complete for guarded tgds
(and NP-complete for a ﬁxed schema), and (b) in NEXPTIME for both nonrecursive 
and sticky sets of tgds (and again NP-complete if the schema is ﬁxed).
Semantic Acyclicity Under egds. We show that semantic acyclicity under
the important class of egds deﬁned by unary functional dependencies is decidable
(NP-complete). The latter has been independently established, and generalized
in a nontrivial way, in a recent paper by Figueira [13]. Decidability for general
egds remains open.
Evaluation. It is possible to show that for tgds for which semantic acyclicity
is decidable (guarded, non-recursive, sticky) there is a ﬁxed-parameter tractable
algorithm for evaluating q on a database. No such algorithm is believed to exist
for CQ evaluation in general [18]; thus, semantically acyclic CQs under these
constraints behave better than the general case in terms of evaluation.

Recall, on the other hand, that in the absence of constraints one can do
better: Evaluating semantically acyclic CQs in such context is in polynomial
time. It is natural to ask if this also holds in the presence of constraints. We
show this to be the case for guarded tgds and functional dependencies. For the
other classes the problem remains to be investigated.

References

1. Abiteboul, S., Hull, R., Vianu, V.: Foundations of Databases. Addison-Wesley,

Boston (1995)

2. Baget, J.-F., Mugnier, M.-L., Rudolph, S., Thomazo, M.: Walking the complexity

lines for generalized guarded existential rules. In: IJCAI, pp. 712–717 (2011)

3. Barcel´o, P., Gottlob, G., Pieris, A.: Semantic acyclicity under constraints. In:

PODS (2016)

4. Barcel´o, P., Libkin, L., Romero, M.: Eﬃcient approximations of conjunctive

queries. SIAM J. Comput. 43(3), 1085–1130 (2014)

5. Barcel´o, P., Romero, M., Vardi, M.Y.: Semantic acyclicity on graph databases. In:

PODS, pp. 237–248 (2013)

6. Cal`ı, A., Gottlob, G., Kifer, M.: Taming the inﬁnite chase: query answering under

expressive relational constraints. J. Artif. Intell. Res. 48, 115–174 (2013)

108

P. Barcel´o

7. Cal`ı, A., Gottlob, G., Pieris, A.: Towards more expressive ontology languages: the

query answering problem. Artif. Intell. 193, 87–128 (2012)

8. Calvanese, D., De Giacomo, G., Lenzerini, M.: Conjunctive query containment and
answering under description logic constraints. ACM Trans. Comput. Log. 9(3),
22.1–22.31 (2008)

9. Chandra, A.K., Merlin, P.M.: newblock Optimal implementation of conjunctive

queries in relational data bases. In: STOC, pp. 77–90 (1977)

10. Chen, H., Dalmau, V.: Beyond hypertree width: Decomposition methods without

decompositions. In: CP, pp. 167–181 (2005)

11. Dalmau, V., Kolaitis, P.G., Vardi, M.Y.: Constraint satisfaction, bounded

treewidth, and ﬁnite-variable logics. In: CP, pp. 310–326 (2002)

12. Fagin, R., Kolaitis, P.G., Miller, R.J., Popa, L.: Data exchange: semantics and

query answering. Theor. Comput. Sci. 336(1), 89–124 (2005)

13. Figueira, D.: Semantically acyclic conjunctive queries under functional dependencies.
 In: LICS (2016)

14. Gottlob, G., Greco, G., Marnette, B.: HyperConsistency width for constraint
satisfaction: algorithms and complexity results. In: Lipshteyn, M., Levit, V.E.,
McConnell, R.M. (eds.) Graph Theory, Computational Intelligence and Thought.
LNCS, vol. 5420, pp. 87–99. Springer, Heidelberg (2009)

15. Hell, P., Neˇsetˇril, J.: Graphs and Homomorphisms. Oxford University Press, Oxford

(2004)

16. Johnson, D.S., Klug, A.C.: Testing containment of conjunctive queries under functional 
and inclusion dependencies. J. Comput. Syst. Sci. 28(1), 167–189 (1984)

17. Kr¨otzsch, M., Rudolph, S.: Extending decidable existential rules by joining acyclicity 
and guardedness. In: IJCAI, pp. 963–968 (2011)

18. Papadimitriou, C.H., Yannakakis, M.: On the complexity of database queries. J.

Comput. Syst. Sci. 58(3), 407–427 (1999)

19. Yannakakis, M.: Algorithms for acyclic database schemes. In: VLDB, pp. 82–94

(1981)

