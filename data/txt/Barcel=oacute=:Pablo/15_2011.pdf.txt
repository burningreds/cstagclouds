Parameterized Regular Expressions and Their
Languages
Pablo Barceló1, Leonid Libkin2, and Juan L. Reutter2

1 Department of Computer Science,

2

University of Chile
pbarcelo@dcc.uchile.cl
School of Informatics,
University of Edinburgh
libkin@inf.ed.ac.uk, juan.reutter@ed.ac.uk

Abstract

We study regular expressions that use variables, or parameters, which are interpreted as alphabet
letters. We consider two classes of languages denoted by such expressions: under the possibility
semantics, a word belongs to the language if it is denoted by some regular expression obtained
by replacing variables with letters; under the certainty semantics, the word must be denoted
by every such expression. Such languages are regular, and we show that they naturally arise
in several applications such as querying graph databases and program analysis. As the main
contribution of the paper, we provide a complete characterization of the complexity of the main
computational problems related to such languages: nonemptiness, universality, containment,
membership, as well as the problem of constructing NFAs capturing such languages. We also
look at the extension when domains of variables could be arbitrary regular languages, and show
that under the certainty semantics, languages remain regular and the complexity of the main
computational problems does not change.

1998 ACM Subject Classiﬁcation F.4.3 Formal Languages

Keywords and phrases Regular expressions, complexity, decision problems, regular languages

Digital Object Identiﬁer 10.4230/LIPIcs.FSTTCS.2011.351

Introduction

1
In this paper we study parameterized regular expressions like (0x)∗1(xy)∗ that combine
letters from a ﬁnite alphabet Σ, such as 0 and 1, and variables, such as x and y. These
variables are interpreted as letters from Σ. This gives two ways of deﬁning the language of
words over Σ denoted by a parameterized regular expression e. Under the ﬁrst – possibility
– semantics, a word w ∈ Σ∗ is in the language L3(e) if w is in the language of some
regular expression e0 obtained by substituting alphabet letters for variables. Under the
second – certainty – semantics, w ∈ L2(e) if w is in the language of all regular expressions
obtained by substituting alphabet letters for variables. For example, if e = (0x)∗1(xy)∗,
then 01110 ∈ L3(e), as witnessed by the substitution x 7→ 1, y 7→ 0. The word 1 is in L2(e),
since the starred subexpressions can be replaced by the empty word. As a more involved
example of the certainty semantics, the reader can verify that for e0 = (0|1)∗xy(0|1)∗, the
word 10011 is in L2(e0), although no word of length less than 5 can be in L2(e0).

These semantics of parameterized regular expressions arise in a variety of applications,
in particular in the ﬁelds of querying graph-structured data, and static analysis of programs.
We now explain these connections.

© Pablo Barceló, Leonid Libkin, and Juan Reutter;
licensed under Creative Commons License NC-ND

31st Int’l Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS 2011).
Editors: Supratik Chakraborty, Amit Kumar; pp. 351–362

Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

352

Parameterized Regular Expressions and Their Languages

Applications in graph databases Graph databases, that describe both data and its
topology, have been actively studied over the past few years in connection with such diverse
topics as social networks, biological data, semantic Web and RDF, crime detection and
analyzing network traﬃc; see [3] for a survey. The abstract data model is essentially an
edge-labeled graph, with edge labels coming from a ﬁnite alphabet. This ﬁnite alphabet can
contain, for example, types of relationships in a social network or a list of RDF properties.
In this setting one concentrates on various types of reachability queries, e.g., queries that
ask for the existence of a path between nodes with certain properties so that the label of
the path forms a word in a given regular language [4, 7, 8, 10]. Note that in this setting of
querying topology of a graph database, it is standard to use a ﬁnite alphabet for labeling
[3].

As in most data management applications, it is common that some information is missing,
typically due to using data that is the result of another query or transformation [1, 5, 9].
For example, in a social network we may have edges a x7−→ b and a0
x7−→ b0, saying that the
relationship between a and b is the same as that between a0 and b0. However, the precise
nature of such a relationship is unknown, and this is represented by a variable x. Such graphs
G whose edges are labeled by letters from Σ and variables from a set W can be viewed as
automata over Σ∪W. In checking the existence of paths between nodes, one normally looks
for certain answers [16], i.e., answers independent of a particular interpretation of variables.
In the case of graph databases such certain answers can be found as follows. Let a, b be
two nodes of G. One can view (G, a, b) as an automaton, with a as the initial state, and b
as the ﬁnal state; its language, over Σ ∪ W is given by some regular expression e(G, a, b).
Then we can be certain about the existence of a word w from some language L that is the
label of a path from a to b iﬀ w also belongs to L2(e(G, a, b)), i.e., iﬀ L ∩ L2(e(G, a, b)) is
nonempty. Hence, computing L2(e) is essential for answering queries over graph databases
with missing information.
Applications in program analysis That regular expressions with variables appear naturally 
in program analysis tasks was noticed, for instance, in [20, 21, 23]. One uses the
alphabet that consists of symbols related to operations on variables, pointers, or ﬁles, e.g.,
def for deﬁning a variable, use for using it, open for opening a ﬁle, or malloc for allocating
a pointer. A variable then follows: def(x) means deﬁning variable x. While variables and
alphabet symbols do not mix freely any more, it is easy to enforce correct syntax with an
automaton. An example of a regular condition with parameters is searching for uninitialized
variables: (¬def(x))∗use(x).

Expressions like this are evaluated on a graph that serves as an abstraction of a program.
One considers two evaluation problems: whether under some evaluation of variables, either
some path, or every path between two nodes satisﬁes it. This amounts to computing L3(e)
and checking whether all paths, or some path between nodes is in that language. In case of
uninitialized variables one would be using ‘some path’ semantics; the need for the ‘all paths’
semantics arises when one analyzes locking disciplines or constant folding optimizations
[20, 23]. So in this case the language of interest for us is L3(e), as one wants to check
whether there is an evaluation of variables for which some property of a program is true.

Parameterized regular expressions appeared in other applications as well, e.g., in phasesequence 
prediction for dynamic memory allocation [25], or as a compact way to express a
family of legal behaviors in hardware veriﬁcation [6], or as a tool to state regular constraints
in constraint satisfaction problems [24].

At the same time, however, very little is known about the basic properties of the
languages L2(e) and L3(e). Thus, our main goal is to determine the exact complexity

P. Barceló, L. Libkin, and J. Reutter

353

of the key problems related to languages L2(e) and L3(e). We consider the standard
language-theoretic decision problems, such as membership of a word in the language, language 
nonemptiness, universality, and containment. Since the languages L2(e) and L3(e)
are regular, we also consider the complexity of constructing NFAs, over the ﬁnite alphabet
Σ, that deﬁne them.

For all the decision problems, we determine their complexity. In fact, all of them are
complete for various complexity classes, from NLogspace to Expspace. We establish
upper bounds on the running time of algorithms for constructing NFAs, and then prove
matching lower bounds for the sizes of NFAs representing L2(e) and L3(e). Finally, we
look at extensions where the range of variables need not be just Σ. Under the possibility
semantics, such languages need not be regular, but under the certainty semantics, we prove
regularity and establish complexity bounds.
Related work There are several related papers on the possibility semantics, notably [11,
14, 18]. Unlike the investigation in this paper, [14, 18] concentrated on the L3(e) semantics
in the context of inﬁnite alphabets. The motivation of [14] comes from the study of inﬁnitestate 
systems with ﬁnite control (e.g., software with integer parameters). In contrast, for
the applications outlined in the introduction, ﬁnite alphabets are more appropriate [3, 8,
20, 21]. Results in [14] show that under the possibility semantics and inﬁnite alphabets, the
resulting languages can also accepted by non-deterministic register automata [18], and both
closure and decidability become problematic. For example, universality and containment
are undecidable over inﬁnite alphabets [14]. In contrast, in the classical language-theoretic
framework of ﬁnite alphabets, closure and decidability are guaranteed, and the key questions
are related to the precise complexity of the main decision problems, with most of them
requiring new proof techniques.

An analog of the L2 semantics was studied in the context of graph databases in [5].
The model used there is more complex than the simple model of parameterized regular
expressions. Essentially, it boils down to automata in which transitions can be labeled
with such parameterized expressions, and labels can be shared between diﬀerent transitions.
Motivations for this model come from diﬀerent ways of incorporating incompleteness into
the graph database model. Due to the added complexity, lower bounds for the model of [5]
do not extend automatically to parameterized regular expressions, and in the cases when
complexity bounds happen to be the same, new proofs are required.

Diﬀerent forms of succinct representations of regular languages, for instance with squaring,
 complement, and intersection, are known in the literature, and both decision problems
[22] and algorithmic problems [12] have been investigated for them. However, it appears
that parameterized regular expressions cannot be used to succinctly deﬁne an arbitrary regular 
expression, nor any arbitrary union or intersection of them. Thus, the study of these
expressions requires the development of new tools for understanding the lower bounds of
their decision problems.

When we let variables range over words rather than letters, under the possibility semantics 
L3 we may obtain, for example, pattern languages [17] or languages given by expressions
with backreferences [2]. These languages need not be regular, and some of the problems
(e.g., universality for backreferences) are undecidable [11]. In contrast, we show that under
the certainly semantics L2 regularity is preserved, and complexity is similar to the case of
variables ranging over letters.
Organization Parameterized regular expressions and their languages are formally deﬁned
in Section 2. In Section 3 we deﬁne the main problems we study. Complexity of the main
decision problems is analyzed in Section 4, and complexity of automata construction in

FSTTCS 2011

354

Parameterized Regular Expressions and Their Languages

Section 5. In Section 6 we study extensions when domains of variables need not be single
letters.

Preliminaries

2
Let Σ be a ﬁnite alphabet, and V a countably inﬁnite set of variables, disjoint from Σ.
Regular expressions over Σ ∪ V will be called parameterized regular expressions. Regular
expressions, as usual, are built from ∅, the empty word ε, symbols in Σ and V, by operations
of concatenation (·), union (|), and the Kleene star (∗). Of course each such expression only
uses ﬁnitely many symbols in V. The size of a regular expression is measured as the total
number of symbols needed to write it down (or as the size of its parse tree).

We write L(e) for the language deﬁned by a regular expression e. If e is a parameterized
regular expression that uses variables from a ﬁnite set W ⊂ V, then L(e) ⊆ (Σ ∪ W)∗. We
are interested in languages L2(e) and L3(e), which are subsets of Σ∗. To deﬁne them, we
need the notion of a valuation ν which is a mapping from W to Σ, where W is the set of
variables mentioned in e. By ν(e) we mean the regular expression over Σ obtained from e
by simultaneously replacing each variable x ∈ W by ν(x). For example, if e = (0x)∗1(xy)∗
and ν is given by x 7→ 1, y 7→ 0, then ν(e) = (01)∗1(10)∗.

We now formally deﬁne the certainty and possibility semantics for parameterized regular

expressions.
(cid:73) Deﬁnition 1 (Acceptance). Let e be a parameterized regular expression. Then:

L2(e) :=T{L(ν(e)) | ν is a valuation for e}
L3(e) :=S{L(ν(e)) | ν is a valuation for e}

(certainty semantics)
(possibility semantics).

Since each parameterized regular expression uses ﬁnitely many variables, the number of
possible valuations is ﬁnite as well, and thus both L2(e) and L3(e) are regular languages
over Σ∗.

The usual connection between regular expressions and automata extends to the parameterized 
case. Each parameterized regular expression e over Σ ∪ W, where W is a ﬁnite
set of variables in V, can of course be translated, in polynomial time, into an NFA Ae over
Σ ∪ W such that L(Ae) = L(e). Such equivalences extend to L2 and L3. Namely, for an
NFA A over Σ ∪ W, and a valuation ν : W → Σ, deﬁne ν(A) as the NFA over Σ that is
obtained from A by replacing each transition of the form (q, x, q0) in A (for q, q0 states of A
and x ∈ W) with the transition (q, ν(x), q0). The following is just an easy observation:
(cid:73) Lemma 2. Let e be a parameterized regular expression, and Ae be an NFA over Σ ∪ V
such that L(Ae) = L(e). Then, for every valuation ν, we have L(ν(e)) = L(ν(Ae)).

ν L(ν(A)), then the lemma implies
that L2(e) = L2(Ae) and L3(e) = L3(Ae). Since one can go from regular expressions to
NFAs in polynomial time, this will allow us to use both automata and regular expressions
interchangeably to establish our results.

Hence, if we deﬁne L2(A) asT

ν L(ν(A)), and L3(A) asS

3

Basic Problems

We now describe the main problems we study here. For each problem we shall have two
versions, depending on which semantics – L2 or L3 is used. So each problem will have a
subscript ∗ that can be interpreted as 2 or 3.

We start with decision problems:

P. Barceló, L. Libkin, and J. Reutter

355

L∗(e)?

Nonemptiness∗ Given a parameterized regular expression e, is L∗(e) 6= ∅?
Membership∗ Given a parameterized regular expression e and a word w ∈ Σ∗, is w ∈
Universality∗ Given a parameterized regular expression e, is L∗(e) = Σ∗?
Containment∗ Given parameterized regular expressions e1 and e2, is L∗(e1) ⊆ L∗(e2)?
A special version of nonemptiness is the problem of intersection with a regular language

(used in the database querying example in the introduction):

NonemptyIntReg∗ Given a parameterized regular expression e, and a regular expression

e0 over Σ, is L(e0) ∩ L∗(e) 6= ∅?
The last problem is computational rather than a decision problem:

ConstructNFA∗ Given a parameterized regular expression e, construct an NFA A over

Σ such that L∗(e) = L(A).

4 Decision problems

In this section we consider the ﬁve decision problems – nonemptiness, membership, universality 
and containment – and provide precise complexity for them.
Restrictions on regular expressions We shall also consider two restrictions on regular
expressions; these will indicate when the problems are inherently very hard or when their
complexity can be lowered in some cases. One source of complexity is the repetition of
variables in expressions like (0x)∗1(xy)∗. When no variable appears more than once in a
parameterized regular expression, we call it simple. Another source of complexity is inﬁnite
languages, so we consider a restriction to expressions of star-height 0, in which no Kleene
star is used: these denote ﬁnite languages, and each ﬁnite language is denoted by such an
expression.

4.1 Nonemptiness
The problem Nonemptiness3 has a trivial solution, since L3(e) 6= ∅ for every parameterized
regular expression e (except e = ∅). So we study this problem for the certainty semantics;
for the possibility semantics, we look at the related problem Nonemptiness-Automata3,
which, for a given NFA A over Σ ∪ V asks whether L3(A) 6= ∅.
(cid:73) Theorem 3.

The problem Nonemptiness2 is Expspace-complete.
The problem Nonemptiness-Automata3 is NLogspace-complete.
The result for the possibility semantics is by a standard reachability argument. Note
that the bound is the same here as in the case of inﬁnite alphabets studied in [14]. To see
the upper bound for Nonemptiness2, note that there are exponentially many valuations
ν, and each automaton ν(Ae) is of polynomial size, so we can use the standard algorithm
for checking nonemptiness of the intersection of a family of regular languages which can be
solved in polynomial space in terms of the size of its input; since the input to this problem
is of exponential size in terms of the original input, the Expspace bound follows. The
hardness is by a generic (Turing machine) reduction.

In the proof we use the following property of the certainty semantics, which shows a

striking diﬀerence with the case of standard regular expressions:

FSTTCS 2011

356

Parameterized Regular Expressions and Their Languages

(cid:73) Lemma 4. Given a set e1, . . . , ek of parameterized expressions of size at most n ≥ k, it
is possible to build, in time O(k · n) an expression e0 such that L2(e0) is empty if and only
if L2(e1) ∩ ··· ∩ L2(ek) is empty.

if T

The reason the case of the L2(e) semantics is so diﬀerent from the usual semantics of
regular languages is as follows. It is well known that checking whether the intersection of the
languages deﬁned by a ﬁnite set S of regular expressions is nonempty is Pspace-complete
[19], and hence under widely held complexity-theoretical assumptions no regular expression
r can be constructed in polynomial time from S such that L(r) is nonempty if and only
s∈S L(s) is nonempty. Lemma 4, on the other hand, says that such a construction is
possible for parameterized regular expressions under the certainty semantics.
The generic reduction used in the proof of Expspace-hardness of Nonemptiness2 also
provides lower bounds on the minimal sizes of words in languages L2(e) (note that the
language L3(e) always contains a word of the size linear in the size of e).
(cid:73) Corollary 5. There exists a polynomial p : N → N and a sequence of parameterized regular
expressions {en}n∈N such that each en is of size at most p(n), and every word in the language
L2(en) has size at least 22n.

The construction is somewhat involved, but it is easy to see the single-exponential bound
(which was hinted at in the ﬁrst paragraph of the introduction, and which was in fact used in
connection with querying incomplete graph data in [5]). For each n, consider an expression
en = (0|1)∗x1 . . . xn(0|1)∗. If a word w is in L2(en), then w must contain every word in
{0, 1}n as a subword, which implies that its length must be at least 2n + 1.

We can also show that the use of Kleene star has a huge impact on complexity, which is

not at the same time aﬀected by variable repetitions.
(cid:73) Proposition 6. The problem Nonemptiness2 remains Expspace-hard over the class of
simple regular expressions, but it is Σp
2-complete over the class of expressions of star-height
0.

4.2 Membership
It is easy to see that Membership2 can be solved in coNP, and Membership3 in NP:
one just guesses a valuation witnessing w ∈ L(v(e)) or w 6∈ L(v(e)). These bounds turn out
to be tight.
(cid:73) Theorem 7.

The problem Membership2 is coNP-complete.

The problem Membership3 is NP-complete.

pressions). We use a reduction from 3-SAT. Let ϕ = V

Proof sketch: We only sketch the proof of NP-hardness (which also works for simple exj 
∨ ‘3
j ∨ ‘2
j) be a 3-CNF
propositional formula over variables {p1, . . . , pm}. That is, each literal ‘k
j , for 1 ≤ j ≤ n and
1 ≤ k ≤ 3, is either pi or ¬pi, for some i ≤ m. From ϕ we construct, in polynomial time,
a simple parameterized regular expression e over alphabet Σ = {a, b, c, d, 0, 1} and variables
xi, ¯xi, for 1 ≤ i ≤ m, and a word w over Σ such that ϕ is satisﬁable if and only if w ∈ L3(e).
The regular expression e is deﬁned as f∗, where f := a(f1|g1| . . .|fm|gm)b, and the
Intuitively, fi (resp. gi) codes the
regular expressions fi and gi are deﬁned as follows.
clauses in which pi occurs positively (resp. negatively). Let j1, . . . , jr enumerate the clauses
where the variable pi appears positively. The expression fi is deﬁned as

1≤j≤n(‘1

fi = (ci | dj1 | . . . | djr) · xi.

P. Barceló, L. Libkin, and J. Reutter

357

The expression gi is deﬁned similarly except using indices of clauses where pi occurs negatively,
 and the variable ¯xi in place of xi. Note that e is a simple expression and can be
constructed in polynomial time from ϕ.

The word w is ac1b ac0b acc1b acc0b . . . acm1b acm0b ad1b add1b . . . adn1b; it too can be
constructed in polynomial time from ϕ. It is now not hard to prove that ϕ is satisﬁable if
and only if w ∈ L3(e).
2
Note that for the case of the possibility semantics, the bound is the same as for languages
over the inﬁnite alphabets [14] (for all problems other than nonemptiness and membership,
the bounds will be diﬀerent). The hardness proof in [14] relies on the inﬁnite size of the
alphabet, but one can ﬁnd an alternative proof that uses only ﬁnitely many symbols. Both
proofs are by variations of 3-SAT or its complement.

The restrictions to expressions without repetitions, or to ﬁnite languages, by themselves

do not lower the complexity, but together they make it polynomial.
(cid:73) Proposition 8. The complexity of the membership problem remains as in Theorem 7 over
the classes of simple expressions, and expressions of star-height 0. Over the class of simple
expressions of star-height 0, Membership3 can be solved in polynomial time (actually, in
time O(nm log2 n), where n is the size of the expression and m is the size of the word).

The log2 n factor appears due to the complexity of the algorithm for converting regular

expressions into ε-free NFAs [15].
Membership for ﬁxed words We next consider a variation of the membership problem:
Membership∗(w) asks, for a parameterized regular expression e, whether w ∈ L∗(e). In
other words, w is ﬁxed. It turns out that for the 3-semantics, this version is eﬃciently solvable,
 but for the 2-semantics, it remains intractable unless restricted to simple expressions.
There is a word w ∈ Σ∗ such that the problem Membership2(w) is
(cid:73) Theorem 9.

coNP-hard (even over the class of expressions of star-height 0).
For each word w ∈ Σ∗, the problem Membership2(w) is solvable in linear time, if
restricted to the class of simple expressions.
For each word w ∈ Σ∗, the problem Membership3(w) is solvable in time O(n log2 n).

On the other hand, it is straightforward to show that the membership problem for ﬁxed

expressions can be solved eﬃciently for both semantics.

4.3 Universality
Somewhat curiously, the universality problem is more complex for the possibility semantics
L3. Indeed, consider a parameterized expression e over Σ, with variables in W. For the
certainty semantics, it suﬃces to guess a word w and a valuation ν : Σ → W such that
w 6∈ L(ν(e)). This gives a Pspace upper bound for this problem, which is the best that we
can do, as the universality problem is Pspace-hard even for complete regular expressions.
On the other hand, when solving this problem for the possibility semantics, one can expect
that all possible valuations for e will need to be analyzed, which increases the complexity
by one exponential. (In fact, when one moves to inﬁnite alphabets, this problem becomes
undecidable [14]). The lower bound proof is again by a generic reduction.
(cid:73) Theorem 10.

The problem Universality2 is Pspace-complete.

The problem Universality3 is Expspace-complete.

FSTTCS 2011

358

Parameterized Regular Expressions and Their Languages

Similarly to the nonemptiness problem (studied in Section 4.1), the Expspace bound
for Universality3 is quite resilient, as it holds even if for simple expressions (note that
it makes no sense to study expressions of star-height 0, as they denote ﬁnite languages and
thus cannot be universal).
(cid:73) Proposition 11. The problem Universality3 remains Expspace-hard over the class of
simple parameterized regular expressions.

4.4 Containment
The bounds for the containment problem are easily obtained from the fact that both
nonemptiness and universality can be cast as its versions. That is, we have:
(cid:73) Theorem 12. Both Containment2 and Containment3 are Expspace-complete.

lems. To check whether L2(e1) ⊆ L2(e2), we must check thatT

Since Σ∗ ⊆ L3(e) iﬀ Universality3(e) is true, and L2(e) ⊆ ∅ iﬀ
Proof:
Nonemptiness2(e) is false, we get Expspace-hardness for both containment probν 
L(ν(e1)) ∩ L(ν0(e2)) = ∅
for each valuation ν0 on e2. This is doable in Expspace, since one can construct exponentially 
many automata for L(ν(e1)) in Exptime, as well as the automaton for the
complement L(ν0(e2)), and checking nonemptiness of the intersection of those is done in
polynomial space in terms of their size, i.e., in Expspace. Since this needs to be done for
exponentially many valuations ν0, the overall Expspace bound follows. The proof for the
L3 semantics is almost identical.

Containment with one ﬁxed expression We look at two variations of the containment
problem, when one of the expressions is ﬁxed: Containment∗(e1,·) asks, for a parameterized 
regular expression e2, whether L∗(e1) ⊆ L∗(e2); and Containment∗(·, e2) is deﬁned 
similarly. The reductions proving Theorem 12 show that Containment2(·, e2) and
Containment3(e1,·) remain Expspace-complete. For the other two versions of the problem,
 the proposition below shows that the complexity is lowered by at least one exponential.
(cid:73) Proposition 13.

Containment2(e1,·) is Pspace-complete.

Containment3(·, e2) is coNP-complete.

4.5 Intersection with a regular language
This problem is a natural analog of the standard decision problem solved in automata-based
veriﬁcation; we also saw in the introduction that it arises when one computes certain answers
to queries over incompletely speciﬁed graph databases.

Checking whether L(e0) ∩ L2(e) 6= ∅ can be done in Expspace using the same bruteforce 
algorithm as for the nonemptiness problem (intersection of exponentially many regular
languages). Since the nonemptiness problem is a special case with e0 = Σ∗, we get the
matching lower bound by Theorem 3. For L3(e), an NP upper bound is easy: one just
guesses a valuation so that L(e0) ∩ L(ν(e)) 6= ∅.
If e0 denotes a single word w, we have
an instance of the membership problem, and hence there is a matching lower bound, by
Theorem 7. Summing up, we have:
(cid:73) Corollary 14.

The problem NonemptyIntReg2 is Expspace-complete.

The problem NonemptyIntReg3 is NP-complete.

P. Barceló, L. Libkin, and J. Reutter

359

Computing automata

5
In this section, we ﬁrst provide upper bounds for algorithms for building NFAs over
Σ capturing L3(e) and L2(e), and then prove their optimality, by showing matching
lower bounds on the sizes of such NFAs. Recall that we are dealing with the problem
ConstructNFA∗: Given a parameterized regular expression e, construct an NFA A over
Σ such that L(A) = L∗(e).
(cid:73) Proposition 15. The problem ConstructNFA3 can be solved in single-exponential time,
and the problem ConstructNFA2 can be solved in double-exponential time.

These bounds are achieved by using naive algorithms for constructing automata: namely,
one converts a parameterized regular expression e over variables in a ﬁnite set W into an
automaton Ae, and then for |Σ||W| valuations ν computes the automata ν(Ae). This takes
exponential time. To obtain an NFA for L3(e) one simply combines them with a nondeterministic 
choice; for L2(e) one takes the product of them, resulting in double-exponential
time.

We now show that these complexities are unavoidable, as the smallest NFAs capturing
L3(e) or L2(e) can be of single or double-exponential size, respectively. We say that the
sizes of minimal NFAs for L∗ are necessarily exponential (resp., double-exponential) if there
exists a family {en}n∈N of parameterized regular expressions such that:

the size of each en is O(n), and
every NFA A satisfying L(A) = L∗(en) has at least 2n (resp., 22n) states.

(cid:73) Theorem 16. The sizes of minimal NFAs are necessarily double-exponential for L2, and
necessarily exponential for L3.
Proof sketch: We begin with the double exponential bound for L2. For each n ∈ N, let en
be the following parameterized regular expression over alphabet Σ = {0, 1} and variables
x1, . . . , xn+1:

en = ((0 | 1)n+1)∗ · x1 ··· xn · xn+1 · ((0 | 1)n+1)∗.

from [13]:

|

and there

if L ⊂ Σ∗

Notice that each en uses n + 1 variables, and is of
to show that every NFA deciding L2(en) has 22n
is a regular

linear size in n.
In order

states, we use the following 
result
language,
exists 
a set of pairs P = {(ui, vi)
such that
(1) uivi ∈ L, for every 1 ≤ i ≤ m, and (2) ujvi /∈ L, for every 1 ≤ i, j ≤ m and i 6= j, then
every NFA accepting L has at least m states.
Given a collection S of words over {0, 1}, let wS denote the concatenation, in lexicographical 
order, of all the words that belong to S, and let w ¯S,n denote the concatenation of
all words in {0, 1}n+1 that are not in S.
Then, deﬁne a set of pairs Pn = {(wS, w ¯S,n) | S ⊂ {0, 1}n+1 and |S| = 2n}. Since there

1 ≤ i ≤ m} ⊆ Σ∗ × Σ∗

are 2n+1 binary words of length n + 1, there are(cid:0)2n+1
2n, and thus Pn contains(cid:0)2n+1

(cid:1) diﬀerent subsets of {0, 1}n+1 of size
(cid:1) ≥ 22n pairs. Moreover, one can show that L2(en) and Pn

satisfy properties (1) and (2) above, which proves the double exponential lower bound.
To show the exponential lower bound for L3, deﬁne en = (x1 ··· xn)∗, and let Pn =
{(w, w) | w ∈ {0, 1}n}. Clearly, Pn contains 2n pairs. All that is left to do is to show that
L3(en) and Pn satisfy properties (1) and (2) above. Details are omitted.

2n

2n

Note that the bounds of Theorem 16 apply to simple regular expressions.
The table in Fig. 1 summarizes the main results in Sections 4 and 5.

FSTTCS 2011

2

360

Parameterized Regular Expressions and Their Languages

`````````````

Semantics

Problem
Nonemptiness

Certainty 2

Possibility 3

Expspace-complete NLogspace-complete

Membership
Containment
Universality
NonemptyIntReg
ConstructNFA

coNP-complete

Expspace-complete
Pspace-complete
Expspace-complete
double-exponential

Figure 1 Summary of complexity results

(for automata)
NP-complete

Expspace-complete
Expspace-complete

NP-complete

single-exponential

Extending domains of variables

6
So far we assumed that variables take values in Σ: our valuations were partial maps ν : V →
Σ. We now consider a more general case when the range of each variable is a regular subset
of Σ∗.
Let e be a parameterized regular expression with variables x1, . . . , xn, and let
L1, . . . , Ln ⊆ Σ∗ be nonempty regular languages. We shall write ¯L for (L1, . . . , Ln). A
valuation in ¯L is a map ν : ¯x → ¯L such that ν(xi) ∈ Li for each i ≤ n. Under such a valuation,
 each parameterized regular expression e is mapped into a usual regular expression ν(e)
over Σ, in which each variable xi is replaced by the word ν(xi). Hence we can still deﬁne

L2(e; ¯L) = T{L(ν(e)) | ν is a valuation over ¯L}
L3(e; ¯L) = S{L(ν(e)) | ν is a valuation over ¯L}

According to this notation, L2(e) = L2(e; (Σ, . . . , Σ)), and likewise for L3.

Note however that intersections and unions are now inﬁnite, if some of the languages
Li’s are inﬁnite, so we cannot conclude, as before, that we deal with regular languages.
And indeed they are not: for example, L3(xx; Σ∗) is the set of square words, and thus not
regular.

We now consider two cases. If each Li is a ﬁnite language, we show that all the complexity
results in Fig. 1 remain true. Then we look at the case of arbitrary regular Li’s. Languages
L3(e; ¯L) need not be regular anymore, but languages L2(e; ¯L) still are, and we prove that
the complexity bounds from the certainty column of Fig. 1 remain true. For complexity
results, we assume that in the input (e; ¯L), each domain Li is given either as a regular
expression or an NFA over Σ.

6.1 The case of ﬁnite domains
If all domain languages Li’s are ﬁnite, all the lower bounds apply (they were shown when
each Li = Σ). For upper bounds, note that each ﬁnite Li contains at most exponentially
many words in the size of either a regular expression or an NFA that gives it, and each such
word is polynomial size. Thus, the number of valuations is at most exponential in the size
of the input, and each valuation can be represented in polynomial time. The following is
then straightforward.
(cid:73) Proposition 17. If domains Li’s of all variables are ﬁnite nonempty subsets of Σ∗, then
both L2(e; ¯L) and L3(e; ¯L) are regular languages, and all the complexity bounds on the
problems related to them are exactly the same as stated in Fig. 1.

P. Barceló, L. Libkin, and J. Reutter

361

6.2 The case of inﬁnite domains
We have already seen that if just one of the domains is inﬁnite, then L3(e; ¯L) need not
be regular (the L3(xx; Σ∗) example). Somewhat surprisingly, however, in the case of the
certainty semantics, we recover not only regularity but also all the complexity bounds.

(cid:73) Theorem 18. For each parameterized regular expression e using variables x1, . . . , xn and
for each an n-tuple ¯L of regular languages over Σ, the language L2(e; ¯L) ⊆ Σ∗ is regular.
Moreover, the complexity bounds are exactly the same as in the 2 column of the table in
Fig. 1.

Proof sketch: We only need to be concerned about regularity of L2(e; ¯L) and upper complexity 
bounds, as the proofs of lower bounds apply for the case when all Li = Σ. For this, it

suﬃces to prove that there is a ﬁnite set U of NFAs so that L2(e; ¯L) =TA∈U L(A). Moreover,
 it follows from analyzing the proofs of upper complexity bounds, that the complexity
results will remain the same if the following can be shown about the set U:

its size is at most exponential in the size of the input;
checking whether A ∈ U can be done in time polynomial in the size of A;
each A ∈ U is of size polynomial in the size of the input (e; ¯L).
To show these, take Ae and from it construct a reduced automaton A0
e in which all transitions
(q, xi, q0) are eliminated whenever Li is inﬁnite. We then show that L2(Ae; ¯L) = L2(A0
e; ¯L)
(the deﬁnition of L2 extends naturally from regular expressions to automata for arbitrary
domains). This observation generates a ﬁnite set U of NFAs which results from applying
valuations with ﬁnite codomains to A0
It is now possible to show that these automata
e.
satisfy the required properties.

7

Future work

For most bounds (except universality and containment), the complexity under the possibility 
semantics is reasonable, while for the certainty semantics it is quite high (i.e., doubleexponential 
in practice). At the same time, the concept of L2(e) captures many query
answering scenarios over graph databases with incomplete information [5]. One of the future 
directions of this work is to devise better algorithms for problems related to the certainty
semantics under restrictions arising in the context of querying graph databases.

Another line of work has to do with closure properties: we know that results of Boolean
operations on languages L2(e) and L3(e) are regular and can be represented by NFAs; the
bounds on sizes of such NFAs follow from the results shown here. However, it is conceivable
that such NFAs can be succinctly represented by parameterized regular expressions. To be
concrete, one can easily derive from results in Section 5 that there is a doubly-exponential
size NFA A so that L(A) = L2(e1) ∩ L2(e2), and that this bound is optimal. However, it
leaves open a possibility that there is a much more succinct parameterized regular expression
e so that L2(e) = L2(e1) ∩ L2(e2); in fact, nothing that we have shown contradicts the
existence of a polynomial-size expression with this property. We plan to study bounds on
such regular expressions in the future.
Acknowledgment We thank Marian K¸edzierski for helpful comments. Partial support provided
by Fondecyt grant 1110171, EPSRC grant G049165 and FET-Open Project FoX, grant agreement
233599.

FSTTCS 2011

362

Parameterized Regular Expressions and Their Languages

1

2

3
4

5
6

References
S. Abiteboul, S. Cluet, T. Milo. Correspondence and translation for heterogeneous data.
TCS 275 (2002), 179–213.
A. Aho. Algorithms for ﬁnding patterns in strings. Handbook of Theoretical Computer
Science, Volume A: 255-300, 1990.
R. Angles, C. Gutiérrez. Survey of graph database models. ACM Comp. Surv. 40(1):(2008).
P. Barceló, C. Hurtado, L. Libkin, P. Wood. Expressive languages for path queries over
graph-structured data. In PODS’10, pages 3-14.
P. Barceló, L. Libkin, J. Reutter. Querying graph patterns. In PODS’11, pages 199–210.
J. Bhadra, A. Martin, J. Abraham. A formal framework for veriﬁcation of embedded
custom memories of the Motorola MPC7450 microprocessor. Formal Methods in System
Design 27(1-2): 67-112 (2005).

7 D. Calvanese, G. de Giacomo, M. Lenzerini, M. Y. Vardi. Containment of conjunctive

regular path queries with inverse. In KR’00, pages 176–185.

8 D. Calvanese, G. de Giacomo, M. Lenzerini, M. Y. Vardi. Rewriting of regular expressions

and regular path queries. JCSS, 64(3):443–465, 2002.

9 D. Calvanese, G. de Giacomo, M. Lenzerini, M. Y. Vardi. Simplifying schema mappings.

In ICDT 2011.

TCS 116 (1993), 95–116.

2011, pages 507-518.

10 M. P. Consens, A. O. Mendelzon. Low complexity aggregation in GraphLog and Datalog.

11 D. Freydenberger. Extended regular expressions: succinctness and decidability. in STACS

12 W. Gelade, F. Neven. Succinctness of the complement and intersection of regular expressions.
 In STACS 2008, pages 325–336.
I. Glaister, J. Shallit. A lower bound technique for the size of nondeterministic ﬁnite
automata. IPL 59:75-77, 1996.

14 O. Grumberg, O. Kupferman, S. Sheinvald. Variable automata over inﬁnite alphabets. In

LATA’10, pages 561–572.
C. Hagenah, A. Muscholl. Computing epsilon-free NFA from regular expressions in
O(n log2(n)) time. In MFCS’98, pages 277–285.
T. Imielinski, W. Lipski. Incomplete information in relational databases. J. ACM 31 (1984),
761–791.
L. Kari, A. Mateescu, G. Paun, A. Salomaa. Multi-pattern languages. TCS 141 (1995),
253-268.

13

15

16

17

18 M. Kaminsky, D. Zeitlin. Finite-memory automata with non-deterministic reassignment.

IJFCS 21 (2010), 741-760.

19 D. Kozen. Lower bounds for natural proof systems. In FOCS’77, pages 254-266.
20

Y. Liu, T. Rothamel, F. Yu, S. Stoller, N. Hu. Parametric regular path queries. In PLDI’04,
pages 219–230.
Y. Liu, S. Stoller. Querying complex graphs. In PADL’06, pages 199–214.
A. R. Meyer, L. J. Stockmeyer. Word problems requiring exponential time. In STOC 1973,
pages 1–9.

21
22

23 O. de Moor, D. Lacey, E. Van Wyk. Universal regular path queries. Higher-Order and

Symbolic Computation 16(1-2): 15-35 (2003).

24 G. Pesant. A regular language membership constraint for ﬁnite sequences of variables. In

CP’04, pages 482–295.
X. Shen, Y. Zhong, C. Ding. Predicting locality phases for dynamic memory optimization.
J. Parallel Distrib. Comput. 67(7): 783-796 (2007).

25

