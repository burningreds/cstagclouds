Logic Programs for Querying Inconsistent

Databases

Pablo Barcel´o1 and Leopoldo Bertossi2

1 University of Toronto

Department of Computer Science

Toronto, Canada. pablo@cs.toronto.edu

2 Carleton University

School of Computer Science

Ottawa, Canada.

bertossi@scs.carleton.ca

Abstract. Consistent answers from a relational database that violates
a given set of integrity constraints (ICs) are characterized as ordinary answers 
that can be obtained from every minimally repaired version of the
database (a repair). Repairs can be speciﬁed and interpreted as the stable
models of a simple disjunctive normal logic program with database predicates 
extended with appropriate annotation arguments. In consequence,
consistent query answers can be obtained by running a query program
in combination with the repair program under the cautious or skeptical 
stable model semantics. In this paper we show how to write repair
programs for universal and referential ICs; we establish their correctness
and show how to run them on top of the DLV system.

1 Introduction

Integrity constraints (ICs) capture the semantics of a relational database, establishing 
its correspondence with the application domain that the database is
modeling. However, it is not unusual for a database instance to become inconsistent 
with respect to a given, intended set of ICs. This could happen due to
diﬀerent factors, being one of them the integration of several data sources. The
integration of consistent databases may easily lead to an inconsistent integrated
database.

A natural problem in databases consists in retrieving answers to queries that
are “consistent” with the given ICs, even when the database as a whole does
not satisfy those ICs. Very likely “most” of the data is still consistent. The
notion of consistent answer to a ﬁrst order (FO) query was deﬁned in [2], where
also a computational mechanism for obtaining consistent answers was presented.
Intuitively speaking, a ground tuple ¯t to a ﬁrst order query Q(¯x) isc onsistent
in a, possibly inconsistent, relational database instance DB if it is an (ordinary)
answer to Q(¯x) in every minimal repair of DB, i.e. in every database instance
over the same schema and domain that diﬀers from DB by a minimal (under set
inclusion) set of inserted or deleted tuples.

Computing consistent query answers is a natural problem in DBs. Apart from
applications in data integration [10], we also foresee interesting applications in

V. Dahl and P. Wadler (Eds.): PADL 2003, LNCS 2562, pp. 208–222, 2003.
c(cid:255) Springer-Verlag Berlin Heidelberg 2003

Logic Programs for Querying Inconsistent Databases

209

the context of intelligent information systems, where a particular user might
impose his/her particular view of the semantics of the database by querying the
database through his/her user ICs, that are not necessarily maintained by the
DB central administration. This user could specify his/her own constraints as
queries are posed, by means of a new, extra SQL statement or a new option in
the usual menu for interacting with the DB.

The mechanism presented in [2] for consistent query answering (CQA) has
some limitations in terms of the ICs and queries it can handle. In [4], a more
general methodology based on logic programs with a stable model semantics was
introduced. More general queries could be considered, but ICs were restricted
to be “binary”, i.e. universal with at most two database literals (plus built-ins).
Independently, a similar methodology based on logic programs for CQA wrt
arbitrary universal ICs was presented in [23].

For CQA we need to deal with all the repairs of a database, but hopefully 
in a compact, succinct manner, without having to compute all of them
explicitly. Actually, the database repairs corresponds to just an auxiliary conceptual 
notion used to characterize what is relevant to us, the consistent answers.
In consequence, a natural approach consists in providing a manageable logical
speciﬁcation of the class of database repairs, that treats them as a whole. The
speciﬁcation must include information about the database and the ICs.

In this paper we show how to specify the database repairs by means of simple 
classical disjunctive normal programs with a stable model semantics. The
database predicates in these programs contain annotations as extra arguments.
In their turn, the annotations are inspired by the theories written in annotated
predicate logic that specify database repairs as presented in [3,8]. Nevertheless,
 the programs are classical, as opposed to annotated or paraconsistent logic
programs [11,25]. The coherent stable models of the program turn out to correspond 
to the database repairs. The logic programs introduced in [4,23] to specify
database repairs may contain an exponential number of rules depending on the
number of database literals appearing in the ICs. However, the programs presented 
here contain only a linear number of rules.

With this approach we reach two goals. The ﬁrst goal consists in obtaining
a computable speciﬁcation of all the possible minimal sets of changes required
to restore the consistency of a theory corresponding to the positive information 
explicitly stored in a relational database. However, we are not interested
in computing database repairs, neither in repairing in any way the inconsistent
database. Actually, the main, second goal consists in providing a general computational 
mechanism to obtain the consistent answers to a ﬁrst order query.
They can be obtained by “running” the combination of the repair program and
a query program under the skeptical stable model semantics that sanctions as
true what is true of every stable model. The less a logic programming implementation 
explicitly computes all stable models in order to answer a query, the
better. We have experimented with DLV , an implementation of the disjunctive
stable model semantics [19].

