Reducing Complexity of Process Tailoring

Transformations Generation

Luis Silvestre(B), Mar´ıa Cecilia Bastarrica, and Sergio F. Ochoa

Computer Science Department, University of Chile,

Beauchef 851, 8370459 Santiago, Chile

{lsilvest,cecilia,sochoa}@dcc.uchile.cl

http://www.dcc.uchile.cl

Abstract. Tailoring software processes to particular contexts applying
model transformations has proved to be appropriate and technically feasible.
 However, the use of this approach can become awkward for most
process engineers, because it requires knowledge about the process and
its tailoring needs, and also about building model transformations. In a
previous work we have proposed a tool based on model-driven engineering 
(MDE) for automatically generating software process model tailoring 
transformations. This paper presents an improved user interface of
the tool and proposes a process for guiding its application for tailoring
processes. We illustrate its use by applying it for tailoring the process of
Rhiscom, a Chilean small software company. The tool and the process
balance the formally required by MDE with the usability needed by the
process engineers.

Keywords: Software process · Tailoring transformations

1 Introduction

Software process tailoring allows process engineers to adapt the organizational
software process to the needs of particular projects. Although there is a variety
of approaches for implementing tailoring processes, during the last years several
researchers have identiﬁed in MDE a promising opportunity to address it [3,6,7].
MDE-based tailoring takes as input the organizational process model including
its variability, and the project context model, and generates the project adapted
process model through a model transformation. For each variable process element
in the process model, there will be a rule in the tailoring transformation that
determines if it is to be included or not (for optional elements) or which element
should be included in the adapted process (for alternative elements), according
to the values of the project context model attributes.

MDE-based approaches in general allow software modeling at diﬀerent
abstraction levels and addressing diﬀerent application domains [12]. However,
it requires mastering new concepts and formalisms relating model deﬁnition and
writing model transformations in speciﬁc languages [13]. Particularly, generating
c(cid:2) Springer International Publishing Switzerland 2015
S. Hammoudi et al. (Eds.): MODELSWARD 2014, CCIS 506, pp. 171–182, 2015.
DOI: 10.1007/978-3-319-25156-1 11

172

L. Silvestre et al.

appropriate tailoring transformations requires two diﬀerent kinds of knowledge.
On the one hand, process engineers, who are in charge of this activity, should
know precisely how the context attribute values impact the process variation.
And on the other hand, they should be able to write the model transformation,
 mastering the syntax and semantics of the transformation language. Most
process engineers usually have the ﬁrst kind of knowledge (i.e., how the process
should be tailored), but they are usually not experienced in the use of transformation 
languages and MDE concepts. Moreover, software engineers that know
how to build models and transformations are almost never in charge of processes
and tailoring.

Costa-Silva et al. [5] present a qualitative study where they compare eight of
the most relevant approaches for developing model transformations. The comparison 
considers aspects about the approaches foundations, features and applicability.
 The study shows that these proposals have rigorous foundations (from a
theoretical perspective), they include most of the features required in the transformations,
 but they are diﬃcult to use by developers. These results highlight
the need for developing new solutions that simplify rule deﬁnition, while still
providing all the expressive power required for software process model tailoring.
This type of tailoring is only an example of the application scenarios that are
not well supported by the current way of developing model transformations.

In order to address this challenge, in a previous work [20] we have presented
a model-based tool that uses a generative approach to deﬁne tailoring transformations.
 This tool allows process engineers to interactively deﬁne rules using a
graphical user interface, taking advantage of the formality provided by MDE,
but hiding its inherent complexity. Thus, the process engineer deﬁnes transformation 
rules to tailor the organizational software process, only by instantiating
on a graphical user interface the project context attributes that impact variable
process elements. In this paper we describe an improved tool user interface and
we provide a process that diﬀerent stakeholders should follow for using the tool.
The rest of the paper is structured as follows. Next section presents and
discusses some related work. Section 3 presents the foundations and the general
structure used for the MDE software process tailoring tool. Section 4 presents
the tool-based tailoring process and its application to a real world case using
the improved user interface. Finally, conclusions and future work are presented
in Sect. 5.

2 Related Work

Building appropriate model transformation requires expertise for choosing the
right kind of transformation, and also for mastering the transformation language
syntax and semantics. Therefore writing these transformations is usually diﬃcult
and requires knowledge that is not usually available in process engineers. These
knowledge-gap barriers are partly addressed by transformation-by-example techniques 
[11]. Particularly, MOLA [10] and GREaT [1] allow specifying transformation 
rules through visual mapping patterns. They specify rules and mappings 
using class diagrams, but considering an environment inspired in activity

Reducing Complexity of Process Tailoring Transformations Generation

173

diagrams. Both works also allow establishing relationships between metamodel
attributes and elements. A limitation of MOLA and GREaT is that they need
the user to directly interact with metamodels and class diagrams, which still
represents a strong restriction for process engineers in terms of usability.

Varr´o and Balogh, through the VIATRA framework [25], provide a text-based
rule editor. Although this proposal is supported by Eclipse, it does not provide
an easy-to-use environment that can be used by process engineers for deﬁning
tailoring rules.

There are also some recent proposals, such as MTBE (Model Transformations 
By Example) [24,26] and MTBD (Model Transformation By Demonstra-
tion) [22], that use strategies and patterns with a visual support to simplify the
implementation of model transformations. These strategies generate part of the
code required for the model transformations, however, the process engineer still
needs to understand and complete such a code. Therefore, using these approaches
also represents a challenge for process engineers.

Fig. 1. MDE-based software process tailoring (Colour ﬁgure online).

Hurtado et al. [7] proposes a tailoring approach that generates an adapted
process model from a general process model, which is adapted according to a
project context model. The tailoring transformation is written in ATL [17] and
it demonstrates the feasibility of this approach for tailoring software processes;
however, it does not help overcame the stated problem due the rules still need
to be written using ATL.

This knowledge-gap has lately been addressed by new proposals such as
Domain-speciﬁc transformation languages [18]. For instance, Irazabal et al. [8]
have proposed a DSTL implementation using MOFScript
[15] (transformation 
language Model-to-Text) for the domain of data bases. Canovas et al. [9]
have development Gra2Mol using Java (general purpose language) for generating
grammar-to-model transformations.

174

L. Silvestre et al.

3 MDE-based Software Process Tailoring

Figure 1 shows the general architecture of the MDE-based process tailoring approach 
organized as a megamodel [2]. This approach requires two input models: an
organizational software process model that conforms to the eSPEM (experimental 
SPEM) metamodel that is a subset of SPEM (Software Process Engineering
Metamodel) [14], and a project context model that is an instance of the Organizational 
Context Model. This approach uses a model-to-model transformation
(the yellow triangle in the middle of Fig. 1) to generate a project adapted software
process model as output. The resulting process model also conforms to eSPEM
but includes no variability.

The organizational software process model is deﬁned using the Eclipse Process
Framework Composer (EPFC)1, including its variabilities [21]. This tool has been
well received by software companies’ process engineers because it is free and provides 
an intuitive user interface. The process, as speciﬁed in EPFC, conforms
to the UMA (Uniﬁed Method Architecture) metamodel in its internal representation,
 and the tool exports an xml ﬁle that cannot be directly used as input
for the tailoring transformation. Therefore, an injector has been built for converting 
the process representation between format,s obtaining an organizational
software process model in xmi format and conforming to eSPEM as needed.

The organizational context model indicates the project attributes that may
inﬂuence the process tailoring along with their potential values. A project context 
model is an instance of this organizational context model. The organizational 
context model is deﬁned using Eclipse Modeling Framework (EMF) and
conforming to the SPCM (Software Process Context Metamodel) metamodel [7].
The Variation Decision Model (VDM), which conforms to a Variation Decision 
MetaModel (VDMM) [20], is a mapping that deﬁnes the tailoring rules using
domain concepts. Each mapping has two subcomponents: Condition and Conclusion.
 Conditions may be simple (conditions [attribute and its value] with logical
connectors), or complex (conditions are formed by combining simple conditions
[attributes and its values] with logical connectors). Conclusions indicate if the
process indicate a boolean value (true or false) for optional process elements, or
a particular process element identiﬁcation for alternative process elements.

Provided that model transformations can be also considered as models conforming 
to their language metamodel [4], a Higher-Order Transformation (HOT)
is a transformation in itself, but it either takes a transformation model as input
or generates a transformation model as output [23]. We use a HOT to generate
the tailoring transformation, thus avoiding writing it directly. Our HOT takes
the VDM previously built as input, and its output is the desired process tailoring
transformation. There are two approaches for building HOTs: model-to-model
(M2M) and model-to-text (M2T) transformations. We choose M2T and therefore 
the output is the ATL source code of the tailoring transformation. We have
decided to use a general purpose language, such as Java, to build the HOT, at
least for the ﬁrst version, because it is a mature language that is easily mas1 
https://eclipse.org/epf/downloads/tool/tool downloads.php.

Reducing Complexity of Process Tailoring Transformations Generation

175

tered by developers [19]. A ﬁnal version of the HOT will be implemented in a
transformation-speciﬁc language, probably ATL for symmetry of the solution.

The tailoring transformation in this proposal is written in ATL. For each
variable element identiﬁed as part of the organizational process, there is a rule
included in the transformation. For optional process elements, the rule decides,
according to the values in the project context model attributes, if it should
be included or not in the adapted process. For process elements deﬁned with
alternatives, the rule decides which of them will be included in the adapted
process. Even though this strategy seems quite clear, translating it into ATL
rules is a challenging task.

4 Applying the MDE-Based Tool

In this section we ﬁrst describe who, what and when the tool should be used
for process tailoring, i.e., its associated process. Afterwards, we illustrate the
application of the tool and process for tailoring the software process of Rhiscom,
a small Chilean software company.

4.1 The Process

The stakeholders for tool application process are: the process engineer, the
project manager and the tool itself. Next, we will brieﬂy describe each of them.

Fig. 2. Process supported by the proposed tool.

176

L. Silvestre et al.

Fig. 3. Rhiscom’s requirements activity.

Process Engineer. According to Fig. 2, the process engineer is in charge of the
tasks Deﬁne Organizational Process, Deﬁne Organizational Context, and Deﬁne
Tailoring Rules (orange in the ﬁgure). The deﬁnition of the process, together
with its variability, is addressed using EPF Composer. Figure 3 shows a part
of Rhiscom’s process highlighting its variability. We have also developed a webbased 
tool to support the process engineer to Deﬁne Organizational Context [16].
The only task the process engineer should do applying the proposed tool is to
Deﬁne Tailoring Rules.
Project Manager. The most appealing feature of the proposed tool is that
the project manager should only Deﬁne Project Context, i.e., the characteristics
of the project at hand. However, as shown in Fig. 2, he/she can only do this
once the Organizational Context has been deﬁned. Afterwards, once the Project
Adapted Process is available, he/she can apply it for developing the concrete
project.
The Proposed Tool. The tool plays an active role in the process. Once the
Organizational Process and the Project Context have been deﬁned, the tool is in
charge of generating the Project Adapted Process. However, and according to the
description in Sect. 3, the internal structure of the tool is much more complex
than just a task.

Reducing Complexity of Process Tailoring Transformations Generation

177

Fig. 4. User interface for input models selection.

Fig. 5. Selection of process variation points.

4.2 Application Case

Rhiscom is a Chilean software company that develops integrated software and
hardware solutions for points-of-sale. It is a 15 year old company and it has
deﬁned its development process around ﬁve years ago. Since two years ago, they
have been addressing the issue of systematically tailoring its process, provided
that is was being tailored anyway but with no agreed criterion. In this section
we illustrate how the proposed tool supports this activity for tailoring Rhiscom’s
process.

The process engineer uses a visual interface to indicate the models that will
be used in the deﬁnition of tailoring rules (Fig. 4). After that, she/he can deﬁne
tailoring rules for each process variation point. This activity involves two steps:
the interactive deﬁnition of a decision model (using the visual user interface) and
the automatic generation of the tailoring transformation, based on the previously
built decision model.

178

L. Silvestre et al.

Fig. 6. Interactive interface for deﬁning the VDM.

Fig. 7. Tailoring transformation. “Establish Requirements Baseline” has alternatives
so a decision is made with respect to which one is included.

During the ﬁrst step, the process engineer uses the tool to indicate which
variation point he/she will deﬁne (see Fig. 5) and then interactively deﬁne the
relationships between the context attribute values and the process variable element.
 Repeating this for all variable elements will yield a Variation Decision
Model (VDM). This VDM is a mapping, i.e., a high-level representation of the
transformation rules. The VDM is then used as input for a Higher Order Transformation 
(HOT) to automatically generate the tailoring transformation that
will be used to adapt the organizational software process model.
Interactive Deﬁnition of the Variation Decision Model. Once the process
engineer has speciﬁed the models that will be used as input, she/he can start
with the interactive deﬁnition of the Variation Decision Model. Figure 5 shows
ﬁve optional variation points for Rhiscom’s process: Requirements, Execute Test
Cases, Meet for integration agreement, and Design, and also two alternative

Reducing Complexity of Process Tailoring Transformations Generation

179

Fig. 8. Rhiscom’s process after applying the tailoring transformation.

variation points: Establish Requirements Baseline and Specify Requirements. If
the user selects a variation point (e.g., Establish Requirements Baseline) and
clicks on the “Create Rules” button, she/he can deﬁne the rules that will be used
to tailor the organizational process in such a point, depending on the values of
the context attributes of a speciﬁc project.

Figure 6 shows the interactive interface that allows the process engineer to
deﬁne the decision model. Each decision has a condition and a conclusion. The
condition is a predicate that could be simple or complex. Simple predicates are
typically a conjunction of context attributes and particular values. Complex conditions 
also consider the use of disjunctions. In the upper right part of the ﬁgure
we can see the conditions deﬁned so far.

In this example, the engineer deﬁnes that the Establish Requirements Baseline 
activity should be replaced by “Establish Requirements Baseline without
Test Cases” when the “Project Tye” is New Development, “Project Duration”
is Medium and “Business Knowledge” is Unknown. This decision is part of the
adaptations deﬁned by Rhiscom for its organizational process. The actual ATL
rule, that is generated according to this interactive deﬁnition, is shown in Fig. 7.

180

L. Silvestre et al.

Resulting Process. Figure 8 shows the resulting process after applying the
tailoring transformation interactively generated. As can be seen, the “Establish 
Requirements Baseline” task has been replaced by “Establish Requirements
Baseline without Test Cases” as indicated by the process engineer.

5 Conclusions and Future Work

We have presented model-based tool for interactively deﬁning and automatically 
generating process tailoring transformations, as well as shown its practical
application in a real world example. The tool combines MDE and generative
programming aspects, together with a web-based user interface. The resulting
tool is powerful enough to generate the tailoring transformation for a real world
company’s process and yet usable for process engineers.

The main purpose of building an interactive tool was aiding the process engineer 
to tailor her/his process. We provided a running example that shows how
to apply MDE concepts without directly interacting with the code or requiring
knowledge about transformation languages. Transformations in general could be
quite complex. However, we have shown that building process tailoring transformations 
requires only a few types of rules that may be automatically generated
from a VDM. Although we have been able to generate transformations automatically,
 this kind of tool is only applicable for the software process domain, but
this experience can be the starting point to be extended to other domains.

Complex rules can be generated using simple conditions, logical operators
and complex conditions (with logical connectors). In this sense, if there are rules
with diﬀerent conclusions on the same variability point, it still does not solve it;
this can be addressed by adding constraint deﬁnitions. Future work is necessary
to extend the VDM to support constraints deﬁnition between software process
elements and complex rules.

We are currently conducting industrial experiments in order to collect empirical 
evidence to help us validate the tool expressiveness for tailoring a variety of
software processes and its usability for real world process engineers.

Acknowledgements. This work is partly funded by Project Fondef GEMS
IT13I20010, Conicyt, Chile. The work of Luis Silvestre was supported by PhD Scholarship 
Program of Conicyt, Chile (CONICYT-PCHA/2013-63130130).

References

1. Balasubramanian, D., Narayanan, A., van Buskirk, C.P., Karsai, G.: The Graph

Rewriting and Transformation Language: GReAT. ECEASST 1 (2006)

2. Bastarrica, M.C., Simmonds, J., Silvestre, L.: Using megamodeling to improve
industrial adoption of complex MDE solutions. In: Atlee, J.M., Kulkarni, V.,
Clark, T., France, R.B., Rumpe, B. (eds.) 6th International Workshop on Modeling
in Software Engineering, MiSE 2014, Hyderabad, India, 2–3 June 2014, pp. 31–36.
ACM (2014)

Reducing Complexity of Process Tailoring Transformations Generation

181

3. Bendraou, R., J´ez´equel, J., Gervais, M., Blanc, X.: A comparison of six UML-based
languages for software process modeling. IEEE Trans. Softw. Eng. 36(5), 662–675
(2010)

4. B´ezivin, J., B¨uttner, F., Gogolla, M., Jouault, F., Kurtev, I., Lindow, A.: Model
transformations? Transformation models!. In: Wang, J., Whittle, J., Harel, D.,
Reggio, G. (eds.) MoDELS 2006. LNCS, vol. 4199, pp. 440–453. Springer,
Heidelberg (2006)

5. Costa Silva, G., Rose, L.M., Calinescu, R.: A qualitative study of model transformation 
development approaches: supporting novice developers. In: Hebig, R.,
Bendraou, R., V¨olter, M., Chaudron, M.R.V. (eds.) Proceedings of the 1st International 
Workshop on Model-Driven Development Processes and Practices Colocated 
with ACM/IEEE 17th International Conference on Model Driven Engineering 
Languages and Systems (MoDELS 2014), Valencia, Spain, 28 September
2014, vol. 1249. CEUR Workshop Proceedings, pp. 18–27. CEUR-WS.org (2014)
6. De Oliveira Barros, M., Werner, C.M.L., Travassos, G.H.: A system dynamics
metamodel for software process modeling. Softw. Process: Improv. Pract. 7(3–4),
161–172 (2002)

7. Hurtado Alegr´ıa, J.A., Bastarrica, M.C., Quispe, A., Ochoa, S.F.: MDE-based

process tailoring strategy. J. Softw.: Evol. Process 26(4), 386–403 (2014)

8. Irazabal, J., Pons, C., Neil, C.: Model transformation as a mechanism for the
implementation of domain speciﬁc transformation languages. SADIO Electron. J.
Inform. Oper. Res. 9(1), 49–66 (2010)

9. C´anovas Izquierdo, J.L., Molina, J.G.: A domain speciﬁc language for extracting
models in software modernization. In: Paige, R.F., Hartman, A., Rensink, A. (eds.)
ECMDA-FA 2009. LNCS, vol. 5562, pp. 82–97. Springer, Heidelberg (2009)

10. Kalnins, A., Barzdins, J., Celms, E.: Model transformation language MOLA.
In: Aßmann, U., Ak¸sit, M., Rensink, A. (eds.) MDAFA 2003. LNCS, vol. 3599,
pp. 62–76. Springer, Heidelberg (2005)

11. Kappel, G., Langer, P., Retschitzegger, W., Schwinger, W., Wimmer, M.: Model
transformation by-example: a survey of the ﬁrst wave. In: D¨usterh¨oft, A., Klettke,
M., Schewe, K.-D. (eds.) Conceptual Modelling and Its Theoretical Foundations.
LNCS, vol. 7260, pp. 197–215. Springer, Heidelberg (2012)

12. Kleppe, A.G., Warmer, J., Bast, W.: MDA Explained: The Model Driven Architec-
ture: Practice and Promise. Addison-Wesley Longman Publishing Co., Inc., Boston
(2003)

13. Mens, T., Czarnecki, K., Gorp, P.V.: 04101 discussion - a taxonomy of model
transformations. In: B´ezivin, J., Heckel, R. (eds.) Language Engineering for ModelDriven 
Software Development, 29 February–5. March 2004, volume 04101 of
Dagstuhl Seminar Proceedings. Internationales Begegnungsund 
Forschungszentrum 
f¨ur Informatik (IBFI), Schloss Dagstuhl, Germany (2004)

14. Object Management Group. Software Process Engineering Metamodel SPEM 2.0

OMG Speciﬁcation. Technical report ptc/07-11-01, OMG (2008)

15. Oldevik, J., Neple, T., Grønmo, R., Aagedal, J.Ø., Berre, A.-J.: Toward standardised 
model to text transformations. In: Hartman, A., Kreische, D. (eds.) ECMDAFA 
2005. LNCS, vol. 3748, pp. 239–253. Springer, Heidelberg (2005)

16. Ortega, D., Silvestre, L., Bastarrica, M.C., Ochoa, S.: A tool for modeling software
development contexts. In: Alarc´on, R., Barcel´o, P. (eds.) SCCC, Valparaiso, Chile,
2012. IEEE Computer Society (2012)

17. Project, A.E.: Atlas transformation language (2006). http://www.eclipse.org/atl/
18. Rumpe, B., Weisem¨oller, I.: A Domain Speciﬁc Transformation Language. Computing 
Research Repository (2014). abs/1409.2309

182

L. Silvestre et al.

19. Silvestre, L., Bastarrica, M.C., Ochoa, S.F.: Implementing HOTs that generate
transformations with two input models. In: XXXII International Conference of the
Chilean Computer Science Society SCCC 2013, Temuco, Chile, November 2013

20. Silvestre, L., Bastarrica, M.C., Ochoa, S.F.: A model-based tool for generating
software process model tailoring transformations. In: Pires, L.F., Hammoudi, S.,
Filipe, J., das Neves, R.C. (eds.) MODELSWARD 2014 - Proceedings of the 2nd
International Conference on Model-Driven Engineering and Software Development,
Lisbon, Portugal, 7–9 January 2014, pp. 533–540. SciTePress (2014)

21. Simmonds, J., Bastarrica, M.C., Silvestre, L., Quispe, A.: Variability in software
process models: requirements for adoption in industrial settings. In: 4th International 
Workshop on Product LinE Approaches in Software Engineering, San
Francisco, California, USA, May 2013

22. Sun, Y., White, J., Gray, J.: Model transformation by demonstration. In:
Sch¨urr, A., Selic, B. (eds.) MODELS 2009. LNCS, vol. 5795. Springer, Heidelberg
(2009)

23. Tisi, M., Cabot, J., Jouault, F.: Improving higher-order transformations support in
ATL. In: Tratt, L., Gogolla, M. (eds.) ICMT 2010. LNCS, vol. 6142, pp. 215–229.
Springer, Heidelberg (2010)

24. Varr´o, D., Balogh, Z.: Automating model transformation by example using inductive 
logic programming. In: Cho, Y., Wainwright, R.L., Haddad, H., Shin, S.Y.,
Koo, Y.W. (eds.) Proceedings of the 2007 ACM Symposium on Applied Computing
(SAC), Seoul, Korea, 11–15 March 2007, pp. 978–984. ACM (2007)

25. Varr´o, D., Varr´o, G., Pataricza, A.: Designing the automatic transformation of

visual languages. Sci. Comput. Program. 44(2), 205–227 (2002)

26. Wimmer, M., Strommer, M., Kargl, H, Kramler, G.: Towards model transformation 
generation by-example. In: 40th Hawaii International Conference on Systems
Science (HICSS-40 2007), CD-ROM/Abstracts Proceedings, 3–6 January 2007,
Waikoloa, Big Island, HI, USA, p. 285. IEEE Computer Society (2007)

