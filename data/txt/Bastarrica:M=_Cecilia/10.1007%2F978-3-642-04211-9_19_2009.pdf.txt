Reuse of Architectural Knowledge

in SPL Development(cid:2)

Pedro O. Rossel1,2, Daniel Perovich1, and Mar´ıa Cecilia Bastarrica1

1 CS Department, Universidad de Chile
{dperovic,cecilia}@dcc.uchile.cl

2 Dept. Ingenier´ıa Inform´atica, Univ. Cat´olica de la Sant´ısima Concepci´on

prossel@ucsc.cl

Abstract. Software Product Lines (SPL) promote reuse within an application 
domain in an organized fashion. Preimplemented software components 
are arranged according to a product line architecture (PLA).
Balancing possibly conﬂicting quality attributes of all potential products
makes PLA design a challenging task. Moreover, if quality attributes are
part of the variabilities of the SPL, then a unique PLA may result highly
inconvenient for particular conﬁgurations. We consider the PLA as a set
of architectural decisions organized by the features in the Feature Model.
A particular product architecture (PA) is deﬁned as the subset of decisions 
associated to the chosen features for the product. Architectural
knowledge is then reused among products and when new features are
required in the SPL. Variability at the quality attribute level will impact
the style of the resulting architecture, thus choosing diﬀerent quality features 
will produce PAs following diﬀerent styles, even within the same
SPL. We use MDE techniques to operationalize this procedure and we
illustrate the technique using the case of a Meshing Tool SPL.

1 Introduction

Software product lines (SPL) are frameworks for organized and planned reuse
of core assets within a particular application domain [5]. Software components
are typical reusable assets, but there are several others as well: software requirements,
 documentation, test cases, and most importantly the product line
architecture (PLA). A PLA identiﬁes the variabilities of the SPL at the design
level: some components are optional, some others are mandatory, and for others
there is a series of diﬀerent alternatives that may be chosen. A PLA also deﬁnes 
the structure that is shared by all products in the SPL, and as such, it has
a determinant impact on the quality attributes the products exhibit. We have
worked with a meshing tool SPL for a couple of years and we have deﬁned a
PLA for it [1], considering variability at the functional level, as most authors

(cid:2) The work of Pedro O. Rossel was partially supported by grant No. UCH 0109 from
MECESUP, Chile and by grant of the Departamento de Postgrado y Post´ıtulo de la
Vicerrector´ıa de Asuntos Acad´emicos of Universidad de Chile. The work of Daniel
Perovich has been partly funded by CONICYT Chile.

S.H. Edwards and G. Kulczycki (Eds.): ICSR 2009, LNCS 5791, pp. 191–200, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009

192

P.O. Rossel, D. Perovich, and M. C. Bastarrica

do. This PLA seems to work well for most cases, and its tiers style [3] makes it
nicely portable and extensible, not necessarily penalizing its performance [6].

But there are circumstances where variability should be at the quality attribute 
level, and then an explicitly deﬁned PLA may not be the best solution
for all the products in the SPL. For example, in the case of meshing tools, we have
found that when parallel implementations for the algorithms are required [9,17],
then not only a diﬀerent deployment view is required to show the distributed
setting, but also new components in charge of dividing the mesh among diﬀerent
processors and synchronizing the results are required as part of the tiers architecture 
too. Therefore the PLA cannot be reused directly as it is, and to the best
of our knowledge there is no systematic approach for adapting the PLA to new
circumstances derived from changes in quality attributes once it is designed.

In this paper, we assume that the domain model is deﬁned using a Feature
Model (FM) [8,11], and each product in the SPL can be characterized with a
feature conﬁguration model (FCM), i.e. a FM where all variabilities are resolved.
Features in the FM correspond to critical functional and quality requirements
documented in separate artifacts, hence, we consider variability at both functional 
and quality level. Following the approach in [18], we consider the PLA as
a set of architectural decisions organized by the features in the FM, and each
particular product architecture (PA) is deﬁned as the subset of decisions associated 
to the chosen features for the product [15]. Architectural knowledge is
then reused among products and when new features are required in the SPL.
Variability at the quality attribute level will impact the style of the resulting
architecture, thus choosing diﬀerent quality features will produce PAs following
diﬀerent styles, even within the same SPL. We code these decisions as model
transformations, so each PA could be built as a sequence of model transformations 
associated to the corresponding FCM [7]. The case of the meshing tool
SPL is used along the paper to illustrate our proposal. The case study was implemented 
extending the toolset developed in a previous work [16] using the
same technologies.

Section 2 discusses related work. Section 3 describes how the PLA is deﬁned
as a set of model transformations, and how particular PAs are derived. Section 4
summarizes some conclusions and presents ongoing and future work.

2 Related Work

In a previous work [15] we have built software architectures by resolving requirements 
one by one and recording the resulting rationale as the sequence of model
transformations. In [16] we applied this approach for automating the complete
application engineering stage in the context of software product lines. We dealt
with variability at the functional level exclusively, so the resulting PLAs were
guided by a single architectural style shared among all products. In this paper,
we extend these previous work by considering variability at the quality level.
Then, diﬀerent architectural styles may guide the design structure of diﬀerent
products, making apparent the need to structure and document architectural
knowledge so reuse is feasible.

Reuse of Architectural Knowledge in SPL Development

193

Matinlassi shows his QAMT technique in [13] for transforming architecture
models to new models according to deﬁned quality requirements. This approach
is similar to ours, but it does not explicitly document which requirements are
changing, and therefore this knowledge is only kept by the architect. In [21] a
systematic approach for dynamical reconﬁguration of the PA for mobile settings
is presented and they apply MDE techniques for automating this approach [20].
However, dynamically reconﬁguring the PLA for them does not mean to change
the PLA style since quality attributes are not change drivers. Also the binding
time for mobile applications is runtime, while for meshing tools is design time,
and thus we have the opportunity to adapt the PA to the particular needs in
advance. The approach followed in [4] is similar to ours because they also use
feature models and transformations for product derivation, but they focus on
functionality conﬁguration directly building products and not stressing architectures.
 Our goal is to build the PA that best ﬁts the selected quality attributes.
In [12], a procedure is provided for building a PLA based on the quality attributes,
 and using architectural patterns as we do, but they do not focus on
how particular quality requirements impact the architecture. On the other hand,
in [14] the QRF method is proposed for establishing traceability between quality
attributes and the PLA, but mainly based on goals.

In [2], the Category Theory concept of commuting diagram is used to expose
the foundation for MDE, SPL and Computation Design. A set of arrows are associated 
to features, and a feature model indicates which are the valid combinations
of feature usage. They apply MDE to deﬁne a DSL that eases the generation of
some of these arrows. While we use feature models for the same purpose, in our
approach artifacts are actually models, and we deﬁne the arrows that build the
PAs in terms of model transformations, not as meta-transformations that generate 
the arrows. Combining SPL and MDE is also our goal. [19] applies FeatureOriented 
MDD to architectural synthesis. They use a XML-based language to
represent decisions, they associate a model transformation to each feature, and
particular architectures are synthesized by composing transformations. In contrast 
to our approach, they use features to represent only functionality, and they
require transformations to respect commutativity diagrams. In our work, we require 
that transformation rules are coded only considering the context of the
associated feature.

3 Documenting the PLA Implicitly

The goal of our approach is to enable architectural knowledge reuse and to
automate the development of the Application Design stage.

3.1 Assumptions and Rationale

Features represent functionality and quality attributes. Commonalities and variabilities 
in a SPL usually deﬁne the expected functionality of the products while
the expected quality attributes are shared among all products. We also consider

194

P.O. Rossel, D. Perovich, and M. C. Bastarrica

quality attributes as part of the feature model since in several settings they may
also be considered as variabilities. In all cases, we assume that requirements
represented by each feature are speciﬁed in a separate artifact.

Features lead architecture construction. Domain Design traditionally focuses on
the construction of the PLA that embodies the critical design decisions that
address functionality and quality, and also commonalities and variabilities of the
SPL. In our approach, we organize these decisions in terms of the features in the
Feature Model, which in turn, guide the compositional structure of the product
architecture. Each feature that may be selected as part of a product inspires
a set of architectural decisions that guides the construction of part of the PA
that includes that feature. Decisions are made locally to each particular feature,
mainly considering its close context, i.e. its direct member features or siblings.
The more local to the feature the decision, the more reusable. However, certain
architectural decisions may depend on features which are not close, creating a
kind of dependency among the involved features.

Record the architecting activity, not the architecture. In our approach, we record
the product line architecting activity instead of the PLA. For each feature in
the Feature Model, we preserve the set of decisions involved in providing this
feature by the architecture. Such decisions are explicitly recorded as the set of
actions that must be performed on a PA to support the feature. These actions
are described in terms of model transformation rules that output a fragment
of the PA model when the particular feature is present in the product. Then,
the whole set of model transformation rules corresponding to the features in the
Feature Conﬁguration Model constitutes the core of the model transformation
that produces a particular PA.

Incrementally develop the SPL. In our process, the (implicit) PLA can be built
incrementally. While a complete Feature Model is usually built during Domain
Analysis, the associated design decisions can be produced incrementally by addressing 
only those features that are required by each particular product under
development and afterward they can be reused in subsequent products including
the same features. Our modularization strategy not only favors incrementality,
but also evolvability as changes in the SPL scope have restricted impact on other
developed artifacts besides the Feature Model itself. The development eﬀort is
greater for the ﬁrst products as decisions for all commonalities must be developed
as they will participate in all products.

3.2 Model-Driven Architecture Development
Domain Analysis. The metamodel we use for building the Feature Model is
that proposed by Czarnecki et al. [8]; we depict it in Figure 1. All Features in
the Feature Model have distinct names and may have attributes and composing 
members. Root features are used to modularize the model; they cannot
be members of other features, and exactly one of them must be marked as
main in the model. Solitary and Grouped features represent those that are

Reuse of Architectural Knowledge in SPL Development

195

Feature Model Metamodel

name : String
value : String

0..*

attributes

1

name : String

1

0..*
members

main : Boolean

lower : Natural
upper : UNatural

1

0..*

lower : Natural
upper : UNatural

1

members

0..*

Fig. 1. Feature Model Metamodel proposed by Czarnecki et. al. [8]

Meshing Tool

User Interface

Geometry

Generate
initial mesh

Mesh Processing
Response Time

Mesh Processing

Distribution

Command
Language

Form Fill−in

CSG

b−rep

dd−rep

2D

Distributed Non−Distributed

3D

Symbols

Mandatory feature
Optional feature

Alternative features

Inclusive−or features

Menu Selection

Direct

Manipulation

Delaunay 2D

Sphere−packing

Quadtree

Octree

Delaunay 3D

Advancing
front 2D

Meshing Tool

Intersection

based approach

Advancing
front 3D

Mesh

2D Mesh

3D Mesh

Algorithms

Refine

Optimize

PLC

Output
Format

PLSG

Move

Boundary

Improve

Derefine

Polyhedra with
shared vertices

Triangle

Medit Tool

2D Mixed
element

Tetrahedral

3D Mixed
element

Quadrilateral

Hexahedral

Fig. 2. Feature Model for Meshing Tools

ungrouped and grouped, respectively. Members of composed features can be
Solitary, Reference to a particular Root feature, or Group. A Group consists
of a set of Grouped or Reference features. Variability is represented by the car-
dinality: for Solitary features, cardinality indicates how many times it can be
used to compose the owner feature, and for Groups, cardinality indicates how
many members can be actually used.

Figure 2 describes a FM including six functional areas involved in Meshing
Tools. The User Interface feature represents all possible user interfaces for a
product. Geometry indicates diﬀerent mechanisms to load into the tool a representation 
of the object to be modeled, in diﬀerent input formats. Generate
initial mesh provides several algorithms for transforming an input geometry 
to a Mesh. These algorithms generate either 2D or 3D meshes. The initial 
mesh could need to be modiﬁed, both in quality and size of its elements;
here we can use diﬀerent Algorithms. Finally, the mesh can be saved in diﬀerent 
Output Formats. We also included two quality attribute requirements: Mesh
Processing Response Time and Mesh Processing Distribution. The former

196

P.O. Rossel, D. Perovich, and M. C. Bastarrica

Feature-to-Architecture Transformation Rule Metamodel

1

1

0..*

declarations

0..*
rules

1

top

1

owner

0..1

name : String

members

0..*

{xor}

calledRule

0..1

0..1

helper

(from ATL-0.2)

(from ATL-0.2)

0..1 filter

variables

0..*

0..1

outPattern

0..1

actionBlock

(from OCL::Expressions)

(from ATL-0.2)

(from ATL-0.2)

(from ATL-0.2)

Fig. 3. Feature-to-Architecture Transformation Rule Metamodel

is mandatory because all products must satisfy a speciﬁed mesh processing response 
time, and the latter implies a mandatory choice between Distributed
and Non-Distributed, i.e. a variability at the quality level. We use the FeaturePlugin 
to deﬁne this Feature Model and we developed a text-to-model transformation 
which transforms the XML ﬁle produced by the FeaturePlugin to the
corresponding model of the metamodel in Figure 1.
Product Analysis. The goal of Product Analysis is the selection of the desired
features for a particular product. These features are selected from those provided
by the SPL, considering variability constraints. Thus, a Feature Configuration
Model (FCM) deﬁnes which conﬁguration of the FM represents the product to be
developed and consists of Features composed by subfeatures which are valid
with respect to all the constraints of the FM.

For the meshing tool case we will consider a 2D mesh with one input and one
output format. We will choose Improve, Reﬁne and Optimize algorithms. We will
also consider both cases for distribution, as two diﬀerent tool conﬁgurations.
Domain Design. The goal of Domain Design is to make the critical decisions 
about the PLA. Architectural patterns are used in order to address the
quality and functional requirements. Provided that features in the FM represent
functional and quality aspects, we follow the tree-structure of such a model to
modularize architectural decisions. Our approach records for each feature the
architectural decisions that are made to address the functionality and quality
variability represented by such a feature in the architecture. The architectural
decisions made during Domain Design are recorded as fragments of a compound
model transformation. Each fragment consists of a set of rules encapsulating the
knowledge of how to build the PA when the feature is present in the FCM.

Domain Design builds a Feature-to-Architecture Transformation Rule
artifact, expressed in terms of the metamodel in Figure 3. A PLA element is
formed by a set of declarations and a top feature. Each Declaration corresponds 
to a general declaration that can be used by the rules attached to each
feature. Features have distinct names, and are organized in a tree-structure inReuse 
of Architectural Knowledge in SPL Development

197

spired by the FM. The name of the Feature is used for matching purposes with
the features in an input FCM. Each Feature has a set of rules to indicate how
to aﬀect an output PA when the given feature is present in a FCM. Declaration
and Rule metaclasses are abstract for portability purposes. Specializations of the
metamodel can be made, targeting diﬀerent model transformation technologies.
In Figure 3, we also illustrate one of such specializations targeting the AtlanMod
Transformation Language (ATL) [10]. An ATLDeclaration can include either a
CalledRule or a Helper, both metaclasses of the ATL metamodel. A particular
ATLRule consists of: (i) a ﬁlter OCLExpression to distinguish among diﬀerent
cases of the input feature (e.g. whether a particular child feature is present or
not), (ii) various RuleVariableDeclarations for rule-speciﬁc constants, (iii) an
OutPattern indicating the elements in the target Product Architecture model
that must be present, and (iv) an ActionBlock for imperative actions for the
rule. These metaclasses are deﬁned in the ATL metamodel and they conform
the core composing elements of a general ATL rule in such a metamodel.

Product Design. The goal of Product Design is to deﬁne the PA for the particular 
product being developed, considering its desired features deﬁned in the
FCM. The architectural decisions made during Domain Design must be used to
produce the PA; the set of the model transformation rules corresponding to the
features included in the product under development are used to derive the PA.
To this end, we developed and applied a meta-transformation to transform
the particular Feature-to-Architecture Transformation Rule artifact developed 
during Domain Design, that produces a Feature-to-Architecture
Transformation. This meta-transformation is independent of any particular
SPL project, and only depends on the MDE technology used to express the
rules attached to features. Although to deﬁne this meta-transformation requires
considerable eﬀort, once developed it can be reused. The derived Feature-toArchitecture 
Transformation is then applied to the FCM to obtain the particular 
PA. By this means, the Product Design activity is fully automated.

The particular rules associated to the features in the meshing tool FCM are
as follows. Mesh generates a component and an interface, with the component’s
internals according to the chosen subfeatures. Similarly, GenerateInitialMesh
and OutputFormat generate a component and an interface. Algorithms generates 
a component and its chosen subfeature, in this case Reﬁne, Improve and
Optimize, add an interface for each of them. The Geometry feature generates
a Geometry component and connects it to GenerateInitialMesh following the
client-server pattern. UI generates a component for UI and adds the corresponding 
required interfaces depending on the interfaces provided by Algorithms. The
rule for Non-Distributed organizes the components according to the 3-tiers and
blackboard patterns by connecting UI with the interfaces in the second tier (the
knowledge sources), and the second tier with the third one, that in this case is
formed by the Mesh that plays the role of the blackboard. The resulting PA is
the one shown in Figure 4, that is similar to the one in [1].

In the case the Distributed feature is chosen instead, almost all rules may be
reused, and only the one referring distribution itself would be diﬀerent, organiz198


P.O. Rossel, D. Perovich, and M. C. Bastarrica

IGeometry

IRefine

IImprove

IOptimize

IOutput

IGeometry

IRefine

IImprove

IOptimize

IOutput

IGenerate

IGenerate

IMesh

IMesh

IMesh

IMesh

Fig. 4. Non-distributed product architecture

IGeometry

IRefine

IImprove

IOptimize

IOutput

IGeometry

IRefine

IImprove

IOptimize

IGenerate

IGenerate

IMesh

IRefine

IRefine

IImprove

IImprove

IOptimize

IOptimize

IMeshExchange

IOutput

IMesh

IMesh

IRefine IImprove IOptimize

IMeshExchange

IRefine IImprove IOptimize

IMesh

IRefine

IImprove

IOptimize

IMesh

IMesh

Fig. 5. Distributed product architecture

ing the PA following another pattern. In this case a relaxed 4-tier architecture is
built, where a master-slave [3] pattern is followed in the second tier, and the Mesh
as a blackboard in the fourth tier is connected with knowledge sources in both,
the second and the third tier. The rule would then add a Master Tool component 
in charge of dividing the mesh, distributing it among the Slave Tools, and
combining the results. It also adds the Slave Tool component that is in charge
of applying the algorithms to a part of the Mesh. There may be several of these
components at runtime, and as such there may be several of these processes in a
process view. The rule also connects the UI with the non-distributed knowledge

Reuse of Architectural Knowledge in SPL Development

199

sources and the Master Tool, and the Master Tool with the Slave Tool between 
each other and with Algorithms. It also connects the knowledge sources
with the Mesh, applying blackboard. The resulting PA is depicted in Figure 5.
In the case where the distributed subfeature is chosen, the rule not only adds
elements to the C&C view, but also modiﬁes the process and deployment views.
In the latter a Master Node and a Slave Node are added, and where the only
client Master Node is connected 1 to many with Slave Node. All components
but the Slave Tool are deployed to Master Node, and Slave Tool is deployed
to Slave Node. There will be a unique process running in Master Node and one
process in each Slave Node.

4 Conclusions and Future Work

Most traditional approaches to SPLs build the PLA using the FM as a basis,
but not necessarily associating features with concrete software modules [8]. We
follow a similar approach but we also include quality attributes as potentially
variable features. Designing a PLA that considers functional variabilities of all
potential products in the SPL is a complex task, and considering variabilities
at the quality level is even more complex. We provide a systematic approach to
deﬁning an implicit PLA that considers both, functional and quality variabilities,
and that also enables automatic PA generation.

This implicit PLA can be incrementally built. Only those features that are
part of already built products need to have their associated rules. This characteristic 
also allows for evolution in the SPL scope without loosing the design eﬀort
already invested: as new features are added or modiﬁed, only their rules need to
be added or updated, respectively. However, in certain cases, these changes may
need to review the rules aﬀecting other features, but the divide-and-conquer
strategy used for the design phase, makes this task easier. In all cases, the
architectural knowledge associated to each feature can be more easily reused.

One of the drawbacks of our approach is that the implicit PLA cannot be
assessed with traditional methods. Therefore, we can only asses particular PAs,
and this may be risky and costly.

We have already addressed the automation of the complete application engineering 
stage in a previous work but only considering variability at the functional
level. We still need to complete this stage when qualities vary too. Improved tooling 
is also needed.

References

1. Bastarrica, M.C., Hitschfeld-Kahler, N., Rossel, P.O.: Product Line Architecture
for a Family of Meshing Tools. In: Morisio, M. (ed.) ICSR 2006. LNCS, vol. 4039,
pp. 403–406. Springer, Heidelberg (2006)

2. Batory, D.S., Azanza, M., Saraiva, J.: The objects and arrows of computational design.
 In: Czarnecki, K., Ober, I., Bruel, J.-M., Uhl, A., V¨olter, M. (eds.) MODELS
2008. LNCS, vol. 5301, pp. 1–20. Springer, Heidelberg (2008)

200

P.O. Rossel, D. Perovich, and M. C. Bastarrica

3. Buschmann, F., Meunier, R., Rohnert, H., Sommerlad, P., Stal, M.: PatternOriented 
Software Architecture. A System of Patterns. John Wiley & Sons, Chichester 
(1996)

4. Cirilo, E., Kulesza, U., de Lucena, C.J.P.: A Product Derivation Tool Based on
Model-Driven Techniques and Annotations. Journal of Universal Computer Science 
14(8), 1344–1367 (2008)

5. Clements, P., Northrop, L.: Software Product Lines: Practices and Patterns. SEI

Series in Software Engineering. Addison-Wesley, Reading (2001)

6. Contreras, F.: Adapting a 3D Meshing Tool to a New Architecture. Master’s thesis,

Computer Science Department, Universidad de Chile (2007) (in Spanish)

7. Czarnecki, K., Antkiewicz, M., Kim, C.H.P., Lau, S., Pietroszek, K.: Model-Driven

Software Product Lines. In: OOPSLA 2005 Companion, pp. 126–127 (2005)

8. Czarnecki, K., Helsen, S., Eisenecker, U.W.: Staged Conﬁguration Using Feature
Models. In: Nord, R.L. (ed.) SPLC 2004. LNCS, vol. 3154, pp. 266–283. Springer,
Heidelberg (2004)

9. Jones, M.T., Plassmann, P.E.: Parallel algorithms for adaptive mesh reﬁnement.

SIAM Journal on Scientiﬁc Computing 18, 686–708 (1997)

10. Jouault, F., Kurtev, I.: Transforming Models with ATL. In: MoDELS Satellite

Events, pp. 128–138 (2005)

11. Kang, K.C., Cohen, S.G., Hess, J.A., Novak, W.E., Peterson, A.S.: Feature-
(FODA). Feasibility Study. Technical Report

Oriented Domain Analysis
CMU/SEI-90-TR-21. Software Engineering Institute (November 1990)

12. Kim, J., Park, S., Sugumaran, V.: DRAMA: A framework for domain requirements
analysis and modeling architectures in software product lines. Journal of Systems
and Software 81(1), 37–55 (2008)

13. Matinlassi, M.: Quality-Driven Software Architecture Model Transformation. In:

WICSA 2005, pp. 199–200 (2005)

14. Niemel¨a, E., Immonen, A.: Capturing quality requirements of product family architecture.
 Inf. and Software Technology 49(11-12), 1107–1120 (2007)

15. Perovich, D., Bastarrica, M.C., Rojas, C.: Model-Driven Approach to Software

Architecture Design. In: SHARK 2009, May 2009, pp. 1–8 (2009)

16. Perovich, D., Rossel, P.O., Bastarrica, M.C.: Feature Model to Product Architec-
tures: Applying MDE to Software Product Lines. In: WICSA/ECSA 2009, September 
2009. IEEE CS Press, Los Alamitos (2009)

17. Rivara, M.C., Calder´on, C., Fedorov, A., Chrisochoides, N.: Parallel decoupled
terminal-edge bisection method for 3d mesh generation. Engineering with Computers 
22(2), 111–119 (2006)

18. Taylor, R.N., Medvidovic, N., Dashofy, E.M.: Software Architecture. Foundations,

Theory, and Practice. John Wiley and Sons, Chichester (2009)

19. Trujillo, S., Azanza, M., Diaz, O., Capilla, R.: Exploring Extensibility of Architectural 
Design Decisions. In: SHARK-ADI 2007, May 2007, p. 10 (2007)

20. White, J., Schmidt, D.C.: Model-Driven Product-Line Architectures for Mobile
Devices. In: Proceedings of the 17th Annual Conference of the International Federation 
of Automatic Control, Seoul, Korea (July 2008)

21. White, J., Schmidt, D.C., Wuchner, E., Nechypurenko, A.: Automating ProductLine 
Variant Selection for Mobile Devices. In: SPLC 2007, pp. 129–140 (2007)

