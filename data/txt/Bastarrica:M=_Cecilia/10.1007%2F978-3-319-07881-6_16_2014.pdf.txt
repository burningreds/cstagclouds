How does Quality of Formalized Software

Processes Aﬀect Adoption?

Mar´ıa Cecilia Bastarrica1, Gerardo Matturro2, Romain Robbes1,

Luis Silvestre1, and Ren´e Vidal3

1 Computer Science Department, Universidad de Chile

2 Departamento de Ingenier´ıa de Software, Universidad ORT Uruguay

3 Amisoft, Soluciones y Servicios TI

Abstract. Deﬁning software processes allows companies to evaluate and
improve them enhancing development productivity and product quality,
as well as allowing certiﬁcation or evaluation. Formalizing processes also
helps eliminating ambiguity, and enables tool support for evolution and
automatic analysis. But these beneﬁts cannot be fully achieved if practitioners 
do not adopt the process. Some challenges related to adoption
have already been identiﬁed. In this paper we analyze the inﬂuence of the
quality of the speciﬁed process on its adoption. Adoption is measured in
terms of work products built during projects: work products that were
not built, those that were built but late during the project, and those
that were built in time. We illustrate this analysis by evaluating the
adoption of a formalized process in a small Chilean company along ﬁve
projects. We conclude that certain kinds of errors in process speciﬁcation
may threaten its adoption and thus its potential beneﬁts.

1

Introduction

Deﬁning software processes is perceived as beneﬁcial as it allows to count on a
pre-stablished way of working enabling planning, evaluation and improvement.
Deﬁned processes also enable companies to obtain an ISO certiﬁcation or a
CMMI evaluation that may provide commercial beneﬁts. Formalizing the deﬁned
process also brings the advantages of formal methods: eliminating ambiguity,
and being able to automatically analyze the process being able to ﬁnd errors
otherwise hidden [10]. However, if the formalized process is not adopted, all
these beneﬁts may not be attained. Process adoption has been identiﬁed as a
challenge by several authors [12][16], but to the best of our knowledge, it is
still not clear how the quality of the software process speciﬁcation inﬂuences
adoption.

For the last ﬁve years we have been working with small companies in Chile
aiding them deﬁning and formalizing their software processes with varying levels
of success [19]. We use SPEM 2.0 1 for the formalization and EPF Composer2 as

1 SPEM 2.0 - http://www.omg.org/spec/SPEM/
2 Eclipse Process Framework Composer - http://www.eclipse.org/epf/

M. Jarke et al. (Eds.): CAiSE 2014, LNCS 8484, pp. 226–240, 2014.
c(cid:2) Springer International Publishing Switzerland 2014

How does Quality of Formalized Software Processes Aﬀect Adoption?

227

the supporting tool, following the current trend [11]. Some of these companies
admit they are not rigorous in following their deﬁned process but they are not
aware of the causes. Others say that the resulting process is too detailed and
that it is diﬃcult for practitioners to understand and follow. These factors are
similar to those reported in the literature [16][17]. However, we have found that
companies where all the reported factors aﬀecting adoption were addressed still
have trouble in applying the process.

In this paper we focus on the inﬂuence that the quality of the software process
speciﬁcation has over its adoption. To this end we have recorded the actual use
of the software process in Amisoft, a small Chilean company. This process has
been formalized and applied for two years at the moment this research took place.
They have achieved an ISO certiﬁcation and recently a CMMI level 2 evaluation.
 We registered information about two development and three maintenance
projects [18]. For each project, the manager manually tailors the organizational
process deﬁning a subset of all the work products that are required. A Gantt
chart is built for each project indicating the expected date of construction and
modiﬁcation of each work product. During project execution, expected work
products’ state is recorder weekly. The process adoption is evaluated in terms of
expected work products that are actually built in time, those that are late, and
those that never get to be built during the project.

We have built AVISPA (Analysis and VIsualization for Software Process As-
sessment) [10], a tool that builds blueprints and highlights error patterns for a
given process model. Error patterns are identiﬁed with process elements that are
graphically abnormally diﬀerent from the remaining elements [13]. Counting on
this tool, the process engineer only needs to analyze highlighted elements, demanding 
little experience and also little previous knowledge for eﬀective process
model analysis, adding usability as well. Some of these errors are the existence of
overloaded roles, too demanded work products and waste work products, among
others. These situations indicate possible errors in the process design or speciﬁcation.
 We use some of these patterns and create new ones in order to try to
identify characteristics of the process speciﬁcation that may aﬀect its adoption.
Among our hypotheses about the possible factors related to the speciﬁed process
quality that may threaten process adoption we ﬁnd:

1. no role is responsible for the work product,
2. two or more roles are responsible for the work product,
3. too many roles are assigned to the work product,
4. the responsible role is overloaded,
5. no templates are available for the work product,
6. the work product is potentially waste, i.e., nobody needs it.

The rest of the paper is structured as follows. Section 2 presents background
concepts about software process adoption and several factors aﬀecting it. The
hypotheses about the issues in process quality that may aﬀect adoption and
their application to the company’s process are discussed in Sect. 3. The empirical
study conducted in the company is described in Sect. 4. Section 5 reports the
data analysis and the validation of the hypotheses. A survey conducted to check

228

M.C. Bastarrica et al.

our hypotheses with the company’s employees is described in Sect. 6, the threats
to the validity are descibed in Sect. 7 and some conclusion are stated in Sect. 8.

2 Software Process Adoption

Several factors can inﬂuence the successful deployment and adoption of new process 
models. At the individual level, Chroust considers that process models and
their support in the form of a software engineering environment, have a high
pervasiveness and impact on the software development process and the people
working with it [2]. To this author, an individual’s views, perceptions and motivations 
to accept and enact software process models outweigh all other factors
with respect to quality, cost, and time, and are key factors for success. Among
the human or “soft” factors, he mentions the need for learning the new process
and the additional qualiﬁcations required, the fear of added complexity, the loss
of ﬂexibility and creativity, and the amount of new documentation that must be
created and kept up to date, in detriment to “productive work”. Even though
we have witnessed the inﬂuence of these factors on adoption, we focus on the
inﬂuence that process speciﬁcation quality has on its adoption. We address some
of these issues in the employees’ interviews in Sect. 6. At the organizational level,
Rifkin considers that the diﬀerence between success and failure in the adoption
of software process innovations is related to upper-management commitment
and sponsorship, the ability or persuasiveness of change agents, the divisibility
of the innovation, how disruptive the innovation is, and whether the change is
planned and managed [17]. This issue is actually completely necessary in practice 
to enable any kind of success in adopting formalized software processes.
The company that illustrates this research has a highly qualiﬁed manager that
encourages people involved in development to strictly follow the deﬁned process.
Other factors that inﬂuence process adoption in small companies, had also
been identiﬁed in [20]: notation expressiveness and understandability, supporting
tools usability and availability, and the level of interoperability of these tools with
others used by the company. On the other hand, O’Connor and Coleman have
studied the barriers to the adoption of software process models that are based on
industry ”best practices”, such as CMM/CMMI and ISO 9000. The main factors
they have found are Documentation (overhead which can delay development
activity and whose merits are diﬃcult to convey to engineers), Bureaucracy (time
and resources which the managers believe are required to manage and apply the
software process), and the perception of limiting Creativity and Flexibility [14].
As stated by Persee [15], the trick to the success will not come from merely
building a good process; it will come from using it: using it over time, reﬁning
it, making it better and better, and allowing it to become a permanent part of
the organization’s business approach. We try to isolate in this paper some of the
factors that may promote the adoption of a good process. The introduction of
a new process into an organization can be seen as a particular case of an innovation 
in the way software development activities have to be done in the future.
Hammed, Counsell and Swift deﬁne innovation as an idea, a product, a process

How does Quality of Formalized Software Processes Aﬀect Adoption?

229

or a technology that is new to the adopting unit, and also deﬁne adoption of an
innovation as the process that results in the introduction and use of a product,
process, or practice that is new to the adopting organization [8]. When the innovation 
in question involves a change to software development practices, there are
particular diﬃculties in encouraging individual developers to adopt and sustain
the use of disciplined, repeatable processes [7]. In particular, if a methodology
is not regarded as useful by developers, its prospects for successful deployment
may be severely undermined. In other words, to the extent a methodology is not
useful, that is, it does not enable developers to be more productive and achieve
higher levels of performance in their job, they are not likely to use it in a sustained 
manner, even if it is mandated [16]. We establish some hypotheses about
the causes that make motivated developers not to use the process and we check
them against historical data of ﬁve projects in the same company.

One theoretical model widely used for addressing the technology adoption
process is the technology acceptance model (TAM) [3], which is based on the
relationships among perceived attributes of a technology, attitudes toward a
technology, and actual usage. This model employs the constructs perceived usefulness 
of a technology and perceived ease-of-use of it as main determinants for
explaining adoption. We use some of these concepts for building the survey questions 
described in Sect. 6. In [4], they analyze the factors that aﬀect software
developers’ acceptance and utilization of electronic process guides. The results
show that perceived usefulness is a strong and highly signiﬁcant determinant of
current system usage and future use intentions. If a process is represented in
electronic or paper-based form, it is not regarded as useful and it will not be
fully adopted by developers. As stated by Heijstek and van Vliet, most of the
times new processes are adopted to some extent, but not to the extent needed
to achieve any real beneﬁt [9]. Partial adoption can come in the form of just
performing some of the activities prescribed by the model, not performing the
activities in the way they are deﬁned, and/or when not all of the deﬁned work
products are elaborated and used during process execution.

This leads to deﬁne adoption of a software process as the fact that the process
model is followed to the extent that ensures process compliance, that is, when
performing the process, developers actually comply with process requirements
in order to ensure process success and delivery of desired outcomes. In deﬁning
a process model one can take two diﬀerent but complementary approaches. One
is the “activity approach” that focuses on tasks or activities that relate to work
to be done, and the other one is the “work product approach”, that focuses on
work products that relate to artifacts to be built. According to Gonzalez-Perez
and Henderson-Sellers, a methodology that focuses on expressing its work products 
rather than its process is arguably more people-oriented, being better at
dynamically reorganizing the work to be done and opportunistically exploiting
unforeseen circumstances [5]. As noted by Goodman, this last perspective can
support work product “states” for work product promotion/demotion, and assumes 
that work product production and activity execution are synonymous [6].
From this second perspective, process adoption can be reﬂected on the work

230

M.C. Bastarrica et al.

products actually elaborated and used during process execution. This is precisely 
the approach taken in this study, in order to analyze process adoption in
the target company.

3 Process Model Quality Analysis

We say that a software process is not fully adopted if there are work products
that, being necessary for a project, have either not been developed, or have
been late during the project execution. We state a series of hypotheses that may
explain why a software process could have adoption diﬃculties, and analyze
the APF process from the point of view of these hypotheses. The hypotheses are
derived from our hands-on experience with the software companies collaborating
with the ADAPTE project3, documented in our previous work [1,10], where
we analyzed the software processes of Amisoft, BBR Engineering, and DTS
(hypotheses 1, 4, and 6). Additional hypotheses where formulated and reﬁned
based on the additional analysis that we carried on for this paper (hypotheses
2, 3, and 5).

(1) No role is responsible for the work product. EPF Composer allows to assign
a role responsible for each work product. This role should be in charge of assurig
that the work product is appropriately built and modiﬁed. If there is nobody in
charge of the timely construction of the work product, it is likely that nobody
would take responsibility for it, so not assigning a responsible role for a work
product may cause it not to be built in time. AVISPA allows identifying work
products with no responsible role assigned. Analyzing APF with this pattern we
found that only three work products had no responsible role.

(2) Two or more roles are responsible for the work product. On the other hand,
there may be two or more roles responsible for a certain work product. In this
case, although the process speciﬁcation makes sure at least one role will take
care of the work product, this situation of shared responsiblility may prevent all
of them to assume it. For computing this situation we extend AVISPA so that
it colors those elements with two or more responsible roles. We found ﬁve work
product with two or more responsible roles in APF.

(3) Too many roles are assigned to a work product. There are certain work
products that are used and/or modiﬁed by more than one role. This is not
necessarily a problem in itself, but if there are too many roles that interact with
a work product coordination may become an issue for ﬁnishing appropriately and
in time. We assumed that up to three roles would be ﬁne, but having four or
more roles modifying a work product could be a source of problems. We extended
AVISPA so that those work products with four or more roles modifying it are
colored, and we found several of these elements.

(4) Overloaded role is responsible for the work product. Oveloaded roles are those
assigned to too many work products, either as responsibile or modifying them.

3

http://www.adapte.cl/?page_id=36

How does Quality of Formalized Software Processes Aﬀect Adoption?

231

If an overloaded role is in charge of a work product, he/she may have other prioritary 
tasks to do. AVISPA provides an error pattern for identifying overloaded
roles. The Project Manager is by far the role involved in more work products in
APF, so his work products are candidates to be delayed.

(5) No template is available for the work product. EPF Composer allows to
associate a template to each work product. Counting on a predesigned template
makes it easier to build the work product in time so we expect that those elements
with no template are more likely to be delayed. We extended AVISPA creating a
new error pattern that colors those work products with no template associated.
We found only a few work products in APF with no template.

(6) Potentially waste work product. If a work product needs to be used as an
input for certain task but the speciﬁed process does not state it, this task may
not be correctly executed. This situation is not always easily detected. However,
if a work product is neither marked as deliverable nor it is speciﬁed as input of
a task, it is potentially waste. Waste work products are those that are neither
needed for any task in the process nor deliverables. The AVISPA tool is able to
identify potentially waste work products. APF presents several work products
that are potential waste, at least in the formalized process; some of them may be
underspeciﬁcations (i.e., input for some task or deliverables), or actually waste
work products.

4 Empirical Study

4.1 Case Study

Our case study was conducted at Amisoft, a software services company based
in Santiago, Chile, that builds and maintains custom-order software. Amisoft
employs 43 people, and has on average 2 development contracts a year and 7
permanent maintenance contracts. In the last years, Amisoft transitioned from
an informal software development process, to a formally speciﬁed process –APF–
based on the Rational Uniﬁed Process (RUP). Further, in order to know if the
process is a net beneﬁt for the company and if employees actually follow it,
Amisoft keeps track of the artifacts that are produced during projects. A fulltime 
metric analyst is in charge of tracking the adoption to the process.

We study 2 development and 3 maintenance projects developed at Amisoft.
Table 1 contains summary statistics of the projects. SITMIX, SITLA, SITCO
and SITCORTE are systems speciﬁcally developed for the Chilean Judiciary.
They allow to automate manual processes and to eliminate paperwork. The main
functionality of these systems is a conﬁgurable workﬂow integrated with a document 
management system. Currently Amisoft is in charge of the maintenance
of these systems for its customers; that is why only SITMIX is a development
project for our case study. AMILEX is a product developed by Amisoft that encapsulates 
the knowledge acquired in paperless management workﬂow systems.
Since the process is tailored for every project, the work products created during
each project vary. In particular, there are (unsurprisingly) signiﬁcant diﬀerences

232

M.C. Bastarrica et al.

Table 1. Description of Projects Analyzed in the Empirical Study

Project
SITMIX

Type Team
Dev.

AMILEX

Dev.

1 project manager +
5 developers
1 project manager +
3 developers + 0.5 architect


SITLA

SITCO

Maint. 0.5 project manager

+ 3 developers

Maint. 0.5 project manager

+ 3 developers

SITCORTE Maint. 0.5 project manager

+ 5 developers

Months Description

12 Mixed courts information system

7

6

6

6

Parameterizable workﬂow and
digital folder

Labor Courts information system
support
Collection, Labor
Courts information system
Courts of Appeal
system

and Social

information

between the processes followed by development and maintenance projects; in
addition, individual processes vary, particularly among development projects.

4.2 Methodology

In this study, we perform a two-step investigation: we ﬁrst analyze the process
adoption spreadsheet of each project to conﬁrm our hypotheses, and then we
perform a follow-up employee questionnaire of the hypotheses.
Process adoption spreadsheet. The process adoption spreadsheet is maintained by
the metrics analyst, and it tracks each work product weekly. Each work product
that is expected to be delivered before that date is checked in order to know if it
is present. The work product is then marked, for that week, as either delivered
or late. At the end of the project, the weekly information is consolidated in order
to deﬁne 3 possible statuses for a given work product:

– Delivered on time (OT). The work product was present in the project,

and each time its delivery was expected, it was indeed present.

– Delayed (D). At least once during the project, the work product suﬀered

a delay of at least one week.

– Not delivered (ND). At the end of the project, the work product was still

not delivered.

Based on the data that we have for each work product of each project, we look

for evidence towards the validation or invalidation of each of our hypotheses.
Employee survey. In order to follow up on the ﬁrst analysis, we also conducted a
survey of the project managers of Amisoft, speciﬁcally designed to provide further 
evidence for or against our hypotheses. Project managers are all Computer
Science Engineers with more than three years experience. They are in charge of
scheduling activities, controlling that milestones are met, and making sure that
team members apply the company’s software process. They are also in charge of
requirements analysis for their projects.

How does Quality of Formalized Software Processes Aﬀect Adoption?

233

Table 2. General work product statistics

Project Id Work OT D ND

products

SITMIX
AMILEX
SITLA
SITCO
SITCORTE

30
37
19
34
34

18 10 2
22 13 2
7 12 0
1
27 3
28 3
0

5 Process Adoption Spreadsheet

Table 2 presents the general results of our study. Each row presents a project, and
for each project: (1) the total number of work products in the tailored process;
(2) the number of work products that were delivered in time; (3) the number of
work products that were delayed; and (4) the number of work products that were
not delivered. From this table, we can see that a minority of work products are
not delivered (which is reassuring for Amisoft). For development projects, a third
of the work products experience delays or are not delivered. For maintenance
projects, there are fewer delays, with more than 80% of the work products being
delivered in time, which is within Amisoft’s goals. Table 3 presents a summary
of the work products, whether they comply with our hypotheses, and, for each
project, whether they were delivered on time, or experienced issues.
(1) No role is responsible for the work product. We found weak evidence for this
claim. Only three work products ﬁt the pattern (MUS, ICF, DDD). Of those,
DDD is only present in the process of project AMILEX; ICF has been delivered
in time each time, and MUS has not been delivered for project SITCO. In all
cases, MUS, ICF, and DDD are subsumed by the hypothesis that they may be
waste as well; as such, the evidence is overall inconclusive.
(2) Two or more roles are responsible for the work product. We again ﬁnd that
a low number of work products suﬀer from this issue. There are 5 overall: TEC,
CGP, SRQ, ARR, and PMD. Of those, PMD was the only one that did not
encounter delays of any kind. On the other hand, TEC and CGP were late in
both development projects, while SRQ was not performed in SITMIX, and ARR
was delayed in AMILEX. Of note, TEC was late in both SITMIX and AMILEX,
but it was performed in time for all three maintenance projects; these 3 projects
did not include CGP, ARR, or SRQ in there processes. Overall, it seems that
there is reasonable initial support for the hypothesis, even though the number
of work products concerned is small, and 3 out of 5 of these work products were
not present in maintenance projects.
(3) Too many roles are assigned to the work product. We consider the threshold
of too many roles to be 4. Using that threshold, we ﬁnd that 11 work products
have too many roles involved for their proper implementation (LAA, CGP, CGI,
ARR, MRR, PCC, PPP, PVP, PRP, PMD, and ACE). Of those, 9 feature a
delay on at least one project, which yields strong evidence towards this factor

234

M.C. Bastarrica et al.

Table 3. Work product behavior for each hypothesis: H1 - no responsible role, H2 -
two or more responsible roles, H3 - too many interacting roles, H4 - assigned to an
overloaded role, H5 - no template available, H6 - deﬁned as waste. For the projects the
meaning is: ✗

- not delivered, ! - delayed, (cid:2)- in time, – - not in process

Work product H1 H2 H3 H4 H5 H6 SITMIX AMILEX SITLA SITCO SITCORTE

Hypotheses

Statuses

LNE
TEC
LAA
PEE
CGP
CGI
SRQ
ARR
MRR
PAC
PRH
PRV
ESC
PEA
PCC
PPR
PPP
LRR
PVP
CPU
PRP
VPP
PLP
PMD
PAP
MCU
MDD
MUS
ICF
PIR
GLS
ESS
ERS
DDD
DDR
SAD
ACE
Total

N N N Y N Y
N Y N Y N N
N N Y Y N Y
N N N Y N N
N Y Y Y N N
N N Y Y N N
N Y N Y N N
N Y Y Y N N
N N Y Y N N
N N N N N N
N N N Y N N
N N N Y N N
N N N Y N Y
N N N Y N Y
N N Y Y N Y
N N N Y N Y
N N Y Y N N
N N N Y N N
N N Y Y N N
N N N Y N N
N N Y Y N Y
N N N Y N N
N N N Y N N
N Y Y Y Y N
N N N N N N
N N N Y N N
N N N N N N
Y N N N Y Y
Y N N N Y Y
N N N N N N
N N N Y N Y
N N N N N N
N N N Y N N
Y N N N Y Y
N N N N Y Y
N N N N Y N
N N Y Y N Y
3
13

11 15

5

5

!
!
!
!
!

!
!
!
!
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
–
(cid:2)
(cid:2)
–
(cid:2)
–
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
(cid:2)
(cid:2)
–
–
(cid:2)
–
–

!
!
!
!
!
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)

!
!
!
!
!
!
!
!
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–

–
(cid:2)
(cid:2)
!
–
(cid:2)
–
–
!
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
!
(cid:2)
(cid:2)
!
(cid:2)
!
–
–
(cid:2)
(cid:2)
–
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
–
(cid:2)
–

–
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
–
–
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
!
(cid:2)
(cid:2)
!
(cid:2)
!
–
–
(cid:2)
(cid:2)
–
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
–
(cid:2)
–

–
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
–
–
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
!
(cid:2)
(cid:2)
!
(cid:2)
!
–
–
(cid:2)
(cid:2)
–
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
–
(cid:2)
–
(cid:2)
–

being a possible cause for delays. As said above, the higher the number of roles,
the more probable these coordination issues arise. We also note that development
projects are more concerned with this issue (9 work products) than maintenance
projects (only 3 work products are aﬀected).

(4) Overloaded role is responsible for the work product. The most overloaded role
by far is the project manager; therefore, we only investigate this particular role.
Our analysis brings strong evidence that if a role is overloaded, it is a factor
in work products that are delayed or not delivered: of the 17 work products
the project manager is involved in, 15 experienced delays. Clearly, the project
manager has many things on his plate, and a lot of them can pass through.
We note that of these 15, only 2 concern maintenance projects (15 concern
development projects), highlighting again the asymetry between both kinds of

✗
✗
✗
✗
✗
✗
How does Quality of Formalized Software Processes Aﬀect Adoption?

235

projects. It seems that if changes to the process could delegate some of these
tasks to other roles, this would signiﬁcantly help process adoption all around.
(5) No templates are available for the work product. We do not ﬁnd support for
this hypothesis. The presence/absence of a template seems uncorrelated with
the adoption of the process. If anything, it appears to be negatively correlated:
of the six work products that do not have a template (PMD, MUS, ICF, DDD,
DDR, SAD), only one, MUS, encountered issues, in only one project.
(6) Potentially waste work product. Waste is deﬁned as a work product that is
generated, but that is neither delivable nor used in any other task. This hypothesis 
seems to be a good factor for explanation of adoption as well, although the
reasoning is not obvious at ﬁrst glance. There are 13 work products marked as
“waste”. Of those, only 8 suﬀer any kind of delay, which does not provide a very
strong support for waste being an issue. However, examining the work products
marked as waste, we ﬁnd that several of them were victim of underspeciﬁcation.
More precisely, several work products marked as “waste” were actually deliverables 
to the client, and as such employees are very aware of their importance.
The waste work products that are actually client deliverable are: ACE, DDR,
GLS, MUS, and ICF. Of these, only MUS was not delivered; all other work
products were delivered, on time. Removing these 5 work products from the
“waste” category yields a diﬀerent pictures: of the 8 work products that remain,
only DDD does not suﬀer any delay, which makes “real waste” work products
a strong predictor of adoption to the process. In short, perceived utility seems
like an important factor. Of note, taking into account the fact that deliverables
to the clients are seen as important further weakens the evidence towards the
no-responsible role hypothesis, as two of the three work products without a
responsible role are deliverables to the client.

6 Survey Results

Since we have several competing hypotheses, we attempted to shed more light
by getting feedback from the project managers of Amisoft. Speciﬁcally, we sent
a questionnaire via email to all the project managers, asking them whether they
recalled having experienced delays in delivering work products according to our
hypotheses. The questionnaire contained one question per hypothesis, plus a
last question asking for other causes for the delays. All responses were free-form
text, that we analyzed and summarize here. Five project managers replied to our
questionnaire, although the fact that it was done by email, and that the managers
are busy, had the consequence that some responses were quite succinct and as
such not always easy to interpret. Of note, 4 of the 5 managers that responded
were from projects we investigated in the ﬁrst step, while the last one was not.
No role responsible for the work product. The project managers were unanimous
on this hypothesis: they do not recall any instance of this fact being the cause of
delays, going so far as saying that all work products have assigned roles. Given
that a small minority of work products were found to have no responsible role,
this conﬁrms that our ﬁrst hypothesis has very weak support in practice: even

236

M.C. Bastarrica et al.

if there is (in rare instances) a work product that is not assigned to any role
formally in the process, someone in practice is responsible for it.

Two or more roles responsible for the work product. We ﬁnd limited additional
support for this hypothesis. In particular three of the managers mentioned that
the responsibilities for some work products are sometimes unclear, especially
for the testing plan (PPR), resource allocation (ARR), and the requirement
speciﬁcation (ERS). However the additional evidence is limited since both PPR
and ERS do not have two responsible roles—only several involved roles—in the
process deﬁnition, although in practice the distinction between responsible and
involved role might not be as clear-cut as it is in the process speciﬁcation.

Too many roles assigned to a work product. One product manager replied saying
that due to the size of his team, having too many people involved was not a
problem. Given that that team was SITMIX, the largest one in the projects we
analyzed, we can extrapolate that other teams did not run into that problem
either. As such, it seems that this may be a valid hypothesis, but not in the
particular circumstances at Amisoft, where teams are small. On the other hand,
another manager mentions that the work product ERS has too many roles, and
that it is a problematic situation. Another manager mentions a work product
that involves an architect, a developer, and the project manager, but does not
precise which. Overall, managers have conﬂicting opinions about this hypothesis,
preventing us from reaching a clear conclusion.

Overloaded roles are responsible for the work product. The evidence is much
clearer for this hypothesis. All managers agree that the project manager is overloaded.
 Two managers mention that this is an explicit risk to the project, that is
taken into account in order to mitigate it (by dividing up tasks, and delegating
them to other people). One manager is also aware of this strategy to reduce his
load, but mentions he is unable to delegate tasks, since his team is too small. Finally,
 another manager mentions the quality assurance (QA) roles as also being
aﬀected by overloading, although he is the only one.

No templates are available for the work product. For this hypothesis, all managers
ﬁnd that the templates are present, and are adequate, except for speciﬁc work
products, where they could be improved (with TEC being explicitely mentioned
once). As such, the evidence gathered by the questionnaire leads us to reject this
hypothesis, at least for the case of projects at Amisoft.

Potentially waste work product. We ﬁnd convincing evidence that there is perceived 
waste in the process, coming from three of the project managers. For
some work products, it is unclear who will use them once they are produced, or
why they are important. A few work products are mentioned by name. These
include PRV, ERS, PLP, and PCC, and (less precisely) activities related to veriﬁcation 
and validation, and activities related to process monitoring (i.e., metric
collection regarding the process itself). From this, we can conclude that waste,
as perceived by the managers, is an issue that is present in the process.

How does Quality of Formalized Software Processes Aﬀect Adoption?

237

Other reasons. Finally, there are several other reasons for delays that are mentioned 
in the free entry space that we let for the project managers to ﬁll. There
are two main reasons:
(cid:129) Dependencies between tasks is a problem referenced by four of the ﬁve
interviewed managers. By dependencies between tasks, we mean the situation
that arises when a task is delayed because of waiting upon the completion of
another task. In particular, three managers mention the Quality Assurance area
as being a bottleneck in that regard.
(cid:129) External factors, such as changes in personnel, and changes to requirements
made by clients are mentioned as source of delays, that propagate to other tasks.
However these factors cannot be attributed to the process itself.

7 Discussion

7.1 Aggregating the Evidence

Combining the evidence we gathered in the two steps of our investigation, we
can order our hypothesis from the least likely to the most likely to incurr delays
in delivering work products.

Unlikely hypotheses

(cid:129) No role responsible for the work product: we found very few work products
which did not have a responsible role speciﬁed, and a low correlation with delays
or work products undelivered. Further, all project managers stated that all work
products are in the responsibility of someone.
(cid:129) No templates are available for the work product: we found a similar situation
as with the previous hypothesis. There are few work products matching the
hypothesis, a low correlation, and projects managers concurr.

Moderately likely hypotheses

(cid:129) Two or more roles responsibles for the work product: We found that there
are few work products matching with the hypothesis, but that they have a high
correlation with problematic work products. On the other hand, other hypotheses
seem to have more explaining power, and project managers gave little additional
support in the questionnaire.
(cid:129) Too many roles assigned to a work product: This hypothesis has a good
correlation with problematic work products. However, project managers have
conﬂicting opinions about it, with at least one manager saying that Amisoft’s
teams are too small for it to be an issue.

Likely hypotheses

(cid:129) Potentially waste work product: at ﬁrst, we found a moderate correlation
between potential waste and problematic work products. However, a detailed
inspection reveals that some of the “waste” is not really waste, as it concerns
work products directly relevant to the client (deliverables), hence which are very
likely to be done anyways. With this new knowledge in hand, we ﬁnd that waste

238

M.C. Bastarrica et al.

is a much better explanation. This is further conﬁrmed by the managers, of
whom most agree that there is waste in the process, conforting this hypothesis.
(cid:129) Overloaded roles are responsible for the work product: ﬁnally, this hypothesis
has the strongest support. It has a strong correlation with problematic work
products, and managers strongly echo this in their comments.

7.2 Diﬀerence between Development and Maintenance Projects

We observe that maintenance projects have less problematic work products than
development ones. A follow-up with the company’s CEO gave us some possible
reasons, for whom the most important is the type of contract for each type of
project, and the impact this has on the process. Maintenance projects usually
have a monthly contract, while development projects have contracts based on
functionality milestones. As such, there is more pressure in development projects
to produce deliverable work products and functionality fast, leading to a lower
priority towards other artifacts in the process, which are either for internal use,
or that are perceived to have a lower added value (such as veriﬁcation and
validation activities).

7.3 Additional Hypotheses

Beyond the hypoteses checked, there are others not investigated yet.

(cid:129) Synchronization issues. Managers reported that some tasks were delayed
because they were waiting on other tasks to be ﬁnished, that behave as bottlenecks 
(e.g., QA activities). Since managers are keenly aware of this issue, it
seems to be a salient one.
(cid:129) Early vs late tasks. Related to synchronization issues, the fact that a task
is late in the project or in an iteration could lead to it being more likely to be
delayed, as the delays tend to accumulate with time.
(cid:129) Veriﬁcation and validation. Managers and the company’s CEO mentioned
on several occasions that tasks from the Veriﬁcation and Validation software engineering 
discipline frequently were the most problematic. A quick glance at the
problematic work products reveals that the most problematic ones (the ones delayed 
in 4 out of 5 projects), belong to the veriﬁcation and validation area: PPR,
PVP, and PRP. As such, exploring this in more details would be worthwhile.
(cid:129) Internal vs external tasks. Managers often put more emphasis on work products 
that are more relevant to the client, as progress is more easily seen that
way. We have seen hints of this being a factor when we investigated waste, but
this phenomenon deserves a fuller investigation.

7.4 Threats to Validity

As with any empirical study, this work is subject to several threats to validity,
that we sumarize in Table 4.

How does Quality of Formalized Software Processes Aﬀect Adoption?

239

Table 4. Threats to validity of the study

Threat
Single
study.

case

No qualitative 
analysis
of the work
products

of

Eﬀect
process
tailoring

Project
manager
questionnaires


Description
We only analyzed 5 projects from a single company. Diﬀerent companies will have
diﬀerent characteristics, in terms of size of the company and of the teams working
there, diﬀerent market niches, diﬀerent cultures, and diﬀerent software engineering
practices. Further, each project has a host of speﬁcities that make it unique, such
as the client, the composition of the team, etc. Our study needs to be replicated
in a variety of distinct contexts to see whether the ﬁndings hold in general, or are
speciﬁc to this case.
So far, the process monitoring at Amisoft considers that a work product is delivered
only by its presence or absence in the system. There is no inspection of the quality
of the work product itself. Some of the work products may be present in the system,
but in an incorrect or incomplete state. A manual analysis of the work products
would be necessary in order to know if this is the case.
At Amisoft, each project has a speciﬁc process, tailored from the generic process.
As such, the set of artifacts to be delivered for each project may vary. The fact
that some artifacts were not delivered because they were not in the process to
start with makes it harder to compare projects with one another.
Our questionnaires also have several potential issues. We only sent the questionnaire 
to project managers, as it would have been prohibitive to send it to all
employees at Amisoft, in terms of the eﬀort involved both at Amisoft to ﬁll it (for
that reason we also refrained from asking for subsequent clariﬁcations), and on our
side to aggregate the information. We chose to send the questionnaire to project
managers since they have a good view of their team members, but this choice also
inccurs bias in the responses.

8 Conclusion

In this paper we analized the impact that the quality of formalized software
processes has on their adoption. We stated six hypotheses about the reasons that
may cause work products to be delayed or never built during project execution.
The process itself was analyzed using AVISPA, a graphical tool that highlights
potentially problematic elements in the process.

The formalized sofware process adoption was analyzed in two diﬀerent dimensions.
 First an empirical study about actual use of the process in practice
was conducted in two development and three maintenance projects in the same
company. In this study each work product that was either late or not developed
in each project was recorded. And then a questionnaire was applied to all ﬁve
project managers about their personal perception about the stated hypotheses.
We could realize that the process was well speciﬁed for deﬁning one and only
one responsible for each work product, and there is also a template deﬁned for
each work product in the process model. So these issues were not supposed to
be the causes for not following the process as expected, at least in this company.
Both, the empirical study and the questionnaire corroborated these facts. We
found some evidence that work products where four or more roles interact or
those where there are more than one role responsible for them are somewhat
likely to be delayed. Finally, we found strong evidence that work products that
are speciﬁed as waste and those that are responsible of an overloaded role are almost 
always late. In general, all six hypotheses seamed reasonable, but empirical
analysis resulted that they were not true in all cases.

240

M.C. Bastarrica et al.

References

1. Bastarrica, M.C., Hurtado, J.A., Bergel, A.: Toward Lean Development in Formally

Speciﬁed Software Processes. In: 18th EuroSPI 2011, Denmark (June 2011)

2. Chroust, G.: Soft Factors impeding the Adoption of Process Models. In: Proceedings 
of the 28th EUROMICRO 2002, Dortmund, pp. 388–394 (September 2002)

3. Davis, F.D., Bagozzi, R.P., Warshaw, P.R.: User acceptance of computer technol-
ogy: A comparison of two theoretical models. Management Science 35(8), 982–1003
(1989)

4. Dyba, T., Moe, N.B., Mikkelsen, E.M.: An Empirical Investigation on Factors
Aﬀecting Software Developer Acceptance and Utilization of Electronic Process
Guides. In: METRICS 2004, Chicago (September 2004)

5. Gonzalez-Perez, C., Henderson-Sellers, B.: A work product pool approach to
methodology speciﬁcation and enactment. Journal of Systems and Software 81(8),
1288–1305 (2008)

6. Goodman, F.A.: Deﬁning and deploying software processes. Auerbach Publications,

Boca Raton (2005)

7. Green, G.C., Collins, R.W., Hevner, A.R.: Perceived control and the discussion
of software process innovations. Journal of High Technology Management Research 
15(1), 123–144 (2004)

8. Hameed, M.A., Counsell, S., Swift, S.: A conceptual model for the process of IT
innovation adoption in organizations. Journal of Engineering and Technology Management 
29, 358–390 (2012)

9. Heijstek, A., van Vliet, H.: Less is More in Software Process Improvement. In: M.

Biro and R. Messnarz (eds.) EuroSPI 2005, pp. 6.1–6.12 (2005)

10. Hurtado, J.A., Bastarrica, M.C., Bergel, A.: AVISPA: A Tool for Analyzing Software 
Process Models. Journal of Software Evolution and Process (2013),
http://onlinelibrary.wiley.com/doi/10.1002/smr.1578/abstract

11. Kuhrmann, M., Fern andez, D.M., Steenweg, R.: Systematic software process de-

velopment: where do we stand today? In: ICSSP 2013, pp. 166–170 (May 2013)

12. M¨unch, J., Armbrust, O., Kowalczyk, M., Soto, M.: Software Process Deﬁnition

and Management. Springer (2012)

13. Nierstrasz, O., Ducasse, S., Demeyer, S.: Object-Oriented Reengineering Patterns.

Square Bracket Associates (2009)

14. O’Connor, R., Coleman, G.: An investigation of barriers to the adoption of software
process best practices models. In: Proceedings of the 18th Australasian Conference
on Information Systems, Toowoomba, Australia (December 2007)

15. Persee, J.: Process Improvement Essentials. O’Reilly, Sebastopol (2006)
16. Riemenschneider, C.K., Hardgrave, B.C., Davis, F.D.: Explaining Software Developer 
Acceptance of Methodologies: A Comparison of Five Theoretical Models.
IEEE Transactions on Software Engineering 28(12), 1135–1145 (2002)

17. Rifkin, S.: Why software process innovations are not adopted. IEEE Software 18(4),

110–112 (2001)

18. Robbes, R., Vidal, R., Bastarrica, M.C.: Are Software Analytics Eﬀorts Worthwhile

for Small Companies? The Case of Amisoft. IEEE Software 30(5), 46–53 (2013)

19. Ruiz, P., Quispe, A., Bastarrica, M.C., Hurtado, J.A.: Formalizing the Software

Process in Small Companies. In: 8CCC, Colombia (August 2013)

20. Simmonds, J., Bastarrica, M.C., Silvestre, L., Quispe, A.: Variability in Software
Process Models: Requirements for Adoption in Industrial Settings. In: PLEASE
2013, San Francisco, USA (May 2013)

