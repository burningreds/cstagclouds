Better Space Bounds

for Parameterized Range Majority and Minority

Djamal Belazzougui1, Travis Gagie1,2, and Gonzalo Navarro3

1 Department of Computer Science, University of Helsinki

2 Helsinki Institute for Information Technology

3 Department of Computer Science, University of Chile

Abstract. Karpinski and Nekrich (2008) introduced the problem of parameterized 
range majority, which asks to preprocess a string of length
n such that, given the endpoints of a range, one can quickly ﬁnd all the
distinct elements whose relative frequencies in that range are more than
a threshold τ . Subsequent authors have reduced their time and space
bounds such that, when τ is given at preprocessing time, we need either
O(n lg(1/τ )) space and optimal O(1/τ ) query time or linear space and
O((1/τ ) lg lg σ) query time, where σ is the alphabet size. In this paper we
give the ﬁrst linear-space solution with optimal O(1/τ ) query time. For
the case when τ is given at query time, we signiﬁcantly improve previous
bounds, achieving either O(n lg lg σ) space and optimal O(1/τ ) query
time or compressed space and O
query time. Along the
way, we consider the complementary problem of parameterized range minority 
that was recently introduced by Chan et al. (2012), who achieved
linear space and O(1/τ ) query time even for variable τ . We improve their
solution to use either nearly optimally compressed space with no slowdown,
 or optimally compressed space with nearly no slowdown. Some of
our intermediate results, such as density-sensitive query time for onedimensional 
range counting, may be of independent interest.

(1/τ ) lg lg(1/τ )
lg lg n

(cid:2)

(cid:3)

1

Introduction

Finding frequent elements in a dataset is a fundamental operation in data mining.
Finding the most frequent elements can be challenging when all the distinct
elements have nearly equal frequencies and we do not have the resources to
compute all their frequencies exactly. In some cases, however, we are interested
in the most frequent elements only if they really are frequent. For example, Misra
and Gries [20] showed how, given a string and a threshold τ with 0 < τ ≤ 1,
with two passes and O(1/τ) words of space we can ﬁnd all the distinct elements
in a string whose relative frequencies are at least τ . These elements are called
the τ -majorities of the string. Misra and Gries’ algorithm was rediscovered by
Demaine, L´opez-Ortiz and Munro [9], who noted it can be made to run in O(1)
time per element on a word RAM with Ω(lg n)-bit words, where n is the length
of the string, which is the model we use; it was then rediscovered again by Karp,

F. Dehne, R. Solis-Oba, and J.-R. Sack (Eds.): WADS 2013, LNCS 8037, pp. 121–132, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013

122

D. Belazzougui, T. Gagie, and G. Navarro

Shenker and Papadimitriou [16]. As Cormode and Muthukrishnan [8] put it,
“papers on frequent items are a frequent item!”

(cid:3)

n2−2

n2 lg lg n/ lg n

Krizanc, Morin and Smid [18] introduced the problem of preprocessing the
string such that later, given the endpoints of a range, we can quickly return the
of which takes O(cid:2)
mode of that range (i.e., the most frequent element). They gave two solutions, one
space for any ﬁxed positive  ≤ 1/2, and answers queries
in O(n lg lg n) time; the other takes O(cid:2)
space and answers queries
in O(1) time. Petersen [22] reduced Krizanc et al.’s ﬁrst time bound to O(n)
for any ﬁxed non-negative  < 1/2, and Petersen and Grabowski [23] reduced
(cid:3)
the second space bound to O(cid:2)
. Chan et al. [6] recently gave a
linear-space solution that answers queries in O(cid:4)(cid:5)

time. They also gave
√
evidence suggesting we cannot easily achieve query time substantially smaller
n using linear space; however, the best known lower bound, by Greve et
than
al. [15], says only that we cannot achieve query time o
using s
words of w bits each. Because of the diﬃculty of supporting range mode queries,
Bose et al. [5] and Greve et al. [15] considered the problem of approximate range
mode, for which we are asked to return an element whose frequency is at least
a constant fraction of the mode’s frequency.

(cid:3)
lg(n)/ lg(sw/n)

n2 lg lg n/ lg2 n

(cid:3)

(cid:6)

n/ lg n

(cid:2)

(cid:3)

(1/τ )(lg lg n)2

Karpinski and Nekrich [17] took a diﬀerent direction, analogous to Misra and
Gries’ approach, when they introduced the problem of preprocessing the string such
that later, given the endpoints of a range, we can quickly return the τ -majorities
of that range. We refer to this problem as parameterized range majority. Assuming 
τ is given when we are preprocessing the string, they showed how we can store
the string in O(n(1/τ )) space and answer queries in O(cid:2)
time. They
also gave bounds for dynamic and higher-dimensional versions. Durocher et al. [10]
independently posed the same problem and showed how we can store the string in
O(n lg(1/τ + 1)) space and answer queries in O(1/τ ) time. Notice that, because
there can be up to 1/τ distinct elements to return, this time bound is worst-case
optimal. Gagie et al. [14] showed how to store the string in compressed space —
i.e., O(n(H + 1)) bits, where H is the entropy of the distribution of elements in
the string — such that we can answer queries in O((1/τ ) lg lg n) time. They also
showed how to drop the assumption that τ is ﬁxed and simultaneously achieve optimal 
query time, at the cost of increasing the space bound by a (lg n)-factor. That
is, they gave a data structure that stores the string in O(n(H + 1)) space such that
later, given the endpoints of a range and τ , we can return the τ -majorities of that
range in O(1/τ ) time. Chan et al. [7] recently gave another solution for variable
τ , which also has O(1/τ ) query time but uses O(n lg n) space. As far as we know,
these are all the relevant bounds for Karpinski and Nekrich’s original exact, static,
one-dimensional problem, both for ﬁxed and variable τ ; they are summarized in
Table 1 together with our own results. Related work includes Elmasry et al.’s [11]
solution for the dynamic version and Lai, Poon and Shi’s [19] and Wei and Yi’s [26]
approximate solutions for the dynamic version.

In this paper we ﬁrst consider the complementary problem of parameterized
range minority, which was recently introduced by Chan et al. [7]. For this problem
we are asked to preprocess the string such that later, given the endpoints of a

Better Space Bounds for Parameterized Range Majority and Minority

123

Table 1. Results for the problem of parameterized range majority on a string of length
n over an alphabet of size σ in which the distribution of the elements has entropy H

source

Karpinski and Nekrich [17]

Durocher et al. [10]

Gagie et al. [14]

Theorem 3

Gagie et al. [14]

Chan et al. [7]

Theorem 4

Theorem 5

Theorem 7

space

O(n(1/τ )) words
O(n lg(1/τ )) words
O(n(H + 1)) bits

O(n) words

O(n(H + 1)) words
O(n lg n) words
O(n lg lg σ) words
nH + o(n lg σ) bits

(1 + )nH + o(n lg σ) bits O

O((1/τ ) lg lg σ)
(cid:2)
(1/τ ) lg lg(1/τ )
lg lg n

time

O(cid:4)

(1/τ )(lg lg n)2

O(1/τ )

O((1/τ ) lg lg σ)

O(1/τ )
O(1/τ )
O(1/τ )
O(1/τ )

variable τ

(cid:5)

no

no

no

no

yes

yes

yes

yes

yes

(cid:3)

range, we can return (if one exists) a distinct element that occurs in that range
but is not one of its τ -majorities. Such an element is called a τ -minority for the
range. At ﬁrst, ﬁnding a τ -minority might seem harder than ﬁnding a τ -majority
because, e.g., we are less likely to ﬁnd a τ -minority by sampling. Nevertheless,
Chan et al. gave a linear-space solution with O(1/τ ) query time even when τ
is given at query time. In Section 3 we give two results, also for the case of
variable τ :
1. for any positive constant , a solution with O(1/τ ) query time that takes
2. for any function f (n) = ω(1), a solution with O((1/τ ) f (n)) query time that

(1 + )nH + O(n) bits;
takes nH + O(n) + o(nH) bits.

In the full version of this paper we will reduce the space bound in point 2 above
to nH + o(n(H + 1)) bits. That is, we improve Chan et al.’s solution to use either
nearly optimally compressed space with no slowdown, or optimally compressed
space with nearly no slowdown. We reuse ideas from this section in our solutions
for parameterized range majority.

In Section 4 we return to Karpinski and Nekrich’s original problem of parameterized 
range majority with ﬁxed τ and give the ﬁrst linear-space solution with
worst-case optimal O(1/τ ) query time. In Section 5 we adapt this solution to
the more challenging case of variable τ and give three results:
1. a solution with O(1/τ) query time that takes O(n lg lg σ) space, where σ is
2. a solution with O((1/τ ) lg lg σ) query time that takes nH + o(n lg σ) bits;
3. for any positive constant , a solution with O(cid:4)
query time

the size of the alphabet;

(cid:6)

(1/τ ) lg lg(1/τ )
lg lg n

that takes (1 + )nH + o(n lg σ) bits.

With (2), we can support O(1)-time access to the string and O(lg lg σ)-time rank
and select (see deﬁnitions in Section 2.1); with (3), select also takes O(1) time.

124

D. Belazzougui, T. Gagie, and G. Navarro

In the full version of this paper we will reduce the space bounds in (2) and (3)
to nH + o(n(H + 1)) and (1 + )nH + O(n) bits, respectively. While proving (3)
we introduce a compressed data structure with density-sensitive query time for
one-dimensional range counting, which may be of independent interest; due to
space constraints, however, we leave the description of this data structure to the
full version of this paper. We will also show in the full version how to use our
data structures for (2) or (3) to ﬁnd a range mode quickly when it is actually
reasonably frequent. We leave as an open problem reducing the space bound in
(1) or the time bound in (2) or (3), to obtain linear or compressed space with
optimal query time.

2 Preliminaries

2.1 Access, Select and (Partial) Rank

Let S[1..n] be a string over an alphabet of size σ and let H be the entropy
of the distribution of elements in S. An access query on S takes a position k
and returns S[k]; a rank query takes a distinct element a and a position k and
returns the number of occurrences of a in S[1..k]; a select query takes a distinct
element a and a rank r and returns the position of the rth occurrence of a in S.
A partial rank query is a rank query with the restriction that the given distinct
element must occur in the given position; i.e., S[k] = a. These are among the
most well-studied operations on strings, so we state here only the results most
relevant to this paper.
For σ = 2 and any constant c, Pˇatra¸scu [24] showed how we can store S in
nH +O(n/ lg
O(1) n, Ferragina et al. [12] showed how we can
store S in nH + o(n) bits and support access, rank and select in O(1) time. For
σ < n, Barbay et al. [1] showed how, for any positive constant , we can store S
in (1 + )nH + o(n) bits and support access and select in O(1) time and rank in
O(lg lg σ) time. Belazzougui and Navarro [3] showed how to support O(1)-time
partial rank using O(n(lg H + 1)) bits; in the full version of their paper [2] they
reduced that space bound to o(n)(H + 1) bits. In another paper, Belazzougui
and Navarro [4] showed how, for any function f (n) = ω(1), we can store S in
nH +o(n(H +1) bits and support access in O(1) time, select in O(f (n)) time and
rank in O(lg lg σ) time. They also proved, via a reduction from the predecessor
problem, that we cannot support general rank queries in o(lg(lg σ/ lg lg n)) time
while using n lg

c n) bits. For σ = lg

O(1) n space.

2.2 Coloured Range Listing

Motivated by the problem of document listing, Muthukrishnan [21] showed how
we can store S[1..n] such that, given the endpoints of a range, we can quickly list
the distinct elements in that range and the positions of their leftmost occurrences
therein. This is the special case of one-dimensional coloured range listing in which
the points’ coordinates are the integers from 1 to n. Let C[1..n] be the array in

Better Space Bounds for Parameterized Range Majority and Minority

125

which C[k] is the position of the last occurrence of the distinct element S[k] in
S[1..k − 1] — i.e., the last occurrence before S[k] itself — or 0 if there is no such
occurrence. Notice S[k] is the ﬁrst occurrence of that distinct element in a range
S[i..j] if and only if i ≤ k ≤ j and C[k] < i. We store C, implicitly or explicitly,
and a data structure supporting O(1)-time range-minimum queries on C that
return the position of the leftmost occurrence of the minimum in the range.

To list the distinct elements in a range S[i..j] given i and j, we ﬁnd the
position m of the leftmost occurrence of the minimum in the range C[i..j]; check
whether C[m] < i; and, if so, output S[m] and m and recurse on C[i..m − 1]
and C[m + 1..j]. This procedure is online — i.e., we can stop it early if we want
only a certain number of distinct elements — and the time it takes per distinct
element is O(1) plus the time to access C.
(cid:3)
(cid:2)
Suppose we already have data structures supporting access, select and partial
S.rankS[k](k) − 1
rank queries on S, all in O(t) time. Notice C[k] = S.selectS[k]
,
so we can also support access to C in O(t) time. Sadakane [25] and Fischer [13]
gave O(n)-bit data structures supporting O(1)-time range-minimum queries.
Therefore, we can implement Muthukrishnan’s solution using O(n) extra bits
such that it takes O(t) time per distinct element listed.

3 Parameterized Range Minority

Recall from Section 1 that a τ -minority for a range is a distinct element that
occurs in that range but is not one of its τ -majorities. The problem of parameterized 
range minority is to preprocess a string such that later, given the endpoints
of a range and τ , we can quickly return a τ -minority for that range if one exists.
Chan et al. gave a linear-space solution with O(1/τ ) query time even for the
case of variable τ . They ﬁrst build a list of (cid:4)1/τ(cid:5) + 1 distinct elements that
occur in the given range (or as many as there are, if fewer) and then check those
elements’ frequencies to see which are τ -minorities. There cannot be more than
(cid:4)1/τ(cid:5) τ -majorities so, if there exists a τ -minority for that range, then at least
one must be in the list. In this section we show how to implement this idea using
compressed space.
To support parameterized range minority on S[1..n] in O(1/τ ) time, we store
data structures supporting O(1)-time access, select and partial rank queries on
S and a data structure supporting O(1)-time range-minimum queries on C.
For any positive constant , we can store these data structures in a total of
(1 + )nH + O(n) bits. Given τ and endpoints i and j, in O(1/τ) time we use
Muthukrishnan’s algorithm to build a list of (cid:4)1/τ(cid:5) + 1 distinct elements that
occur in S[i..j] (or as many as there are, if fewer) and the positions of their
leftmost occurrences therein. We check whether these distinct elements are τ -
minorities using the following lemma:

Lemma 1. Suppose we know the position of the leftmost occurrence of a distinct
element in a range. We can check whether that distinct element is a τ -minority
or a τ -majority using a partial rank query and a select query on S.

126

D. Belazzougui, T. Gagie, and G. Navarro

Proof. Let k be the position of the ﬁrst occurrence of a in S[i..j]. If S[k] is the
rth occurrence of a in S, then a is a τ -minority for S[i..j] if and only if the
(r + (cid:6)τ (j − i + 1)(cid:7) − 1)th occurrence of a in S is strictly after S[j]; otherwise
a is a τ -majority. That is, we can check whether a is a τ -minority for S[i..j] by
checking whether

(cid:4)
S.ranka(k) + (cid:6)τ (j − i + 1)(cid:7) − 1

(cid:6)

S.selecta

> j ;

since S[k] = a, computing S.ranka(k) is only a partial rank query.

(cid:8)(cid:9)

This gives us the following theorem, which improves Chan et al.’s solution to
use nearly optimally compressed space with no slowdown.
Theorem 1. For any positive constant , we can store S in (1+)nH +O(n) bits
such that later, given the endpoints of a range and τ , we can return a τ -minority
for that range (if one exists) in O(1/τ) time.
Alternatively, for any function f (n) = ω(1), we can store our data structures for
access, select and partial rank on S and range-minimum queries on C in a total
of nH + O(n) + o(nH) at the cost of select queries taking O(f (n)) time.
Theorem 2. For any function f (n) = ω(1), we can store S in nH + O(n) +
o(nH) bits such that later, given the endpoints of a range and τ , we can return
a τ -minority for that range (if one exists) in O((1/τ ) f (n)) time.

In the full version of this paper we will reduce the space bound of Theorem 2
to nH + o(n(H + 1)) bits. That is, we improve Chan et al.’s solution to use
optimally compressed space with nearly no slowdown.

4 Parameterized Range Majority with Fixed τ

The standard approach to ﬁnding τ -majorities, going back to Misra and Gries’
work, is to build a list of O(1/τ) candidate elements and then verify them.
For parameterized range majority, an obvious way to verify candidates is to
use rank queries. The problem with this approach is that, as noted in Subsection 
2.1, we cannot support general rank queries in o(lg(lg σ/ lg lg n)) time while
O(1) n space; e.g., with only linear space, we cannot support general
using n lg
rank queries in O(1) time when the alphabet is super-polylogarithmic. If we can
ﬁnd the position of candidates’ ﬁrst occurrences in the range, however, then by
Lemma 1 we can check them using only partial rank and select queries.

Suppose we want to support parameterized range majority on S[1..n] for a
ﬁxed threshold τ . We ﬁrst store data structures that support access, select and
partial rank on S in O(1) time, which takes O(n) space. For 0 ≤ b ≤ (cid:4)lg n(cid:5), let
Fb[1..n] be the binary string in which Fb[k] = 1 if the distinct element S[k] occurs
at least τ 2b times in S[k..k + 2b+1 − 1]; and let Sb and Cb be the subsequences of
S and C, respectively, consisting of those elements ﬂagged by 1s in Fb. We store

Better Space Bounds for Parameterized Range Majority and Minority

127

Fb in O(n) bits such that we can support access, rank and select queries on Fb in
O(1) time. Notice we can implement an access query on Sb or Cb as a select query
on Fb and access queries on S or C, respectively. As described in Subsection 2.2,
we can implement an access query to C as access, select and partial rank queries
on S. We also store an O(1)-time range-minimum data structure for Cb, which
takes O(|Sb|) bits.
With these data structures, given endpoints i and j with (cid:4)lg(j−i+1)(cid:5) = b, we
use Muthukrishnan’s algorithm to list the distinct elements in Sb[Fb.rank1(i)..
Fb.rank1(j)] and the positions of their leftmost occurrences therein; we then use
select queries on Fb to ﬁnd the positions of those elements in S. That is, we list
the distinct elements in S[i..j] that are ﬂagged by 1s in Fb and the positions
of their leftmost ﬂagged occurrences therein. We then apply Lemma 1 to each
of these elements, treating the positions of their leftmost ﬂagged occurrences as
the positions of their leftmost occurrences. Since each distinct element in S[i..j]
that is ﬂagged in Fb occurs at least τ 2b times in S[i..j + 2b+1− 1] ⊂ S[i..i + 2b+2],
there are O(1/τ) of them and we use a total of O(1/τ ) time.

Notice that the leftmost ﬂagged occurrences of a distinct element a in S[i..j]
may not necessarily be the leftmost occurrence therein. However, if a is a τ -
majority in S[i..j] then, by deﬁnition, a occurs at least τ (j − i + 1) ≥ τ 2b times
in S[i..j] ⊂ S[i..i + 2b+1 − 1], so a’s leftmost occurrence in S[i..j] is ﬂagged by a
1 in Fb and, therefore, we apply Lemma 1 to it. It follows that we return each
τ -majority in S[i..j].
We store only one set of data structures supporting access, select and partial
rank on S. Summing over b from 0 to (cid:4)lg n(cid:5), the data structures for access,
select, partial rank and range-minimum queries take a total of O(n lg n) bits,
which is O(n) words. Therefore, we have the ﬁrst linear-space data structure
with worst-case optimal O(1/τ ) query time for Karpinski and Nekrich’s original
problem of parameterized range majority with ﬁxed τ .

Theorem 3. Given a threshold τ , we can store a string in linear space and
support parameterized range majority in O(1/τ) time.

5 Parameterized Range Majority with Variable τ

5.1 Nearly Linear Space with Optimal Query Time

(cid:3)lg n(cid:4)

(cid:3)lg(1/τ )(cid:4)

Suppose we have an instance of the data structure from Theorem 3 for each
, which takes a total of O(n lg n) space. Given
threshold 1, 1/2, 1/4, . . . , 1/2
endpoints i and j and a threshold τ , we can use the instance for threshold
to build a list of O(1/τ ) candidate elements and then check them
1/2
with Lemma 1; this takes a total of O(1/τ ) time and returns all the τ -majorities
in S[i..j]. Gagie et al. used a variant of this idea to obtain the ﬁrst data structure
for variable τ . We can easily reduce our space bound to O(n lg σ) because, if
1/τ ≥ σ, then we can simply use Muthukrishnan’s algorithm with S and C to
list in O(σ) = O(1/τ) time all the distinct elements in S[i..j] and the positions
of their leftmost occurrences therein, then check them with Lemma 1.

128

D. Belazzougui, T. Gagie, and G. Navarro

(cid:6)

(cid:3)lg(1/τ )(cid:4)
2
t=0

2t

(cid:3)lg(1/2)(cid:4)
— which still takes O(cid:4)(cid:7)

Notice that we need store only one set of data structures supporting access,
select and partial rank on S. Also, if S[k] is a (1/2t)-majority in a range, then
)-majority for all t(cid:5) ≥ t. It follows that if, instead of querying
it is also a (1/2t(cid:2)
only the instance for the threshold 1/2
, we query the instances for all the
(cid:3)lg(1/τ )(cid:4)
thresholds 1, 1/2, 1/4, . . . , 1/2
=
O(1/τ) time — then we can modify the instances to reduce the total number
of 1s in their binary strings. Speciﬁcally, for 0 ≤ t ≤ (cid:6)lg σ(cid:7), let F t
b be the
binary string Fb in the instance for threshold 1/2t; we modify F t
b such that
F t
b [k] = 1 if and only if the number of occurrences of the distinct element S[k]
in S[k..k + 2b+1 − 1] is at least 2b−t times but less than 2b−t+1.
For 0 ≤ b ≤ (cid:4)lg n(cid:5) and 1 ≤ k ≤ n, we have F t
b [k] = 1 for at most one value of
t. Therefore, all the binary strings contain a total of at most n((cid:4)lg n(cid:5) + 1) copies
of 1, so all the range-minimum data structures take a total of O(n lg n) bits.
Since the binary strings have total length n(cid:6)lg n(cid:7)(cid:6)lg σ(cid:7), we can use Pˇatra¸scu’s
data structure to store them in a total of O(n lg(n) lg lg σ) bits. A slightly neater
approach is to represent all the binary strings F 0
as a single string
b [k] = 1, and ∞ if there is no such value t. We can
Tb[1..n] in which Tb[k] = t if F t
implement access, rank and select queries on F 0
by access, rank and
select queries on Tb. Since Tb is an alphabet of size O(lg σ), we can use Ferragina
et al.’s data structure to store it in O(n lg lg σ) bits and support access, rank
and select queries in O(1) time. Either way, in total we use O(n lg lg σ) space.
Theorem 4. We can store S in O(n lg lg σ) space such that later, given the
endpoints of a range and τ , we can return the τ -majorities for that range in
O(1/τ) time.

(cid:3)lg σ(cid:4)
b , . . . , F
b

(cid:3)lg σ(cid:4)
b , . . . , F
b

5.2 Optimally Compressed Space with Nearly Optimal Query Time

To be able to apply Lemma 1, we must be able to ﬁnd the leftmost occurrence
of each τ -majority in a range. For this reason, we may ﬂag many occurrences of
the same distinct element even when they appear in close succession, because
we cannot know in advance where the query range will start. As discussed in
Section 4, however, if we have a data structure that supports rank queries on
S, then it is suﬃcient for us to build a list of O(1/τ) candidate elements that
includes all the τ -majorities — without any information about positions — and
then verify them using rank queries. This lets us ﬂag fewer elements and so
reduce our space bound, at the cost of using slightly suboptimal query time.
We store an instance of Belazzougui and Navarro’s data structure supporting
access on S in O(1) and rank and select on S in O(lg lg σ) time, which takes
nH + o(n(H + 1)) bits. For 0 ≤ t ≤ (cid:6)lg σ(cid:7) and (cid:4)lg(2t lg lg σ)(cid:5) ≤ b ≤ (cid:4)lg n(cid:5), we
divide S into blocks of length 2b−1 and store data structures supporting access,
rank and select on the binary string Gt
b[k] = 1 if, ﬁrst, the
distinct element S[k] occurs at least 2b−t times in S[k − 2b+1..k + 2b+1] and,
second, S[k] is the leftmost or rightmost occurrence of that distinct element in
its block. We also store an O(1)-time range-minimum data structure for the
subsequence of C consisting of elements ﬂagged by 1s in Gt
b.

b[1..n] in which Gt

(cid:3)

Better Space Bounds for Parameterized Range Majority and Minority

129
The number of distinct elements that occur at least 2b−t times in a range of
size O(cid:2)
is O(2t), so there are O(2t) elements in each block ﬂagged by 1s in Gt
2b
b.
It follows that we can store an instance of Pˇatra¸scu’s data structure supporting
O(1)-time access, rank and select on Gt
bits; we
need O(2t) bits for the corresponding range-minimum data structure. Summing
over t from 0 to (cid:6)lg σ(cid:7) and over b from (cid:4)lg(2t lg lg σ)(cid:5) to (cid:4)lg n(cid:5), calculation
shows we use a total of O(cid:4)
= o(n lg σ) bits for the binary
strings and range-minimum data structures. Therefore, including the instance
of Belazzougui and Navarro’s data structure for S, we use nH + o(n lg σ) bits
altogether.

(cid:3)
n2t−b(b − t) + n/ lg3 n

b in O(cid:2)

n lg σ lg lg lg σ

+ n
lg n

lg lg σ

(cid:6)

Given endpoints i and j and a threshold τ , if

(cid:4)lg(j − i + 1)(cid:5) <

(cid:8)

(cid:4)
2

lg

(cid:3)lg(1/τ )(cid:4)

(cid:6)(cid:9)

lg lg σ

,

in O(j − i) =
then we simply run Misra and Gries’ algorithm on S[i..j]
O((1/τ ) lg lg σ) time. Otherwise, we use Muthukrishnan’s algorithm to list the
b, where t = (cid:6)lg(1/τ )(cid:7) and b = (cid:4)lg(j−i+1)(cid:5) ≥
distinct elements ﬂagged by 1s in Gt
(cid:4)lg(2t lg lg σ)(cid:5), and use rank queries on S to check whether each of them is a
τ -majority in S[i..j]. Since S[i..j] overlaps at most 5 blocks of length 2b−1, it
contains O(1/τ ) distinct elements ﬂagged by 1s in Gt
b; therefore, Muthukrish-
nan’s algorithm takes O(1/τ) time and we use a total of O((1/τ ) lg lg σ) time
for all the rank queries on S.
Since S[i..j] cannot be completely contained in a block of length 2b−1, if S[i..j]
overlaps a block then it includes one of that block’s endpoints. Therefore, if S[i..j]
contains an occurrence of a distinct element a, then it includes the leftmost or
rightmost occurrence of a in some block. Suppose a is a τ -majority in S[i..j].
For i ≤ k ≤ j, a occurs at least 2b−t times in S[k − 2b+1..k + 2b+1], so some
occurrence of a in S[i..j] is ﬂagged by a 1 in Gt
Theorem 5. We can store S in nH + o(n lg σ) bits such that later, given the
endpoints of a range and τ , we can return the τ -majorities for that range in
O((1/τ ) lg lg σ) time.
Since our solution includes an instance of Belazzougui and Navarro’s data structure,
 we can also support O(1)-time access to S and O(lg lg σ)-time rank and
select. In the full version of this paper we will reduce the space bound of Theorem 
5 to nH + o(n(H + 1)) bits.

b. Therefore, we return a.

5.3 Nearly Optimally Compressed Space with Very Nearly Optimal

Query Time

Recall from Subsection 5.1 that, if 1/τ ≥ σ, then we can simply use Muthukrish-
nan’s algorithm to list all the distinct elements in a range and then check them
with Lemma 1; therefore, we can assume 1/τ < σ. In this subsection we use a new
data structure with density-sensitive query time for one-dimensional range count-
(cid:6)
ing, which may be of independent interest, to obtain a nearly optimally compressed 
data structure for parameterized range majority with O(cid:4)

(1/τ ) lg lg(1/τ )
lg lg n

130

D. Belazzougui, T. Gagie, and G. Navarro

(cid:10)

(cid:11)

j−i+1

lg lg n

lg

lg

occ(a,S[i..j])

time. We can also support access

query time. Due to space constraints, however, we leave the description of our
range-counting data structure to the full version of this paper and merely state
our result here:
Theorem 6. For any positive constant , we can store S in (1 + )nH + O(n)
bits such that later, given endpoints i and j and a distinct element a, we can
return occ(a, S[i..j]) in O
and select in O(1) time and rank in O(lg lg σ) time.
O(cid:4)
To obtain a compressed data structure for parameterized range majority with
query time, we combine our solution from Theorem 5 with
Theorem 6. Instead of using O(lg lg σ)-time rank queries to check each of the
O(1/τ) candidate elements returned by Muthukrishnan’s algorithm, we use
range-counting queries. We can make all O(1/τ ) range-counting queries each
take O(cid:4)
time because, if one starts taking too much time, then the
distinct element we are checking cannot be a τ -majority and we can stop the
query early. (In fact, as we will show in the full version of this paper, our data
structure from Theorem 6 does not need such intervention.) This gives us our
ﬁnal result:

(1/τ ) lg lg(1/τ )
lg lg n

lg lg(1/τ )
lg lg n

(cid:6)

(cid:6)

(cid:6)

time.

(1/τ ) lg lg(1/τ )
lg lg n

Theorem 7. We can store S in (1 + )nH + o(n lg σ) bits such that later, given
the endpoints of a range and τ , we can return the τ -majorities for that range in
O(cid:4)
Notice our solution in Theorem 7 takes optimal O(1/τ ) time when 1/τ =
O(1) n. Again, we can also support access and select in O(1) time and rank
lg
in O(lg lg σ) time. In the full version of this paper we will reduce the space
bound in Theorem 7 to (1 + )nH + O(n) bits, and show how to use our data
structures from Theorems 5 and 7 to ﬁnd a range mode quickly when it is actually 
reasonably frequent.

6 Conclusions

We have given the ﬁrst linear-space data structure for parameterized range majority 
with query time O(1/τ ), which is worst-case optimal in terms of n and τ .
Moreover, we have improved the space bounds for parameterized range majority 
and minority in the important case of variable τ . For parameterized range
majority with variable τ , we have achieved nearly linear space and worst-case
optimal query time, or compressed space with a slight slowdown. For parameterized 
range minority, we have improved Chan et al.’s solution to use nearly
compressed space with no slowdown or compressed space with nearly no slowdown.
 In the full version of this paper we will also reduce the lower-order terms
in our compressed space bounds to o(n(H + 1)) with the same slowdowns. We
leave as an open problem achieving linear or compressed space with O(1/τ)
query time for variable τ , or showing that this is impossible.

Better Space Bounds for Parameterized Range Majority and Minority

131

Acknowledgments. Many thanks to Patrick Nicholson for helpful comments.

References

1. Barbay, J., Claude, F., Gagie, T., Navarro, G., Nekrich, Y.: Eﬃcient fullycompressed 
sequence representations. Algorithmica (to appear)

2. Belazzougui, D., Navarro, G.: Alphabet-independent compressed text indexing.

ACM Transactions on Algorithms (to appear)

3. Belazzougui, D., Navarro, G.: Alphabet-independent compressed text indexing. In:
Demetrescu, C., Halld´orsson, M.M. (eds.) ESA 2011. LNCS, vol. 6942, pp. 748–759.
Springer, Heidelberg (2011)

4. Belazzougui, D., Navarro, G.: New lower and upper bounds for representing sequences.
 In: Epstein, L., Ferragina, P. (eds.) ESA 2012. LNCS, vol. 7501, pp.
181–192. Springer, Heidelberg (2012)

5. Bose, P., Kranakis, E., Morin, P., Tang, Y.: Approximate range mode and range
median queries. In: Diekert, V., Durand, B. (eds.) STACS 2005. LNCS, vol. 3404,
pp. 377–388. Springer, Heidelberg (2005)

6. Chan, T.M., Durocher, S., Larsen, K.G., Morrison, J., Wilkinson, B.T.: Linearspace 
data structures for range mode query in arrays. In: Proceedings of the 29th
Symposium on Theoretical Aspects of Computer Science (STACS), pp. 290–301
(2012)

7. Chan, T.M., Durocher, S., Skala, M., Wilkinson, B.T.: Linear-space data structures
for range minority query in arrays. In: Fomin, F.V., Kaski, P. (eds.) SWAT 2012.
LNCS, vol. 7357, pp. 295–306. Springer, Heidelberg (2012)

8. Cormode, G., Muthukrishnan, S.: Data stream methods. Lecture 3 of Rutger’s

198:671 Seminar on Processing Massive Data Sets (2003),
http://www.cs.rutgers.edu/~muthu/198-3.pdf

9. Demaine, E.D., L´opez-Ortiz, A., Munro, J.I.: Frequency estimation of internet
packet streams with limited space. In: M¨ohring, R.H., Raman, R. (eds.) ESA 2002.
LNCS, vol. 2461, pp. 348–360. Springer, Heidelberg (2002)

10. Durocher, S., He, M., Munro, J.I., Nicholson, P.K., Skala, M.: Range majority in
constant time and linear space. Information and Computation 222, 169–179 (2013)
11. Elmasry, A., He, M., Munro, J.I., Nicholson, P.K.: Dynamic range majority data
structures. In: Asano, T., Nakano, S.-I., Okamoto, Y., Watanabe, O. (eds.) ISAAC
2011. LNCS, vol. 7074, pp. 150–159. Springer, Heidelberg (2011)

12. Ferragina, P., Manzini, G., M¨akinen, V., Navarro, G.: Compressed representations
of sequences and full-text indexes. ACM Transactions on Algorithms 3(2) (2007)
13. Fischer, J.: Optimal succinctness for range minimum queries. In: L´opez-Ortiz, A.

(ed.) LATIN 2010. LNCS, vol. 6034, pp. 158–169. Springer, Heidelberg (2010)

14. Gagie, T., He, M., Munro, J.I., Nicholson, P.K.: Finding frequent elements in compressed 
2D arrays and strings. In: Grossi, R., Sebastiani, F., Silvestri, F. (eds.)
SPIRE 2011. LNCS, vol. 7024, pp. 295–300. Springer, Heidelberg (2011)

15. Greve, M., Jørgensen, A.G., Larsen, K.D., Truelsen, J.: Cell probe lower bounds
and approximations for range mode. In: Abramsky, S., Gavoille, C., Kirchner, C.,
Meyer auf der Heide, F., Spirakis, P.G. (eds.) ICALP 2010. LNCS, vol. 6198, pp.
605–616. Springer, Heidelberg (2010)

16. Karp, R.M., Shenker, S., Papadimitriou, C.H.: A simple algorithm for ﬁnding
frequent elements in streams and bags. ACM Transactions on Database Systems 
28(1), 51–55 (2003)

132

D. Belazzougui, T. Gagie, and G. Navarro

17. Karpinski, M., Nekrich, Y.: Searching for frequent colors in rectangles. In: Proceedings 
of the 20th Canadian Conference on Computational Geometry (CCCG),
pp. 11–14 (2008)

18. Krizanc, D., Morin, P., Smid, M.H.M.: Range mode and range median queries on

lists and trees. Nordic Journal of Computing 12(1), 1–17 (2005)

19. Lai, Y.K., Poon, C.K., Shi, B.: Approximate colored range and point enclosure

queries. Journal of Discrete Algorithms 6(3), 420–432 (2008)

20. Misra, J., Gries, D.: Finding repeated elements. Science of Computer Programming 
2(2), 143–152 (1982)

21. Muthukrishnan, S.: Eﬃcient algorithms for document retrieval problems. In: Proceedings 
of the 13th Symposium on Discrete Algorithms (SODA), pp. 657–666
(2002)

22. Petersen, H.: Improved bounds for range mode and range median queries. In: Geffert,
 V., Karhum¨aki, J., Bertoni, A., Preneel, B., N´avrat, P., Bielikov´a, M. (eds.)
SOFSEM 2008. LNCS, vol. 4910, pp. 418–423. Springer, Heidelberg (2008)

23. Petersen, H., Grabowski, S.: Range mode and range median queries in constant
time and sub-quadratic space. Information Processing Letter 109(4), 225–228
(2009)

24. Pˇatra¸scu, M.: Succincter. In: Proceedings of the 49th Symposium on Foundations

of Computer Science (FOCS), pp. 305–313 (2008)

25. Sadakane, K.: Succinct data structures for ﬂexible text retrieval systems. Journal

of Discrete Algorithms 5(1), 12–22 (2007)

26. Wei, Z., Yi, K.: Beyond simple aggregates: indexing for summary queries. In: Proceedings 
of the 30th Symposium on Principles of Database Systems (PODS), pp.
117–128 (2011)

