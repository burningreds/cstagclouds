Approximate String Matching over Ziv{Lempel

Compressed Text

Juha K¨arkk¨ainen1, Gonzalo Navarro2?, and Esko Ukkonen1

1 Dept. of Computer Science, University of Helsinki, Finland

ftpkarkka,ukkoneng@cs.helsinki.fi

2 Dept. of Computer Science, University of Chile

gnavarro@dcc.uchile.cl

Abstract. We present a solution to the problem of performing approximate 
pattern matching on compressed text. The format we choose is
the Ziv{Lempel family, speci(cid:12)cally the LZ78 and LZW variants. Given
a text of length u compressed into length n, and a pattern of length m,
we report all the R occurrences of the pattern in the text allowing up to
k insertions, deletions and substitutions, in O(mkn + R) time. The existence 
problem needs O(mkn) time. We also show that the algorithm can
be adapted to run in O(k2n + min(mkn; m2(m(cid:27))k) + R) average time,
where (cid:27) is the alphabet size. The experimental results show a speedup
over the basic approach for moderate m and small k.

1 Introduction

The string matching problem is de(cid:12)ned as follows: given a pattern P = p1 : : : pm
and a text T = t1 : : : tu, (cid:12)nd all the occurrences of P in T , i.e. return the set
fjxj; T = xP yg. The complexity of this problem is O(u) in the worst case
and O(u log(cid:27)(m)=m) on average (where (cid:27) is the alphabet size), and there exist
algorithms achieving both time complexities using O(m) extra space [8,3].

A generalization of the basic string matching problem is approximate string
matching: an error threshold k < m is also given as input, and we want to
report all the ending positions of text substrings which match the pattern after
performing up to k character insertions, deletions and replacements on them.
Formally, we have to return the set fjxP 0j; T = xP 0y and ed(P; P 0) (cid:20) kg, where
ed(P; P 0) is the \edit distance" between both strings, i.e. the minimum number of
character insertions, deletions and replacements needed to make them equal. The
complexity of this problem is O(u) in the worst case and O(u(k + log(cid:27)(m))=m)
on average. Both complexities have been achieved, despite that the space and
preprocessing cost is exponential in m and k in the (cid:12)rst case and polynomial in
m in the second case. The best known worst case time complexity is O(ku) if
the space has to be polynomial in m (see [14] for a survey).
? Work developed during postdoctoral stay at the University of Helsinki, partially
supported by the Academy of Finland (grant (grant 44449) and Fundaci(cid:19)on Andes.
Also supported by Fondecyt grant 1-990627.

R. Giancarlo and D. Sanko(cid:11) (Eds.): CPM 2000, LNCS 1848, pp. 195{209, 2000.
c(cid:13) Springer-Verlag Berlin Heidelberg 2000

196

Juha K¨arkk¨ainen, Gonzalo Navarro, and Esko Ukkonen

A particularly interesting case of string matching is related to text compression.
 Text compression [5] tries to exploit the redundancies of the text to
represent it using less space. There are many di(cid:11)erent compression schemes,
among which the Ziv{Lempel family [23,24] is one of the best in practice because 
of their good compression ratios combined with e(cid:14)cient compression and
decompression time.

The compressed matching problem was (cid:12)rst de(cid:12)ned in the work of Amir
and Benson [1] as the task of performing string matching in a compressed text
without decompressing it. Given a text T , a corresponding compressed string
Z = z1 : : : zn, and a pattern P , the compressed matching problem consists in
(cid:12)nding all occurrences of P in T , using only P and Z. A naive algorithm, which
(cid:12)rst decompresses the string Z and then performs standard string matching,
takes time O(m+ u). An optimal algorithm takes worst-case time O(m+ n + R),
where R is the number of matches (note that it could be that R = u > n).

The compressed matching problem is important in practice. Today’s textual
databases are an excellent example of applications where both problems are
crucial: the texts should be kept compressed to save space and I/O time, and they
should be e(cid:14)ciently searched. Surprisingly, these two combined requirements
are not easy to achieve together, as the only solution before the 90’s was to
process queries by uncompressing the texts and then searching into them. In
particular, approximate searching on compressed text was advocated in [1] as an
open problem.

This is the problem we solve in this paper: we present the (cid:12)rst solution
for compressed approximate string matching. The format we choose is the Ziv{
Lempel family, focusing in the LZ78 and LZW variants. By modifying the basic
dynamic programming algorithm, we achieve a time complexity of O(mkn + R)
and a space complexity of O(n(mk + log n)) bits (i.e. O(1 + mk= log n) times
the memory necessary to decompress). The existence problem needs O(mkn)
time and space. We show that the algorithm can be adapted to run in O(k2n +
min(mkn; m2(m(cid:27))k) + R) average time, where (cid:27) is the alphabet size.

Some experiments have been conducted to assess the practical interest of our
approach. We have developed a variant of LZ78 which is faster to decompress in
exchange for somewhat worse compression ratios. Using this compression format
our technique can take less than 70% of the time needed by decompressing and
searching on the ﬂy with basic dynamic programming for moderate m and small
k values. Dynamic programming is considered as the most ﬂexible technique to
cope with diverse variants of the problem. However, decompression followed by
faster search algorithms speci(cid:12)cally designed for the edit distance still outperforms 
our technique, albeit those algorithms are less ﬂexible to cope with other
variants of the problem.

2 Related Work

We consider in this work Ziv-Lempel compression, which is based on (cid:12)nding
repetitions in the text and replacing them with references to similar strings

