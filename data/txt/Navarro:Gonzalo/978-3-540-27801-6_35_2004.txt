Improved Single

and Multiple Approximate String Matching

Kimmo Fredriksson1,(cid:1) and Gonzalo Navarro2,(cid:1)(cid:1)

1 Department of Computer Science, University of Joensuu

2 Department of Computer Science, University of Chile

kfredrik@cs.joensuu.fi

gnavarro@dcc.uchile.cl

Abstract. We present a new algorithm for multiple approximate string
matching. It is based on reading backwards enough (cid:1)-grams from text
windows so as to prove that no occurrence can contain the part of the
window read, and then shifting the window. Three variants of the algorithm 
are presented, which give diﬀerent tradeoﬀs between how much
they work in the window and how much they shift it. We show analytically 
that two of our algorithms are optimal on average. Compared to
the ﬁrst average-optimal multipattern approximate string matching algorithm 
[Fredriksson and Navarro, CPM 2003], the new algorithms are
much faster and are optimal up to diﬀerence ratios of 1/2, contrary to
the maximum of 1/3 that could be reached in previous work. This is also
a contribution to the area of single-pattern approximate string matching,
 as the only average-optimal algorithm [Chang and Marr, CPM 1994]
also reached a diﬀerence ratio of 1/3. We show experimentally that our
algorithms are very competitive, displacing the long-standing best algorithms 
for this problem. On real life texts, our algorithms are especially
interesting for computational biology applications.

1 Introduction and Related Work

Approximate string matching is one of the main problems in classical string
algorithms, with applications to text searching, computational biology, pattern
recognition, etc. Given a text T1...n, a pattern P1...m, and a maximal number of
diﬀerences permitted, k, we want to ﬁnd all the text positions where the pattern
matches the text up to k diﬀerences. The diﬀerences can be substituting, deleting
or inserting a character. We call α = k/m the diﬀerence ratio, and σ the size
of the alphabet Σ. For the average case analyses it is customary to assume a
random text over a uniformly distributed alphabet.

A natural extension to the basic problem consists of multipattern searching,
 that is, searching for r patterns P 1 . . . P r simultaneously in order to report
all their occurrences with at most k diﬀerences. This has also several applications 
such as virus and intrusion detection, spelling, speech recognition, optical

(cid:1) Supported by the Academy of Finland.
(cid:1)(cid:1) Partially supported by Fondecyt grant 1-020831.

S.C. Sahinalp et al. (Eds.): CPM 2004, LNCS 3109, pp. 457–471, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004

458

Kimmo Fredriksson and Gonzalo Navarro

character recognition, handwriting recognition, text retrieval under synonym
or thesaurus expansion, computational biology, multidimensional approximate
matching, batch processing of single-pattern approximate searching, etc. Moreover,
 some single-pattern approximate search algorithms resort to multipattern
searching of pattern pieces. Depending on the application, r may vary from a few
to thousands of patterns. The naive approach is to perform r separate searches,
so the goal is to do better.

The single-pattern problem has received a lot of attention since the sixties
[10]. For low diﬀerence ratios (the most interesting case) the so-called ﬁltration
algorithms are the most eﬃcient ones. These algorithms discard most of the text
by checking for a necessary condition, and use another algorithm to verify the
text areas that cannot be discarded. For ﬁltration algorithms, the two important
parameters are the ﬁltration speed and the maximum diﬀerence ratio α up to
which they work.

In 1994, Chang & Marr [2] showed that the average complexity of the problem
is O((k + logσ m)n/m), and gave the ﬁrst (ﬁltration) algorithm that achieved
that average-optimal cost for α < 1/3 − O(1/

σ).

√

The multipattern problem has received much less attention, not because of
lack of interest but because of its diﬃculty. There exist algorithms that search
permitting only k = 1 diﬀerence [8], that handle too few patterns [1], and that
handle only low diﬀerence ratios [1]. No eﬀective algorithm exists to search for
many patterns with intermediate diﬀerence ratio. Moreover, as the number of
patterns grows, the diﬀerence ratios that can be handled get reduced, as the
most eﬀective algorithm [1] works for α < 1/ logσ(rm).

Very recently [4], we have proposed the ﬁrst average-optimal multiple approximate 
string matching algorithm, with average complexity O((k + logσ(rm))n/
m). It consists of a direct extension of Chang & Marr algorithm to multiple
patterns. The algorithm performs well in practice. However, just as Chang &
Marr on single patterns, it can only cope with diﬀerence ratios α < 1/3, and
even lower in practice due to memory limitations. Both algorithms are based on
reading enough (cid:4)-grams (substrings of length (cid:4)) from text windows so as to prove
that no occurrence can contain the part of the window read, and then shifting
the window.

In this paper we present a new algorithm in this trend. Compared to our
previous algorithm [4], the present one is algorithmically more novel, as it is not
a direct extension of an existing single pattern algorithm but a distinct approach.
We use a sliding window rather than ﬁxed windows. This permits us having a
window length of m− k instead of (m− k)/2, which is the crux of our ability to
handle higher diﬀerence ratios. In order to maximize shifts on a sliding window,
we have to read it backwards, which was not an issue in [2, 4]. In this sense, our
algorithm inherits from ABNDM algorithm [11]. We present also two variants of
our algorithm, which trade amount of work done inside a window by amount of
window shifting obtained.

The analysis of the new algorithms is more diﬃcult than previous ones [2, 4].
We manage to prove that two of our new algorithms are also average-optimal.

