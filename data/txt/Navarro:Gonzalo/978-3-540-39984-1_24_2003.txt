Distributed Query Processing Using Suﬃx

Arrays

Mauricio Mar´ın1,3 and Gonzalo Navarro2,3

1 Dept. of Computer Science

University of Magallanes
mmarin@ona.fi.umag.cl

2 Dept. of Computer Science

University of Chile

gnavarro@dcc.uchile.cl

3 Center for Web Research (www.cwr.cl)(cid:1)

Abstract. Suﬃx arrays are more eﬃcient than inverted ﬁles for solving
complex queries in a number of applications related to text databases.
Examples arise when dealing with biological or musical data or with texts
written in oriental languages, and when searching for phrases, approximate 
patterns and, in general, regular expressions involving separators.
In this paper we propose algorithms for processing in parallel batches of
queries upon distributed text databases. We present eﬃcient alternatives
for speeding up query processing using distributed realizations of suﬃx
arrays. Empirical results obtained from natural language text on a cluster
of PCs show that the proposed algorithms are eﬃcient in practice.

1 Introduction

In the last decade, the design of eﬃcient data structures and algorithms for
textual databases and related applications has received a great deal of attention
due to the rapid growth of the Web [3]. Typical applications are those known
as client-server in which users take advantage of specialized services available
at dedicated sites [4]. For the cases in which the number and type of services
demanded by clients is such that it generates a very heavy work-load on the
server, the server eﬃciency in terms of running time is of paramount importance.
As such it is not diﬃcult to see that the only feasible way to overcome limitations
of sequential computers is to resort to the use of several computers or processors
working together to service the ever increasing demands of clients.

An approach to eﬃcient parallelization is to split up the data collection and
distribute it onto the processors in such a way that it becomes feasible to exploit
locality by eﬀecting parallel processing of user requests, each upon a subset
of the data. As opposed to shared memory models, this distributed memory
model provides the beneﬁt of better scalability [7]. However, it introduces new
problems related to the communication and synchronization of processors and

(cid:1) Funded by Millennium Nucleus CWR, Grant P01-029-F, Mideplan, Chile.

M.A. Nascimento, E.S. de Moura, A.L. Oliveira (Eds.): SPIRE 2003, LNCS 2857, pp. 311–325, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

312

Mauricio Mar´ın and Gonzalo Navarro

their load balance. This paper describes strategies to overcome these problems
in the context of the parallelization of suﬃx arrays [3]. We propose strategies for
reduction of inter-processors communication and load balancing.

The advent of powerful processors and cheap storage has allowed the consideration 
of alternative models for information retrieval other than the traditional
one of a collection of documents indexed by keywords. One such a model which
is gaining popularity is the full text model. In this model documents are represented 
by either their complete full text or extended abstracts. The user expresses
his/her information need via words, phrases or patterns to be matched for and
the information system retrieves those documents containing the user speciﬁed
strings. While the cost of searching the full text is usually high, the model is
powerful, requires no structure in the text, and is conceptually simple [3].

To reduce the cost of searching a full text, specialized indexing structures
are adopted. The most popular of these are inverted lists [3, 1, 2]. Suﬃx arrays
or pat arrays [3] are more sophisticated indexing structures which take space
close to the text size. They are superior to inverted lists for searching phrases or
complex queries such as regular expressions [3]. In addition, suﬃx arrays can be
used to index texts other than occidental natural languages, which have clearly
separated words that follow some convenient statistical rules [3]. Examples of
these applications include computational biology (ADN or protein strings), music
retrieval (MIDI or audio ﬁles), oriental languages (Chinese, Korean, and others),
and other multimedia data ﬁles.

The suﬃx array uses a binary search based strategy. Processing a single
T -chars-size query in a text of size N takes O(T log N) time on the standard
sequential suﬃx array. Thus trying to reduce such time by using a P -processors
distributed memory parallel computer is not very attractive in practical terms.
In this paper we assume a server site at which lots of queries are arriving
per unit of time. Such work-load can be serviced by taking batches of Q queries
each. Processing batches in parallel is appealing in this context as one is more
interested on improving the throughput of the whole process than single operations.
 To achieve this goal a pragmatic (though naive) strategy would be to keep
a copy of the whole text database and index in each server machine and route
the queries uniformly at random among the P machines. This can be acceptable.
For very large databases, however, the non-cooperating machines are forced
to keep large pieces of their identical suﬃx arrays in secondary memory, which
can degrade performance dramatically. A more sensible approach is then to keep
a single copy of the suﬃx array distributed evenly onto the P main memories.
Now the challenge is to achieve eﬃcient performance on a P -machines server that
must communicate and synchronize in order to service every batch of queries.
This is not trivial because most array positions are expected to point to text
located in remote memory when naive partitioning is employed.

An important fact to consider in natural language texts is that words are not
uniformly distributed, both in the text itself and in the queries provided by the
users of the system. For example, in the Chilean web (www.todocl.cl) words

