Encodings for Range Majority Queries(cid:2)

Gonzalo Navarro1 and Sharma V. Thankachan2

1 Dept. of Computer Science, Univ. of Chile

2 Cheriton School of Computer Science, Univ. of Waterloo

gnavarro@dcc.uchile.cl

thanks@uwaterloo.ca

Abstract. We face the problem of designing a data structure that can
report the majority within any range of an array A[1, n], without storing
A. We show that Ω(n) bits are necessary for such a data structure, and
∗ n) bits that answers majority queries
design a structure using O(n log
in O(log n) time. We extend our results to τ -majorities.

1

Introduction

Given an array A[1, n] of n numbers or arbitrary elements, an array range query
problem asks to build a data structure over A, such that whenever an interval
[i, j] with 1 ≤ i ≤ j ≤ n comes as an input, we can eﬃciently answer queries on
the elements in A[i, j] [16]. Many array range queries arise naturally as subproblems 
of combinatorial problems, and are also of direct interest in data mining
applications. Well-known examples are range maximum queries (RMQs, which
seek the largest element in A[i, j]) [7] and top-k queries (which report the k
largest elements in A[i, j]) [3].

An encoding for array range queries is a data structure that answers the
queries without accessing A. This is useful when the values of A are not of
interest themselves, and thus A may be deleted, potentially saving much space.
It is also useful when array A does not ﬁt in main memory, so it can be kept
in secondary storage while a much smaller encoding can be maintained in main
memory, speeding up queries. In this setting, instead of reporting an element
in A, we only report a position in A where it occurs. Otherwise in many cases
the encodings would be able to reconstruct A, and thus could not be small. As
examples of encodings, RMQs can be solved in constant time using just 2n+o(n)
bits [7], and top-k queries can be solved in O(k) time using O(n log k) bits [10].
Frequency based array range queries, in particular variants of heavy-hitterlike 
problems, are very popular in data mining. Queries such as ﬁnding the most
frequent element in a range (known as the range mode query) are known to be
harder than problems like RMQs. For range mode queries, known data structures
with constant query time require nearly quadratic space [14,13]. The best known
n/ log n) query time [4], and conditional lower
linear space solution requires O(
bounds in that paper show that a signiﬁcant improvement is highly unlikely.
(cid:2) Funded in part by Millennium Nucleus Information and Coordination in Networks

(cid:2)

ICM/FIC P10-024F, Chile.

A.S. Kulikov, S.O. Kuznetsov, and P. Pevzner (Eds.): CPM 2014, LNCS 8486, pp. 262–272, 2014.
c(cid:2) Springer International Publishing Switzerland 2014

Encodings for Range Majority Queries

263

Still, eﬃcient solutions exist for some useful variations of the range mode
problem. An example are approximate range mode queries, where we are required
to output an element whose number of occurrences in A[i, j] is at least 1/(1 + )
times the number of occurrences of the mode in A[i, j] [9,2].

In this paper we focus on a popular variation of range mode queries called
range majority queries, which ask to report the range mode in A[i, j] only if
it occurs more than half of the times in A[i, j]. We also consider an extension
where any element occurring a fraction larger than τ of the times in A[i, j] can
be reported. More formally, a majority is deﬁned in the following way.

Deﬁnition 1. A majority in an array B[1, m], if it exists, is the element that
occurs more than m/2 times in B. Given a real number 0 < τ ≤ 1/2, a τ -
majority in an array B[1, m], if it exists, is any element that occurs more than
τ m times in B. Thus a majority is a τ -majority for τ = 1/2.

The problem we address in this paper can be stated as follows.

Deﬁnition 2. Given an array A[1, n], a range majority query gives an interval
[i, j] and must return whether A[i, j] has a majority, and if it has, also return
any position i ≤ k ≤ j where the majority of A[i, j] occurs. A range τ -majority
query is deﬁned analogously, returning any position of any τ -majority in A[i, j].

Range majority queries can be answered in constant time by maintaining a linear
space (i.e., O(n) words or O(n log n) bits) data structure [6]. Similarly, range τ -
majority queries can be solved in time O(1/τ ) and linear space if τ is ﬁxed at
construction time, or O(n log log n) space (i.e., O(n log n log log n) bits) if τ is
given at query time [1].

In this paper, we focus for the ﬁrst time on encodings for range majority
(and τ -majority) queries. In this scenario, a valid question is how much space is
necessary for an encoding that correctly answers such queries (where we recall
that A itself is not available at query time). We easily show in Section 2 that
any such encoding needs Ω(n) bits, which reduces to Ω(τ log(1/τ )n) bits for τ -
majorities. Our main result is that it is possible to solve range majority queries
within logarithmic time and almost linear-bit space. We achieve O(n log log n)
bits in Section 3, and our ﬁnal result in Section 4:

Theorem 1. There exists an encoding using O(n log
majority queries in time O(log n).

∗ n) bits answering range

In Section 5 we extend the results to τ -majorities, where the time and space
obtained for range majority queries are divided by τ . Finally, in Section 6 we
show how to build our structures in O(n log n) time.

Related Work. Range τ -majority queries were introduced by Karpinski and
Nekrich [11], who presented an O(n/τ )-words structure with O((1/τ )(log log n)2)
query time. Durocher et al. [6] improved their space and query time to O(n log(1/τ ))
and O(1/τ ), respectively. The currently best result is by Belazzougui et al. [1],

264

G. Navarro and S.V. Thankachan

where the space is O(n) words and the query time is O(1/τ ). All these results assume 
τ is ﬁxed during the construction time. For the case where τ is also a part
of the query input, a data structure of O(n log n) words was proposed by Chan et
al. [5]. Very recently, Belazzougui et al. [1] brought down the space occupancy to
O(n log log n) words. The query time is O(1/τ ) in all cases. All these solutions include 
a representation of A (sometimes aiming at compressing it [8,1]), thus they
are not encodings. As far as we know, ours is the ﬁrst encoding for this problem.

2 Lower Bounds

We ﬁrst derive a couple of simple lower bounds on the minimum size our encodings 
may have. First, Ω(n) bits are needed to answer majority queries.
Lemma 1. Any encoding for range majority queries requires (cid:3)n/2(cid:4) bits, even
for an array with 2 distinct symbols.

Proof. We can encode any bitmap C[1, n] using an encoding for range majorities
on an array A[1, 2n], hence establishing the result. Set A[2k + 1] = 0 for all valid
k values, and A[2k] = C[k]. For example, let C[1, 3] = (cid:5)0 1 1(cid:6), then A[1, 6] =
(cid:5)0 0 0 1 0 1(cid:6). Then, if C[k] = 0 then A[2k − 1, 2k] has a majority, whereas if
(cid:7)(cid:8)
C[k] = 1 it does not.

Second, we show that τ -majority queries require Ω(τ log(1/τ )n) bits.
Lemma 2. Any encoding for range τ -majority queries requires n lg(cid:9)1/τ(cid:10)/(1 +
(cid:9)1/τ(cid:10)) > (τ lg(1/τ )/2)n bits.
Proof. Let c = (cid:9)1/τ(cid:10). We can encode any array C[1, n] over alphabet [1, c]
using an encoding for range majorities on an array A[1, (c + 1)n]. In each bucket
A[(c + 1)k + 1, (c + 1)(k + 1)] we write the values (cid:5)1, 2, 3, . . . , c(cid:6), except that the
value C[k + 1] is written twice. Therefore, A[(c + 1)k + 1, (c + 1)(k + 1)] has
only one τ -majority, precisely at oﬀset C[k + 1] within the bucket. Therefore,
the encoding for τ -majorities in A[1, (c + 1)n] requires at least n lg c bits, as any
(cid:7)(cid:8)
possible array C can be reconstructed from it.

3 An O(n log log n) Bits Encoding for Range Majorities

In this section we obtain an encoding using O(n log log n) bits and solving majority 
queries in O(log n) time. In the next section we reduce the space.

Consider each distinct symbol x appearing in A[1, n]. Now consider the set
of segments Sx within [1, n] where x is a majority (this includes, in particular,
all the segments [k, k] where A[k] = x). Segments in Sx may overlap each other.
For example, if A[1, 7] = (cid:5)1 3 2 3 3 1 1(cid:6), then
S1 = {[1, 1], [6, 6], [7, 7], [6, 7], [5, 7]},
S2 = {[3, 3]},
S3 = {[2, 2], [4, 4], [5, 5], [4, 5], [2, 4], [3, 5], [4, 6], [2, 5], [1, 5], [2, 6]}.

Encodings for Range Majority Queries

265

Now let Ax[1, n] be a bitmap such that Ax[k] = 1 iﬀ position k belongs to
some segment in Sx. In our example, A1 = (cid:5)1 0 0 0 1 1 1(cid:6), A2 = (cid:5)0 0 1 0 0 0 0(cid:6),
and A3 = (cid:5)1 1 1 1 1 1 0(cid:6).

We recall operation rank(B, i) in bitmaps B[1, m], which returns the number
of 1s in B[1, i]. Operation rank can be implemented using o(m) bits on top of
B and in constant time [12].
We deﬁne a second bitmap related to x, Mx, so that if Ax[k] = 1, then
Mx[rank(Ax, k)] = 1 iﬀ A[k] = x. In our example, M1 = (cid:5)1 0 1 1(cid:6), M2 = (cid:5)1(cid:6),
and M3 = (cid:5)0 1 0 1 1 0(cid:6). Then the following result is not diﬃcult to prove.
Lemma 3. An element x is a majority in A[i, j] iﬀ Ax[k] = 1 for all i ≤ k ≤ j,
and 1 is a majority in Mx[rank(Ax, i), rank(Ax, j)].
Proof. If x is a majority in A[i, j], then by deﬁnition [i, j] ∈ Sx, and therefore all
the positions k ∈ [i, j] are set to 1 in Ax. Therefore, the whole segment Ax[i, j] is
mapped bijectively to Mx[rank(Ax, i), rank(Ax, j)], which is of the same length.
Finally, the number of occurrences of x in A[i, j] is the number of occurrences
of 1 in Mx[rank(Ax, i), rank(Ax, j)], which establishes the result.
Conversely, if Ax[k] = 1 for all i ≤ k ≤ j, then A[i, j] is bijectively mapped to
Mx[rank(Ax, i), rank(Ax, j)], and the 1s in this range correspond one to one with
occurrences of x in A[i, j]. Thus, if 1 is a majority in Mx[rank(Ax, i), rank(Ax, j)],
(cid:7)(cid:8)
then x is a majority in A[i, j].
In our example, 1 is a majority in A[5, 7], and it holds A1[5, 7] = (cid:5)1 1 1(cid:6) and
M1[rank(A1, 5), rank(A1, 7)] = M1[2, 4] = (cid:5)0 1 1(cid:6), where 1 is a majority. Thus,
with Ax and Mx we can determine whether x is a majority in any range.

Lemma 4. It is suﬃcient to have rank-enabled bitmaps Ax and Mx to determine,
 in constant time, whether x is a majority in any A[i, j].
Proof. We use Lemma 3. We compute i(cid:4)
= rank(Ax, i) and j(cid:4)
= rank(Ax, j). If
j(cid:4) − i(cid:4) (cid:12)= j − i, then Ax[k] = 0 for some i ≤ k ≤ j and thus x is not a majority in
A[i, j]. Otherwise, we ﬁnd out whether 1 is a majority in Mx[i(cid:4), j(cid:4)
], by checking
(cid:7)(cid:8)
whether rank(Mx, j(cid:4)
To ﬁnd out any position i ≤ k ≤ j where A[k] = x, we need operation
select(B, j), which gives the position of the jth 1 in a bitmap B[1, m]. This
operation can also be solved in constant time with o(m) bits on top of B [12].
Then, for example, if x is a majority in A[i, j], its ﬁrst occurrence in A[i, j] is
+ select(Mx, rank(Mx, i(cid:4) − 1) + 1). With a similar formula we can retrieve
i − i(cid:4)
any of the positions of x in A[i, j].

) − rank(Mx, i(cid:4) − 1) > (j(cid:4) − i(cid:4)

+ 1)/2.

We cannot aﬀord to store all the bitmaps Ax and Mx for all x, however. The

next lemma is the ﬁrst step to reduce the total space to slightly superlinear.

266

G. Navarro and S.V. Thankachan

Lemma 5. Any position A[k] = x induces at most ﬁve 1s in Ax.
Proof. Consider a process where we start with A[k] = ⊥ for all k, and set the
values A[k] = x for increasing positions k (left to right). Setting A[k] = x induces
a segment [k, k] ∈ Sx, which may induce a new 1 in Ax. It might also induce
some segments of the form [i, k] ∈ Sx, for i < k, depending on previous values.
If x is a majority in [i, k] with A[k] = x and it was not a majority in [i, k] with
A[k] = ⊥, then x occurs (cid:3)(k − i + 1)/2(cid:4) times in A[i, k − 1]. If A[k − 1] (cid:12)= x, then
x also occurs (cid:3)(k − i + 1)/2(cid:4) > (k − i − 1)/2 times in A[i, k − 2], and thus it
is a majority in A[i, k − 2]. Thus all the range Ax[i, k − 2] was already 1s and
setting A[k] = x has only induced two new 1s, Ax[k − 1] = Ax[k] = 1. If, on the
other hand, A[k − 1] = x, let l be the smallest value such that [l, k − 1] ∈ Sx.
Setting A[k] = x will add new 1s to Ax only if i < l. By the deﬁnition of l, it
must hold that A[l − 1] (cid:12)= x and A[l − 2] (cid:12)= x, that x occurs (cid:3)(k − l + 1)/2(cid:4)
times in A[l, k − 1], and that (cid:3)(k − l + 1)/2(cid:4) > (k − l)/2. That is, k − l must
be odd and therefore (cid:3)(k − l + 1)/2(cid:4) = (k − l + 1)/2. Now, this implies that x
occurs (cid:3)(k − l + 1)/2(cid:4) + 1 = (k − l + 3)/2 times in A[l − 1, k], so x is a majority
in A[l − 1, k] and setting A[k] = x could induce a new 1 in Ax[l − 1] = 1. On
the other hand, x is not a majority in A[l − 2, k]. To be a majority in A[i, k]
with i < l − 2, x has to be a majority in A[i, l − 3], and therefore only positions
Ax[l − 2] = Ax[l − 1] = 1 could be new 1s induced by A[k] = x.
The consideration of the new induced segments of the form [i, k + 1] ∈ Sx is
simpler, because we know that at this point A[k + 1] = ⊥. Therefore, if x is a
majority in A[i, k + 1], it occurs more than (k − i + 2)/2 times in A[i, k + 1], and
thus it occurs more than (k − i)/2 times in A[i, k − 1], thus it is also a majority
in A[i, k − 1]. Therefore the only new 1 that can be added is Ax[k + 1] = 1.
Finally, we consider the new induced segments of the form [i, j] ∈ Sx, with
i < k and j > k + 1. We know that at this point A[k + 1, j] = ⊥. Therefore, if
x is a majority in A[i, j], it occurs more than (j − i + 1)/2 times in A[i, j], and
thus it occurred more than (j − i − 1)/2 times in A[i, j] before setting A[k] = x.
Thus x occurred more than (j − i − 1)/2 times in A[i, j − 2] and thus it was
already a majority in A[i, j − 2]. Therefore the only new 1s that can be added
by setting A[k] = x are Ax[j − 1] = Ax[j] = 1.
(cid:7)(cid:8)

Overall, each new value A[k] = x may induce up to ﬁve new 1s in Ax.

The lemma shows that all the Ax bitmaps add up to O(n) 1s, and the lengths
of the Mx bitmaps adds up to O(n) as well (recall that Mx has one position per
1 in Ax). Therefore, we can store all the Mx bitmaps within O(n) bits of space.
We cannot, however, store all the Ax bitmaps, as they may add up to O(n2) 0s
(note there can be O(n) distinct symbols x).

Instead, we will coalesce diﬀerent bitmaps Ax into one, as long as their areas
of contiguous 1s do not overlap or touch (that is, there must be at least one
0 between any two areas of 1s of two coalesced bitmaps). The bitmaps Mx
are merged accordingly, in the same order of the areas. In our example, we
can coalesce A1 and A2 into A12 = (cid:5)1 0 1 0 1 1 1(cid:6), with the corresponding
M12 = (cid:5)1 1 0 1 1(cid:6).

Encodings for Range Majority Queries

267

Then, at query time, we check for the area [i, j] of each coalesced bitmap
using Lemma 4. We cannot confuse the areas of diﬀerent symbols x because we
force that there is at least one 0 between any two areas. If we ﬁnd one majority
in one coalesced bitmap, we know that there is a majority and can spot all of
its occurrences (or one, as the problem is deﬁned), even if we cannot tell which
particular symbol x is the majority.

This scheme will work well if we obtain just a few coalesced bitmaps overall.

Next we show how to obtain only O(log n) coalesced bitmaps.

Lemma 6. At most 2 lg n distinct values of x can have Ax[k] = 1 for a given k.

Proof. First, A[k] = x is a majority in A[k, k], thus Ax[k] = 1. Now consider
any other element x(cid:4) (cid:12)= x such that Ax(cid:2) [k] = 1. This means that x(cid:4)
is a majority
in some [i, j] that contains k. Since A[k] (cid:12)= x(cid:4)
, it must be that x(cid:4)
is a majority
in [i, k] or in [k, j] (or in both). We say x(cid:4)
is a left-majority in the ﬁrst case
and a right-majority in the second. Let us call y1, y2, . . . the x(cid:4)
values that are
left-majorities, and i1, i2, . . . the left endpoints of their segments (if they are
majorities in several segments covering k, we choose one arbitrarily). Similarly,
let z1, z2, . . . be the x(cid:4)
values that are right-majorities, and j1, j2, . . . the right
endpoints of their segments. Assume the left-majorities are sorted by decreasing
values of ir and the right-majorities are sorted by increasing values of jr. If a
same value x(cid:4)
appears in both lists, we arbitrarily remove one of them. As an
exception, we will start both lists with y0 = z0 = x, with i0 = j0 = k.

It is easy to see by induction that yr must appear at least 2r times in the
interval [ir, k]. This clearly holds for y0 = x. Now, by the inductive hypothesis,
 values y0, y1, . . . , yr−1 appear at least 20, 21, . . . , 2r−1 times within [ir−1, k]
(which contains all the intervals), adding up to 2r− 1 occurrences. In order to be
a left-majority, element yr must appear at least 2r times in [ir, k], to outweight
all the 2r − 1 occurrences of the previous symbols. The case of right-majorities
is analogous. This shows that there cannot be more than lg n left-majorities and
(cid:7)(cid:8)
lg n right-majorities.

In the following it will be useful to deﬁne Cx as the set of maximal contiguous
areas of 1s in Ax. That is, Cx is obtained by merging all the segments of Sx
that touch or overlap. In our example, C1 = {[1, 1], [5, 7]}, C2 = {[3, 3]}, and
C3 = {[1, 6]}. Note that segments of Cx do not overlap, unlike those of Sx. Since
a segment of Cx covers a position k iﬀ some segment of Sx covers position k (and
iﬀ Ax[k] = 1), it follows by Lemma 6 that any position is covered by at most 2 lg n
segments of Cx of distinct symbols x. Clearly, a pair of consecutive positions is
covered by at most 4 lg n such segments (this is a crude upper bound).

We obtain O(log n) coalesced bitmaps as follows. We take the union of all the
sets Cx of all the symbols x and sort the segments by their starting points. Then
we start ﬁlling coalesced bitmaps. We check if the current segment can be added
to an existing bitmap without producing overlaps (and leaving a 0 in between).
If we can, we choose any appropriate bitmap, otherwise we start a new bitmap.
If at some point we need more than 4 lg n bitmaps, it is because all the last

268

G. Navarro and S.V. Thankachan

segments of the current 4 lg n bitmaps overlap the starting point of the current
segment or the previous position, a contradiction.
In our example, we take C1 ∪ C2 ∪ C3 = {[1, 1], [1, 6], [3, 3], [5, 7]}, and the
process produces precisely the coalesced bitmaps A12, corresponding to the set
{[1, 1], [3, 3], [5, 7]} and A3, corresponding to {[1, 6]}. Note that in general the

coalesced bitmaps may not correspond to the union of complete original bitmaps
Ax, but areas of a bitmap Ax may end up in diﬀerent coalesced bitmaps.

Therefore, the coalescing process produces O(log n) bitmaps. Consequently,
we obtain O(log n) query time by simply checking the coalesced bitmaps one by
one using Lemma 4.

Finally, representing the O(log n) coalesced bitvectors, which contain O(n)
1s and have total length O(n log n), requires O(n log log n) bits if we use a compressed 
bitmap representation [15] that still oﬀers constant-time rank and select
queries. This concludes the ﬁrst part of our result.

4 An O(n log

∗ n) Bits Encoding for Range Majorities

We introduce a diﬀerent representation of the coalesced bitmaps that allows us
∗ n) bits, while retaining all the mechanism and query
storing them in O(n log
time complexity. We will distinguish segments of Cx by their lengths, separating
lengths by ranges between 2(cid:2) and 2(cid:2)+1 − 1, for any (cid:5). In the process of creating
the coalesced bitmaps described in the previous section, we will have separate
coalesced bitmaps for inserting segments within each range of lengths; these will
be called bitmaps of level (cid:5). There may be several bitmaps of the same level.
It is important that, even with this restriction, our coalescing process will still
generate O(log n) bitmaps, because only O(1) coalesced bitmaps of each level (cid:5)
will be generated.

Lemma 7. There can be at most 8 segments of any Cx, of length between 2(cid:2)
and 2(cid:2)+1 − 1, covering a given position k, for any (cid:5).
Proof. Any such segment must be contained in the area A[k − 2(cid:2)+1, k + 2(cid:2)+1],
and if x is a majority in it, it must appear more than 2(cid:2)−1 times. There can be
(cid:7)(cid:8)
only 8 diﬀerent values of x appearing 2(cid:2)−1 times in an area of length 2(cid:2)+2.

To represent any coalesced bitmap B[1, n], we cut the universe [1, n] into chunks
of length b = lg n. We store a string K of length n/ lg n, where for each position
a 0 indicates that the chunk is all 0s, a 1 that the chunk is all 1s, and a 2
indicates that there are 0s and 1s in the chunk. We store explicitly only the
chunks with value 2, concatenated one after the other. Let B1 be a bitmap such
that B1[k] = 1 iﬀ K[k] = 1, B2 such that B2[k] = 1 iﬀ K[k] = 2, and C the
bitmap where the explicit chunks are concatenated. Then it holds

rank(B, i) = b · rank(B1,(cid:3)(i − 1)/b(cid:4)) +

rank(C, b · rank(B2,(cid:3)i/b(cid:4)) + [if B2[1 + (cid:3)i/b(cid:4)] = 1 then i mod b else 0]),

Encodings for Range Majority Queries

269

which takes constant time. Operation select(B, j) can be done by binary search
on rank, which takes O(log n) time but has to be done once per query, hence
retaining the O(log n) query time. Note that K is not explicitly stored, but it is
represented with B1 and B2.
In our example, we would have three coalesced bitmaps: B0 = (cid:5)1 0 1 0 0 0 0(cid:6),
of level (cid:5) = 0, for the segments [1, 1] and [3, 3]; B1 = (cid:5)0 0 0 0 1 1 1(cid:6), of level
(cid:5) = 1, for the segment [5, 7]; and B2 = (cid:5)1 1 1 1 1 1 0(cid:6), of level (cid:5) = 2, for the
segment [1, 6]. Assume b = 2. Then, for B0 we would have K 0 = (cid:5)2 2 0 0(cid:6),
1 = (cid:5)0 0 0 0(cid:6), B0
2 = (cid:5)1 1 0 0(cid:6), and C0 = (cid:5)1 0 1 0(cid:6). For B1 we would have
B0
K 1 = (cid:5)0 0 1 1(cid:6), B1
2 = (cid:5)0 0 0 0(cid:6), and C1 = (cid:5)(cid:6). Finally, for B2 we
1 = (cid:5)0 0 1 1(cid:6), B1
would have K 2 = (cid:5)1 1 1 0(cid:6), B2
1 = (cid:5)1 1 1 0(cid:6), B2
Consider a ﬁxed bitmap B of some level (cid:5), which has been formed by adding n(cid:4)
segments. We store at most 2n(cid:4)
lg n bits in the explicit chunks of C, as there are
from 1 to 0 in B. For any level (cid:5) ≥ lg lg n,
only n(cid:4)
lg n 1s, because the segments have length at least 2(cid:2) ≥ lg n.
there are at least n(cid:4)
Therefore, in those levels, the number of bits stored in C bitmaps is of the same
order of the total number of 1s in the corresponding bitmaps B. Thus we store
only O(n) bits over all the chunks of all coalesced bitmaps of levels (cid:5) ≥ lg lg n.
As for the sequences B1 and B2 describing the chunks, they are of length n/ lg n,
so they add up to O(n) bits over all the possible O(log n) levels.
Now, for the levels up to lg lg n, we use chunk size b = lg lg n, storing a
sequence of length n/ lg lg n. The explicitly stored chunks C add up to n(cid:4)
lg lg n
bits, and for any level (cid:5) ≥ lg lg lg n, the total number of 1s is over n(cid:4)
lg lg n, thus
the total number of stored bits is of the same order of the 1s. The sequences B1
and B2 describing the chunks add up to O(n), because there are only O(log log n)
levels where this is applied.

2 = (cid:5)0 0 0 0(cid:6), and C2 = (cid:5)(cid:6).

transitions from 0 to 1 and n(cid:4)

We continue with the remaining (lowest) lg lg lg n levels, and so on. Then the
∗ n), dominated by the sequences B1 and

total number of stored bits is O(n log
B2. This proves Theorem 1.

5 Extension to τ -Majorities

We ﬁrst consider the case where τ is ﬁxed at the time the data structure is built,
and then move on to the case of τ given at query time. For lack of space we only
sketch the results, which follow relatively easily from our results on majorities.
First, Lemmas 3 and 4 hold verbatim if we deﬁne Sx as the segments where x is a
τ -majority. Lemma 5 can be extended to this case, so that any position A[k] = x
induces O(1/τ ) 1s in Ax. As a consequence, there are O(n/τ ) 1s in all the Ax
bitmaps. Lemma 6 can also be extended, so that O(log1/(1−τ )
n) = O((1/τ ) log n)
distinct values of x can have Ax[k] = 1 for a given k. Therefore, the coalescing
process produces O((1/τ ) log n) bitmaps, and this is the query time. Lemma 7
can be extended similarly, so that there can be only O(1/τ ) coalesced bitmaps
of any given level, and there are lg n levels. Thus the mechanism of Section 4 can
∗ n).
be applied verbatim, so that the total number of bits used is O((n/τ ) log
Therefore we obtain the following result.

270

G. Navarro and S.V. Thankachan

(cid:5)lg 1/τ(cid:6)

= 1/2

(cid:5)lg 1/μ(cid:6)

Theorem 2. For a ﬁxed threshold 0 < τ ≤ 1/2, there exists an encoding using
∗ n) bits answering range τ -majority queries in time O((1/τ ) log n).
O((n/τ ) log
In order to allow τ to be speciﬁed at query time, we build the encoding of
Theorem 2 for values τ = 1/2, 1/4, 1/8, . . . , 1/2
, where μ is the minimum
τ value to support. Then, given a τ -majority query, we run the query on the
. Note that τ /2 < τ(cid:4) ≤ τ , therefore the query
structure built for τ(cid:4)
time is O((1/τ(cid:4)
) log n) = O((1/τ ) log n). For each possible answer to the τ(cid:4)
-
majority query, we use rank on the coalesced Mx bitmaps to ﬁnd out whether
the answer is actually a τ -majority. This veriﬁcation does not change the worst-
∗ n) is
case time complexity. As for the space, the factor multiplying O(n log
2 + 4 + 8 + . . . + 2
= O(1/μ). Therefore we obtain the following result.
Theorem 3. For a ﬁxed threshold 0 < μ ≤ 1/2, there exists an encoding using
∗ n) bits answering range τ -majority queries, for any μ ≤ τ ≤ 1/2
O((n/μ) log
given at query time, in O((1/τ ) log n) time.

(cid:5)lg 1/μ(cid:6)

6 Construction

The most complex part of the construction of our encoding is to build the sets
Cx; once these are built, the construction of the structure of Section 4 can be
easily carried out in O(n log

∗ n) additional time.

We separate the set of increasing positions Px where x appears in A, for each
x. The Px sets are easily built in O(n log n) time. Now we build Cx from each
Px using a divide and conquer approach, in O(|Px| log |Px|) time, for a total
construction time of O(n log n).
We pick the middle element k ∈ Px and compute in linear time the segment
[l, r] ∈ Cx that contains k. To compute l, we ﬁnd the leftmost element pl ∈ Px
such that x is a majority in [pl, kr], for some kr ∈ Px with kr ≥ k.
To ﬁnd pl, we note that it must hold (w(pl, k − 1) + w(k, kr))/(kr − pl + 1) >
1/2, where w(i, j) is the number of occurrences of x in A[i, j]. The condition
is equivalent to 2w(pl, k − 1) + pl − 1 > kr − 2w(k, kr). Thus we compute in
linear time the minimum value v of kr − 2w(k, kr) over all those kr ∈ Px to the
right of k, and then traverse all those pl ∈ Px to the left of k, left to right, to
ﬁnd the ﬁrst one that satisﬁes 2w(pl, k − 1) + pl + 1 > v, also in linear time.
Once we ﬁnd the proper pl and its corresponding kr, the starting position of
the segment is slightly adjusted to the left of pl, to be the smallest value that
satisﬁes w(pl, kr)/(kr − l + 1) > 1/2, that is, l satisﬁes l > −2w(pl, kr) + kr + 1,
that is, l = kr − 2w(pl, kr) + 2.

Once pr and then r are computed analogously, we insert [l, r] into Cx and
continue recursively with the elements of Px to the left of pl and to the right of
pr. Upon return, it might be necessary to join [l, r] with the rightmost segment
of the left part and/or with the leftmost segment of the right part, in constant
time. The total construction time is T (n) = O(n) + 2T (n/2) = O(n log n). The
construction for τ -majorities is similar, although for τ given at query time we
must build O(log(1/μ)) similar structures.

Encodings for Range Majority Queries

271

7 Final Remarks

We have obtained the ﬁrst result about encodings for answering range majority
queries, that is, data structures that use less space than the data and do not need
to access it. We have proved that Ω(n) bits are necessary for any such encoding,
∗ n) bits and O(log n)
and have presented a particular encoding that uses O(n log
time. It can be built in O(n log n) time. An open question is whether it is possible
to reach O(n) bits of space and/or constant query time.

We have also extended our result to range τ -majorities, where we have
proved a lower bound of O(τ log(1/τ )n) bits and presented an encoding using
∗ n) bits and O((1/τ ) log n) query time. An intriguing aspect of this
O((n/τ ) log
result is that our lower bound suggests that τ -majorities require less space for
smaller τ , whereas our upper bound uses more space (and time) for smaller τ ,
in line with previous work on data structures that are not encodings. It is an
interesting problem to determine which is the case.

References

1. Belazzougui, D., Gagie, T., Navarro, G.: Better space bounds for parameterized
range majority and minority. In: Dehne, F., Solis-Oba, R., Sack, J.-R. (eds.) WADS
2013. LNCS, vol. 8037, pp. 121–132. Springer, Heidelberg (2013)

2. Bose, P., An, H.-C., Morin, P., Tang, Y.: Approximate range mode and range
median queries. In: Diekert, V., Durand, B. (eds.) STACS 2005. LNCS, vol. 3404,
pp. 377–388. Springer, Heidelberg (2005)

3. Brodal, G.S., Fagerberg, R., Greve, M., L´opez-Ortiz, A.: Online sorted range reporting.
 In: Dong, Y., Du, D.-Z., Ibarra, O. (eds.) ISAAC 2009. LNCS, vol. 5878,
pp. 173–182. Springer, Heidelberg (2009)

4. Chan, T., Durocher, S., Larsen, K., Morrison, J., Wilkinson, B.: Linear-space data

structures for range mode query in arrays. In: STACS, pp. 290–301 (2012)

5. Chan, T.M., Durocher, S., Skala, M., Wilkinson, B.T.: Linear-space data structures
for range minority query in arrays. In: Fomin, F.V., Kaski, P. (eds.) SWAT 2012.
LNCS, vol. 7357, pp. 295–306. Springer, Heidelberg (2012)

6. Durocher, S., He, M., Munro, I., Nicholson, P., Skala, M.: Range majority in constant 
time and linear space. Inf. Comput. 222, 169–179 (2013)

7. Fischer, J., Heun, V.: Space-eﬃcient preprocessing schemes for range minimum

queries on static arrays. SIAM J. Comput. 40(2), 465–492 (2011)

8. Gagie, T., He, M., Munro, J.I., Nicholson, P.: Finding frequent elements in compressed 
2d arrays and strings. In: Grossi, R., Sebastiani, F., Silvestri, F. (eds.)
SPIRE 2011. LNCS, vol. 7024, pp. 295–300. Springer, Heidelberg (2011)

9. Greve, M., Jørgensen, A.G., Larsen, K.D., Truelsen, J.: Cell probe lower bounds
and approximations for range mode. In: Abramsky, S., Gavoille, C., Kirchner, C.,
Meyer auf der Heide, F., Spirakis, P.G. (eds.) ICALP 2010. Part I, LNCS, vol. 6198,
pp. 605–616. Springer, Heidelberg (2010)

10. Grossi, R., Iacono, J., Navarro, G., Raman, R., Rao Satti, S.: Encodings for range
selection and top-k queries. In: Bodlaender, H.L., Italiano, G.F. (eds.) ESA 2013.
LNCS, vol. 8125, pp. 553–564. Springer, Heidelberg (2013)

272

G. Navarro and S.V. Thankachan

11. Karpinski, M., Nekrich, Y.: Searching for frequent colors in rectangles. In: CCCG

(2008)

12. Ian Munro, J.: Tables. In: Chandru, V., Vinay, V. (eds.) FSTTCS 1996. LNCS,

vol. 1180, pp. 37–42. Springer, Heidelberg (1996)

13. Petersen, H.: Improved bounds for range mode and range median queries. In: Geffert,
 V., Karhum¨aki, J., Bertoni, A., Preneel, B., N´avrat, P., Bielikov´a, M. (eds.)
SOFSEM 2008. LNCS, vol. 4910, pp. 418–423. Springer, Heidelberg (2008)

14. Petersen, H., Grabowski, S.: Range mode and range median queries in constant

time and sub-quadratic space. Inf. Process. Lett. 109(4), 225–228 (2009)

15. Raman, R., Raman, V., Srinivasa Rao, S.: Succinct indexable dictionaries with applications 
to encoding k-ary trees, preﬁx sums and multisets. ACM Trans. Alg. 3(4),
43 (2007)

16. Skala, M.: Array range queries. In: Brodnik, A., L´opez-Ortiz, A., Raman, V., Viola,
A. (eds.) Munro Festschrift. LNCS, vol. 8066, pp. 333–350. Springer, Heidelberg
(2013)

