A Bit-Parallel Suﬃx Automaton Approach

for (δ, γ)-Matching in Music Retrieval

Maxime Crochemore1,2(cid:1), Costas S. Iliopoulos2, Gonzalo Navarro3(cid:1)(cid:1), and

Yoan J. Pinzon2,4(cid:1)(cid:1)

1 Institut Gaspard-Monge, Universit´e de Marne-la-Vall´ee, France

mac@univ-mlv.fr

2 Dept. of Computer Science, King’s College, London, England

www-igm.univ-mlv.fr/~mac

{csi,pinzon}@dcs.kcl.ac.uk

www.dcs.kcl.ac.uk/staff/csi, www.dcs.kcl.ac.uk/staff/pinzon

3 Dept. of Computer Science, University of Chile, Chile

gnavarro@dcc.uchile.cl

www.dcc.uchile.cl/~gnavarro

4 Laboratorio de C´omputo Especializado,

Universidad Aut´onoma de Bucaramanga, Colombia

Abstract. (δ, γ)-Matching is a string matching problem with applications 
to music retrieval. The goal is, given a pattern P1...m and a text
T1...n on an alphabet of integers, ﬁnd the occurrences P (cid:1)
of the pat-
i| ≤ δ, and (ii)
tern in the text such that (i) ∀1 ≤ i ≤ m,
i| ≤ γ. Several techniques for (δ, γ)-matching have been
1≤i≤m |Pi − P (cid:1)
proposed. In this paper we show that a classical string matching technique 
that combines bit-parallelism and suﬃx automata can be successfully 
adapted to this problem. This is the ﬁrst character-skipping algorithm 
that skips characters using both δ and γ. We implemented our
algorithm and drew experimental results on real music showing that our
algorithm is superior to current alternatives.

|Pi − P (cid:1)

1 Introduction

The string matching problem is to ﬁnd all the occurrences of a given pattern
P1...m in a large text T1...n, both being sequences of characters drawn from a ﬁnite
character set Σ. This problem is fundamental in computer science and is a basic
need of many applications, such as text retrieval, music retrieval, computational
biology, data mining, network security, etc. Several of these applications require,
however, more sophisticated forms of searching, in the sense of extending the
basic paradigm of the pattern being a simple sequence of characters.

In this paper we are interested in music retrieval. A musical score can be
viewed as a string: at a very rudimentary level, the alphabet could simply be
the set of notes in the chromatic or diatonic notation, or the set of intervals that

(cid:1) Partly supported by CNRS and NATO.
(cid:1)(cid:1) Supported by CYTED VII.19 RIBIDI Project.

M.A. Nascimento, E.S. de Moura, A.L. Oliveira (Eds.): SPIRE 2003, LNCS 2857, pp. 211–223, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

212

Maxime Crochemore et al.

appear between notes (e.g. pitch may be represented as MIDI numbers and pitch
intervals as number of semitones). It is known that exact matching cannot be
used to ﬁnd occurrences of a particular melody, so one resorts to diﬀerent forms
of approximate matching, where a limited amount of diﬀerences of diverse kinds
are permitted between the search pattern and its occurrence in the text.

The approximate matching problem has been used for a variety of musical
applications [15, 9, 19, 20, 6]. Most computer-aided musical applications adopt
an absolute numeric pitch representation (most commonly MIDI pitch and pitch
intervals in semitones; duration is also encoded in a numeric form). The absolute
pitch encoding, however, may be insuﬃcient for applications in tonal music as
it disregards tonal qualities of pitches and pitch-intervals (e.g., a tonal transposition 
from a major to a minor key results in a diﬀerent encoding of the musical
passage and thus exact matching cannot detect the similarity between the two
passages). One way to account for similarity between closely related but nonidentical 
musical strings is to permit a diﬀerence of at most δ units between the
pattern character and its corresponding text character in an occurrence, e.g., a
C-major {60, 64, 65, 67} and a C-minor {60, 63, 65, 67} sequence can be matched
if a tolerance δ = 1 is allowed in the matching process. Additionally, we require
that the total number of diﬀerences across all the pattern positions does not exceed 
γ, in order to limit the total number of diﬀerences while keeping suﬃcient
ﬂexibility at individual positions.

The formalization of the above problem is called (δ, γ)-matching. The problem 
is deﬁned as follows: the alphabet Σ is assumed to be a set of integer numbers,
 Σ ⊂ Z. Apart from the pattern P and the text T , two extra parameters,
δ, γ ∈ N, are given. The goal is to ﬁnd all the occurrences P (cid:2) of P in T such that
(i) ∀1 ≤ i ≤ m, |Pi − P (cid:2)

i| ≤ δ, and (ii)

(cid:1)

1≤i≤m |Pi − P (cid:2)

i| ≤ γ.

Several recent algorithms exist to solve this problem [7, 10, 8, 11]. Some are
based on extending well-known paradigms such as the Boyer-Moore family or the
use of suﬃx automata. Others are based on bit-parallelism. We detail them in
the next section. On the other hand, it was shown in [17, 18] that bit-parallelism
and suﬃx automata can be nicely combined in order to obtain faster, simpler,
and more ﬂexible algorithms, which are especially robust to handle extended
string matching problems (classes of characters, wild cards, regular expressions,
approximate searching based on Hamming or edit distance, and so on).

In this paper we extend the bit-parallel suﬃx automata to handle (δ, γ)-
matching: The resulting algorithm is extremely simple and much faster than the
existing approaches. It is also the ﬁrst truly (δ, γ) character-skipping algorithm,
as it skips characters using both criteria. Existing approaches do just δ-matching
and check the candidates for the γ-condition.
We use the following deﬁnitions throughout the paper. A word x ∈ Σ∗ is a
factor (or substring) of P if P can be written P = uxv, u, v ∈ Σ∗. A factor x
of P is called a suﬃx (preﬁx) of P if P = ux (P = xu), u ∈ Σ∗. The number of
bits in the computer word is denoted w.

