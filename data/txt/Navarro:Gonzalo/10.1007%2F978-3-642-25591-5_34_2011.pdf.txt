Space-Eﬃcient Data-Analysis Queries on Grids

Gonzalo Navarro1,(cid:2) and Lu´ıs M. S. Russo2,(cid:2)(cid:2)

1 Dept. of Computer Science, University of Chile

gnavarro@dcc.uchile.cl

2 INESC-ID / IST, Tech. Univ. of Lisbon, Portugal

luis.russo@ist.utl.pt

Abstract. We consider various data-analysis queries on two-dimensional
points. We give new space/time tradeoﬀs over previous work on semigroup
and group queries such as sum, average, variance, minimum and maximum.
 We also introduce new solutions to queries rarely considered in
the literature such as two-dimensional quantiles, majorities, successor/
predecessor and mode queries. We face static and dynamic scenarios.

1 Introduction

Multidimensional grids arise as natural representations to support conjunctive
queries in databases [2]. Typical queries such as “ﬁnd all the employees with
age between x0 and x1 and salary between y0 and y1” translate into a twodimensional 
range reporting query on coordinates age and salary.
Counting the points in a two-dimensional range Q = [x0, x1] × [y0, y1], i.e.,
computing Count(Q), is arguably the most primitive operation in data analysis.
Given n points, one can compute Count in time O(log n/ log log n) using “lin-
ear” space, O(n) integers [16]. This time is optimal within space O(n polylog(n))
[19]. Bose et al. [3] achieve the same time using asymptotically minimum space,
n + o(n) integers.

In this paper we focus on other data-analysis queries. Our results build on
the wavelet tree [11], a succinct-space variant of a classical structure by Chazelle
[6]. The wavelet tree has been used to handle various geometric problems, e.g.
[13,3]. We adapt this structure for queries we call “statistical”: The points have
an associated value in [0, W [= [0, W − 1]. Then, given a rectangle Q, we consider
the following queries:

Sum/Avg/Var: The sum/average/variance of the values in Q.
Min/Max: The minimum/maximum value in Q.
Quantile: The k-th smallest value in Q.
Majority(α): The values appearing with relative frequency > α in Q.
Succ/Pred: The successor/predecessor of a value w in Q.

(cid:2) Supported in part by Millennium Institute for Cell Dynamics and Biotechnology

(ICDB), Grant ICM P05-001-F, Mideplan, Chile.

(cid:2)(cid:2) Funded by FCT proj. TAGS PTDC/EIA-EIA/112283/2009, ISTRION PTDC/EIA-
EIA/114521/2009 and PIDDAC Program funds (INESC-ID multiannual funding).

T. Asano et al. (Eds.): ISAAC 2011, LNCS 7074, pp. 323–332, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011

324

G. Navarro and L.M.S. Russo

These operations enable data-analysis queries such as “the average salary of employees 
whose annual production is between x0 and x1 and whose age is between
y0 and y1”. The minimum operation can be used to determine “the employee
with the lowest salary”, in the previous conditions. The α-majority operation
can be used to compute “which are frequent (≥ 20%) salaries”. Quantile queries
are useful to determine “which are the 10% highest salaries”. Successor queries
allow one determining “which are the salaries above $100,000”.

Other applications for such queries are frequently found in Geographic Information 
Systems (GIS), where the points have a geometric interpretation and
the values can be city sizes, industrial production, topographic heights, and so
on. Yet another application comes from Bioinformatics, where two-dimensional
points with intensities are obtained from DNA microarrays, and various kinds
of data-analysis activities are carried out on them. See Rahul et al. [20] for an
ample discussion on some of these applications and several others.

Willard [21] solved two-dimensional range-sum queries on ﬁnite groups within
O(n log n)-integers space and O(log n) time. This is easily extended to Sum, Avg,
and Var. Alstrup et al. [1] obtained the same complexities for the semigroup
model, which includes Min/Max. The latter can also be solved in constant
time using O(n2)-integers space [4]. Rahul et al. [20] considered a variant of
Quantile where one reports the top-k smallest/largest values in a range. They
obtain O(n log2 n)-integers space and O(log n + k log log n) time. Durocher and
Morrison [8] consider the mode (most repeated value) in a two-dimensional range.
Their times are sublinear but super-polylogarithmic by far.

Section 3 gives our new results for statistical queries. Our spaces range from
O(n) to O(n log n) integers, oﬀering novel space/time tradeoﬀs for partial sums
on groups (including Sum, Avg, and Var) and for Min/Max queries. We enrich
wavelet trees with data that speeds up the computation of these queries. Space is
then reduced by sparsifying this extra data. This gives in particular a space/time
tradeoﬀ to the recent top-k smallest/largest solution [20].

The solutions to quantile, majority and successor/predecessor queries use a
single data structure, a wavelet tree built on the universe of the point values. A
sub-grid at each node stores the points whose values are within a value range.
With this structure we also solve mode and top-k most-frequent queries.

While we rarely improve the best current query times, we oﬀer signiﬁcant
space reductions. This can be critical to maintain large datasets in main memory.

2 Wavelet Trees

Wavelet trees [11] are deﬁned on top of the basic Rank and Select functions.
Let B denote a bitmap, i.e., a sequence of 0’s and 1’s. Rank(B, b, i) counts the
number of times bit b ∈ {0, 1} appears in B[0, i], assuming Rank(B, b,−1) = 0.
The dual operation, Select(B, b, i), returns the position of the i-th occurrence
of b, assuming Select(B, b, 0) = −1.

The wavelet tree represents a sequence S[0, n[ over alphabet Σ = [0, σ[, and
supports access to any S[i], as well as Rank and Select on S, by reducing them

Space-Eﬃcient Data-Analysis Queries on Grids

325

to bitmaps. It is a complete binary tree where each node v may have a left child
labeled 0 (called the 0-child of v) and a right child labeled 1 (called the 1-child).
The sequence of labels obtained when traversing the tree from the Root down
to a node v is the binary label of v and is denoted L(v). Likewise we denote V (L)
the node that is obtained by following the sequence of bits L, thus V (L(v)) = v.
The binary labels of the leaves correspond to the binary representation of the
symbols of Σ. Given c ∈ Σ we denote by V (c) the leaf that corresponds to
symbol c. By c{..d} we represent the sequence of the ﬁrst d bits in c. Therefore,
for increasing values of d, the V (c{..d}) nodes represent the path to V (c).

Each node v represents (but does not store) the subsequence S(v) of S formed
by the symbols whose binary code starts with L(v). At each node v we only store
a (possibly empty) bitmap, denoted B(v), of length |S(v)|, so that B(v)[i] = 0
iﬀ S(v)[i]{..d} = L(v) · 0, where d = |L(v)| + 1, that is, if S(v)[i] belongs to
the 0-child. A bit position i in B(v) can be mapped to a position in each of its
child nodes: we map i to position R(v, b, i) = Rank(B(v), b, i)− 1 of the b-child.
We refer to this procedure as the reduction of i, and use the same notation to
represent a sequence of steps, where b is replaced by a sequence of bits. Thus
R(Root, c, i), for a symbol c ∈ Σ, represents the reduction of i from the Root
using the bits in the binary representation of c. With this notation we describe
the way in which the wavelet tree computes Rank, which is summarized by the
equation Rank(S, c, i) = R(Root, c, i)+ 1. We use a similar notation R(v, v(cid:3), i),
to represent descending from node v towards a given node v(cid:3), instead of explicitly
describing the sequence of bits b such that L(v(cid:3)) = L(v)· b and writing R(v, b, i).
An important path in the tree is the one obtained by choosing R(v, B(v)[i], i)
at each node, i.e., at each node we decide to go left of right depending on
the bit we are currently tracking. The resulting leaf is V (S[i]), therefore this
process provides a way to obtain the elements of S. The resulting position is
R(Root, S[i], i) = Rank(S, S[i], i) − 1.
It is also possible to move upwards on the tree, reverting the process computed
by R. Let node v be the b-child of v(cid:3). Then, if i is a bit position in B(v), we
deﬁne the position Z(v, v(cid:3), i), in B(v(cid:3)), as Select(B(v(cid:3)), b, i + 1). In general
when v(cid:3) is an ancestor of v the notation Z(v, v(cid:3), i) represents the iteration of
this process. For a general sequence, Select can be computed by this process,
as summarized by the equation Select(S, c, i) = Z(V (c), Root, i − 1).
Lemma 1 ([11,13,18]). The wavelet tree for a sequence S[0, n[ over alphabet
Σ = [0, σ[ requires at most n log σ+o(n) bits of space.1 It solves Rank, Select,
and access to any S[i] in time O(log σ).
Proof. The structure proposed by Grossi et al. [11] used n log σ+O( n log σ log log n
)
+O(σ log n) bits. M¨akinen and Navarro showed how to use only one pointer
per level, reducing the last term to O(log σ log n) = O(log2 n) = o(n). Finally,
Pˇatra¸scu [18] showed how to support binary Rank and Select in constant time,
while reducing the redundancy of the bitmaps to O(n/ log2 n), which added over
(cid:4)(cid:5)
the n log σ bits gives o(n) as well.

log n

1 From now on the space will be measured in bits and log will be to the base 2.

326

G. Navarro and L.M.S. Russo

2.1 Representation of Grids

Consider a set P of n distinct two-dimensional points (x, y). We map coordinates
to rank space using a standard method [6,1]. We store two sorted arrays X and
Y with all the (possibly repeated) x and y coordinates, respectively. Then we
convert any point (x, y) into rank space [0, n[×[0, n[ in time O(log n) using two
binary searches. The space of X and Y corresponds to the bare point data and
will not be further mentioned. Range queries are also mapped to rank space
via binary searches (in an inclusive manner in case of repeated values). This
mapping time will be dominated by other query times.
Therefore we store the points of P on a [0, n[×[0, n[ grid, with exactly one
point per row and one per column. We regard this set as a sequence S[0, n[ and
the grid is formed by the points (i, S[i]). We represent S using a wavelet tree.
The information relative to a point p0 = (x0, y0) is usually tracked from the
Root and denoted R(Root, y0{..d}, x0). A pair of points p0 = (x0, y0) and
p1 = (x1, y1), where x0 ≤ x1 and y0 ≤ y1, deﬁnes a rectangle; this is the typical
query range we consider in this paper. Rectangles have an implicit representation
in wavelet trees, spanning O(log n) nodes [13]. The binary representation of y0
and y1 share a (possibly empty) common preﬁx. Therefore the paths V (y0{..d})
and V (y1{..d}) have a common initial path and then split at some node of depth
k, i.e., V (y0{..d}) = V (y1{..d}) for d ≤ k and V (y0{..d(cid:3)}) (cid:7)= V (y1{..d(cid:3)}) for
d(cid:3) > k. Geometrically, V (y0{..k}) = V (y1{..k}) corresponds to the smallest horizontal 
band of the form [j · n/2k, (j +1)· n/2k[ that contains the query rectangle
Q, for an integer j. For d(cid:3) > k the nodes V (y0{..d(cid:3)}) and V (y1{..d(cid:3)}) correspond 
respectively to successively thinner, non-overlapping bands that contain
the coordinates y0 and y1.
Given a rectangle Q = [x0, x1] × [y0, y1] we consider the nodes V (y0{..d} · 1)
such that y0{..d}·1 (cid:7)= y0{..d+ 1}, and the nodes V (y1{..d}·0) such that y1{..d}·
0 (cid:7)= y1{..d + 1}. These nodes, together with V (y0) and V (y1), form the implict
representation of [y0, y1], denoted imp(y0, y1). The size of this set is O(log n).
Let us recall a well-known application of this decomposition.
Lemma 2. Given n two-dimensional points, the number of points inside a query
rectangle Q = [x0, x1] × [y0, y1], Count(Q), can be computed in time O(log n)
with a structure that requires n log n + o(n) bits.

(cid:2)

v∈imp(y0,y1)

R(Root, v, x1) − R(Root, v, x0 − 1). Notice
Proof. The result is
that all the values R(Root, y0{..d}, x) and R(Root, y1{..d}, x) can be computed
sequentially, in total time O(log n), for x = x1 and x = x0 − 1. For a node
v ∈ imp(y0, y1) the desired diﬀerence can be computed from one of these values
(cid:4)(cid:5)
in time O(1). Then the lemma follows.

2.2 Dynamism
We can support point insertions and deletions on a ﬁxed n × n grid. Dynamic
variants of the bitmaps stored at each wavelet tree node raise the extra space to
o(log n) per point and multiply the times by O(log n/ log log n) [12,15].

Space-Eﬃcient Data-Analysis Queries on Grids

327

Lemma 3. Given s points on an n× n grid, there is a structure using s log n +
o(s log n) bits, answering queries in time O(t log n/ log log n), where t is the time
complexity of the query using static wavelet trees. It handles point insertions and
deletions in time O(log2 n/ log log n).

Proof. We use the same data structure and query algorithms of the static wavelet
trees described in Section 2.1, yet representing their bitmaps with the dynamic
variants [12,15]. We also maintain vector X, but not Y ; we use the y-coordinates
directly instead since the wavelet tree handles repetitions in y.

√
Instead of an array, we use for X a multiary tree with arity O(

log n) and
with leaves holding Θ(log n/ log log n) elements [15]. This retains the same time
penalty factor and poses an extra space (on top of the bare coordinates) of
o(s log n) bits. When inserting a new point (x, y), apart from inserting x into X,
we track the point downwards in the wavelet tree, doing the insertion at each of
(cid:4)(cid:5)
the log n bitmaps. Deletion is analogous.

3 Statistical Queries
We now consider points weighted by an integer-valued function w : P → [0, W [.
Let us deﬁne the sequence of weights W (v) associated to each wavelet tree node
v. If S(v) = p0, p1, . . . , p|S(v)|, then W (v) = w(p0), w(p1), . . . , w(p|S(v)|).

3.1 Range Sum, Average, and Variance

We start with a solution to several range sum problems on groups.

Theorem 1. Given n two-dimensional points with associated values in [0, W [,
the sum of the point values inside a query rectangle Q = [x0, x1] × [y0, y1],
Sum(Q), can be computed in time O((cid:6) log(cid:4) n), with a structure that requires
n log n + n log(cid:4) n(log W + O(1)) bits, for any (cid:6) ∈ [2, n]. It can also compute the
average of the values, Avg(Q). A similar structure requiring 3 times the space
computes the variance of the values, Var(Q).

Proof. We enrich the bitmaps of the wavelet tree for P. For each node v we represent 
its vector W (v) = w(p0), w(p1), . . . , w(p|S(v)|) as a bitmap A(v), where
we concatenate the unary representation of the w(pi)’s, i.e., w(pi) 0’s followed
by a 1. These bitmaps A(v) are represented in a compressed format [17] which
requires at most |S(v)| log W + O(|S(v)|) bits. With this structure we can determine 
the sum w(p0)+ w(p1)+ . . .+ w(pi), i.e., the partial sums, in constant time
by means of Select(A(v), 1, i) queries2, Wsum(v, i) = Select(A(v), 1, i + 1)−i
is the sum of the ﬁrst i+1 values. In order to compute Sum(Q) we use a formula
similar to the one of Lemma 2:

Wsum(v, R(Root, v, x1)) − Wsum(v, R(Root, v, x0 − 1)).

(1)

(cid:3)

v∈imp(y0,y1)

2 Using constant-time Select structures on their internal bitmap H [17].

328

G. Navarro and L.M.S. Russo

To obtain the tradeoﬀ related to (cid:6), we store the A bitmaps only for nodes v
whose height h(v) is a multiple of h = (cid:10)log (cid:6)(cid:11), including the leaves. If a node
v ∈ imp(y0, y1) occurs at a level that does not have an associated bitmap A(v), it
is necessary to branch recursively to both children until we reach a level that has
such a bitmap. In this case we use Eq. (1) to sum over all the nodes in the levels
that have A(v) bitmaps. The time raises by up to 2h = O((cid:6)) factor. However, if
a node v must access 2h > 1 bitmaps A(·), a node v(cid:3) with height h(v(cid:3)) = h(v)+1
must access only 2h−1. As in imp(y0, y1) there are at most two nodes of each
height, the total extra cost over all the nodes of heights [h · i, h· (i + 1)[, for any
i ∈ [0, log(n)/h[ is not O(h(cid:6)) but amortizes to 2h + 2h−1 + . . . = 2· 2h, and hence
the overall extra cost factor is O(2h/h) = O((cid:6)/ log (cid:6)).

(Q) − Sum(Q)2/Count(Q), where Sum(cid:3)

The average weight inside Q is computed as Avg(Q) = Sum(Q)/Count(Q),
where the latter is computed with the same structure by just adding up the
interval lengths in imp(y0, y1). To compute variance we use an additional instance
of the same data structure, with weights w(cid:3)(p) = w2(p), and then Var(Q) =
Sum(cid:3)
uses the weights w(cid:3). The space
triples because the weights w(cid:3)(p) require (cid:10)2 log W(cid:11) bits in bitmaps A(v).
(cid:4)(cid:5)
The solution applies to ﬁnite groups (G,⊕,−1 , 0). We store Wsum(v, i) =
w(p0) ⊕ w(p1) ⊕ . . . w(pi), directly using (cid:10)log |G|(cid:11) bits per entry. The terms
Wsum(v, i)−Wsum(v, j) of Eq. (1) are replaced by Wsum(v, j)−1⊕Wsum(v, i).
A dynamic variant is obtained by using the dynamic wavelet trees of Lemma 3,

and a dynamic partial sums data structure [14] instead of A(v).
Theorem 2. Given s points on an n × n grid, with associated values in [0, W [,
there is a structure using s log n + s log(cid:4) n log W (1 + o(1)) bits, for any (cid:6) ∈
[2, W ], that answers the queries in Thm. 1 in time O((cid:6) log2 n), and supports point
insertions/deletions, and value updates, in time O(log2 n/ log log n+log n log(cid:4) n).

Proof. The dynamic searchable partial sums [14] take n log W + o(n log W ) bits
to store an array of n values, and support partial sums, as well as insertions
and deletions of values, in time O(log n). This multiplies the time complexities
of Thm. 1. For insertions we must insert the new bits at all the levels as in
Lemma 3 and also insert the new values at log(cid:4) n levels. Deletions are analogous.
(cid:4)(cid:5)
To update a value we just delete and reinsert the point.

3.2 Range Minima and Maxima

For the one-dimensional problem there exists a data structure using just 2n+o(n)
bits, which answers queries in constant time without accessing the values [9]. This
structure allows for a better space/time tradeoﬀ compared to range sums.

For the queries that follow we do not need the exact w(p) values, but just
their order. So, if W > n, we store an array with the (at most) n diﬀerent values
of w(p) in the point set, and map all the weights to rank space in time O(log n),
which will be negligible. The extra space that this requires is n(cid:10)log W(cid:11) bits. In
exchange, many complexities will be expressed in terms of u = min(n, W ).

Space-Eﬃcient Data-Analysis Queries on Grids

329

Theorem 3. Given n two-dimensional points with associated values in [0, W [,
the minimum of the point values inside a query rectangle Q = [x0, x1] × [y0, y1],
Min(Q), can be found in time O(log (cid:6) log n), with a structure using n log(cid:4) n log u+
O(n log n) + n log W bits, for any (cid:6) ∈ [2, n] and u = min(n, W ). A similar structure 
answers Max(Q) within the same space and time.

Proof. We associate to each node v the one-dimensional data structure [9] corresponding 
to W (v), which takes 2|W (v)| + o(|W (v)|) bits. This adds up to
O(n log n) bits overall. Let us call Wmin(v, i, j) = arg mini≤m≤j W (v)[m] the
one-dimensional operation. Then we can ﬁnd in constant time the position of
the minimum value inside each v ∈ imp(y0, y1) (without the need to store the
values in the node), and the range minimum is

min

v∈imp(y0,y1)

W (v)[Wmin(v, R(Root, v, x0), R(v, Root, v, x1 + 1) − 1)].

To complete the comparison we need to compute the O(log n) values W (v)[m]
of diﬀerent nodes v. By storing the A(v) bitmaps of Thm. 1 every log (cid:6) levels,
the time is just O(log (cid:6) log n) because we have to track down just one point for
each v ∈ imp(y0, y1). The case of Max(Q) is analogous.
(cid:4)(cid:5)

We can now solve the top-k query of Rahul et al. [20] by iterating over Thm. 3.
Once we identify that the overall minimum is some W (v)[m] from the range
W (v)[i, j], we can ﬁnd the second minimum among the other candidate ranges
plus the ranges W (v)[i, m − 1] and W (v)[m + 1, j]. A priority queue handling
the ranges will perform k minimum extractions and O(k + log n) insertions, and
its size will be limited to k. So the overall time is O(log (cid:6) log n + k(log (cid:6) + log k))
using a priority queue with constant insertion time [5]. This is comparable with
previous time complexities [20] within much less space (even for (cid:6) = 1).

3.3 Range Median and Quantiles

We compute the median element, or more generally, the k-th smallest value w(p)
in an area Q = [x0, x1]× [y0, y1] (the median corresponds to k = Count(Q)/2).
From now on we use a diﬀerent wavelet tree decomposition, on the universe
[0, u[ of w(·) values rather than on y coordinates. This can be seen as a wavelet
tree on grids rather than on sequences: the node v of height h(v) stores a grid
G(v) with the points p ∈ P such that (cid:13)w(p)/2h(v)(cid:14) = L(v{..(cid:10)log u(cid:11) − h(v)}).
Note that each leaf c stores the points p with weight w(p) = c.

Theorem 4. Given n two-dimensional points with associated values in [0, W [,
the k-th smallest value of points within a query rectangle Q = [x0, x1] × [y0, y1],
Quantile(k, Q), can be found in time O((cid:6) log n log(cid:4) u), with a structure using
n log n log(cid:4) u + O(n log u) + n log W bits, for any (cid:6) ∈ [2, u] and u = min(n, W ).
The time drops to O((cid:6) log n log(cid:4) u/ log log n) by using n log n log(cid:4) u(1 + o(1)) +
O(n log u) + n log W bits of space.

330

G. Navarro and L.M.S. Russo

Proof. We use the wavelet tree on grids just described, representing each grid
G(v) with the structure of Lemma 2. To solve this query we start at root of the
wavelet tree of grids and consider its left child, v. If t = Count(Q) ≥ k on grid
G(v), we continue the search on v. Otherwise we continue the search on the right
child of the root, with parameter k − t. When we arrive at a leaf corresponding
to value c, then c is the k-th smallest value in P ∩ Q.

Notice that we need to reduce the query rectangle to each of the grids G(v)
found in the way. We store the X and Y arrays only for the root grid, which
contains the whole P. For this and each other grid G(v), we store a bitmap
X(v) so that X(v)[i] = b iﬀ the i-th point in x-order is stored at the b-child of v.
Similarly, we store a bitmap Y (v) with the same bits in y-order. Therefore, when
we descend to the b-child of v, for b ∈ {0, 1}, we remap x0 to Rank(X(v), b, x0)
and x1 to Rank(X(v), b, x1 + 1) − 1, and analogously for y0 and y1 with Y (v).
The bitmaps X(v) and Y (v) add up to O(n log u) bits of space. For the grids,
consider that each point in each grid contributes at most log n + o(1) bits, and
each p ∈ P appears in (cid:10)log u(cid:11)− 1 grids (as the root grid is not really necessary).
To reduce space, we store the grids G(v) only every (cid:10)log (cid:6)(cid:11) levels (the bitmaps
X(v) and Y (v) are still stored for all the levels). This gives the promised space.
For the time, the ﬁrst decision on the root requires computing up to (cid:6) operations
Count(Q), but the decision on its child requires half of them. Just as in Thm. 1,
the total time adds up to O((cid:6) log n log(cid:4) u).

To achieve the ﬁnal alternative space/time, replace our wavelet trees of
(cid:4)(cid:5)
Lemma 2 by Bose et al.’s counting structure [3].
Note that the basic construction allows us to count the number of points p ∈ Q
whose values w(p) fall in a given range [w0, w1], within time O((cid:6) log n log(cid:4) u) or
O((cid:6) log n log(cid:4) u/ log log n). This is another useful operation for data analysis, and
can be obtained with the formula

Count(Q).

(cid:2)

v∈imp(w0,w1)

3.4 Range Majority
An α-majority of a rectangle Q = [x0, x1] × [y0, y1] is a weight that occurs more
than α·Count(Q) times inside Q, for some α ∈ [0, 1]. We can solve this problem
with the same structure used for Thm. 4.
Theorem 5. The structures of Thm. 4 can compute all the α-majorities of the
point values inside Q, Majority(α, Q), in time O( 1
α (cid:6) log n
log(cid:4) u/ log log n), respectively, where α can be chosen at query time.
Proof. For α ≥ 1
2 we ﬁnd the median c of Q and then use the leaf c to count
its frequency in Q. If this is more than α · Count(Q), then c is the answer,
2, we solve the query by probing all the
else there is no α-majority. For α < 1
(i · α)Count(Q)-th elements in Q.
(cid:4)(cid:5)
Culpepper et al. [7] show how to ﬁnd the mode, and in general the k most
repeated values inside Q, using successively more reﬁned Quantile queries. Let
the k-th most repeated value occur α · Count(Q) times in Q, then we require
at most 4/α quantile queries [7]. The same result can be obtained by probing
successive values α = 1/2i with Majority(α) queries.

α (cid:6) log n log(cid:4) u) or O( 1

Space-Eﬃcient Data-Analysis Queries on Grids

331

3.5 Range Successor and Predecessor
The successor (predecessor) of a value w in a rectangle Q = [x0, x1] × [y0, y1] is
the smallest (largest) weight larger (smaller) than, or equal to, w in Q. We also
have an eﬃcient solution using our wavelet trees on grids.

Theorem 6. The structures of Thm. 4 can compute the successor and predecessor 
of a value w within the values of the points inside Q, Succ(w, Q) and
Pred(w, Q), in time O((cid:6) log n log(cid:4) u) or O((cid:6) log n log(cid:4) u/ log log n), respectively.
Proof. We consider the nodes v ∈ imp(w, +∞) from left to right, tracking rectangle 
Q in the process. The condition for continuing the search below a node v that
is in imp(w, +∞), or is a descendant of one such node, is that Count(Q) > 0
on G(v). Succ(w, Q) is the value associated with the ﬁrst leaf found by this
process. Likewise, Pred(w, Q) is computed by searching imp(−∞, w) from right
to left. To reduce space we store the grids only every (cid:10)log (cid:6)(cid:11) levels, and thus
determining whether a child has a point in Q may cost up to O((cid:6) log n). Yet, as
(cid:4)(cid:5)
for Thm. 1, the total time amortizes to O((cid:6) log n log(cid:4) u).

3.6 Dynamism
Our dynamic wavelet tree of Lemma 3 supports range counting and point inser-
tions/deletions on a ﬁxed grid in time O(log2 n/ log log n) (other tradeoﬀs exist
[16]). If we likewise assume that our grid is ﬁxed in Thms. 4, 5 and 6, we can also
support point insertions and deletions (and thus changing the value of a point).
Theorem 7. Given s points on an n × n grid, with associated values in [0, W [,
there is a structure using s log n log(cid:4) W (1+o(1)) bits, for any (cid:6) ∈ [2, W ], that answers 
queries Quantile, Succ and Pred in time O((cid:6) log2 n log(cid:4) W/ log log n),
and query Majority(α) in time O( 1
α (cid:6) log2 n log(cid:4) W/ log log n). It supports point
insertions and deletions, and value updates, in time O(log2 n log(cid:4) W/ log log n).
Proof. We use the data structure of Thms. 4, 5 and 6, modiﬁed as follows. We
build the wavelet tree on the universe [0, W [ and thus do not map the universe
values to rank space. The grids G(v) use the dynamic structure of Lemma 3,
on global y-coordinates [0, n[. We maintain the global array X of Lemma 3 plus
the vectors X(v) of Thm. 4, the latter using dynamic bitmaps [12,15]. The time
for the queries follows immediately. For updates we track down the point to
insert/delete across the wavelet tree, inserting or deleting it in each grid G(v)
(cid:4)(cid:5)
found in the way, and also in the corresponding vector X(v).

4 Final Remarks

Many other data-analysis queries may be of interest. A prominent one lacking
good solutions is to ﬁnd the mode, that is, the most frequent value, in a rectangle,
and its generalization to the top-k most frequent values. There has been some
recent progress on the one-dimensional version [10] and even in two dimensions
[8], but the results are far from satisfactory.

332

G. Navarro and L.M.S. Russo

References

1. Alstrup, S., Brodal, G., Rauhe, T.: New data structures for orthogonal range

searching. In: FOCS, pp. 198–207 (2000)

2. Berg, M., Cheong, O., Kreveld, M., Overmars, M.: Orthogonal range search-
ing: Querying a database. In: Computational Geometry, pp. 95–120. Springer,
Heidelberg (2008)

3. Bose, P., He, M., Maheshwari, A., Morin, P.: Succinct Orthogonal Range Search
Structures on a Grid with Applications to Text Indexing. In: Dehne, F., Gavrilova,
M., Sack, J.-R., T´oth, C.D. (eds.) WADS 2009. LNCS, vol. 5664, pp. 98–109.
Springer, Heidelberg (2009)

4. Brodal, G., Davoodi, P., Rao, S.: On space eﬃcient two dimensional range minimum

data structures. Algorithmica (2011), doi:10.1007/s00453-011-9499-0

5. Carlsson, S., Munro, J.I., Poblete, P.V.: An Implicit Binomial Queue with Constant
Insertion Time. In: Karlsson, R., Lingas, A. (eds.) SWAT 1988. LNCS, vol. 318,
pp. 1–13. Springer, Heidelberg (1988)

6. Chazelle, B.: A functional approach to data structures and its use in multidimensional 
searching. SIAM J. Comp. 17(3), 427–462 (1988)

7. Culpepper, J.S., Navarro, G., Puglisi, S.J., Turpin, A.: Top-k Ranked Document
Search in General Text Databases. In: de Berg, M., Meyer, U. (eds.) ESA 2010,
part II. LNCS, vol. 6347, pp. 194–205. Springer, Heidelberg (2010)

8. Durocher, S., Morrison, J.: Linear-space data structures for range mode query in

arrays. CoRR, 1101.4068 (2011)

9. Fischer, J.: Optimal Succinctness for Range Minimum Queries. In: L´opez-Ortiz, A.

(ed.) LATIN 2010. LNCS, vol. 6034, pp. 158–169. Springer, Heidelberg (2010)

10. Gagie, T., Navarro, G., Puglisi, S.J.: Colored Range Queries and Document Retrieval.
 In: Chavez, E., Lonardi, S. (eds.) SPIRE 2010. LNCS, vol. 6393, pp. 67–81.
Springer, Heidelberg (2010)

11. Grossi, R., Gupta, A., Vitter, J.: High-order entropy-compressed text indexes. In:

SODA, pp. 841–850 (2003)

12. He, M., Munro, J.I.: Succinct Representations of Dynamic Strings. In: Chavez, E.,
Lonardi, S. (eds.) SPIRE 2010. LNCS, vol. 6393, pp. 334–346. Springer, Heidelberg
(2010)

13. M¨akinen, V., Navarro, G.: Rank and select revisited and extended. Theo. Comp.

Sci. 387(3), 332–347 (2007)

14. M¨akinen, V., Navarro, G.: Dynamic entropy-compressed sequences and full-text

indexes. ACM Trans. Alg., 4(3), art. 32 (2008)

15. Navarro, G., Sadakane, K.: Fully-functional static and dynamic succinct trees.

CoRR, 0905.0768v5 (2010)

16. Nekrich, Y.: Orthogonal range searching in linear and almost-linear space. Comp.

Geom. Theo. and App. 42(4), 342–351 (2009)

17. Okanohara, D., Sadakane, K.: Practical entropy-compressed rank/select dictionary.

In: ALENEX (2007)

18. Pˇatra¸scu, M.: Succincter. In: FOCS, pp. 305–313 (2008)
19. P˘atra¸scu, M.: Lower bounds for 2-dimensional range counting. In: STOC, pp. 40–46

(2007)

20. Rahul, S., Gupta, P., Janardan, R., Rajan, K.S.: Eﬃcient Top-k Queries for Orthogonal 
Ranges. In: Katoh, N., Kumar, A. (eds.) WALCOM 2011. LNCS, vol. 6552,
pp. 110–121. Springer, Heidelberg (2011)

21. Willard, D.: New data structures for orthogonal range queries. SIAM J.

Comp. 14(232-253) (1985)

