Indexing Text Using the Ziv-Lempel Trie

Gonzalo Navarro

Dept. of Computer Science, Univ. of Chile

Blanco Encalada 2120, Santiago, Chile gnavarro@dcc.uchile.cl

Partially supported by Fondecyt Grant 1-020831

Abstract. Let a text of u characters over an alphabet of size σ be
compressible to n symbols by the LZ78 or LZW algorithm. We show
that it is possible to build a data structure based on the Ziv-Lempel trie
that takes 4n log2 n(1 + o(1)) bits of space and reports the R occurrences
of a pattern of length m in worst case time O(m2 log(mσ)+(m+R) log n).

1 Introduction

Modern text databases have to face two opposed goals. On the one hand, they
have to provide fast access to the text. On the other, they have to use as little
space as possible. The goals are opposed because, in order to provide fast access,
an index has to be built on the text. An index is a data structure built on the text
and stored in the database, hence increasing the space requirement. In recent
years there has been much research on compressed text databases, focusing on
techniques to represent the text and the index in succinct form, yet permitting
eﬃcient text searching.

Let our text T1...u be a sequence of characters over an alphabet Σ of size σ,
and let the search pattern P1...m be another (short) sequence over Σ. Then the
text search problem consists of ﬁnding all the occurrences of P in T .

Despite that there has been some work on succinct inverted indexes for natural 
language for a while [24, 21], until a short time ago it was believed that
any general index for string matching would need Ω(u) space. In practice, the
smaller indexes available were the suﬃx arrays [17], requiring u log2 u bits to
index a text of u characters, which required u log2 σ bits to be represented, so
the index is in practice larger than the text (typically 4 times the text size).

In the last decade, several attempts to reduce the space of the suﬃx trees [2]
or arrays have been made by K¨arkk¨ainen and Ukkonen [10, 13], Kurtz [15] and
M¨akinen [16], obtaining reasonable improvements, albeit no spectacular ones
(at best 9 times the text size). Moreover, they have concentrated on the space
requirement of the data structure only, needing the text separately available.

(cid:1)

Grossi and Vitter [8] presented a suﬃx array compression method for binary
texts, which needed O(u) bits and was able to report all the R occurrences of P
time. However, they need the text as well as
in T in O
the index in order to answer queries.

log u + (R + 1) logε

(cid:2)

u

m

Following this line, Sadakane [22] presented a suﬃx array implementation
(1 +

for general texts (not only binary) that requires u

ε H0 + 8 + 3 log2 H0

1

(cid:3)

(cid:4)

A.H.F. Laender and A.L. Oliveira (Eds.): SPIRE 2002, LNCS 2476, pp. 325–336, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002

326

Gonzalo Navarro

o(1)) + σ log2 σ bits, where H0 is the zero-order entropy of the text. This index
can search in time O(m log u + R logε
u) and contains enough information to
reproduce the text: any piece of text of length L is obtained in O(L + logε
u)
time. This means that the index replaces the text, which can hence be deleted.
This is an opportunistic scheme, i.e., the index takes less space if the text is
compressible. Yet there is a minimum of 8u bits of space which has to be paid
independently of the entropy of the text.

(cid:2)

(cid:1)
u log log u+σ log σ

Ferragina and Manzini [5] presented a diﬀerent approach to compress the
suﬃx array based on the Burrows-Wheeler transform and block sorting. They
need 5uHk + O
u)
time, where Hk is the k-th order entropy and the formula is valid for any constant 
k. This scheme is also opportunistic. However, there is a large constant
σ log σ involved in the sublinear part which does not decrease with the entropy,
and a huge additive constant larger than σσ. (In a real implementation [6] they
removed these constants at the price of a not guaranteed search time.)

bits and can answer queries in O(m+ R logε

log u

to produce succinct

However, there are older attempts

indexes, by
K¨arkk¨ainen and Ukkonen [12, 11]. Their main idea is to use a suﬃx tree that
indexes only the beginnings of the blocks produced by a Ziv-Lempel compres-
sion(see next section if not familiar with Ziv-Lempel). This is the only index
(cid:4)(cid:4)
we are aware of which is based on this type of compression. In [11] they obtain
a range of space-time trade-oﬀs. The smallest indexes need O
bits, i.e., the same space of the original text, and are able to answer queries in
time. Note, however, that this index is not
O
opportunistic, as it takes space proportional to the text, and indeed needs the
text besides the data of the index.

log σ
log u m2 + m log u + 1

(cid:3)
log σ + 1
ε

ε R logε

(cid:3)
u

(cid:1)

(cid:2)

u

In this paper we propose a new index on these lines. Instead of using a generic
Ziv-Lempel algorithm, we stick to the LZ78/LZW format and its speciﬁc properties.
 We do not build a suﬃx tree on the strings produced by the LZ78 algorithm.
Rather, we use the very same LZ78 trie that is produced during compression,
plus other related structures. We borrow some ideas from K¨arkk¨ainen and Ukko-
nen’s work, but in our case we have to face additional complications because the
LZ78 trie has less information than the suﬃx tree of the blocks. As a result,
our index is smaller but has a higher search time. If we call n the number of
blocks in the compressed text, then our index takes 4n log2 n(1 + o(1)) bits of
space and answers queries in O(m2 log(mσ)+(m+R) log n). It is shown in [14, 7]
that Ziv-Lempel compression asymptotically approaches Hk for any k. Since this
compressed text needs at least n log2 n bits of storage, we have that our index is
opportunistic, taking at most 4uHk bits, for any k. There are no large constants
involved in the sublinear part.

This representation, moreover, contains the information to reproduce the
text. We can reproduce a text context of length L around an occurrence found
(and in fact any sequence of blocks) in O(L log σ) time, or obtain the whole
text in time O(u log σ). The index can be built in O(u log σ) time. Finally, the
time can be reduced to O(m2 log(mσ) + m log n + R logε
n) provided we pay
O

space.

(cid:3)

(cid:4)

ε n log n
1

