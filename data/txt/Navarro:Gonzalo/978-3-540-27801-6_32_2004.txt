Compressed Compact Suﬃx Arrays

Veli Mäkinen1 and Gonzalo Navarro2,(cid:1)

1 Department of Computer Science, P.O. Box 26 (Teollisuuskatu 23)

FIN-00014 University of Helsinki, Finland

vmakinen@cs.helsinki.fi

2 Department of Computer Science, University of Chile

Blanco Encalada 2120, Santiago, Chile

gnavarro@dcc.uchile.cl

Abstract. The compact suﬃx array (CSA) is a space-eﬃcient full-text
index, which is fast in practice to search for patterns in a static text. Compared 
to other compressed suﬃx arrays (Grossi and Vitter, Sadakane,
Ferragina and Manzini), the CSA is signiﬁcantly larger (2.7 times the
text size, as opposed to 0.6–0.8 of compressed suﬃx arrays). The space
of the CSA includes that of the text, which the CSA needs separately
available. Compressed suﬃx arrays, on the other hand, include the text,
that is, they are self-indexes. Although compressed suﬃx arrays are very
fast to determine the number of occurrences of a pattern, they are in
practice very slow to report even a few occurrence positions or text contexts.
 In this aspect the CSA is much faster. In this paper we contribute
to this space-time trade oﬀ by introducing the Compressed CSA (CCSA),
a self-index that improves the space usage of the CSA in exchange for
search speed. We show that the occ occurrence positions of a pattern
of length m in a text of length n can be reported in O((m + occ) log n)
time using the CCSA, whose representation needs O(n(1 + Hk log n))
bits for any k, Hk being the k-th order empirical entropy of the text. In
practice the CCSA takes 1.6 times the text size (and includes the text).
This is still larger than current compressed suﬃx arrays, and similar in
size to the LZ-index of Navarro. Search times are by far better than for
self-indexes that take less space than the text, and competitive against
the LZ-index and versions of compressed suﬃx arrays tailored to take
1.6 times the text size.

1

Introduction and Related Work

The classical problem in string matching is to determine the occ occurrences
of a short pattern P = p1p2 . . . pm in a large text T = t1t2 . . . tn. Text and
pattern are sequences of characters over an alphabet Σ of size σ. In practice one
wants to know the text positions of those occ occurrences, and usually also a
text context around them. Usually the same text is queried several times with
diﬀerent patterns, and therefore it is worthwhile to preprocess the text in order
to speed up the searches. Preprocessing builds an index structure for the text.

(cid:1) Supported in part by Fondecyt Grant 1-020831.

S.C. Sahinalp et al. (Eds.): CPM 2004, LNCS 3109, pp. 420–433, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004

Compressed Compact Suﬃx Arrays

421

To allow fast searches for patterns of any size, the index must allow access to
all suﬃxes of the text. These kind of indexes are called full-text indexes. Optimal
query time, which is O(m + occ) as every character of P must be examined and
the occ occurrences must be reported, can be achieved by using the suﬃx tree
[19] as the index. In a suﬃx tree every suﬃx of the text is represented by a path
from the root to a leaf. The space requirement of a suﬃx tree is very high. It can
be 12n bytes in practice, even with a careful implementation [7]. In addition, in
any practical implementation there is always an alphabet dependent factor on
search times.

The suﬃx array (SA) [11] is a reduced form of the suﬃx tree. It represents
only the leaves of the suﬃx tree, via pointers to the starting positions of all
the suﬃxes. The array is lexicographically sorted by the pointed suﬃxes. A
suﬃx array takes 4n bytes, and searches in O(m log n + occ) time via two binary
searches. One ﬁnds the ﬁrst cell i pointing to a suﬃx ≥ P (lexicographically),
and the other ﬁnds the ﬁrst cell j pointing to a suﬃx ≥ p1p2 . . . pm−1(pm + 1).
Then all the cell values at suﬃx array positions i . . . j−1 are the initial positions
of occurrences of P in T .

There is often a signiﬁcant amount of redundancy in a suﬃx array, such
that some array areas can be represented by links to other areas. Basically, it is
rather common that one area contains the same pointers of the other area, all
shifted by one text position. This observation has been intensively used recently
in diﬀerent ways to obtain succinct representations of suﬃx arrays and still
provide fast search time [8, 18, 5].

The compact suﬃx array (CSA) [14] makes direct use of that redundancy to
reduce the space usage of suﬃx arrays. Areas similar to others (modulo a shift
in text positions) are found and replaced by a direct link to the similar areas. In
practice the CSA takes less than 2n bytes and can search in O(m log n+occ) time,
which in practice turns out to be about twice as slow as the plain suﬃx array.
Note that, like suﬃx trees and arrays, the CSA needs the text itself separately
available.

A recent trend in compressed data structures is that of self-indexes, which
include the text. Hence the text can be discarded and the index must provide
functions to obtain any desired text substring in reasonable time. Self-indexes
open the exciting possibility of the index taking less space than the text, even
including it. Existing implemented self-indexes are the compressed suﬃx array
CSArray of Sadakane [18] (built on [8]), the FM-index of Ferragina and Manzini
[5, 6], and the LZ-index of Navarro [16]. The ﬁrst two take 0.6–0.8 times the text
size, while the LZ-index takes about 1.5 times the text size on English text.

In this paper we introduce the compressed CSA (CCSA), a self-index based
on the CSA which is more compact and represents a relevant space-time trade oﬀ
in practice. We retain the links of the CSA, but encode them in a compact form.
We also encode the text inside the CCSA by using small additional structures
that permit searching and displaying the text without accessing T . We show
that the CCSA needs O(n(1 + Hk log n)) bits for any k, and that it can ﬁnd all
the occurrences of P in T in O((m + occ) log n) time. In an 80 Mb English text

