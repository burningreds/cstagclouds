Compressed Representation of Web and Social

Networks via Dense Subgraphs (cid:2)

Cecilia Hern´andez1,2 and Gonzalo Navarro2

1 Dept. of Computer Science, University of Concepci´on, Chile

2 Dept. of Computer Science, University of Chile, Chile

{chernand,gnavarro}@dcc.uchile

Abstract. Mining and analyzing large web and social networks are challenging 
tasks in terms of storage and information access. In order to
address this problem, several works have proposed compressing large
graphs allowing neighbor access over their compressed representations.
In this paper, we propose a novel compressed structure aiming to reduce 
storage and support eﬃcient navigation over web and social graph
compressed representations. Our approach uses clustering and mining for
ﬁnding dense subgraphs and represents them using compact data structures.
 We perform experiments using a wide range of web and social
networks and compare our results with the best known techniques. Our
results show that we improve the state of the art space/time tradeoﬀs
for supporting neighbor queries. Our compressed structure also enables
mining queries based on dense subgraphs, such as cliques and bicliques.

Keywords: Web graphs, Social networks, Compressed data structures.

1

Introduction

A wide range of information is available both in the link structure of web graphs
and in the relation structure of social networks. The link structure is usually
used for ranking algorithms such as PageRank [6] and HITS [18], whereas the
relation structure of social networks is used for mining and analysis tasks such
as identifying interest groups and understanding information propagation [22].
Many of these tasks are based on graph algorithms that often rely on having
the complete graph in main memory. This imposes a great demand on system
resources, especially on the current growth rate of these graphs. For instance,
the indexed web contains about 50 billion pages1, and Facebook has more than
800 million users world-wide2. This continous growth has pushed the search for
compressed representations with eﬃcient storage space and access times.

We aim for eﬀective techniques to store and access large graphs to beneﬁt both
web graph and social networks. Finding regularities in graphs has shown to be

(cid:2) Partially funded by Millennium Nucleus Information and Coordination in Networks

1

2

ICM/FIC P10-024F.
www.worldwidewebsize.com
www.facebook.com/press/info.php?statistics

L. Calder´on-Benavides et al. (Eds.): SPIRE 2012, LNCS 7608, pp. 264–276, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012

Compressed Representation of Web and Social Networks

265

successful for deﬁning compressed structures. For instance, Boldi and Vigna [5]
exploit similarity of adjacency lists and locality of reference of nearby pages using
URL ordering for nodes; Brisaboa et al. [7] exploit sparseness and clustering
of the adjacency matrix; Buehrer and Chellapilla [9] exploit complete bipartite
subgraphs (bicliques) on web graphs, that is, groups of pages that share the same
outlinks. Combining clustering with node ordering together with similarity and
locality [2] have improved space/time tradeoﬀs.

In the context of social networks, URL node ordering does not apply. Instead,
 deriving a node ordering from some clustering seems good for compressing
those networks [2]. Maserrat and Pei [21] use the idea of decomposing the graph
into small dense subgraphs, which can be represented more space-eﬃciently.
Hern´andez and Navarro [17] use a related idea, detecting bicliques and representing 
them compactly.

In this paper we further pursue the line of representing web and social graphs
by detecting dense subgraphs and representing them compactly. We generalize
from previous successful experiences that rely on ﬁnding cliques [21] and bicliques
[9,17] and adapt clustering algorithms to ﬁnd broader constructions that lie in
between. More precisely, we consider a dense subgraph as a pair (S, C) of subsets
of nodes, such that every node in S points to every node in C, but where S
and C need not be disjoint. The case S = C corresponds to cliques and the
case of disjoint sets corresponds to bicliques. We show that these more general
dense subgraphs appear suﬃciently more often than cliques and bicliques, thus it
pays oﬀ to design a more general compact representation for them. We design a
representation that eﬃciently solves out/in-neighbor queries in symmetric form,
that is, it not only oﬀers the basic functionality of an adjacency list, but it
also allows one to determine which nodes point to a given node. In addition,
the structure lets us easily obtain the dense subgraphs it has found on the
compression process, which is useful for mining activities.

Our experimental results show that our new technique oﬀers the best space
and time performance on undirected social networks, or on directed social networks 
where we need to retrieve both outand 
in-neighbors. In many cases our
structures use less space than the best alternatives that can only retrieve outneighbors.
 On web graphs we achieve the best spaces under the last assumption,
yet our times are higher than other alternatives.

2 Related Work

Randall et al. [24] ﬁrst proposed lexicographic ordering of URLs as a way to
exploit locality (i.e., that pages tend to have hyperlinks to other pages on the
same domain) and similarity of (nearby) adjacency lists for compressing Web
graphs. Later, Boldi and Vigna [5] proposed the WebGraph framework. This
approach exploits power-law distributions, similarity and locality using URL
ordering.

On a later work, Boldi et al. [3] explored and evaluated existing and novel
node ordering methods, such as URL, lexicographic, Gray ordering. More recently,
 Boldi et al. [2] designed node orderings based on clustering methods, and

266

C. Hern´andez and G. Navarro

achieved improvements on compressing web graphs and social network using
clustering based on Layered Label Propagation (LLP). A diﬀerent and competitive 
node ordering was proposed by Apostolico and Drovandi [1]. Their approach
orders the nodes based on a Breadth First Traversal (BFS) of the graph, and
then used their own encoding. Buehrer and Chellapilla [9] exploit the existence
of many groups consisting of sets of pages that share the same outlinks, which
deﬁnes complete bipartite subgraphs (bicliques). Their approach is based on reducing 
the number of edges by deﬁning virtual nodes that are artiﬁcially added
in the graph to connect the two sets in a biclique. They apply this process iteratively 
on the graph until the edge reduction gain is no longer signiﬁcant.
A grammar-based approach called Re-Pair also reduces edges [20,13]. Re-Pair
consists of repeatedly ﬁnding the most frequent pair of symbols in a sequence
of integers and replacing it with a new symbol. Hern´andez and Navarro [17]
explored more in general the idea of combining an edge-reduction method with
a subsequent encoding of the resulting graph. They obtained the best results,
improving upon the state of the art, by combining Buehrer and Chellapilla’s [9]
bicliques with Apostolico and Drovandi’s [1] encoding of the graph.

Brisaboa et al. [7] exploit the sparseness and clustering of the adjacency matrix 
to reduce space while providing out/in-neighbor navigation in a natural
symmetric form, in a structure called k2tree. The k2tree scheme represents the

adjacency matrix by a k2-ary tree of height h = (cid:2)logk n(cid:3) (where n is the number
of vertices). It divides the adjacency matrix into k2 submatrices of size n2/k2.
Completely empty subzones are represented just with a 0-bit, whereas nonempty
subzones are marked with a 1-bit and recursively subdivided. The leaf nodes
contain the actual bits of the adjacency matrix, in compressed form. Recently,
Claude and Ladra [12] improved the compression performance for web graphs
by combining k2tree with the Re-Pair-based representation [13].

There exist recent works on compressing social networks [10,21]. The approach
by Chierichetti et al. [10] is based on the Webgraph framework [5], using shingling
ordering [8] and exploiting link reciprocity. Even though they provide interesting
compression for social networks, the scheme requires decompressing the graph in
order to retrieve out-neighbors. Maserrat and Pei [21] scheme achieves compression 
by deﬁning a Eulerian data structure using multi-position linearization of
directed graphs. This scheme is based on decomposing the graph into small dense
subgraphs and supports out/in-neighbor queries in sublinear time. Claude and
Ladra [12] improve upon this scheme by combining it with the use of compact
data structures. Hern´andez and Navarro [17] use Buehrer and Chellapilla’s [9]
technique to ﬁnd bicliques only (cliques and other patterns were not supported)
and represent these using compact data structures.

3 Dense Subgraph Patterns

We represent a web graph as a directed graph G = (V, E) where V is a set of
vertices (pages) and E ⊆ V ×V is a set of edges (hyperlinks). For an edge e=(u,v),
we call u the source and v the center of e. In social networks, nodes are individuals

Compressed Representation of Web and Social Networks

267

(or other types or agents) and edges represent some relationship between the two
nodes. These graphs can be directed or undirected. We make undirected graphs
directed by representing reciprocal edges. In this case, retrieving the outplus

the in-neighbors of a node gives its neighbors in the undirected graph. Thus from
now on we consider only directed graphs.

For technical reasons that will be clear next, we also consider that the directed
graphs contain all the edges of the form (u, u). Most web and social graphs do
not contain any such edge. In that case we simply omit reporting those edges
when our representations retrieve them. If there are graphs containing some such
edges, one can indicate with a small bitmap of |V | bits which nodes u have a
self-loop, and remove the spurious edges when a query retrieves them. We will
ﬁnd patterns of the following kind.
(S ∪ C, S ×
(cid:3)
Deﬁnition 1. A dense subgraph H(S, C) of G = (V, E) is a graph G
C), where S, C ⊆ V .
Note this includes in particular cliques (S = C) and bicliques (S ∩ C = ∅).
Our goal will be to represent the |S| · |C| edges of a dense subgraph H(S, C) in
space proportional to |S| + |C| − |S ∩ C|. Thus the bigger the dense subgraphs
we detect, the more space we save at representing their edges.

3.1 Discovering Dense Subgraphs

In order to discover dense subgraphs, we apply iteratively clustering and mining
passes until the number of subgraphs discovered in a pass is below a threshold.
In each pass we look for subgraphs over certain size (measured in number of
edges, |S| · |C|), and decrease this threshold for the next passes. The goal is to
avoid that extracting a small dense subgraph precludes the identiﬁcation of a
larger dense subgraph, which gives a higher beneﬁt.

As even ﬁnding a clique of a certain size within a graph is NP-complete, we
need to use fast heuristics on these huge graphs. We ﬁrst improve the scalable
clustering algorithm based on shingles, proposed by Buehrer and Chellapilla [9].
Once the clustering has identiﬁed nodes whose adjacency lists are suﬃciently
similar, we run a heavier frequent itemset mining algorithm [9] inside each cluster.
 The algorithms proposed by Buehrer and Chellapilla [9] were designed to
ﬁnd only bicliques. To make the algorithms sensitive to dense subgraphs we insert 
all the edges {(u, u), u ∈ V } in E, as anticipated. This is suﬃcient to make
the clustering and mining algorithms ﬁnd more general dense subgraphs. As
explained, the spurious edges added are removed at query time.
The clustering algorithm represents each adjacency list with P ﬁngerprints
(hash values), generating a matrix of ﬁngerprints of |V | rows and P columns (we
used P = 2). Then it traverses the matrix column-wise. At stage i the matrix
rows are sorted lexicographically by their ﬁrst i column values, and the algorithm
groups the rows with the same ﬁngerprints in columns 1 to i. When the number
of rows in a group falls below a threshold, it is converted into a cluster formed by
the nodes corresponding to the rows. Groups that remain after the last column
is processed are also converted into clusters.

268

C. Hern´andez and G. Navarro

On each cluster we apply the frequent itemset mining algorithm, which extracts 
dense subgraphs from the cluster. This algorithm ﬁrst computes frequencies 
of the nodes mentioned in the adjacency lists, and sorts the list by decreasing
frequency of the nodes. Then the nodes are sorted lexicographically according
to their lists. Now each list is inserted into a preﬁx tree, discarding nodes of
frequency 1. Each node p in the preﬁx tree has a label (consisting of the node
id), and it represents the sequence l(p) of labels from the root to the node. Such
node p also stores the range of graph nodes whose list start with l(p).
Note that a tree node p at depth c = |l(p)| representing a range of s graph
nodes identiﬁes a dense subgraph H(S, C), where S are the graph nodes in the
range stored at the tree node, and C are the graph nodes listed in l(p). Thus
|S| = s and |C| = c. We can thus point out all the tree nodes p where s· c is over
the size threshold, and choose them from largest to lowest saving (which must
be recalculated each time we choose the largest).

The execution time for discovering dense subgraphs is about 0.1 ms per link.

Our construction is not yet optimized, however.

4 A Compact Representation

After we have extracted all the interesting dense subgraphs from G(V, E), we
represent G as the set of dense subgraphs plus a remaining graph.

Deﬁnition 2. Let G(V, E) be a directed graph, and let H(Sr, Cr) be edgedisjoint 
dense subgraphs of G. Then the corresponding dense subgraph representation 
of G is (H,R), where H = {H(S1, C1), . . . , H(SN , CN )} and R =
G − (cid:2)

H(Sr, Cr) is the remaining graph.

4.1 Compact Sequence Representations

Many compact data structures use as a basic tool a bitmap supporting rank,
select, and access query primitives. Operation rankB(b, i) on the bitmap B[1, n]
counts the number of times bit b appears in the preﬁx B[1, i]. The operation
selectB(b, i) returns the position of the i-th occurrence of bit b in B (and
n + 1 if there are no i b’s in B). Finally, operation accessB(i) retrieves the
value B[i]. A solution requiring n + o(n) bits and providing constant time for
rank/select/access queries was proposed by Clark [11] and good implementations 
are available (e.g. RG [15]). Later, Raman et al. (RRR) [23] managed to
compress the bitmap while retaining constant query times. The space becomes
nH0(B) + o(n) bits, where H0(B) is the zero-order entropy of B, H0(B) =
n0
n log n

n1 , where B has n0 zeros and n1 ones.

The bitmap representations can be extended to compact data structures for
sequences S[1, n] over an alphabet Σ of size σ. A representation (GMR) [4] uses
n log σ + n o(log σ) bits, and supports rank and access in time O(log log σ), and
select in constant time. The wavelet tree (WT) [16] supports rank/select/access
queries in O(log σ) time. It uses bitmaps internally, and its total space is n log σ
+ o(n) log σ bits if representing those bitmaps using RG, or nH0(S) + o(n) log σ

n0 + n1

n log n

Compressed Representation of Web and Social Networks

269

bits if using RRR, where H0(S) =

nc , being nc the number of occurrences 
of c in S. As our alphabets will be very large, we use the version
called “without pointers” [14], which does not involve an extra space of the form
O(σ log n).

nc

n log n

(cid:3)
c∈Σ

4.2 Compact Representation of H
Let H = {H1, . . . , HN} be the dense subgraph collection found in the graph,
based on Deﬁnition 2. We represent H as a sequence of integers X with a corresponding 
bitmap B. Sequence X = X1 : X2 : . . . : XN represents the sequence
of dense subgraphs and bitmap B = B1 : B2 : . . . BN is used to mark the separation 
between each subgraph. We now describe how a given Xr and Br represent
the dense subgraph Hr = H(Sr, Cr).

We deﬁne Xr and Br based on the overlapping between the sets S and C.
Sequence Xr will have three components: L, M , and R, written one after the
other in this order. Component L lists the elements of S−C. Component M lists
the elements of S ∩ C. Finally, component R lists the elements of C − S. Bitmap
Br = 10
gives alignment information to determine the limits of the
components. In this way, we avoid repeating nodes in the intersection, and have
suﬃcient information to determine all the edges of the dense subgraph. Table 1
describes the construction algorithm of X and B.

|M|

|R|

|L|

10

10

Figure 1 illustrates our approach using a single subgraph as an example of
graph. (a) shows a typical graph representation, (b) our graph representation,
and (c) our compact representation.

(cid:14)(cid:28)(cid:16)(cid:8)(cid:30)(cid:19)(cid:28)(cid:22)(cid:31)(cid:8)(cid:19)(cid:23)(cid:22)(cid:19)(cid:23)(cid:24)(cid:23)(cid:26)(cid:27)(cid:28)(cid:27)(cid:29)(cid:20)(cid:26)

(cid:14)(cid:32)(cid:16)(cid:8)(cid:17)(cid:18)(cid:19)(cid:8)(cid:33)(cid:19)(cid:28)(cid:22)(cid:31)(cid:8)(cid:19)(cid:23)(cid:22)(cid:19)(cid:23)(cid:24)(cid:23)(cid:26)(cid:27)(cid:28)(cid:27)(cid:29)(cid:20)(cid:26)

(cid:14)(cid:15)(cid:16)(cid:8)(cid:17)(cid:18)(cid:19)(cid:8)(cid:15)(cid:20)(cid:21)(cid:22)(cid:19)(cid:23)(cid:24)(cid:24)(cid:23)(cid:25)(cid:8)(cid:19)(cid:23)(cid:22)(cid:19)(cid:23)(cid:24)(cid:23)(cid:26)(cid:27)(cid:28)(cid:27)(cid:29)(cid:20)(cid:26)

(cid:1)

(cid:2)

(cid:3)

(cid:4)

(cid:5)

(cid:6)

(cid:7)

(cid:1)

(cid:2)

(cid:3)

(cid:4)

(cid:5)

(cid:3)

(cid:4)

(cid:5)

(cid:6)

(cid:7)

(cid:12)

(cid:13)

(cid:1)(cid:8)(cid:8)(cid:2)(cid:8)(cid:8)(cid:3)(cid:8)(cid:8)(cid:4)(cid:8)(cid:8)(cid:5)(cid:8)(cid:8)(cid:3)(cid:8)(cid:8)(cid:4)(cid:8)(cid:8)(cid:5)(cid:8)(cid:8)(cid:6)(cid:8)(cid:8)(cid:7)

(cid:10)

(cid:11)

(cid:1)(cid:8)(cid:8)(cid:2)(cid:8) (cid:3)(cid:8)(cid:8)(cid:4)(cid:8)(cid:8)(cid:5) (cid:6)(cid:8)(cid:8)(cid:7)

(cid:3)(cid:8)(cid:9)(cid:8)(cid:9)(cid:8)(cid:3)(cid:8)(cid:9)(cid:8)(cid:9)(cid:8)(cid:9)(cid:8)(cid:3)(cid:8)(cid:9)(cid:8)(cid:9)(cid:8)

Fig. 1. Subgraph example with our compact representation

We compress the graph G = H ∪ R, using sequence X and bitmap B for H.

For R we use some existing compression schemes for graphs.

To support our query algorithms, X and B are represented with compact data
structures for sequences that implement rank/select/access operations. We use
WTs [16] for sequence X and a compressed bitmap representation (RRR [23])

for bitmap B. The total space is |X|(H0(X) + 1) + o(|X| log σ) + |X|H0(B) +
o(|X|), where σ ≤ |V | is the number of vertices in subgraph H. The |X|H0(X) +
o(|X| lg σ) owes to the wavelet tree representation, whereas |X|H0(B) + o(|X|)

270

C. Hern´andez and G. Navarro

owes to the bitmap B. Note that |X| is the sum of the number of nodes of
the dense subgraphs in H, which is much less than the number of edges in the
subgraph it represents.
We answer out/in-neighbor queries as described by the algorithms in Table 
1. Their complexity is O((|output| + 1) log σ), which is away from optimal
by a factor O(log σ). To exemplify the treatment of (u, u) edges, these algorithms 
always remove them before delivering the query results (as explained,
more complex management is necessary if the graph actually contains some of
those edges). Note this ﬁnds only the edges represented in component H; those
in R must be also extracted, using the out/in-neighbor algorithm provided by
the representation we have chosen for it. The out-neighbor algorithm works as
follows. Using selectu(X, i) we ﬁnd all the places where node u is mentioned in
X. This corresponds to some Xr, but we do not now where. Then we analyze B
to determine whether this occurrence of u is inside component L, M , or R. In
cases L and M , we use B again to delimit components M and R, and output all
the nodes of Xr in those components. If u is in component R, instead, there is
nothing to output. The in-neighbors is analogous.

Table 1. Algorithms for building and querying H

Build X and B
Input: S, C in A (patterns)
Output: X and B

Find Out-neighbors
Input: X, B and vertex u
Output: Out-neighbors of u

X = ε
B = ε
for i = 0 to A.N do

out = ε
occur = rankX (u, |X|)
for i = 1 to occur do

Find In-neighbors
Input: X, B and vertex u
Output: In-neighbors of u
in = ε
occur = rankX (u, |X|)
for i = 1 to occur do

S = A[i].S
C = A[i].C
L = S − C
M = S ∩ C
R = C − S
X = X : L : M : R
|M|
B = B : 10

|L|

10

end for
return X, B

|R|

10

y = selectX (u, i)
p = selectB (0, y + 1)
o = p − y { = rankB (1, p) }
m = o mod 3
if m = 1 then
s = selectB (1, o + 1) − o
e = selectB (1, o + 3) − o − 3
else if m = 2 then
s = selectB (1, o) − o + 1
e = selectB (1, o + 2) − o − 2
else

y = selectX (u, i)
p = selectB (0, y + 1)
o = p − y { = rankB (1, p) }
m = o mod 3
if m = 2 then
s = selectB (1, o − 1) − o + 2
e = selectB (1, o + 1) − o − 1
else if m = 0 then
s = selectB (1, o − 2) − o + 3
e = selectB (1, o) − o
else

s = 1
e = 0
end if
for j = s to e do
d = accessX (j)
if d (cid:6)= u then
out = out : d

end if
end for

end for
return out

s = 1
e = 0
end if
for j = s to e do
d = accessX (j)
if d (cid:6)= u then
in = in : d

end if
end for

end for
return in

An interesting advantage of our compressed structure is that it enables the
retrieval of the actual dense subgraphs found on the graph. For instance, we are
able to recover cliques and bicliques in addition to navigating the graph. This
information can be useful for mining and analyzing web and social graphs. The

Compressed Representation of Web and Social Networks

271

time complexity is O(|output| · log σ). Note that cliques can be found explicitly
when L = R = 0 and M ! = 0 or when cliques are included in dense subgraphs.

5 Experimental Evaluation

We implemented the algorithms for dense subgraph discovery, encoding, and
querying in C++. We used Linux PC with 16 processors Intel Xeon at 2.4GHz,
with 72 GB of RAM and 12 MB of cache. We used WT, RG, GMR, and RRR implementations 
from the compact structures library libcds (libcds.recoded.cl).
For WT we used the variant “without pointers”.

We considered four compressed representations for web graphs and social
networks. One is WebGraph (BV), version 3.0.1, corresponding to their last implementation 
that uses LLP ordering [2]. This reaches the lowest space within
the WebGraph framework. A second one is Claude and Ladra’s implementation
of MP k [12], an improvement upon the proposal of Maserrat and Pei [21] for
social networks. Third, we use the k2tree implementation [7], with the last improvements 
[19]. Finally, we use the k2partitioning [12], which combines k2tree
and Re-Pair on web graphs. We use these implementations both for compressing
our R component, and to compare our results with the state of the art.

We experiment with the web graphs and social networks displayed in Figure 
2, which are available at law.dsi.unimi.it by the WebGraph framework
project. We use the natural order for the web graph data sets. In addition, we
use the LiveJournal (directed graph) data set, available from the SNAP project
(Stanford Network Analysis Package, snap.stanford.edu/data).

5.1 Compression Performance

We ﬁrst study the performance of our dense subgraph mining algorithm, and
its impact on compression performance. Our dense subgraph discovery algorithm 
has two parameters: edge saving, deﬁning the minimum subgraph size
of interest, and thres, the minimum number of subgraphs to ﬁnd on the current 
pass before looking for smaller dense subgraphs. We use these two parameters 
to iteratively discover dense subgraphs from larger to smaller sizes. We use
edge saving = 500, 100, 50, 30, 15, 6 and thres = 10 for small graphs and 500 for
larger graphs.

We meausure the percentage of the edges that are captured by the dense
subgraph mining algorithm. Figure 2 shows that more than 90% of the web
graphs can be represented using dense subgraphs. The percentage is much lower,
around 50%, on social graphs, with the exception of Hollywood-2011 (HW2011).
This anticipates the well-known fact that web graphs compress much better
than social graphs. The table also compares the result if we detect only bicliques
[17](H(1)), and if we detect more general dense subgraphs (H(2)). Even though,
there is not much diﬀerence (percentage) in ﬁnding bicliques or dense subgraphs,
the space/time eﬃciency is improved using the later as seen in Figures 3(c),(d).

272

C. Hern´andez and G. Navarro

r

r

(cid:3)

Figure 2 compares the compression we achieve with the alternatives we have
chosen. We show the edge saving (ES) value used for discovering dense subgraphs,
 the ratio RE/|X|, where |X| =
|Sr| + |Cr| − |Sr ∩ Cr| and RE =
(cid:3)
|Sr| · |Cr|. The compression performance in bpe obtained on web and social
graphs, where bpe = bits(H)+bits(R)
edges(H)+edges(R) . We use wavelet trees without pointers
and compressed bitmaps (RRR) for compressing H. For compressing R, we use
k2tree for web graphs and MP k for social networks (with enron as an exception,
where using k2tree on R provides better compression than MP k as seen in Figure 
2). We do not show results of using MP k for web graphs because it did not
provide competitive compression and we include k2Partitioning in Figure 3. We
observe that the ratio RE/|X| is higher on web graphs than on social networks,
and consequently provides better compression. For the alternatives we consider
BV and k2tree on web graphs, and BV and MP k on social graphs. For BV we
use parameters m = 3 and w = 7 (as recomended by their authors); for MP k
we use the best k.

We note that BV is unable to retrieve in-neighbors. To carry out a fair comparison,
 we follow BV authors suggestion [2] for supporting out-in/neighbor
queries. They suggest to compute the set Esym of all symetric edges, that
is, those for which both (u, v) and (v, u) exist. Then they consider the graph
Gsym = (V, Esym) and Gd(V, E − Esym), so that storing Gsym, Gd, and the
transpose of Gd enables both queries. The space we report for BV considers this
arrangement. Nevertheless, we show the space for BV(1) (including oﬀsets for
random access), which is the basic representation that supports out-neighbors
only.

The results show that our technique improves upon the space achieved by
the best alternative techniques, sometimes by a wide margin, in case we are
interested in solving both out/in-neighbor queries. We recall that in the case of
undirected graphs one is forced anyway to be able to report out/in-neighbors,
or what is the same for BV, to represent the whole graph and its transpose. We
remark that in some cases (including all of the Web graphs) our technique uses
even less space than the BV representation of the original graph, which does not
support in-neighbor queries (Figure 2 BV(1) column).
We note that part of our graph (R) is indeed represented with the best alternative 
technique (k2tree for web graphs, MP k for social graphs), but we are
able to improve the compression on the part, H, that can be represented with
dense subgraphs.

5.2 Space/Time Performance

We now compare the combined space/time eﬃciency of our approach against
the state-of-the-art techniques. Recall that BV is adapted to support out/inneighbor 
queries. In all cases we will only report out-neighbor times. In-neighbor
times were also measured, but they are very similar to out-neighbor times for
all the data structures, and showing them just clutters the plots.
Our structure compresses G = H ∪ R using compact data structures for H,
and uses k2tree for compressing R on web graphs, and k2tree and MP k on

Compressed Representation of Web and Social Networks

273

G = H ∪ R

Nodes
Data set
862,664
eu-2005
7,414,866
in-2004
18,520,486
uk-2002
arabic-2005 22,744,080
it-2004
enron

19,235,140 91.30 91.86
194,109,311 93.29 94.51
298,113,762 90.80 91.41
639,999,458 94.16 94.61
41,291,594 1,150,725,436 93.24 94.34
276,143 46.28 48.47

69,244

Edges H(1) H(2) ES RE/|X| bpe
7.29 2.67
14.17 1.49
8.50 2.52
11.56 1.85
12.40 1.79

bpe bpe
3.45 7.19
1.73 3.37
2.78 5.59
2.47 4.02
1.77 3.94
2.06 10.07 10.31 18.30

k2tree BV BV(1)
bpe
4.20
1.78
2.81
2.17
2.15
7.26

6
6
6
6
6
6

enron
dblp-2011
LJSNAP
LJ2008
HW2011

69,244
986,324
4,847,571
5,363,260
2,180,759

276,143 46.28 48.47

6
6,707,236 49.88 65.51 100
68,993,773 53.77 56.37 500
79,023,142 54.17 56.51 100
228,985,632 92.68 94.34 500

2.06 15.42 17.02 18.30
8.38 8.41

7.26
8.48 10.13 10.13
12.66 13.02 13.25 23.16 16.07
4.88 13.04 13.35 17.84 11.84
8.53 4.05
5.23

4.17 5.23

MP k

Fig. 2. Graph properties and compression performance for random access

(a) Space/time efficiency on Dblp-2011 (G=H+R)

(b) Space/time efficiency on LJSNAP (G=H+R)

 10

 9.5

 9

 8.5

 8

 7.5

 7

 6.5

DS-500-WT-r-mpk
DS-100-WT-r-mpk
DS-50-WT-r-mpk
DS-30-WT-r-mpk
MPk

)
e
g
d
e

/
s
u
(
 

e
m
T

i

DS-500-WT-r-mpk
DS-100-WT-r-mpk
DS-50-WT-r-mpk
DS-30-WT-r-mpk
MPk

 16

 15

 14

 13

 12

)
e
g
d
e

/
s
u
(
 

e
m
T

i

 6

 8.3

 8.4

 8.5

 8.6

 8.7
 8.8
space bpe

 8.9

 9

 9.1

 9.2

 11

 13

 13.2

 13.4

 13.6

 13.8
space bpe

 14

 14.2

 14.4

(c) Space/time efficiency on Eu-2005 H

(d) Space/time efficiency on Arabic-2005 H

)
e
g
d
e

/
s
u
(
 

e
m
T

i

)
e
g
d
e
/
s
u
(
 

e
m
T

i

 14

 12

 10

 8

 6

 4

 2

 0

 14

 12

 10

 8

 6

 4

 2

 0

BI-WT-r
BI-WT-b
BI-GMR-b
BI-GMR-r
DS-WT-r
DS-WT-b
DS-GMR-b
DS-GMR-r

 1

 2

 3

 5
 4
space bpe

 6

 7

 8

(e) Space/time efficiency on Eu-2005 (G=H+R)

BI-WT-r-k2tree
BI-GMR-r-k2tree
DS-WT-r-k2tree
DS-GMR-r-k2tree
K2tree
K2Part
BV

 1

 2

 3

 4
 5
space bpe

 6

 7

 8

)
e
g
d
e

/
s
u
(
 

e
m
T

i

)
e
g
d
e
/
s
u
(
 

e
m
T

i

 14

 12

 10

 8

 6

 4

 2

 0

 14

 12

 10

 8

 6

 4

 2

 0

BI-WT-r
BI-WT-b
BI-GMR-b
BI-GMR-r
DS-WT-r
DS-WT-b
DS-GMR-b
DS-GMR-r

 1

 1.5

 2

 2.5

 3

 3.5

 4

 4.5

 5

space bpe

(f) Space/time efficiency on Arabic-2005 (G=H+R)

BI-WT-r-k2tree
BI-GMR-r-k2tree
DS-WT-r-k2tree
DS-GMR-r-k2tree
K2tree
K2Part
BV

 1

 1.5

 2

 2.5

 3

 3.5

 4

 4.5

 5

space bpe

Fig. 3. Space/time eﬃciency on web and social graphs with outneighbor queries

274

C. Hern´andez and G. Navarro

social networks. We denote WT-b our technique applying wavelet tree without
pointers for sequence X and RG on the wavelet tree bitmaps, and WT-r as
applying wavelet tree without pointers and RRR on the wavelet tree bitmaps.
We compare Wavelet tree (WT) with Golynski (GMR) [4] for sequence X (Figures 
3(c),(d)). Bitmap B also uses RG or RRR depending on the notation. The
sampling parameter for both bitmap representations (RG or RRR) is 16, 32, and
64, which yields a line for each technique. Note that our time is always the sum
of the time spent on H and on R.

Finally, it can be seen that our technique improves upon MP k [12] in space
and time. We must insist in that this does not diminish the merit of MP k
structure: we do use it to represent our R part. The point is that this structure
improves in space and time when combined with ours. Figures 3(a),(b) compare
our results for dblp-2011 and LJSNAP with MP k, since the k2tree and BV are
not competitive.
Figures 3(c),(d),(e),(f) show space/time eﬃciency on web graphs. We show in
Figure 3(c),(d) the space/time eﬃciency of web graphs represented by H only,
where we are able to capture more than 91% of the total of edges in Eu-2005
and over 94% in Arabic-2005. We compare space/time performance between
representing dense subgraphs (DS) and bicliques (BI) only. We remark that
our representation enables neighbor and mining queries and it is more eﬃcient
in space and time than the representation of the complete graph, where we
add the representation of R using k2tree. In Figures 3(e),(f) we compare our
results for representation G = H∪R against k2tree, k2partitioning and BV. We
substantially improve BV compression, although with signiﬁcantly higher access
time. We also improve the compression of k2tree and k2partitioning, again using
more time (between three and four times slower than k2tree).

We remind that our compressed structure also enables to recover cliques,
bicliques and other dense subgraphs, while none of the alternatives easily support
these mining queries.

6 Conclusions

This paper proposes a novel compressed structure for web and social graphs
based on extracting dense subgraphs and representing them with compact data
structures. We generalize previous biclique discovery algorithms so that they
detect dense subgraphs, and our experiments show that this generalization pays
oﬀ in terms of compression performance. As extracting them is non-trivial, these
dense subgraphs may be useful for other graph mining and analysis purposes,
and our representation gives easy access to them. Our compressed data structure
avoids redundancy both in the node and in the edge representation of dense
subgraphs, and supports eﬃcient out-neighbor and in-neighbor queries, with
symmetric techniques and similar performance.

Our results show that we are able to improve both space and neighbor retrieval
time, with respect to the best current alternatives, on social networks. On web
graphs we improve the best previous space, yet our times are signiﬁcantly higher.

Compressed Representation of Web and Social Networks

275

These comparisons assume that either the graphs are undirected (as some social
networks) or that we want to be able to retrieve both outand 
in-neighbors
(separately). However, on some web graphs our space is even better than the
best alternatives that only support out-neighbor queries.

References

1. Apostolico, A., Drovandi, G.: Graph compression by BFS. Algorithms 2(3), 1031–

1044 (2009)

2. Boldi, P., Rosa, M., Santini, M., Vigna, S.: Layered label propagation: a multiresolution 
coordinate-free ordering for compressing social networks. In: WWW, pp.
587–596 (2011)

3. Boldi, P., Santini, M., Vigna, S.: Permuting Web Graphs. In: Avrachenkov, K.,
Donato, D., Litvak, N. (eds.) WAW 2009. LNCS, vol. 5427, pp. 116–126. Springer,
Heidelberg (2009)

4. Golynski, A., Munro, I., Srinivasa, S.: Rank/select operations on large alphabets:

a tool for text indexing. In: SODA, pp. 368–373 (2006)

5. Boldi, P., Vigna, S.: The webgraph framework I: compression techniques. In:

WWW, pp. 595–602 (2004)

6. Brin, S., Page, L.: The anatomy of a large-scale hypertextual Web search engine.

Comp. Netw. 30(1-7), 107–117 (1998)

7. Brisaboa, N.R., Ladra, S., Navarro, G.: K2-Trees for Compact Web Graph Representation.
 In: Karlgren, J., Tarhio, J., Hyyr¨o, H. (eds.) SPIRE 2009. LNCS,
vol. 5721, pp. 18–30. Springer, Heidelberg (2009)

8. Broder, A.: Min-wise Independent Permutations: Theory and Practice. In: Welzl,
E., Montanari, U., Rolim, J.D.P. (eds.) ICALP 2000. LNCS, vol. 1853, p. 808.
Springer, Heidelberg (2000)

9. Buehrer, G., Chellapilla, K.: A scalable pattern mining approach to Web graph

compression with communities. In: WSDM, pp. 95–106 (2008)

10. Chierichetti, F., Kumar, R., Lattanzi, S., Mitzenmacher, M., Panconesi, A., Raghavan,
 P.: On compressing social networks. In: KDD, pp. 219–228 (2009)

11. Clark, D.: Compact pat trees. Ph.D. Thesis, University of Waterloo (1996)
12. Claude, F., Ladra, S.: Practical representations for web and social graphs. In:

CIKM, pp. 1185–1190 (2011)

13. Claude, F., Navarro, G.: Fast and compact Web graph representations. ACM

TWEB 4(4), art.16 (2010)

14. Claude, F., Navarro, G.: Practical Rank/Select Queries over Arbitrary Sequences.
In: Amir, A., Turpin, A., Moﬀat, A. (eds.) SPIRE 2008. LNCS, vol. 5280, pp.
176–187. Springer, Heidelberg (2008)

15. Gonz´alez, R., Grabowski, S., M¨akinen, V., Navarro, G.: Practical implementation

of rank and select queries. In: WEA, posters, pp. 27–38 (2005)

16. Grossi, R., Gupta, A., Vitter, J.S.: High-order entropy-compressed text indexes.

In: SODA, pp. 841–850 (2003)

17. Hern´andez, C., Navarro, G.: Compression of Web and social graphs supporting

neighbor and community queries. In: SNA-KDD (2011)

18. Kleinberg, J.M.: Authoritative sources in a hyperlinked environment. JACM 46(5),

604–632 (1999)

19. Ladra, S.: Algorithms and compressed data structures for information retrieval.

Ph.D. Thesis, University of A. Coru˜na, Spain (2011)

276

C. Hern´andez and G. Navarro

20. Larsson, N.J., Moﬀat, A.: Oﬄine dictionary-based compression. In: DCC, pp. 296–

305 (1999)

21. Maserrat, H., Pei, J.: Neighbor query friendly compression of social networks. In:

KDD, pp. 533–542 (2010)

22. Mislove, A., Marcon, M., Gummadi, P.K., Druschel, P., Bhattacharjee, B.: Measurement 
and analysis of online social networks. In: Internet Measurement Conference,
 pp. 29–42 (2007)

23. Raman, R., Raman, V., Rao, S.S.: Succinct indexable dictionaries with applications

to encoding k-ary trees and multisets. In: SODA, pp. 233–242 (2002)

24. Randall, K.H., Stata, R., Wiener, J.L., Wickremesinghe, R.: The link database:

Fast access to graphs of the Web. In: DCC, pp. 122–131 (2002)

