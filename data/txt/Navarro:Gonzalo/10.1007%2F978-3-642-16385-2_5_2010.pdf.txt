Range Queries over a Compact Representation

of Minimum Bounding Rectangles(cid:2)

Nieves R. Brisaboa1, Miguel R. Luaces1, Gonzalo Navarro2, and Diego Seco1

1 Database Laboratory, University of A Coru˜na

Campus de Elvi˜na, 15071, A Coru˜na, Spain

{brisaboa,luaces,dseco}@udc.es

2 Department of Computer Science, University of Chile

Blanco Encalada 2120, Santiago, Chile

gnavarro@dcc.uchile.cl

Abstract. In this paper we present a compact structure to index semistatic 
collections of MBRs that solves range queries while keeping a good
trade-oﬀ between the space needed to store the index and its search eﬃciency.
 This is very relevant considering the current sizes and gaps in the
memory hierarchy. Our index is based on the wavelet tree, a structure
used to represent sequences, permutations, and other discrete functions
in stringology. The comparison with the R*-tree and the STR R-tree
(the most relevant dynamic and static versions of the R-tree) shows that
our proposal needs less space to store the index while keeping competitive 
search performance, especially when the queries are not too selective.

Keywords: MBR, range query, wavelet tree, compact structures.

1 Introduction

The age of online digital availability has forced changes in the goals of many
classical research ﬁelds. For example, the ever-increasing demand for geographic
information services, which allow users to ﬁnd the geographic location of some
resources previously located in a map (e.g. public administration services, places
of interest, etc.), has emphasized the interest in the classical range queries (or
window queries). These deﬁne a rectangular query window and retrieve all the
geographic objects having at least one point in common with it. Other queries,
like region queries and point queries, can be well-approached by them.

A survey of spatial queries and Spatial Access Methods (SAMs) designed
to solve them is that of Gaede and Gunther [5] which also details the special
characteristics of spatial data that determine a set of requirements that spatial
indexes should meet (e.g. secondary storage management, dynamism, etc.). All
these have been design principles of spatial indexes along the years but recent

(cid:2) This work has been partially supported by “Ministerio de Educaci´on y Cien-
cia” (PGE y FEDER) ref. TIN2009-14560-C03-02, by “Xunta de Galicia” ref.
08SIN009CT, and by Fondecyt Grant 1-080019, Chile.

J. Trujillo et al. (Eds.): ER 2010 Workshops, LNCS 6413, pp. 33–42, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010

34

N.R. Brisaboa et al.

improvements in hardware mean that some of these requirements need to be
carefully reevaluated.

On the one hand, although geographic databases tend to be very large, it is
feasible nowadays to place complete spatial indexes in main memory because
spatial indexes do not contain the real geographic objects but a simpliﬁcation of
them. The most common simpliﬁcation is the MBR or bounding box, which, in
the 2-dimensional Euclidean space E2, needs four ﬂoating-point values for each
geographic object. Note that the most common spatial data are two-dimensional,
hence the interest in E2 (though our structure represents d-dimensional MBRs).
Indeed, considering the current sizes of main memories, the space eﬃciency requirement 
can replace that of secondary storage management. Furthermore, the
design of compact indexes is a topic of interest because of the way memory hierarchy 
has evolved in recent decades. New levels have been added (e.g. ﬂash
storage) and the sizes at all levels have been considerably increased. In addition,
 access times in upper levels of the hierarchy have decreased much faster
than in lower levels. Therefore, reducing the size of indexes is a timeless topic of
interest because placing these indexes in upper levels of the memory hierarchy
considerably reduces access times, by several orders of magnitude in some cases.
On the other hand, the data is semi-static in many applications. This is usual
in Geographic Information Retrieval [9] systems, which have arisen from the combination 
of GIS and Information Retrieval systems. In the ﬁeld of GIS, many
public organizations are sharing their geographic information using Spatial Data
Infrastructure [6]. The spatial information in these systems does not require frequent 
updates. When a spatial index is integrated in this kind of system, dynamism 
is not a very important requirement compared to time eﬃciency solving
queries. Therefore, the design of static spatial indexes that take advantage of the
knowledge of the data distribution is also a topic of interest.

In the previous edition of this workshop [3] we presented a spatial index for
two-dimensional points based on wavelet trees. The generalization to support ddimensional 
range queries over MBRs, which we present here, turns out to be a
rather challenging problem not arising in other domains where wavelet trees have
been used. As a reward, the index we obtain achieves a good trade-oﬀ between
space and time eﬃciency. In particular, the index turns out to be quite insensitive
to the size of the query window, and as a result it becomes most competitive
on not too selective queries. Our experiments, featuring GIS-like scenarios, show
that our index is a relevant alternative to classical spatial indexes such as the
R-tree [11]. In addition, the strategy used to decompose the problem allows the
use of other solutions in the diﬀerent steps achieving diﬀerent trade-oﬀs.

2 Related Work

A great variety of SAMs have been proposed supporting the diﬀerent kinds of
queries that can be applied on spatial databases, like exact match or adjacency.
In this paper we focus on a very common kind of query, named range query,
on collections of d-dimensional geographic objects. For clarity many times we

Range Queries over a Compact Representation of MBRs

35

q

q

q
2, u

assume d = 2 but all the results are easily generalized. The problem is formalized
as follows. We deﬁne the MBR of a geographic object o, M BR(o) = I1(o)× I2(o)
where Ii(o) = [li, ui](li, ui ∈ E1) is the minimum interval describing the extent
of o along the dimension i. In the same way, we deﬁne a rectangle query q =
q
2]. Finally, the range query to ﬁnd all the objects o having at least
[l
1, u
one point in common with q is deﬁned as RQ(q) = {o | q ∩ M BR(o) (cid:4)= ∅}.

1]× [l
The R-tree and its dynamic (e.g. R*-tree) and static (e.g. STR R-tree) variants
[11] are the most popular SAMs used to solve range queries in GIS. In Gaede
and Gunther [5] these structures are presented in the group of SAMs based
on the technique of overlapping regions. An alternative technique consists in
the transformation of the MBRs into a diﬀerent representation such as higherdimensional 
points or one-dimensional intervals. Our representation is based on
this technique as it decomposes the problem into its d-dimensions, solves the d
subproblems, and intersects the results. Each subproblem consists in ﬁnding the
one-dimensional intervals intersecting the query, which is obtained applying the
same decomposition to the original query.

Although many structures can be used to solve these subproblems, we propose
the use of wavelet trees because they provide a good trade-oﬀ between space and
time eﬃciency. Alternatively, classical interval data structures [13] like interval
trees, segment trees, and priority trees can solve each subproblem in at least
Ω(log N + k) (considering the output sensitivity complexity where k is output
size). Obviously, these classical structures using pointers need much more space
than the compact wavelet tree. One-dimensional intervals can be interpreted as
two-dimensional points (further details about this transformation are given in
the next section) and thus all the data structures supporting two-dimensional
range queries over points provide alternatives to solve intersection queries in
sets of intervals. Some of them [1,2] theoretically improve the performance of
the wavelet tree but they come with a signiﬁcant implementation overhead. Recently,
 Schmidt [14] presented a simple structure solving the Interval Intersection
Problem in asymptotic optimal space (Ω(n)) and time (Ω(1 + k)). However, this
structure also needs much more space than the wavelet tree. A compact version
of this structure is a promising line of future work because it could provide also
an interesting trade-oﬀ.

A basic tool in compact data structures is the rank operation: given a sequence
S of length N, drawn from an alphabet Σ of size σ, ranka(S, i) counts the
occurrences of symbol a ∈ Σ in S[1, i]. For the special case Σ = {0, 1} (S is
a bit-vector B), the rank operation can be implemented in constant time and
using little additional space on top of B (o(n) in theory [7]). For example, given
a bitmap B = 1000110, rank0(B, 5) = 3 and rank1(B, 7) = 3.

3 Our Compact Representation

Our structure is based on the decomposition of the problem in its d dimensions.
This decomposition produces d interval intersection subproblems that can be
tackled with diﬀerent structures. The one we propose uses a wavelet tree to

36

N.R. Brisaboa et al.

solve each subproblem. The idea is to interpret every interval a as a point (la,
ra) in the rank-space grid N × N. Gabow et al. [4] proved that the orthogonal
nature of the problem makes it possible to work in the rank space.

3.1 Translation to the Rank Space

In each dimension there are N intervals, each described by two ﬂoat numbers (its
endpoints). A common technique to perform the translation of these intervals
to the rank space stores two ordered arrays, one with the left endpoints and the
other one with the right endpoints. Then, the endpoints of an interval in the
rank space correspond with the positions of its real endpoints in these arrays.

(cid:2)

Although the real coordinates of the MBRs are ﬂoating point numbers, in
GIS these numbers can be represented with four bytes each. Note that geographic 
coordinates can be represented in degrees or meters and in most cases
it is possible to round them to integer values, after appropriate scaling, without 
losing any precision. We make use of this assumption, as it holds in most
practical applications. To store these integer coordinates without losing precision 
we use a compressed storage scheme. An ordered array X = x1x2 . . . xN
is represented as a sequence of nonnegative diﬀerences between consecutive values 
yi+1 = xi+1 − xi and y1 = x1. Let Y = y1y2 . . . yN be this sequence, so
that xi =
1≤j≤i yj. Array Y is a representation of X that can be compressed
by exploiting the fact that consecutive diﬀerences are smaller numbers. These
small numbers can be encoded with diﬀerent coding algorithms. We performed
experiments (omitted due to lack of space) with four diﬀerent well-known coding 
algorithms [12] (Elias-Gamma, Elias-Delta, Rice, and Vbytes) and conclude
that Rice encoding outperforms the other in most synthetic and real scenarios.
In addition, a vector stores the accumulated sum at regularly sampled positions
(say every hth position, thus the vector stores all values xi·h) to eﬃciently solve
the operations rightSearch (given a coordinate v, ﬁnd the largest xi ≤ v) and
lef tSearch (the lowest xi ≥ v). The algorithm to map a real coordinate to the
rank space ﬁrst performs a binary search in the vector of sampled sums and then
carries out a sequential scan in the resulting interval of Y .

3.2 Solving Queries in the Wavelet Trees
In the two-dimensional rank space, N MBRs can be represented in a 2N × 2N
grid (Figure 1 left) and an alternative representation for the N intervals in
each dimension is an N × N grid where rows represent the intervals ordered
according to their left endpoints and columns represent them ordered according
to their right endpoints. Figure 1 (right) represents the grids resulting from the
transformation of the vertical (up) and horizontal (down) intervals.

The following, easy to verify, observation provides a basis for our next developments.
 It says, essentially, that an intersection between a query q and an
object o occurs when, across each dimension, the query ﬁnishes not before the
object starts, and starts not after the object ﬁnishes.

Range Queries over a Compact Representation of MBRs

37

1
1

2
2

3
3

4
4

5
5

6
6

7
7

8
8

9
9

10
10

11
11

12
12

13
13

14
14

15
15

16
16

1
1

2
2

3
3

4
4

5
5

6
6

7
7

8
8

9
9

10
10

11
11

12
12

13
13

14
14

15
15

16
16

c

h

a

q

b

e

d

g

f

l1/u1
1
1
b2
b2
3
3
4
4
5
5
6
6
7
7
8
8

l2/u2
c1
c1
2
2
3
3
4
4
5
5
6
6
7
7
8
8

87654321
87654321

a
a

g
g

c
c

e
e

d
d

h
h

f
f

87654321
87654321

h
h

b
b

e
e

d
d

a
a

g
g

f
f

Fig. 1. Two dimensional example in the rank space

q

q

q

q

q
2

q
2

q
1

q
1

q
1, u

i ≤ ui.

≥ l2 ∧ l

2] are now split into u

i ≥ li ∧ l
≤ u1 and u

Observation 1. o ∈ RQ(q) iﬀ ∀i, u
1]×
In two dimensions, the four conditions of Observation 1 for query q = [l
≤ u2. These are
≥ l1 ∧ l
q
[l
2, u
illustrated in Figure 1 (right). In the original space, this partition results in two
bands of (l2 − l1) × N and (u2 − u1) × N, illustrated in Figure 1 (left). Objects
intersecting each band are the candidates to be part of the query result. Finally,
those objects in the intersection of the bands are the actual results of the query.
Note that this intersection can be performed on-line because the candidates of
the ﬁrst dimension turn on their bits on a bitmap and the candidates of the
second one report the MBR identiﬁer only if their associated bits are turned on
in the bitmap (an array of counters allows the generalization to d dimensions).
In both transformed grids there is only one point in each row and in each column,
 therefore we can build two wavelet trees as described in [3]. Figure 2 shows
the wavelet trees corresponding to the ﬁrst (left) and second (right) dimensions
in the transformed space. The root node of each wavelet tree represents the permutation 
of the points in the order of the rows whereas the leaves represent the
permutation of the points in the order of the columns. The wavelet tree is a
perfect binary tree where each node handles an interval of the columns i, and
thus knows only the points whose column falls in the interval. The root handles
the interval of columns [1, N] and the children of a node handling interval [i,
(cid:4)] are associated to [i,(cid:10)(i + i
(cid:4)]. The leaves handle
i
intervals for the form [i, i]. Each node v contains a bitmap Bv so that Bv[r] = 0
iﬀ the r-th point handled by node v (in the order of the rows) belongs to the
left child and Bv[r] = 1 iﬀ it belongs to the right child.

(cid:4))/2(cid:11)] and [(cid:10)(i + i

(cid:4))/2(cid:11) + 1, i

In each wavelet tree we perform a query derived from the translation of the
2] is decomposed
original query q to the new space. The query q = [l
according to its two dimensions, resulting in a two-sided query to each wavelet
2]× [l
tree: qwt1 = [1, u
2, N]. The ﬁrst intervals of each
wavelet tree query represent rows in the transformed grid, and thus they indicate
valid positions in the bitmaps of the wavelet trees, whereas the second intervals
represent columns, and thus they indicate valid nodes in the tree traversal (and

1, N] and qwt2 = [1, u

1]× [l

1]× [l

q
2, u

q
1, u

q

q

q

q

q

q

38

N.R. Brisaboa et al.

1
1
a
a
0.5
0.5

2
2
b
b
1.5
1.5

3
3
g
g
1.5
1.5

4
4
c
c
3.5
3.5

5
5
e
e
3.5
3.5

6
6
d
d
4.5
4.5

7
7
h
h
6.5
6.5

8
8
f
f
6.5
6.5

L1

1
1
c
c
0.5
0.5

2
2
h
h
0.5
0.5

3
3
b
b
1.5
1.5

4
4
e
e
2.5
2.5

5
5
d
d
2.5
2.5

6
6
a
a
4.5
4.5

7
7
g
g
5.5
5.5

8
8
f
f
6.5
6.5

L2

[1, 8]
4
5
5
4
c
e
c
e
1
0
0
1

1
1
a
a
0
0

2
2
b
b
0
0

3
3
g
g
0
0

[1, 4]

00

1
1
a
a
0
0

2
2
b
b
0
0

3
3
g
g
1
1

4
4
c
c
1
1

11
1
1
g
g
0
0

[1, 2]

1
1
a
a
1
1

00

b
b
2.5
2.5

U1

00
2
2
b
b
0
0

11

a
a
2.5
2.5

00

g
g
4.5
4.5

[3, 4]

2
2
c
c
1
1

11

c
c
5.5
5.5

[5, 6]

1
1
e
e
0
0

00

e
e
5.5
5.5

7
7
h
h
1
1

11

[5, 8]

2
2
d
d
0
0

8
8
f
f
1
1

3
3
h
h
1
1

6
6
d
d
1
1

1
1
e
e
0
0

00

2
2
d
d
1
1

4
4
f
f
1
1
[7, 8]

11
1
1
h
h
0
0

2
2
f
f
1
1
11

f
f
7.5
7.5

11

d
d
7.5
7.5

00

h
h
7.5
7.5

[1, 8]
4
5
4
5
e
d
e
d
1
0
0
1

1
1
c
c
0
0

2
2
h
h
0
0

3
3
b
b
0
0

[1, 4]

00

1
1
c
c
0
0

2
2
h
h
0
0

3
3
b
b
1
1

4
4
d
d
1
1

6
6
a
a
1
1

7
7
g
g
1
1

8
8
f
f
1
1

11

[5, 8]

2
2
a
a
0
0

3
3
g
g
1
1

1
1
e
e
0
0

00

[1, 2]

1
1
c
c
0
0

00

c
c
1.5
1.5

00
2
2
h
h
1
1

11

h
h
1.5
1.5

U2

[3, 4]
11
1
2
1
2
b
d
b
d
0
1
1
0

[5, 6]

1
1
e
e
0
0

2
2
a
a
1
1

00

b
b
3.5
3.5

11

d
d
3.5
3.5

00

e
e
5.5
5.5

11

a
a
6.5
6.5

4
4
f
f
1
1
[7, 8]

11
1
1
g
g
0
0

2
2
f
f
1
1

00

g
g
6.5
6.5

11

f
f
7.5
7.5

Fig. 2. Representing MBRs using wavelet trees

are used to prune these traversals). The algorithm solving the queries in each
dimension is a simpliﬁcation of the point case [3] because these are two-sided
queries, whereas in the general case queries are four-sided.

The left wavelet tree in Figure 2 highlights nodes visited to solve the query
decomposed in the ranges [1, 6] (valid positions in the root bitmap of the ﬁrst
wavelet tree) and [4, 8] (interval to prune the ﬁrst wavelet tree traversal). The
ﬁrst range is projected in the child nodes of the root node as [1, rank0(B, 6)] =
[1, 4] and [1, rank1(B, 6)] = [1, 2]. In the same way the range [1, 4] of the left child
is projected in its children as [1, rank0(B, 4)] = [1, 2] and [1, rank1(B, 4)] = [1, 2],
but the ﬁrst one is not accessed because it covers the range [1,2] which does not
intersect the query range [4,8]. If we repeat this process until the leaves, we
obtain the set of candidates of the ﬁrst wavelet tree {c, e, d}. Analogously we
obtain the result {b, d, e, a} in the second wavelet tree. Therefore, the solution
of the query is {c, e, d} ∩ {b, d, e, a} = {d, e}.

4 Experiments

The computer used features an Intel Pentium 4 processor at 3.00GHz with 4GB
of RAM. It runs GNU/Linux (kernel 2.6.27). We compiled with gcc version 4.3.2
and option -O9. In these experimentes we used three synthetic collections with
one million MBRs each and uniform, Zipf (world size = 1, 000×1, 000, ρ = 1) and
Gauss distribution (world size = 1, 000 × 1, 000, μ = 500, σ = 200). We created
four query sets for each dataset with diﬀerent selectivities that represent 0.001%,
0.01%, 0.1%, and 1% of the area of the space where the MBRs are located. They
contain 1,000 queries with the same distribution of the original datasets and
the ratio between the horizontal and vertical extensions varies uniformly between 
0.25 and 2.25. Experiments using two real datasets are also presented.
The ﬁrst dataset, named Tiger, contains 2,249,727 MBRs from California roads
and it is available at the U.S. Census Bureau1. Six smaller real collections available 
at the same place were used as query sets: Block (groups of buildings), BG

1 http://www.census.gov/geo/www/tiger

Range Queries over a Compact Representation of MBRs

39

(block groups), AIANNH (American Indian/Alaska Native/Native Hawaiian Ar-
eas), SD (elementary, secondary, and uniﬁed school districts), COUSUB (country
subdivisions), and SLDL (state legislative districts). The second real collection,
named EIEL dataset, contains 569,534 MBRs from buildings in the province of
A Coru˜na, Spain2. Five smaller collections available at the same place were used
as query sets: URBRU (urbanized rural places), URBRE (urbanized residential
places), CENT (population centers), PAR (parishes), and MUN (municipalities).

4.1 Space Comparison

We compare our structure with two variants of the R-tree in terms of space
needed to store the structure. The space needed by an R-tree over a collection
of N MBRs can be estimated considering a certain arity (M). Dynamic versions
of this structure, such as the R*-tree, estimate that nodes are 70% full whereas
static versions, such as the STR R-tree, assume that nodes are full (in main
memory). Therefore, an R*-tree needs
0.7×M−1 nodes whereas an STR R-tree
M−1 nodes. Each node needs M × sizeof(entry) bytes. The size of an
needs N
entry is the size of an MBR plus a pointer to the child (or to the data if the
node is a leaf). In order to compare these variants with our structure we assume
that MBRs are stored in 16 bytes (4 coordinates in 4-bytes numbers) and the
× 20 × M
pointer in 4 bytes. Hence, the total size of an R*-tree is
× 20× M. In our experiments the best
whereas the size of an STR R-tree is N
M−1
time performance of the R*-tree and STR R-tree is achieved with an eﬀective
M value of 30. Note that the coordinates stored by the R-tree variants are not
sorted, thus it is not possible to apply our diﬀerential encoding.

0.7×M−1

N

N

On the other hand, our structure stores the coordinates of the N MBRs (four
arrays of N 4-byte numbers without encoding), the MBR identiﬁers (two arrays,
one per wavelet tree, of N 4-byte numbers to perform the intersection) and the
two wavelet tree bitmaps (see grayed data in Figure 2). The wavelet tree needs
only N × (cid:12)log2 N(cid:13) bits (1 bit per MBR per level, that is, N bits per level, and
there are (cid:12)log2 N(cid:13) levels). Moreover, in order to perform rank operations in
constant time, some auxiliary structures are needed that use an additional space
of around 37.5% of the wavelet tree size [7]. Therefore, the complete structure
requires 4 × 4 × N + 2 × 4 × N + 2 × (N × (cid:12)log2 N(cid:13) × 1.375)/8 bytes, which is
in addition subject to coordinate compression.
The eﬀectiveness of this compression varies across datasets, so we show the
results for each dataset in Figure 3 (we use Rice codes with sampling h = 500
and maintain this conﬁguration in the time comparison). These results show
that our structure, named SW-tree (from spatial wavelet tree) in the graphs, can
index collections of MBRs in less space than the two variants of the R-tree due
to the compressed encoding of the coordinates and the little space required by
the wavelet trees. Some datasets are more compressible than others. The best
results were obtained with the real Tiger dataset where we save more than 46%
and 22% of the R*-tree and STR R-tree respectively. Compression rates are not

2 http://www.dicoruna.es/webeiel

40

N.R. Brisaboa et al.

)

R
B
M
/
s
e

t
y
b
(
 

i

e
z
S
 
x
e
d
n

I

 30

 25

 20

 15

 10

R*-tree
STR R-tree
SW-tree

Uniform

Zipf

Gauss

Tiger

EIEL

Fig. 3. Space comparison

so good with the EIEL datasets because geographic coordinates in this collection
are in centimeters, and thus distances between consecutive coordinates are quite
large. However, even in this case the space needed to represent our structure is
considerably less than the space needed to represent an STR R-tree.

4.2 Time Comparison

To perform the time comparison we implemented our structure as described
in Section 3 and use the R-tree implementation provided by the Spatial index
library 3. This library provides several implementations of R-tree variants such as
the R*-tree and the STR packing algorithm to perform bulk loading. In addition,
all these variants can run in main memory. In our experiments we run both the
R*-tree and the STR R-tree in main memory with a load factor M = 30.

We ﬁrst perform experiments with the three synthetic collections (Figure 4).
The main conclusion that can be extracted from these results is that our structure 
is competitive with respect to query time eﬃciency when the queries are
very selective (0.001% and 0.01%) and in less selective queries (from 0.1%) our
structure is signiﬁcantly better than the others.

R*-tree
STR R-tree
SW-tree

)
s
(
 

e
m
T

i

 0.04
 0.035
 0.03
 0.025
 0.02
 0.015
 0.01
 0.005

0.001%

0.01%

0.1%

1%

Selectivity

(a) Uniform

R*-tree
STR R-tree
SW-tree

R*-tree
STR R-tree
SW-tree

 0.025

 0.02

 0.015

 0.01

 0.005

 0
0.001%

0.01%

0.1%

1%

Selectivity

(b) Gauss

 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
0.001%

0.01%

0.1%

1%

Selectivity

(c) Zipf

Fig. 4. Time comparison in three synthetic datasets with diﬀerent distributions

Another important conclusion that can be extracted from these results is the
little dependence of our structure to changes in the selectivity. This is due to the
space transformation. We divide the problem into two subproblems, each one
concerning one dimension. This decomposition makes queries in the two wavelet
trees only marginally dependent on the query size (i.e. selectivity). Note that
3 http://www2.research.att.com/∼marioh/spatialindex/

Range Queries over a Compact Representation of MBRs

41

indexed MBRs correspond to points near the main diagonal of the transformed
grids, so that larger MBRs translate into points farther from the main diagonal
(above it). The query translates into a 2-sided range query. The point where this
transformed query starts is below the main diagonal, farther from it as the query
size is larger, and thus returning more points (more precisely, the returned set
size increases linearly with the width of the query across each coordinate). The
impact of the size of the query is more clearly reﬂected in the intersection of the
results of both wavelet trees, as an increase by a factor of s2 in the query area
(that is, s per coordinate), translates into a factor of just s (i.e. s× N + s× N) in
the amount of data to intersect. This “square root” impact of the query size in
the performance of the algorithm explains its resilience to the query selectivity.
Of course, they also explain why our technique does not perform so well when
queries are very selective, as we work O(s) time in order to retrieve a result of
size O((s/N)2N) (taking s as the asymptotic variable).

The surprising time decrease with the increase of the query size in Figure
4(c) is understood because all the MBRs represented in a node are directly
reported without reaching the leaves if the node range is completely contained
in the query range and all the positions of the node are valid. Therefore, while
smaller queries prune the tree more than bigger ones, bigger queries report more
elements without reaching the leaves. The Zipf dataset markedly increases the
number of directly reported objects due to the high concentration of MBRs near
the origin of coordinates.

Finally, we present the results with the two real datasets. Figures 5(a) and 5(b)
present the results with the Tiger and EIEL datasets respectively. In these graphs
the real query sets have been sorted accordingly with their selectivity (from
left to right the query selectivity is fewer). Even though both R-tree variants
improve the performance of our structure when queries are too selective (Block
and BG in the Tiger dataset, and URBRU in the EIEL dataset) these results are
very promising because our structure improves the performance of both R-tree
variants in a broad range of real query sets. Note that all of them are meaningful
queries. For example, in the EIEL dataset the query set CENT contains queries
of the form which buildings are contained in the population center X. The results
in the less selective queries (SD, COUSUB and SLDL in the Tiger dataset,
and PAR and MUN in the EIEL dataset) are particularly good because the
diﬀerences with the classical solutions are impressive.

 0.1

 0.01

 0.001

 0.0001

l

e
a
c
s
 

g
o
L

 
.
)
s
(
 

e
m
T

i

 1e-005

Block

R*-tree
STR R-tree
SW-tree

R*-tree
STR R-tree
SW-tree

 0.1

 0.01

l

e
a
c
s
 
g
o
L

 
.
)
s
(
 
e
m
T

i

BG AIANNH SD COUSUB SLDL
(a) Tiger

 0.001

URBRU

URBRE

CENT
(b) EIEL

PAR

MUN

Fig. 5. Time comparison in two real datasets

42

N.R. Brisaboa et al.

5 Future Work

There are other versions of the R-tree (e.g. the CR-tree [10]) that use compression
techniques achieving lower storage requirements than the STR R-tree. However,
these structures can produce precision loss, and thus, false positives. We could
reduce the precision of the coordinates in order to achieve higher compression
rates yet producing false positives too. Note that each false positive involves a
huge penalty because a real geographic object has to be retrieved from disk and
a complex comparison operation between this object and the query window has
to be performed to check whether it is a true hit. We are also working on allowing 
the insertion and removal of points once the structure has been constructed.
Some recent works [8] describe dynamic versions of rank structures that can be
used in the design of wavelet trees with insertion and deletion capabilities. Finally,
algorithms to solve other queries like k-nearest neighbor or spatial joins are in our
plans too.

References

1. Alstrup, S., Brodal, G.S., Rauhe, T.: New data structures for orthogonal range
searching. In: 41st Symp. on Foundations of Computer Science, pp. 198–207 (2000)
2. Bose, P., He, M., Maheshwari, A., Morin, P.: Succinct orthogonal range search structures 
on a grid with applications to text indexing. In: Dehne, F.K.H.A., Gavrilova,
M.L., Sack, J.-R., T´oth, C.D. (eds.) WADS 2009. LNCS, vol. 5664, pp. 98–109 (2009)
3. Brisaboa, N.R., Luaces, M.R., Navarro, G., Seco, D.: A new point access method
based on wavelet trees. In: Heuser, C.A., Pernul, G. (eds.) ER 2009 Workshops.
LNCS, vol. 5833, pp. 297–306. Springer, Heidelberg (2009)

4. Gabow, H.N., Bentley, J.L., Tarjan, R.E.: Scaling and related techniques for geometry 
problems. In: Proceedings of the 16th Annual ACM Symposium on Theory of
Computing, pp. 135–143. ACM Press, New York (1984)

5. Gaede, V., Gunther, O.: Multidimensional access methods. ACM Computing Surveys 
30(2), 170–231 (1998)

6. Global Spatial Data Infrastructure Association, http://www.gsdi.org/
7. Gonz´alez, R., Grabowski, S., M¨akinen, V., Navarro, G.: Practical implementation of
rank and select queries. In: Poster Proceedings Volume of 4th Workshop on Eﬃcient
and Experimental Algorithms, pp. 27–38. CTI Press and Ellinika Grammata (2005)
8. Gonz´alez, R., Navarro, G.: Rank/select on dynamic compressed sequences and

applications. Theoretical Computer Science 410, 4414–4422 (2008)

9. Jones, C.B., Purves, R.S.: Geographical information retrieval. International Journal

of Geographical Information Science 22(3), 219–228 (2008)

10. Kim, K., Cha, S.K., Kwon, K.: Optimizing multidimensional index trees for main

memory access. SIGMOD Record 30(2), 139–150 (2001)

11. Manolopoulos, Y., Nanopoulos, A., Papadopoulos, A.N., Theodoridis, Y.: R-Trees:

Theory and Applications. Springer, Heidelberg (2005)

12. Salomon, D.: Data Compression: The Complete Reference. Springer, Heidelberg

(2004)

13. Samet, H.: Multidimensional and Metric Data Structures. Morgan Kaufmann, San

Francisco (2006)

14. Schmidt, J.M.: Interval stabbing problems in small integer ranges. In: Dong, Y.,
Du, D.-Z., Ibarra, O. (eds.) ISAAC 2009. LNCS, vol. 5878, pp. 163–172. Springer,
Heidelberg (2009)

