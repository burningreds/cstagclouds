Average-Optimal Multiple Approximate String

Matching

Kimmo Fredriksson1(cid:1) and Gonzalo Navarro2(cid:1)(cid:1)

1 Department of Computer Science, University of Joensuu

kfredrik@cs.joensuu.fi

2 Department of Computer Science, University of Chile

gnavarro@dcc.uchile.cl

Abstract. We present a new algorithm for multiple approximate string
matching, based on an extension of the optimal (on average) singlepattern 
approximate string matching algorithm of Chang and Marr. Our
algorithm inherits the optimality and is also competitive in practice.
We present a second algorithm that is linear time and handles higher
diﬀerence ratios. We show experimentally that our algorithms are the
fastest for intermediate diﬀerence ratios, an area where the only existing 
algorithms permitted simultaneous search for just a few patterns.
Our algorithm is also resistant to the number of patterns, being eﬀective
for hundreds of patterns. Hence we ﬁll an important gap in approximate 
string matching techniques, since no eﬀective algorithms existed to
search for many patterns with an intermediate diﬀerence ratio.

1 Introduction

Approximate string matching is one of the main problems in classical string
algorithms, with applications to text searching, computational biology, pattern
recognition, etc. Given a text T1...n, a pattern P1...m, and a maximal number of
diﬀerences permitted, k, we want to ﬁnd all the text positions where the pattern
matches the text up to k diﬀerences. The diﬀerences can be substituting, deleting
or inserting a character. We call α = k/m the diﬀerence ratio, and σ the size
of the alphabet Σ. For the average case analyses it is customary to assume a
random text over a uniformly distributed alphabet.

A natural extension to the basic problem consists of multipattern searching,
that is, searching for r patterns P 1 . . . P r simultaneously in order to report all
their occurrences with at most k diﬀerences. This has also several applications
such as virus and intrusion detection, spelling applications, text retrieval under
synonym or thesaurus expansion, several problems in computational biology,
batch processing of single-pattern approximate searching, etc. Moreover, some
single-pattern approximate search algorithms resort to multipattern searching of
(cid:1) Work developed while the author was working in the Dept. of Computer Science,

University of Helsinki. Supported by the Academy of Finland.

(cid:1)(cid:1) Partially supported by Fondecyt grant 1-020831.

R. Baeza-Yates et al. (Eds.): CPM 2003, LNCS 2676, pp. 109–128, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

110

K. Fredriksson and G. Navarro

pattern pieces. Multidimensional search problems can also be reduced to string
matching. Depending on the application, r may vary from a few to thousands of
patterns. The naive approach is to perform r separate searches, so the goal is to
do better.

The single-pattern problem has received a lot of attention since the sixties [8].
After the ﬁrst dynamic-programming-based O(mn) time solution to the problem
[11], many faster techniques have been proposed, both for the worst and the
average case. In 1994, Chang and Marr [3] showed that the average complexity
√
of the problem is O((k +logσ m)n/m), and gave an algorithm that achieved that
average-optimal cost for α < 1/3 − O(1/

σ).

The multipattern problem has received much less attention, not because of
lack of interest but because of its diﬃculty. There exist algorithms that search
permitting only k = 1 diﬀerence [6], and algorithms that handle either too few
patterns or too low diﬀerence ratios [2].

Hence multiple approximate string matching is a rather undeveloped area.
No algorithm exists when one searches for more than a few of patterns with
intermediate diﬀerence ratios. Moreover, as the number of patterns grows, the
diﬀerence ratios that can be handled get reduced.

The goal of this paper is to present an algorithm that is optimal on the
average and that permits searching even for thousands of patterns with low
and intermediate diﬀerence ratios, thus ﬁlling an important gap in the area.
We build over an average-optimal algorithm that searches for single patterns
[3] and inherit its optimality, obtaining O(n(k + logσ(rm))/m) average search
time. We show that the algorithm is not only theoretically appealing but also
good in practice thanks to several practical improvements we introduce. Since
the algorithm does not work for diﬀerence ratios beyond 1/3, we introduce a
second, O(n) average time variant that reaches ratios of 1/2. The algorithms
are shown to be the fastest for a wide range of values of m, r and k, for small
alphabets, see Sec. 6.

2 Related Work

2.1 Multiple Approximate String Matching

The naive approach to multipattern approximate searching is to perform r separate 
searches, one per pattern. If we use the optimal single-pattern algorithm [3],
the average search time becomes O((k + logσ m)rn/m) for the naive approach.
On the other hand, if we use the classical O(mn) algorithm [11] the time is
O(rmn).

Few algorithms exist for multipattern approximate searching under the k
diﬀerences model. The ﬁrst one, based on hashing, was presented by Muth and
Manber [6]. It permits searching with k = 1 diﬀerences only, but is rather tolerant
to the number of patterns r, which can reach the thousands without aﬀecting
much the cost of the search. The preprocessing time is O(rm) and the average
search time is O(mn(1 + rm2/M)), where M is the size of the hash table. This

