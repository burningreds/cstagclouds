Fast Regular Expression Search

Gonzalo Navarro1 and Mathieu Ra(cid:14)not2

1 Dept. of Computer Science, University of Chile. Blanco Encalada 2120, Santiago,

Chile

gnavarro@dcc.uchile.cl

Partially supported by Fondecyt grant 1-990627.

2 Institut Gaspard Monge, Cit(cid:19)e Descartes, Champs-sur-Marne, 77454

Marne-la-Vall(cid:19)ee Cedex 2, France
raffinot@monge.univ-mlv.fr

Abstract. We present a new algorithm to search regular expressions,
which is able to skip text characters. The idea is to determine the minimum 
length ‘ of a string matching the regular expression, manipulate
the original automaton so that it recognizes all the reverse pre(cid:12)xes of
length up to ‘ of the strings accepted, and use it to skip text characters
as done for exact string matching in previous work. As we show experimentally,
 the resulting algorithm is fast, the fastest one in many cases
of interest.

1 Introduction

The need to search for regular expressions arises in many text-based applications,
such as text retrieval, text editing and computational biology, to name a few.
A regular expression is a generalized pattern composed of (i) basic strings, (ii)
union, concatenation and Kleene closure of other regular expressions. Readers
unfamiliar with the concept and terminology related to regular expressions are
referred to a classical book such as [1].

The traditional technique [16] to search a regular expression of length m in
a text of length n is to convert the expression into a nondeterministic (cid:12)nite
automaton (NFA) with O(m) nodes. Then, it is possible to search the text using
the automaton at O(mn) worst case time. The cost comes from the fact that
more than one state of the NFA may be active at each step, and therefore all
may need to be updated. A more e(cid:14)cient choice [1] is to convert the NFA into a
deterministic (cid:12)nite automaton (DFA), which has only one active state at a time
and therefore allows to search the text at O(n) cost, which is worst-case optimal.
The problem with this approach is that the DFA may have O(2m) states, which
implies a preprocessing cost and extra space exponential in m.

Some techniques have been proposed to obtain a good tradeo(cid:11) between both
extremes. In 1992, Myers [13] presented a four-russians approach which obtains
O(mn= log n) worst-case time and extra space. The idea is to divide the syntax
tree of the regular expression into \modules", which are subtrees of a reasonable
size. These subtrees are implemented as DFAs and are thereafter considered as

J.S. Vitter and C.D. Zaroliagis (Eds.): WAE’99, LNCS 1668, pp. 198{212, 1999.
c(cid:13) Springer-Verlag Berlin Heidelberg 1999

Fast Regular Expression Search

199

leaf nodes in the syntax tree. The process continues with this reduced tree until
a single (cid:12)nal module is obtained.

The DFA simulation of modules is done using bit-parallelism, which is a
technique to code many elements in the bits of a single computer word and
manage to update all them in a single operation. In this case, the vector of
active and inactive states is stored as bits of a computer word. Instead of (ala
Thompson [16]) examining the active states one by one, the whole computer word
is used to index a table which, together with the current text character, provides
the new set of active states (another computer word). This can be considered
either as a bit-parallel simulation of an NFA, or as an implementation of a DFA
(where the identi(cid:12)er of each deterministic state is the bit mask as a whole).

Pushing even more on this direction, we may resort to pure bit-parallelism
and forget about the modules. This was done in [19] by Wu and Manber, and
included in their software Agrep [18]. A computer word is used to represent
the active (1) and inactive (0) states of the NFA. If the states are properly
arranged and the Thompson construction [16] is used, all the arrows carry 1’s
from bit positions i to i + 1, except for the (cid:15)-transitions. Then, a generalization
of Shift-Or [3] (the canonical bit-parallel algorithm for exact string matching)
is presented, where for each text character two steps are performed. First, a
forward step moves all the 1’s that can move from a state to the next one,
and second, the (cid:15)-transitions are carried out. As (cid:15)-transitions follow arbitrary
paths, an E : 2m ! 2m function is precomputed and stored, where E(w) is
the (cid:15)-closure of w. Possible space problems are solved by splitting this table
\horizontally" (i.e. less bits per entry) in as many subtables as needed, using the
fact that E(w1w2) = E(w1) or E(w2). This can be thought of as an alternative
decomposition scheme, instead of Myers’ modules.

The ideas presented up to now aim at a good implementation of the automaton,
 but they must inspect all the text characters. In many cases, however, the
regular expression involves sets of relatively long substrings that must appear
for the regular expression to match. In [17, chapter 5], a multipattern search
algorithm is generalized to regular expression searching, in order to take advantage 
of this fact. The resulting algorithm (cid:12)nds all su(cid:14)xes (of a predetermined
length) of words in the language denoted by the regular expression and uses
the Commentz-Walter algorithm [7] to search them. Another technique of this
kind is used in Gnu Grep v2.0, which extracts a single string (the longest) which
must appear in any match. This string is searched for and the neighborhoods
of its occurrences are checked for complete matches using a lazy deterministic
automaton. Note that it is possible that there is no such single string, in which
case the scheme cannot be applied.

In this paper, we present a new regular expression search algorithm able to
skip text characters. It is based on extending BDM and BNDM [9,14]. These
are simple pattern search algorithms whose main idea is to build an automaton
able to recognize the reverse pre(cid:12)xes of the pattern, and examine backwards a
window of length m on the text. This automaton helps to determine (i) when
it is possible to shift the window because no pattern substring has been seen,

