Algorithms for Transposition Invariant String

Matching

(Extended Abstract)

Veli M¨akinen1(cid:1), Gonzalo Navarro2(cid:1)(cid:1), and Esko Ukkonen1(cid:1)

1 Department of Computer Science, P.O Box 26 (Teollisuuskatu 23)

FIN-00014 University of Helsinki, Finland.
{vmakinen,ukkonen}@cs.helsinki.fi

2 Center for Web Research, Department of Computer Science, University of Chile

Blanco Encalada 2120, Santiago, Chile. gnavarro@dcc.uchile.cl

Abstract. Given strings A and B over an alphabet Σ ⊆ U, where
U is some numerical universe closed under addition and subtraction,
and a distance function d(A, B) that gives the score of the best (par-
tial) matching of A and B, the transposition invariant distance is
mint∈U{d(A + t, B)}, where A + t = (a1 + t)(a2 + t) . . . (am + t). We
study the problem of computing the transposition invariant distance for
various distance (and similarity) functions d, that are diﬀerent versions
of the edit distance. For all these problems we give algorithms whose time
complexities are close to the known upper bounds without transposition
invariance. In particular, we show how sparse dynamic programming can
be used to solve transposition invariant problems.

1 Introduction

Transposition invariant string matching is the problem of matching two strings
when all the characters of either of them can be “shifted” by some amount t.
By “shifting” we mean that the strings are sequences of numbers and we add or
subtract t from each character of one of them.

Interest in transposition invariant string matching problems has recently
arisen in the ﬁeld of music information retrieval (MIR) [2,11,12]. In music analysis 
and retrieval, one often wants to compare two music pieces to test how similar
they are. A reasonable way of modeling music is to consider the pitches and durations 
of the notes. Often the durations are omitted, too, since it is usually
possible to recognize the melody from a sequence of pitches. In this paper, we
study distance measures for pitch sequences (of monophonic music) and their
computation.

In general, edit distance measures can be used for matching two pitch sequences.
 There are, however, a couple of properties related to music that should
(cid:1) Supported by the Academy of Finland under grant 22584.
(cid:1)(cid:1) Supported by Millenium Nucleus Center for Web Research, Grant P01-029-F, Mideplan,
 Chile.

H. Alt and M. Habib (Eds.): STACS 2003, LNCS 2607, pp. 191–202, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003

192

V. M¨akinen, G. Navarro, and E. Ukkonen

be taken into account. Transposition invariance is one of those; the same melody
is perceived even if the pitch sequence is shifted from one key to another. Another 
property is the continuity of the alignment; the size of the gaps between
matches should be limited, since one long gap in a central part can make a crucial 
diﬀerence in perception. Small gaps should be accepted, e.g. for removing
“decorative” notes.

We study how these two properties can be embedded in evaluating the edit

distance measures. The summary of our results is given in Section 3.

In the full version of this paper [15] we also study non-gapped measures
of similarity under transposition invariance (like Hamming distance), that have
other applications besides MIR. Also a more error-tolerant version of edit distances 
is studied there, where two characters can match if their distance is at
most a given constant δ.

2 Deﬁnitions

(cid:3)(cid:3) (cid:2) A, if A

Let Σ be a ﬁnite numerical alphabet, which is a subset of some universe U that is
closed under addition and subtraction. Let A = a1a2 . . . am and B = b1b2 . . . bn
∗, i.e. the symbols (characters) ai, bj of the two strings are
be two strings over Σ
in Σ for all 1 ≤ i ≤ m, 1 ≤ j ≤ n. We will assume w.l.o.g. that m ≤ n, since
(cid:3) is a substring of A
the distance measures we consider are symmetric. String A
(cid:3) = Ai...j = ai . . . aj for some 1 ≤ i ≤ j ≤ m. String A
(cid:3)(cid:3) is a subsequence of
if A
(cid:3)(cid:3) = ai1ai2 . . . ai|A(cid:1)(cid:1)| for some indexes 1 ≤ i1 < i2 <
A, denoted by A
··· < i|A(cid:1)(cid:1)| ≤ m.
The following measures can be deﬁned. The length of the longest common
subsequence (LCS) of A and B is lcs(A, B) = max{|S| | S (cid:2) A, S (cid:2) B}. The edit
distance [13,18,16] between A and B is the minimum number of edit operations
that are needed to convert A into B. Particularly, in the unit cost Levenshtein
distance dL the set of edit operations consists of insertions  → b, deletions
a → , and substitutions a → b (a (cid:4)= b) of one alphabet symbol; here a, b ∈ Σ, 
is the empty string, and identity operations (matches) a → a are not charged. If
the substitution operation is forbidden, we get a distance dID, which is actually
a dual problem of evaluating the LCS; it is easy to see that dID(A, B) = m +
n − 2 · lcs(A, B). For convenience, we will mainly use the minimization problem
dID (not lcs) in the sequel. If only deletion for symbols of B are allowed, we get
a distance dD.
String A is a transposed copy of B (denoted by A =t B) if B = (a1 + t)(a2 +
t)··· (am + t) = A + t for some t ∈ U. Deﬁnitions for a transposed substring and
a transposed subsequence can be stated similarly. The transposition invariant
versions of the above distance measures d∗ where ∗ ∈ {L, ID, D} can now be
deﬁned as dt∗(A, B) = mint∈U d∗(A + t, B).

We also deﬁne α–limited versions of the edit distance measures, where the
distance (gap) between two consecutive matches is limited by a constant α > 0,
i.e. if (ai(cid:1), bj(cid:1)) and (ai, bj) are consecutive matches, then |i − i
(cid:3) − 1| ≤ α and
|j − j

(cid:3) − 1| ≤ α. We get distances dt,α

L , dt,α

ID , and dt,α
D .

