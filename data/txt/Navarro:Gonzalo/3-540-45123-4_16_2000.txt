Boyer{Moore String Matching over Ziv-Lempel

Compressed Text

Gonzalo Navarro1? and Jorma Tarhio2??

1 Dept. of Computer Science, University of Chile

2 Dept. of Computer Science, University of Joensuu, Finland

gnavarro@dcc.uchile.cl

tarhio@cs.joensuu.fi

Abstract. We present a Boyer{Moore approach to string matching over
LZ78 and LZW compressed text. The key idea is that, despite that we
cannot exactly choose which text characters to inspect, we can still use
the characters explicitly represented in those formats to shift the pattern 
in the text. We present a basic approach and more advanced ones.
Despite that the theoretical average complexity does not improve because 
still all the symbols in the compressed text have to be scanned, we
show experimentally that speedups of up to 30% over the fastest previous 
approaches are obtained. Moreover, we show that using an encoding
method that sacri(cid:12)ces some compression ratio our method is twice as
fast as decompressing plus searching using the best available algorithms.

1 Introduction

The string matching problem is de(cid:12)ned as follows: given a pattern P = p1 : : : pm
and a text T = t1 : : : tu, (cid:12)nd all the occurrences of P in T , i.e. return the set
fjxj; T = xP yg. The complexity of this problem is O(u) in the worst case and
O(u log(cid:27)(m)=m) on average (where (cid:27) is the size of the alphabet (cid:6)), and there
exist algorithms achieving both time complexities using O(m) extra space [3,6].
A particularly interesting case of string matching is related to text compression.
 Text compression [4] tries to exploit the redundancies of the text to
represent it using less space. There are many di(cid:11)erent compression schemes,
among which the Ziv-Lempel family [23,24] is one of the best in practice because 
of their good compression ratios combined with e(cid:14)cient compression and
decompression time.

The compressed matching problem was (cid:12)rst de(cid:12)ned in the work of Amir
and Benson [1] as the task of performing string matching in a compressed text
without decompressing it. Given a text T , a corresponding compressed string
Z = z1 : : : zn, and a pattern P , the compressed matching problem consists in
? Work developed during postdoctoral stay at the University of Helsinki, partially
supported by the Academy of Finland and Fundaci(cid:19)on Andes. Also supported by
Fondecyt grant 1-990627.

?? Supported in part by the Academy of Finland.

R. Giancarlo and D. Sanko(cid:11) (Eds.): CPM 2000, LNCS 1848, pp. 166{180, 2000.
c(cid:13) Springer-Verlag Berlin Heidelberg 2000

Boyer{Moore String Matching over Ziv-Lempel Compressed Text

167

(cid:12)nding all occurrences of P in T , using only P and Z. A naive algorithm, which
(cid:12)rst decompresses the string Z and then performs standard string matching,
takes time O(m+ u). An optimal algorithm takes worst-case time O(m+ n + R),
where R is the number of matches (note that it could be that R = u > n).

The compressed matching problem is important in practice. Today’s textual
databases are an excellent example of applications where both aspects of the
problem are crucial: the texts should be kept compressed to save space and I/O
time, and they should be e(cid:14)ciently searched. These two combined requirements
are not easy to achieve together, as the only solution before the 90’s was to
process queries by uncompressing the texts and then searching into them.

There exist a few works about searching on compressed text, which we cover
in the next section. The most promising ones run over the LZ78/LZW variants
of the LZ family. They have achieved a good O(m2 + n + R) worst case search
time, and there exist practical implementations able to search in less time than
that needed for decompression plus searching. All those works have concentrated
in the worst case.

However, Boyer{Moore type techniques, which are able to skip some characters 
in the text, have never been explored for searching compressed text. Our
work points in this direction. We present an application of Boyer{Moore techniques 
for string matching over LZ78/LZW compressed texts. The resulting algorithms 
are Ω(n) time on average, O(mu) time the worst case, and O(n) extra
space. This does not improve the existing complexities, but they are faster in
practice than all previous work for m (cid:21) 15, taking up to 30% less time than
the fastest existing implementation. We also present experiments showing that,
using an LZ78 encoder that sacri(cid:12)ces some compression ratio for decompression
speed, our algorithms are twice as fast as a decompression followed by a search
using the best algorithms for both tasks.

2 Related Work

Two di(cid:11)erent approaches exist to search compressed text. The (cid:12)rst one is rather
practical. E(cid:14)cient solutions based on Hu(cid:11)man coding [10] on words have been
presented in [16], but they need that the text contains natural language and
is large (say, 10 Mb or more). Moreover, they allow only searching for whole
words and phrases. There are also other practical ad-hoc methods [15], but
the compression they obtain is poor. Moreover, in these compression formats
n = (cid:2)(u), so the speedups can only be measured in practical terms.

The second line of research considers Ziv-Lempel compression, which is based
on (cid:12)nding repetitions in the text and replacing them with references to similar
strings previously appeared. LZ77 [23] is able to reference any substring of the
text already processed, while LZ78 [24] and LZW [20] reference only a single
previous reference plus a new letter that is added. String matching in Ziv-Lempel
compressed texts is much more complex, since the pattern can appear in di(cid:11)erent
forms across the compressed text. The (cid:12)rst algorithm for exact searching is from

