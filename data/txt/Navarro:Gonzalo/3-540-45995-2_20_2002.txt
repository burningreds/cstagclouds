A Metric Index for Approximate

String Matching(cid:1)

Edgar Ch´avez1(cid:1)(cid:1) and Gonzalo Navarro2

1 Escuela de Ciencias F´ısico-Matem´aticas, Universidad Michoacana.

Ediﬁcio “B”, Ciudad Universitaria, Morelia, Mich. M´exico 58000.

2 Depto. de Ciencias de la Computaci´on, Universidad de Chile.

elchavez@fismat.umich.mx

Blanco Encalada 2120, Santiago, Chile.

gnavarro@dcc.uchile.cl

Abstract. We present a radically new indexing approach for approximate 
string matching. The scheme uses the metric properties of the edit
distance and can be applied to any other metric between strings. We
build a metric space where the sites are the nodes of the suﬃx tree of
the text, and the approximate query is seen as a proximity query on that
metric space. This permits us ﬁnding the R occurrences of a pattern of
length m in a text of length n in average time O(m log2 n+m2 +R), using
O(n log n) space and O(n log2 n) index construction time. This complexity 
improves by far over all other previous methods. We also show a
simpler scheme needing O(n) space.

1 Introduction and Related Work

Indexing text to permit eﬃcient approximate searching on it is one of the
main open problems in combinatorial pattern matching. The approximate string
matching problem is: Given a long text T of length n, a (comparatively short)
pattern P of length m, and a threshold r, retrieve all the pattern occurrences,
that is, text substrings whose edit distance to the pattern is at most r. The edit
distance between two strings is deﬁned as the minimum number of character insertions,
 deletions and substitutions needed to make them equal. This distance
is used in many applications, but several other distances are of interest.

In the on-line version of the problem, the pattern can be preprocessed but
the text cannot. There are numerous solutions to this problem [25], but none
is acceptable when the text is too long since the search time is proportional
to the text length. Indexing text for approximate string matching has received
attention only recently. Despite some progress in the last decade, the indexing
schemes for this problem are still rather immature.

There exist some indexing schemes specialized to word-wise searching on
natural language text [21,3]. These indexes perform quite well in that case but

(cid:1) Supported by CYTED VII.19 RIBIDI project (both authors), CONACyT grant

36911 (ﬁrst author), and Fondecyt grant 1-000929 (second author).

(cid:1)(cid:1) On leave of absence at Universidad de Chile.

S. Rajsbaum (Ed.): LATIN 2002, LNCS 2286, pp. 181–195, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002

182

Edgar Ch´avez and Gonzalo Navarro

they cannot be extended to handle the general case. Extremely important applications 
such as DNA, proteins, music or oriental languages fall outside this
case.

The indexes that solve the general problem can be divided into three classes.
Backtracking [17,34,11,15] uses the suﬃx tree [2], suﬃx array [20] or DAWG [12]
of the text in order to factor out its repetitions. A sequential algorithm on the
text is simulated by backtracking on the data structure. These algorithms take
time exponential on m or r but in many cases independent of n, the text size.
This makes them attractive when searching for very short patterns.

Partitioning [31,30,5] partitions the pattern into pieces to ensure that some
of the pieces must appear without alterations inside every occurrence. An index
able of exact searching is used to detect the pieces and the text areas that
have enough evidence of containing an occurrence are checked with a sequential
algorithm. These algorithms work well only when r/m is small.

The third class [24,6] is a hybrid between the other two. The pattern is
divided into large pieces that can still contain (less) errors, they are searched
for using backtracking, and the potential text occurrences are checked as in the
partitioning methods. The hybrid algorithms are more eﬀective because they
can ﬁnd the right point between length of the pieces to search for and error
level permitted. Using the appropriate partition of the pattern, these methods
achieve on average O(nλ) search time, for some 0 < λ < 1 that depends on r.
They tolerate moderate error ratios r/m.

We propose in this paper a brand new approach to the problem. We take into
account that the edit distance satisﬁes the triangle inequality and hence it deﬁnes
a metric space on the set of text substrings. We can re-express the approximate
search problem as a range search problem on this metric space. This approach
has been attempted before [8,4], but in those cases the particularities of the
problem made it possible to index O(n) elements. In the general case we have
O(n2) text substrings.

The main contribution of this paper is to devise a method (based on the sufﬁx 
tree of the text) to meaningfully collapse the O(n2) text substring into O(n)
sets, and to ﬁnd a way to build a metric space out of those sets. The result is an
indexing method that, at the cost of requiring on average O(n log n) space and
O(n log2 n) construction time, permits ﬁnding the R approximate occurrences of
the pattern in O(m log2 n + m2 + R) average time. This is a complexity breakthrough 
over previous work, and it is easier than in other approaches to extend
the idea to other distance functions such as reversals. Moreover, it represents
an original approach to the problem that opens a vast number of possibilities
for improvements. We consider also a simpler version of the index needing O(n)
space and that, despite not involving a complexity breakthrough, promises to be
better in practice.
We use the following notation in the paper. Given a string s ∈ Σ∗ we denote
its length as |s|. We also denote si the i-th character of s, for an integer i ∈
{1..|s|}. We denote si...j = sisi+1 . . . sj (which is the empty string if i > j) and

