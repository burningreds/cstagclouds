A New Indexing Method

for Approximate String Matching?

Gonzalo Navarro and Ricardo Baeza-Yates

Dept. of Computer Science, University of Chile

Blanco Encalada 2120 - Santiago - Chile
fgnavarro,rbaezag@dcc.uchile.cl

Abstract. We present a new indexing method for the approximate
string matching problem. The method is based on a su(cid:14)x tree combined
with a partitioning of the pattern. We analyze the resulting algorithm
p
and show that the retrieval time is O(n(cid:21)), for 0 < (cid:21) < 1, whenever
(cid:11) < 1 − e=
(cid:27), where (cid:11) is the error level tolerated and (cid:27) is the alphabet
size. We experimentally show that this index outperforms by far all other
algorithms for indexed approximate searching, also being the (cid:12)rst experiments 
that compare the di(cid:11)erent existing schemes. We (cid:12)nally show how
this index can be implemented using much less space.

1 Introduction

Approximate string matching is a recurrent problem in many branches of computer 
science, with applications to text searching, computational biology, pattern
recognition, signal processing, etc.

The problem is: given a long text of length n, and a (comparatively short)
pattern of length m, retrieve all the text segments (or \occurrences") whose edit
distance to the pattern is at most k. The edit distance between two strings is de-
(cid:12)ned as the minimum number of character insertions, deletions and replacements
needed to make them equal. We de(cid:12)ne the \error level" as (cid:11) = k=m.

In the on-line version of the problem, the pattern can be preprocessed but
the text cannot. The classical solution uses dynamic programming and is O(mn)
time [27, 28]. A number of algorithms improved later this result [34, 20, 16, 11,
35, 32, 12, 30, 36, 9, 8, 24]. The lower bound of the on-line problem (proved and
reached in [12]) is O(n(k + log(cid:27) m)=m), which is of course Ω(n) for constant m.
If the text is large even the fastest on-line algorithms are not practical, and
preprocessing the text becomes necessary. However, just a few years ago, indexing 
text for approximate string matching was considered one of the main open
problems in this area [35, 3]. Despite some progress in the last years, the indexing
schemes for this problem are still rather immature.

There are two types of indexing mechanisms for approximate string matching,
 which we call \word-retrieving" and \sequence-retrieving". Word retrieving

? This work has been supported in part by Fondecyt grant 1-990627 and Fondef grant

96-1064.

M. Crochemore, M. Paterson (Eds.): CPM’99, LNCS 1645, pp. 163{185, 1999.
c(cid:13) Springer-Verlag Berlin Heidelberg 1999

164

Gonzalo Navarro and Ricardo Baeza-Yates

indices [22, 6, 2] are more oriented to natural language text and information
retrieval. They can retrieve every word whose edit distance to the pattern is at
most k. Hence, they are not able to recover from an error involving a separator,
such as recovering the word "flowers" from the misspelled text "flo wers"
or from "manyflowers", if we allow one error1. These indices are more mature,
but their restriction can be unacceptable in some applications, especially where
there are no words (as in DNA) or in agglutinating languages such as Finnish
or German.

Our focus in this paper is sequence retrieving indices. Among these, we (cid:12)nd

two types of approaches.

A (cid:12)rst type is based on simulating a sequential algorithm, but running it on
the su(cid:14)x tree [19, 1] or DAWG [14, 10] of the text instead of the text itself.
Since every di(cid:11)erent substring in the text is represented by a single node in the
tree or the DAWG, it is possible to avoid redoing the same work when the text
has repetitions. Those indices take O(n) space and construction time, but their
construction is not optimized for secondary memory and is very ine(cid:14)cient in
this case (see, however, [15]). Moreover, the structure is very ine(cid:14)cient in space
requirements, since it takes 12 to 70 times the text size.

In [18, 33, 13], di(cid:11)erent algorithms that traverse the least possible nodes in
the su(cid:14)x tree (or in the DAWG) are presented. The idea is to traverse all the
di(cid:11)erent tree nodes that represent \viable pre(cid:12)xes", which are text substrings
that can be pre(cid:12)xes of an approximate occurrence of the pattern.

In [17], a simpli(cid:12)ed version of the above technique was independently proposed,
 consisting of a limited depth-(cid:12)rst search (DFS) on the su(cid:14)x tree. Since
every substring of the text (i.e. every potential occurrence) can be found from
the root of the su(cid:14)x tree, it is su(cid:14)cient to explore every path starting at the
root, descending by every branch up to where it can be seen that that branch
does not represent the beginning of an occurrence of the pattern. This algorithm
inspects more nodes than the previous ones, but it is simpler. For instance, with
an additional O(log n) time factor, the algorithm runs on su(cid:14)x arrays, which
take 4 times the text size instead of 12. This algorithm was analyzed in [4].

The second type of sequence-retrieving indices is based on adapting an on-line
(cid:12)ltering algorithm. The (cid:12)lters are based in matching substrings of the patterns
without errors, and checking for potential occurrences around those matches.
The index is used to quickly (cid:12)nd those substrings, and is based on storing some
text q-grams (substrings of length q) and their positions in the text.

Di(cid:11)erent (cid:12)ltration indices [23, 31, 29, 7] di(cid:11)er mostly in how the text is
sampled (distance between consecutive text samples, whether they overlap or
not, etc.), in how the pattern is sampled, in how many matching samples are
needed to verify their neighborhood in the text, etc. Depending on this and on
q they achieve di(cid:11)erent space-time tradeo(cid:11)s. In general, (cid:12)ltration indices are
much smaller than su(cid:14)x trees (1 to 10 times the text size), although they are
less tolerant to the error level (cid:11). They can also be built in linear time.

1 Although some, like Glimpse [22], can match the pattern inside a text word.

