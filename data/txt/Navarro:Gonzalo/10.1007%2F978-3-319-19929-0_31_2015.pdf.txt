Reporting Consecutive Substring Occurrences

Under Bounded Gap Constraints

Gonzalo Navarro1(B) and Sharma V. Thankachan2

1 Center of Biotechnology and Bioengineering, Department of Computer Science,

University of Chile, Santiago, Chile

gnavarro@dcc.uchile.cl

2 School of Computational Science and Engineering,

Georgia Institute of Technology, Atlanta, USA

sharma.thankachan@gatech.edu

Abstract. We study the problem of indexing a text T [1 . . . n] such that
whenever a pattern P [1 . . . p] and an interval [α, β] comes as a query,
we can report all pairs (i, j) of consecutive occurrences of P in T with
α ≤ j − i ≤ β. We present an O(n log n) space data structure with
optimal O(p + k) query time, where k is the output size.

1 Introduction

Detecting consecutive occurrences of a pattern in a text is a problem that arises,
in various forms, in computational biology applications [1–3]. For example, a
tandem repeat is an occurrence of the form P P of a given string P [1 . . . p] inside
a sequence T [1 . . . n]. Due to mutations and experimental errors, one may relax
the condition that the occurrences appear exactly one after the other, and allow
for a small range of distances between the two occurrences of P [1, Sect. 9.2].
Other variants of the problem are to ﬁnd P closely followed by its reverse complemented 
version in tRNA sequences, which is useful to identify the positions
where the tRNA molecule folds into a cloverleaf structure deﬁned by stems (the
two occurrences of P ) and loops (the string between them) [1, Sect. 11.9, Example 
42]; this process is also called RNA interference [2, Sect. 6.4].

Several related combinatorial problems stem from these motivations. For
example, Iliopoulos and Rahman [4] consider the problem of ﬁnding all the
k occurrences of two patterns P1 and P2 (of total length p) separated by a
ﬁxed distance α known at indexing time. They gave a data structure using
O(n log n) space and query time O(p + log log n + k), for any constant  > 0.
Bille and Gørtz [5] retained the same space and improved the time to the optimal
O(p + k).1 The problem becomes, however, much messier when we allow the distance 
between P1 and P2 to be in a range [α, β], even if these are still known at
indexing time. Bille et al. [6] obtained various tradeoﬀs, for example O(n) space
and O(p + σβ log log n + k) time, where σ is the alphabet size; O(n log n logβ n)

G. Navarro—Funded with Basal Funds FB0001, Conicyt, Chile.

1 This is optimal in the RAM model if we assume a general alphabet of size O(n).
c(cid:2) Springer International Publishing Switzerland 2015
F. Cicalese et al. (Eds.): CPM 2015, LNCS 9133, pp. 367–373, 2015.
DOI: 10.1007/978-3-319-19929-0 31

368

G. Navarro and S.V. Thankachan

space and O(p + (1 + )β log log n + k) time; and O(σβ2n logβ log n) space and
O((p + β)(β − α) + k) time.

These problems, however, are more general than necessary for the applications 
we described, where P1 = P2 = P (or P2 is the reverse complement of
P1, a case that can be handled in the solution we will give). For this case, some
related problems have been studied. Keller et al. [7] considered the problem of,
given an occurrence of P in T , ﬁnd the next one to the right. They obtained
an index using O(n log n) space and O(log log n) time. Another related problem 
they studied was to ﬁnd a maximal set of nonoverlapping occurrences of
P . They obtained the same space and O(log log n + k) time. Muthukrishnan [8]
considered a document-based version of the problem: T is divided into documents,
 and we want to report all the k documents where two occurrences of P
appear at distance at most β. For β ﬁxed at indexing time, he obtained O(n)
space and optimal O(p + k) time; the space raises to O(n log n) when β is given
as a part of the query. Finally, Brodal et al. [9] considered the related pattern
mining problem: ﬁnd all the z maximal patterns P that appear at least twice
in T , separated by a distance in [α, β]. They obtain O(n log n + z) time, within
O(n) space.

In this paper we focus on what is perhaps the cleanest variant of the problem,
which (somewhat surprisingly) has not been considered before: ﬁnd the positions
in T where two occurrences of P appear, separated by a distance in the range
[α, β]. It is formally stated as follows.

Problem 1. Index a text T [1 . . . n], such that whenever a pattern P [1 . . . p] and
a range [α, β] comes as a query, we can report all pairs (i, j) of consecutive
occurrences of P in T with α ≤ j − i ≤ β.
We obtain the following result.

Theorem 1. There exists an O(n log n) space data structure with query time
O(p + k) for Problem 1, where k is the output size.

Our solution makes use of heavy-path decompositions on suﬃx trees and geometric 
data structures. In the Conclusions we comment on the implications of
this result on related problems.

2 Notation and Preliminaries
The ith leftmost character of T is denoted by T [i], where 1 ≤ i ≤ n. The substring 
starting at location i and ending at location j is denoted by T [i . . . j].
A suﬃx is a substring that ends at location n and a preﬁx is a string that starts
at location 1.
The suﬃx tree (ST) of T is a compact representation of all suﬃxes of T ◦ $ ,
except $, in the form of a compact trie [10]. Here $ a special symbol that does not
appear anywhere in T and T◦ $ is the concatenation of T and $. The number
of leaves in ST is exactly n. The degree of an internal node is at least two.

Reporting Consecutive Substring Occurrences

369

We use (cid:6)i to represent the ith leftmost leaf in ST. The edges are labeled with
characters and the concatenation of edge labels on the path from root to a node
u is denoted by path(u). Then, path((cid:6)i) corresponds to the ith lexicographically
smallest suﬃx of T , and its starting position is denoted by SA[i]. The locus of a
pattern P in T , denoted by locus(P ), is the highest node u in ST, such that P is
a preﬁx of path(u). The set of occurrences of P in T is given by SA[i] over all i’s,
where (cid:6)i is in the subtree of locus(P ). The space occupied by ST is O(n) words
and the time for ﬁnding the locus of an input pattern P is O(|P|). Additionally,
for two nodes u and v, we shall use lca(u, v) to denote their lowest common
ancestor.

We now describe the concept of heavy path and heavy path decomposition. The
heavy path of ST is the path starting from the root, where each node u on the
path is the child with the largest subtree size (ties broken arbitrary). The heavy
path decomposition is the operation where we decompose each oﬀ-path subtree
of the heavy path recursively. As a result, any path(·) in ST will be partitioned
into disjoint heavy paths. Sleator and Tarjan [11] proved the following property;
we will use log n to denote logarithm in base 2.

Lemma 1. The number of heavy paths intersected by any root to leaf path is at
most log n, where n is the number of leaves in the tree.

Each node belongs to exactly one heavy path and each heavy path contains
exactly one leaf node. The heavy path containing (cid:6)i will be called the i-th heavy
path (and identiﬁed simply by the number i). For an internal node u, let hp(u)
be the unique heavy path that contains u.
Deﬁnition 1. The set Hi is deﬁned as the set of all leaf identiﬁers j, where
the path from root to (cid:6)j intersects with the i-th heavy path. That is, Hi = {j |
hp(lca((cid:6)j, (cid:6)i)) = i}.
Lemma 2.

i=i |Hi| ≤ n log n.
(cid:2)n

Proof. For any particular j, path from root to (cid:6)j can intersect at most log n
heavy paths, by Lemma 1. Therefore, j cannot be a part of more than log n sets.
(cid:2)

3 The Data Structure

The key idea is to reduce our pattern matching problem to an equivalent geometric 
problem. Speciﬁcally, to the orthogonal segment intersection problem.

i, yi) is a line connecting the 2D points (xi, yi) and (x(cid:3)

Deﬁnition 2 (Orthogonal Segment Intersection). A horizontal segment
(xi, x(cid:3)
i, yi). A segment
intersection problem asks to pre-process a given set S of horizontal segments
into a data structure, such that whenever a vertical segment (x(cid:3)(cid:3), y(cid:3), y(cid:3)(cid:3)) comes
as a query, we can eﬃciently report all the horizontal segments in S that
intersect with the query segment. Speciﬁcally, we can output the following set:
{(xi, x(cid:3)

i, yi) ∈ S | xi ≤ x(cid:3)(cid:3) ≤ x(cid:3)

i, y(cid:3) ≤ yi ≤ y(cid:3)(cid:3)}.

370

G. Navarro and S.V. Thankachan

There exists an O(|S|) space and O(log |S| + k) time solution for segment intersection 
problem using a persistent binary tree, where k is the output size [12].
We now proceed to describe the reduction.

3.1 Reduction

One of the main components of our data structure is the suﬃx tree ST of T , and
is used only for ﬁnding the locus of P . Based on the heavy path on which the
locus node is, we categorize the queries in diﬀerent types.

Deﬁnition 3. A query with input pattern P is type-h if h = hp(locus(P )).

Let Gh be the data structure handling type-h queries, where Gh is a structure
over a set I h of horizontal segments, that can eﬃciently answer segment intersection 
queries. The set I h is generated from Hh using the following steps for
each j ∈ Hh:
1. Let Pj = path(lca((cid:6)h, (cid:6)j)).
2. Let suc(j) be the ﬁrst occurrence of Pj after the position SA[j] in T and let
pre(j) be the last occurrence of Pj before the position SA[j] in T . Clearly,
neither in [(pre(j) + 1) . . . (SA[j] − 1)], nor in [(SA[j] + 1) . . . (suc(j) − 1)], Pj
has an occurrence.
(a) Let P (cid:3)

3. Now, obtain two segments w.r.t. j as follows:

j be the shortest preﬁx of Pj without any occurrence in [(pre(j) +
j|,|Pj|, SA[j] −
1) . . . (SA[j] − 1)]. Then, create segment (xi, x(cid:3)
pre(j)) and associate the pair (pre(j), SA[j]) of consecutive occurrences
of Pj as satellite information.
in [(SA[j] + 1) . . . (suc(j) − 1)]. Then, create segment (xi, x(cid:3)
(|P (cid:3)(cid:3)
consecutive occurrences of Pj as satellite information.

j be the shortest preﬁx of Pj without any occurrence
i, yi) =
j |,|Pj|, suc(j) − SA[j]) and associate it to the pair (SA[j], suc(j)) of

i, yi) = (|P (cid:3)

(b) Similarly, let P (cid:3)(cid:3)

Clearly, |I h| = 2|Hh|. The central idea of our solution is summarized below.
Figure 1 illustrates the idea.

Lemma 3. Let P and [α, β] be the input parameters of a query in problem 1 and
let h = hp(locus(P )). Then, the set of satellite information associated with all
those horizontal segments in I h, which are stabbed by a vertical segment (p, α, β)
(i.e., the segment connecting the points (p, α) and (p, β)) forms the output to
Problem 1.

Proof. First we prove that any satellite information (a, b) reported by the geometric 
query on Gh is an answer to the original query. Let [s, e] be the x-interval
corresponding to the reported satellite information (a, b). Then, s ≤ p ≤ e and
α ≤ b − a ≤ β. Here the condition e ≥ p ensures that both (cid:6)SA−1[a] and (cid:6)SA−1[b]
are leaves in the subtree of locus(P ). Therefore a and b are occurrences of P .
The condition s ≤ p ensures that there exists no occurrence of P in any location

Reporting Consecutive Substring Occurrences

371

P’j

locus(   )P

P
j

j

a

Pj

h

P
j

b

T

β

b−a
α

|P’|
j

|P|

|P |
j

Fig. 1. Illustration of the main concepts of our data structure.

which is after a, but before b (i.e., a and b are consecutive occurrences of P ).
Finally the y-coordinate ensures that α ≤ b − a ≤ β.
Now we prove that for every output (a, b) of Problem 1, there exists a segment
(s, e, b− a) in I h with s ≤ p ≤ e and satellite information (a, b). Without loss of
generality, let lca((cid:6)h, (cid:6)SA−1[a]) be either lca((cid:6)h, (cid:6)SA−1[b]) or an ancestor of it. Then,
let j = SA−1[a]. Since P occurs at position a, the leaf j descends from the subtree 
of locus(P ), and since this node belongs to the heavy path h, we have that
lca((cid:6)h, (cid:6)j) descends from locus(P ), thus e ≥ p. Since there is no occurrence of
P between a and b, it holds s ≤ p. Then, a segment of the form (s, e, b − a)
indeed be created while processing j ∈ Hh during the construction
will
of I h.
(cid:2)
In the light of Lemma 3, we have the following result.

Lemma 4. There exists an O(n log n) space and O(p + log n + k) query time
solution for Problem 1, where k is the output size.

(cid:2)

Proof. The space of ST is O(n) and the space required for maintaining the
h |I h|) =
segment intersection structure over I h, for all values of h, is O(
h |Hh|) = O(n log n). Thus, the total space is O(n log n) words. To answer
O(
a query, we ﬁrst ﬁnd the locus of P in ST in O(p) time, and then query Gh,
where h = hp(locus(P )), in O(log n + k) time. Therefore, the query time is
(cid:2)
O(p + log n + k).
The query time in Lemma 4 is optimal if p ≥ log n. To handle queries where p
is shorter than log n, we use a diﬀerent approach.

(cid:2)

3.2 Achieving Optimal Query Time

We present an optimal query time data structure for p < log n. Essentially, we
associate a data structure D(u) with each node u in ST, whose string depth

372

G. Navarro and S.V. Thankachan

(i.e., |path(u)|) is at most log n. Observe that the number of occurrences of
path(u) in T is equal to size(u), where size(u) is the number of leaves in the
subtree of u. Therefore, the number of consecutive occurrences (i, j) of path(u)
is size(u) − 1. Each such pair (i, j) can be mapped to a point (j − i) in one
dimension along with the pair (i, j) as an associated satellite data. We then
create a one-dimensional range reporting data structure over these (size(u) − 1)
points and call it D(u). Whenever the locus of P is u, the answer can be obtained
by issuing a one dimensional range reporting query on D(u) with [α, β] as the
input range. The satellite data associated with each reported corresponds to an
answer to Problem 1.

We use the data structure summarized in Lemma 5, by which queries can be
answered in optimal time and the space of D(u) can be bounded by O(size(u))
words.

Lemma 5 ([13]). One dimensional range reporting queries over a set of m
points in {0, 1, 2, . . . , 2w} can be answered in optimal time using an O(m) space
data structure, where w is the word size.

Note that the sum of all the size(u) terms for all the nodes u with the same
string depth is n, and added over all the nodes with string depth up to log n is
n log n. Thus the space for the D(·) structures of all the nodes with string depth
up to log n is O(n log n) words. This completes the proof of Theorem 1.

4 Conclusions

We have addressed what seems to be the cleanest variant of the problem related
to ﬁnding close occurrences of a pattern P [1 . . . p] in a text T [1 . . . n]: ﬁnd pairs
of occurrences that are within a distance range [α, β] (given at query time). Our
data structure uses O(n log n) space and optimal O(p + k) query time.

It is not hard to extend our result to the case where we look for the occurrence 
of P followed (or preceded) by some function of P , such as its reverse
complemented string (as motivated in the Introduction). We can build the geometric 
structure at each suﬃx tree node v considering the function of the string
represented by v, instead of the string itself. However, extending our solution to
the general case of two patterns [6] seems not possible.

Our result opens several interesting questions. A ﬁrst one is whether this
problem is strictly harder than the restricted variant where α = β. For this case,
the same optimal query time has been obtained within less space, O(n log n) [5],
even when generalizing the problem to two patterns P1 and P2. The signiﬁcantly
messier results obtained for the general case α ≤ β [6] suggest that this general
problem is indeed harder. Still, it is not clear whether our optimal-time result
can also be obtained within o(n log n) space.

A second interesting question is whether our result can be used for pattern
mining, that is, ﬁnding those P that appear twice in T separated by a distance
in [α, β]. A direct application of our result, which builds our structure and then
traverses the suﬃx tree, requires Ω(n log n + z) time, which is not better than

Reporting Consecutive Substring Occurrences

373

the current result [9]. Yet, there could be harder pattern mining problems for
which our result is a useful tool.

Yet a third interesting question is how our results can be extended to the document 
retrieval scenario, that is, listing the documents where P appears twice and
separated by a distance in [α, β]. The current result [8] is similar to ours in space
and time, but it is restricted to the case α = 0. It is not clear if is the problem is
harder, and by how much, for an arbitrary value of α.

References

1. Gusﬁeld, D.: Algorithms on Strings, Trees and Sequences: Computer Science and

Computational Biology. Cambridge University Press, New York (1997)

2. Aluru, S. (ed.): Handbook of Computational Molecular Biology. CRC Computer

and Information Science Series. Chapman and Hall, London (2005)

3. Ohlebusch, E.: Bioinformatics Algorithms: Sequence Analysis, Genome Rearrangements,
 and Phylogenetic Reconstruction. Oldenbusch Verlag, Bremen (2013)

4. Iliopoulos, C.S., Rahman, M.S.: Indexing factors with gaps. Algorithmica 55, 60–70

(2009)

5. Bille, P., Gørtz, I.L.: Substring range reporting. Algorithmica 69, 384–396 (2014)
6. Bille, P., Gørtz, I.L., Vildhøj, H.W., Vind, S.: String indexing for patterns with

wildcards. Theor. Comput. Syst. 55, 41–60 (2014)

7. Keller, O., Kopelowitz, T., Lewenstein, M.: Range non-overlapping indexing and
successive list indexing. In: Dehne, F., Sack, J.-R., Zeh, N. (eds.) WADS 2007.
LNCS, vol. 4619, pp. 625–636. Springer, Heidelberg (2007)

8. Muthukrishnan, S.: Eﬃcient algorithms for document retrieval problems. In: Proceedings 
of 13th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),
pp. 657–666 (2002)

9. Brodal, G.S., Lyngsø, R.B., Pedersen, C.N.S., Stoye, J.: Finding maximal pairs
with bounded gap. In: Crochemore, M., Paterson, M. (eds.) CPM 1999. LNCS,
vol. 1645, pp. 134–149. Springer, Heidelberg (1999)

10. Weiner, P.: Linear pattern matching algorithms. In: 14th Annual Symposium on
Switching and Automata Theory, Iowa City, Iowa, USA, 15–17 October, pp. 1–11
(1973)

11. Sleator, D.D., Tarjan, R.E.: A data structure for dynamic trees. J. Comput. Syst.

Sci. 26, 362–391 (1983)

12. Tao, Y.: Dynamic ray stabbing. ACM Trans. Algorithms 11, 11 (2014)
13. Alstrup, S., Brodal, G.S., Rauhe, T.: Optimal static range reporting in one dimension.
 In: Proceedings on 33rd Annual ACM Symposium on Theory of Computing,
Heraklion, Crete, Greece, 6–8 July, pp. 476–482 (2001)

