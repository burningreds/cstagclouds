An Alphabet-Friendly FM-Index(cid:1)

Paolo Ferragina1, Giovanni Manzini2, Veli M¨akinen3, and Gonzalo Navarro4

1 Dipartimento di Informatica, University of Pisa, Italy

2 Dipartimento di Informatica, University of Piemonte Orientale, Italy

3 Department of Computer Science, University of Helsinki, Finland

4 Department of Computer Science, University of Chile, Chile

(cid:1)

(cid:2)
(n log log n)/ log|Σ| n

Abstract. We show that, by combining an existing compression boosting 
technique with the wavelet tree data structure, we are able to design
a variant of the FM-index which scales well with the size of the input
alphabet Σ. The size of the new index built on a string T [1, n] is bounded
by nHk(T )+O
bits, where Hk(T ) is the k-th order
empirical entropy of T .
The above bound holds simultaneously for all k ≤ α log|Σ| n and 0 <
α < 1. Moreover, the index design does not depend on the parameter k,
which plays a role only in analysis of the space occupancy.
Using our index, the counting of the occurrences of an arbitrary pattern 
P [1, p] as a substring of T takes O(p log |Σ|) time. Locating each
pattern occurrence takes O(log |Σ| (log2 n/ log log n)) time. Reporting a
text substring of length (cid:3) takes O(((cid:3) + log2 n/ log log n) log |Σ|) time.

1 Introduction

A full-text index is a data structure built over a text string T [1, n] that supports
the eﬃcient search for an arbitrary pattern as a substring of the indexed text.
A self-index is a full-text index that encapsulates the indexed text T , without
hence requiring its explicit storage.

The FM-index [3] has been the ﬁrst self-index in the literature to achieve
a space occupancy close to the k-th order entropy of T —hereafter denoted by
Hk(T ) (see Section 2.1). Precisely, the FM-index occupies at most 5nHk(T ) +
o(n) bits of storage, and allows the search for the occ occurrences of a pattern
P [1, p] within T in O(p + occ log1+ n) time, where  > 0 is an arbitrary constant
ﬁxed in advance. It can display any text substring of length (cid:2) in O((cid:2) + log1+ n)
time. The design of the FM-index is based upon the relationship between the
Burrows-Wheeler compression algorithm [1] and the suﬃx array data structure 
[16, 9]. It is therefore a sort of compressed suﬃx array that takes advantage
of the compressibility of the indexed text in order to achieve space occupancy
close to the Information Theoretic minimum. Indeed, the design of the FM-index
does not depend on the parameter k and its space bound holds simultaneously

(cid:2) Partially supported by the Italian MIUR projects ALINWEB and ECD and Grid.it and
‘‘Piattaforma distribuita ad alte prestazioni’’, and by the Chilean Fondecyt
Grant 1-020831.

A. Apostolico and M. Melucci (Eds.): SPIRE 2004, LNCS 3246, pp. 150–160, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004

An Alphabet-Friendly FM-Index

151

over all k ≥ 0. These remarkable theoretical properties have been validated by
experimental results [4, 5] and applications [14, 21].

The above bounds on the FM-index space occupancy and query time have
been obtained assuming that the size of the input alphabet is a constant. Hidden
in the big-O notation there is an exponential dependency on the alphabet size
in the space bound, and a linear dependency on the alphabet size in the time
bounds. More speciﬁcally, the search time is O(p + occ |Σ|
log1+ n) and the
time to display a text substring is O(((cid:2) + log1+ n) |Σ|). Although in practical
implementations of the FM-index [4, 5] these dependencies are removed with
only a small penalty in the query time, it is worthwhile to investigate whether
it is possible to build a more “alphabet-friendly” FM-index.

In this paper we use the compression boosting technique [2, 7] and the wavelet
tree data structure [11] to design a version of the FM-index which scales well
with the size of the alphabet. Compression boosting partitions the BurrowsWheeler 
transformed text into contiguous areas in order to maximize the overall
compression achievable with zero-order compressors used over each area. The
wavelet tree oﬀers a zero-order compression and also permits answering some
simple queries over the compressed area.

(n log log n)/ log|Σ| n

The resulting data structure indexes a string T [1, n] drawn from an alphabet 
Σ using nHk(T ) + O
bits of storage. The above
bound holds simultaneously for all k ≤ α log|Σ| n and 0 < α < 1. The structure 
of our index is extremely simple and does not depend on the parameter 
k, which plays a role only in the analysis of the space occupancy. With
our index, the counting of the occurrences of an arbitrary pattern P [1, p] as a
substring of T takes O(p log |Σ|) time. Locating each pattern occurrence takes
O(log |Σ| (log2 n/ log log n)) time. Displaying a text substring of length (cid:2) takes
O(((cid:2) + log2 n/ log log n) log |Σ|) time. Compared to the original FM-index, we
note that the new version scales better with the alphabet size in all aspects.
Albeit the time to count pattern occurrences has increased, that of locating
occurrences and displaying text substrings has decreased.

(cid:1)

(cid:2)

Recently, various compressed full-text indexes have been proposed in the
literature achieving several time/space trade-oﬀs [13, 20, 18, 11, 12, 10]. Among
them, the one with the smallest space occupancy is the data structure described
in [11] (Theorems 4.2 and 5.2) that achieves O(p log |Σ| + polylog(n)) time to
count the pattern occurrences, O(log |Σ| ((cid:2) + log2 n/ log log n)) time to locate
(cid:2)
(cid:1)
and display a substring of length (cid:2), and uses nHk(T ) + O
(n log log n)/ log|Σ| n
bits of storage. The space bound holds for a ﬁxed k which must be chosen in
advance, i.e., when the index is built. The parameter k must satisfy the constraint
k ≤ α log|Σ| n with 0 < α < 1, which is the same limitation that we have for our
space bound. An alternative way to reduce the alphabet dependence of the FMindex 
has been proposed in [10], where the resulting space bound is the higher
O((H0 + 1)n) although based on a simpler solution to implement.

To summarize, our data structure is extremely simple, has the smallest
known space occupancy, and counts the occurrences faster than the data struc-

