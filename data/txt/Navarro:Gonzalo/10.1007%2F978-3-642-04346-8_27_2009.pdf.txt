A Compressed Self-indexed Representation

of XML Documents(cid:2)

Nieves R. Brisaboa1, Ana Cerdeira-Pena1, and Gonzalo Navarro2

Database Lab., Univ. da Coru˜na, Spain

{brisaboa,acerdeira}@udc.es

Dept. of Computer Science, Univ. of Chile

gnavarro@dcc.uchile.cl

Abstract. This paper presents a structure we call XML Wavelet Tree
(XWT) to represent any XML document in a compressed and self-indexed
form. Therefore, any query or procedure that could be performed over
the original document can be performed more eﬃciently over the XWT
representation because it is shorter and has some indexing properties. In
fact, XWT permits to answer XPath queries more eﬃciently than using
the uncompressed version of the documents. XWT is also competitive
when comparing it with inverted indexes over the XML document (if
both structures use the same space).

1 Introduction

XML[1] has long ago become the standard for representing semi-structured documents 
and W3C has deﬁned the language XPath[2] for querying XML documents
allowing constraints on both structure and content. Recently, several works have
been devoted to the problem of modelling and querying XML documents and
new query languages or XPath extensions have been proposed [10,9,3].

On the other hand, the research in text compression has experimented a big
advance in the last years. Diﬀerent compression methods have been proposed,
demonstrating beyond doubts that the use of word-based statistical semi-static
compressors, such as Plain and Tagged Hufman, ETDC, (s,c)-DC or RPBC
[12,6,8], perfectly fulﬁl IR requirements because those compressors allow querying 
the compressed version of the text up to 8 times faster than the uncompressed
version. That is, the text is compressed to about 30%-35% of its original size and
can be kept in that compressed form all the time, because direct search of words
and phrases can be performed over that compressed version. Therefore the text
only need to be uncompressed to be shown to a human user, but any process, for
IR or any other purpose, can be done over the compressed text. In this way, not
only storage space is saved, but also time. Time is the critical factor in eﬃciency
and processing a compressed version of a document saves time when we need to
access to disk looking for a document, when it is transmitted through a network,
or more importantly, when it is processed.

(cid:2) Funded in part by MEC grant TIN2006-15071-C03-03, for the Spanish group; and

for the third author by Fondecyt grant 1-080019 (Chile).

M. Agosti et al. (Eds.): ECDL 2009, LNCS 5714, pp. 273–284, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009

274

N.R. Brisaboa, A. Cerdeira-Pena, and G. Navarro

More recently, compression techniques have become even more sophisticated
allowing not only a compressed representation of the text, but also self-indexed
representations using the same compressed space (about 35% of the original size).
Those compressed and self-indexed representations of the text successfully compete 
with the classical inverted indexes, even if they use compression strategies.
Among those compressed and self-indexed document representations, the Word
Suﬃx Arrays [11,7] and the Wavelet Trees [4] are some of the most powerful.

In this paper we present a modiﬁed wavelet tree, based on a (s,c)-DC compressor,
 to create a self-indexed and compressed version of XML documents. Our
representation, which we call XML Wavelet Tree (XWT), uses only about 30%-
40% of the space of a XML document and provides some self-indexing properties
that can be successfully used in answering XPath queries.

Notice that any XML document can be represented, using our XWT, in a
compressed and self-indexed form, therefore any processing or query that could
be performed over the original XML document can also be performed over the
XWT representation. Moreover, due to the fact that the XWT representation is
smaller and has some indexing properties, any processing will be more eﬃcient
over the XWT representation than over the original uncompressed document.

2 Previous Work

Among the diﬀerent word-based byte-oriented semi-static statistical compression
methods available in the state of the art, we use (s,c)-DC [5,6] as basis of our
representation because it provides ﬂexibility to compress with diﬀerent models
the tags of a XML document and the rest of its words. On the other hand, among
the self-indexing structures available we chose to work with the WT presented
in [4] because it is the only one that could be adapted in order to represent, in a
compact way, the structure of the document (that is, the XML tags) separated
from the rest of the words.

2.1 (s,c)-Dense Code

(s,c)-Dense Code is a word-based semi-static statistical preﬁx-free encoder. In
a ﬁrst pass over the source text the diﬀerent words and their frequencies are
obtained (the model). Then, the vocabulary is sorted by frequency and a codeword 
is assigned to each word (shorter codewords to more frequent words). In
a second pass, the compressor replaces each word by its codeword leading to a
compressed representation of the text.

As other compressors, (s,c)-DC distinguishes between bytes1 that do not end
a codeword, called continuers, and bytes that only can appear as the last byte
of a codeword, stoppers. In this case, where s is the number of stoppers and c
indicates the number of continuers (s+ c = 256), stoppers are the bytes between
0 and s− 1 and continuers, are those between s and s+ c− 1 = 255. To minimize
compression ratios, optimal values for s and c are computed for the speciﬁc

1 For simplicity, we focus on the byte oriented version.

A Compressed Self-indexed Representation of XML Documents

275

word frequency distribution of the text [5]. Then given source symbols sorted by
decreasing frequencies, the corresponding (s,c)-DC encoding process gives onebyte 
codewords to the words in positions from 0 to s − 1. Words ranked from
s to s + sc − 1 are sequentially assigned two-byte codewords. The ﬁrst byte of
each codeword has a value in the range [s, s + c − 1], that is, a continuer. The
second byte, the stopper, has a value in range [0, s − 1]. Words from s + sc to
s + sc + sc2 − 1 are assigned three byte codewords, and so on.
Example 1. The codes assigned to symbols i ∈ 0 . . . 15 by a (2,3)-DC are as
follows: (cid:3)0(cid:4), (cid:3)1(cid:4), (cid:3)2,0(cid:4), (cid:3)2,1(cid:4), (cid:3)3,0(cid:4), (cid:3)3,1(cid:4), (cid:3)4,0(cid:4), (cid:3)4,1(cid:4), (cid:3)2,2,0(cid:4), (cid:3)2,2,1(cid:4), (cid:3)2,3,0(cid:4),
(cid:3)2,3,1(cid:4), (cid:3)2,4,0(cid:4), (cid:3)2,4,1(cid:4), (cid:3)3,2,0(cid:4) and (cid:3)3,2,1(cid:4).

2.2 Byte-Oriented Wavelet Tree (WT)

In [4] we presented a novel reorganization of the codewords bytes of a text
compressed with any word-based byte-oriented semi-static statistical preﬁx-free
compression technique. This reorganization, called Wavelet Tree, consists basically 
on placing the diﬀerent bytes of each codeword at diﬀerent WT nodes
instead of sequentially concatenating them, as in a typical compressed text.

1, c1

2, c1

3...c1

i ...cm

The root of the WT is represented by all the ﬁrst bytes of the codewords,
following the same order as the words they encode in the original text. That
is, let assume we have the text words (cid:3)w1, w2 . . . wn(cid:4), whose codewords are
cw1, cw2 . . . cwn, respectively, and let us denote the bytes of a codeword cwi
as (cid:3)c1
i (cid:4) where m is the size of the codeword cwi in bytes. Then the root
n(cid:4). At position i, we place the
is formed by the sequence of bytes (cid:3)c1
ﬁrst byte of the codeword that encodes the ith word in the source text, so notice 
that the root node has as many bytes as words has the text. We consider
the root of the WT as the ﬁrst level. Therefore, second bytes of the codewords
longer than one byte are placed in nodes of a second level. The root has as many
children as diﬀerent bytes can be the ﬁrst byte of a codeword of two or more
bytes. That is, in a (190, 66)-DC encoding scheme, the root will have always 66
children, because there are 66 bytes that are continuers. Each node X in this
second level contains all the second bytes of the codewords whose ﬁrst byte is
x, following again the same order of the source. That is, the second byte corresponding 
to the jth occurrence of byte x in the root, is placed at position j in
node X. Formally, let suppose there are t words coded by codewords cwi1 ...cwit
(longer than one byte) whose ﬁrst byte is x. Then, the second bytes of those
(cid:4), form the node X. The same idea is used to create
codewords, (cid:3)c2
the lower levels of the WT. Looking into the example, and supposing that there
are d words whose ﬁrst byte codewords is x and whose second one is y, then node
(cid:4) given
XY is a child of node X and it stores the byte sequence (cid:3)c3
by all the third bytes of that codewords. Those bytes are again in the original
text order. Therefore, the resulting WT has as many levels as bytes have the
longest codewords.

j3 ...c3
jd

i3 ...c2
it

i1 , c2

i2 , c2

j1 , c3

j2 , c3

276

N.R. Brisaboa, A. Cerdeira-Pena, and G. Navarro

TEXT: “ MAKE EVERYTHING AS SIMPLE

AS POSSIBLE BUT NOT SIMPLER”

Word: MAKE EVERYTHING AS

SIMPLE

AS

POSSIBLE BUT

NOT

SIMPLER

Position:

1

b4

2

b3

3

b1

4

b3

5

b1

6

b2

7

b2

8

b4

9

b3

SYMBOL FREQUENCY CODE

AS
POSSIBLE
SIMPLE
EVERYTHING
NOT
MAKE
BUT
SIMPLER

2
1
1
1
1
1
1
1

b1
b2b4
b3b2
b3b4
b4b1
b4b2
b2b3b4
b3b1b2

B2

B3

B4

POSSIBLE BUT

EVERYTHING SIMPLE SIMPLER

MAKE

NOT

1

b4

B2B3

2

b3

BUT

1

b4

1

b4

2

b2

3

b1

1

b2

2

b1

SIMPLER

B3B1

1
b2

Fig. 1. Example of WT

In Fig. 12, a WT is built from the text MAKE EVERYTHING AS SIMPLE AS
POSSIBLE BUT NOT SIMPLER. Once codewords are assigned to all the diﬀerent
words in the text, their bytes are spread in a WT following the reorganization of
bytes explained. For example, b3 is the 9th byte of the root because it is the ﬁrst
byte of the codeword assigned to ’SIMPLER’, which is the 9th word in the text.
In turn, its second byte, b1, is placed in the third position of the child node B3
because ’SIMPLER’ is the third word in the root having b3 as ﬁrst byte. Likewise,
its third byte, b2, is placed at the third level in the child node B3B1, since the
ﬁrst and second byte of the codeword are b3 and b1, respectively.

Original codewords can be rebuilt from the bytes spread along the diﬀerent
WT nodes using rank and select operations. Let be B a sequence of bytes, b1,
b2. . .bn. Then, rank and select are deﬁned as:
– rankb(B,p) = i if the number of occurrences of the byte b from the beginning

– selectb(B,j) = p if the jth occurrence of the byte b in the sequence B is at

of B up to position p is i.

position p

The two basic procedures using the WT are locating a word in the text and
decoding the word placed at certain position. Both are easily solved using select
and rank operations, respectively.

To ﬁnd the ﬁrst occurrence of ’SIMPLER’, we will start at the bottom of
the tree and go up. As we can see in Fig. 1, the codeword of ’SIMPLER’ is
b3b1b2, therefore, we start at node B3B1, in the third level, and search for the
ﬁrst occurrence of the byte b2 computing selectb2(B3B1, 1) = 1. In this way,
we obtain that the ﬁrst position of that node (B3B1) corresponds to the ﬁrst
occurrence of ’SIMPLER’. Now, we need to locate in node B3 the position of
the ﬁrst occurrence of byte b1. Again, this is obtained by selectb1(B3, 1) = 3,
that newly indicates our codeword is the third one starting by b3 in the root
node. Finally, by calculating selectb3(root, 3) = 9, we can answer that the ﬁrst
occurrence of ’SIMPLER’ is at 9th position in the source text.
2 Note that only the shaded byte sequences are stored in tree nodes; the text is shown

only for clarity.

A Compressed Self-indexed Representation of XML Documents

277

To decode a word we use rank operations. To know which is the 7th word
in the source text we start reading root[7] = b2. According to the encoding
scheme we know that the code is not complete, so we will have to read a second
byte in the second level of the WT, more precisely, in the node B2. To ﬁnd out
which position of that sequence we have to read, we use rankb2(root, 7) = 2.
Therefore, B2[2] = b3, gives us the second byte of the codeword. Again b3 is not
a stopper, so we need to continue the procedure. In the child node B2B3, that
corresponding to the two ﬁrst bytes of the codeword we have just read (b2b3), we
have to read the byte which is at position rankb3(B2, 2) = 1. Finally, we obtain
B2B3[1] = b4, which marks the end of the searched codeword. As a result, we
have the codeword b2b3b4, that corresponding to ’BUT’, which is precisely the
7th word in the source text, as expected.

The performance of the WT depends on the implementation of the rank and
select operations, because they are the base for any procedure over this structure.
A detailed description of their implementation can be found in [4]. It is based on
a structure of partial counters to avoid counting the number of occurrences of
a searched byte from the beginning of a WT node. There is a tradeoﬀ between
space and time. If we use more partial counters, we need more space, but rank
and select operations will be more eﬃcient.

3 XML Wavelet Tree (XWT)

Phase I: Parsing the XML document and assigning codewords. The
ﬁrst step to obtain the XWT is to parse the input XML document to create the
vocabulary and compute the frequencies distribution (the model). The parsing
process distinguishes diﬀerent kind of words depending on whether a word is3:
i) a name of a start-tag or an end-tag, ii) the name of an attribute, iii) an
attribute value, iv) a word appeared inside a comment, v) a word appeared
inside a processing instruction, or vi) a word of the XML document content.

That is, when compressing, a same word will be assigned diﬀerent codewords
depending on the category it belongs to. For example, if the word book appears 
as content (e.g. . . . the great book . . . ), but also as an attribute value (e.g.
category=“book”) and inside a comment (e.g. (cid:3)! − − . . . this book is . . . −−(cid:4)) it
will be stored as three diﬀerent entries in the vocabulary, one for each diﬀerent
category.

Keeping this diﬀerence between same words according to its function in the
XML document structure increases the vocabulary size, however it is translated
into eﬃciency and ﬂexibility when querying.

It is also in the parsing that some normalization operations take place (all
according to [1]). For instance, empty-element tags are translated into its corresponding 
pair of start-end tag (e.g. (cid:3)tag name/(cid:4) → (cid:3)tag name(cid:4) (cid:3)/tag name(cid:4)) and
redundant spaces and spaces inside tags are eliminated (e.g. (cid:3)tag name
(cid:4) →
(cid:3)tag name(cid:4)), etc.
3 Division implicitly given by the diﬀerent kind of XPath queries[2].

278

N.R. Brisaboa, A. Cerdeira-Pena, and G. Navarro

Text words vocabulary (3,3)-DC

Tag words vocabulary (5,1)-DC

SYMBOL

FREQUENCY

CODE

SYMBOL FREQUENCY

CODE

Text:

<journal>

<film title=”Shakespeare in love”>

<critic>

<name>John One</name>
<name>One</name>

</critic>
<opinion>

One of the most fascinating
love histories ever written

</opinion>

</film>

</journal>

One
“
>
lovetext
of
title=
most
loveatt
in
John
histories
Shakespeare
ever
fascinating
written
the

3
2
1
1
1
1
1
1
1
1
1
1
1
1
1
1

b1
b2
b3
b5b1
b5b2
b5b3
b6b1
b6b2
b6b3
b5b4b1
b5b4b2
b5b4b3
b5b5b1
b5b5b2
b5b5b3
b5b6b1

<name
</name>
<opinion
</opinion>
<critic
</critic>
<film
</film>
<journal
</journal>

2
2
1
1
1
1
1
1
1
1

b4 b1
b4 b2
b4 b3
b4 b4
b4 b5
b4 b6b1
b4 b6b2
b4 b6b3
b4 b6b4
b4 b6b5

e
r
a
e
p
s
e
k
a
h
“ S

n

i

l

a
n
r
u
o
<

j

m

l
i
f

<

=
e

l
t
i
t

t
t

a
e
v
o

l

i

n
o
n
p
o
<

i

g
n

i
t

i

a
n
c
s
a

f

t

t
x
e
e
v
o

l

...

t
s
o
m

e
h

t

...

...

i

>
n
o
n
p
o
<

/

i

l

>
a
n
r
u
o

j
/

<

>
m

l
i
f
/

<

b4 b4 b5 b2 b5 b6 b6 … b4 … b5 b6 b5 b5 … b4 b4 b4

Complete XML document structure

B4

l

a
n
r
u
o
<

j

m

l
i
f

<

c
i
t
i
r
c
<

e
m
a
n
<

>
e
m
a
n
<

/

>
e
m
a
n
<

/

>
c
i
t
i
r
c
/
<

e
m
a
n
<

i

n
o
n
p
o
<

i

i

>
n
o
n
p
o
<

/

i

>
m

l
i
f
/

<

l

>
a
n
r
u
o

j
/

<

e
r
a
e
p
s
e
k
a
h
S

=
e

l
t
i
t

n
e

t
t
i
r

w

...

b6 b6 b5 b1 b2 b1 b2 b6 b3 b4 b6 b6

b3 b4 … b5

B5

B6

t
t

a
e
v
o

l

t
s
o
m

n

i

b3 b2 b1

l

a
n
r
u
o
<

j

>
c
i
t
i
r
c
/
<

m

l
i
f

<

>
m

l
i
f
/

<

B4B6

e
r
a
e
p
s
e
k
a
h
S

l

>
a
n
r
u
o

j
/

<

B5B4
s
e
i
r
o

n
h
o
J

t
s
h

i

g
n

i
t

i

a
n
c
s
a

f

n
e

t
t
i
r

w

r
e
v
e

B5B5

B5B6

b4 b2 b1 b3 b5

b3 b1 b2

b2 b1 b3

Fig. 2. Example of XWT

e
h

t

b1

While parsing the XML document, two vocabularies are created. One stores
the diﬀerent startand 
end-tags and therefore the structure of the document.
The other stores the rest of the words. We call them, tag words and text words
vocabulary, respectively (see Fig. 2).

As it was explained in Section 2, (s,c)-Dense Code uses diﬀerent bytes for
continuers and for stoppers. So it is easy to see how reserving a continuer to
be the ﬁrst byte of the codewords assigned to tag words (in Fig. 2, see the
bytes shaded in the CODE column of the tag words vocabulary) it is possible to
keep them all located in the same branch of the XWT (see the branch B4 in
Fig. 2). Remember that they follow the document order and hence maintain
their relationships like in the original XML document. But what is even more
striking is that this feature implicitly provides an eﬃcient way to solve structural

A Compressed Self-indexed Representation of XML Documents

279

queries. To do this, we only need to deal with those nodes of the XWT storing
the structure of the document, and omit the rest of the compressed text.

Therefore, all the words of the text words vocabulary are assigned a codeword
following a (s,c)-Dense Code encoding scheme, keeping aside one continuer. In
Fig. 2, where a (3, 3)-DC encoding scheme is used to encode text words, the ﬁrst
of the continuers, b4, has been selected as the one reserved. Notice that it is not
used as a ﬁrst byte of any of the codewords assigned to the text words.

Because of this, compression could be aﬀected, so to minimize this loss, tag
words are also coded according to another optimal values of s and c. That
is, on the one hand we keep the selected continuer as the ﬁrst byte of the tag
codewords to store the XML structure isolated. On the other hand, the remaining
bytes of the tag codewords will be given following their own (s,c)-DC scheme.
In the example of the Fig. 2, codewords assigned to tags follow a (5, 1)-DC
encoding scheme, after the ﬁrst byte, that is always the continuer b4 (shaded
column).

Phase II: Compressing and creating the XWT. Once codewords are assigned 
to words, we do a second pass over the text replacing each word by its
codeword and storing these codeword bytes along the diﬀerent nodes of the
XWT (it is possible to precalculate the number of nodes as well as their sizes in
advance). So, by keeping an array of markers indicating the next writing position
for each node, they are ﬁlled sequentially following the order of the words in the
text.

4 Using XWT

4.1 Decompression

To decompress from a random text word j (random decompression), we follow
the procedure explained in Section 2.2. But now, we take into account the use
of two vocabularies with diﬀerent encoding schemes. That is, we ﬁrst access to
the jth byte of the root node of the XWT to get the ﬁrst byte of the codeword
and then we check if the byte read, bi, matches or not with the continuer used
to mark tag words. Depending on this, going down in the XWT to obtain the
remaining bytes is done by using the corresponding s and c values.

If we want to decompress the whole text from the beginning (full decompres-
sion), we can follow a more eﬃcient procedure. Given that the sequences of bytes
of all the XWT nodes follow the original order of the words in the source text,
full decompression can be eﬃciently implemented using pointers to the next positions 
to be read in each node. That is, when going to a child node to read the
following byte of an uncomplete codeword, we do not need to compute any rank
operation to ﬁnd out what byte of this child node sequence we have to read. It
always will be the next one to process in that child node.

280

N.R. Brisaboa, A. Cerdeira-Pena, and G. Navarro

4.2 Answering XPath Queries

Since the XWT structure is an exact representation of the XML document, any
operation over the original text can be done over such representation. Therefore,
all XPath queries can be answered using our representation. Indeed, some of
them take beneﬁt of the implicit indexing properties provided by the own XWT
structure and are eﬃciently answered.

Counting. To count() the number of occurrences of a word (e.g. tag, name of
an attribute, attribute value, word inside a comment or node content, etc.) we
just compute how many times the last byte of the codeword assigned to that
word appears in its corresponding XWT node. Therefore, if a word is encoded
with a codeword xyz (being x and y, continuers and z, a stopper), it is only
necessary to count the number of bytes z in the node XY . That is, we only do
rankz(nodeXY , i), where i is the size of the node XY . In turn, if the codeword
has just one byte, z, we will do rankz(root,n), where n is the number of words
in the text, that is, the number of bytes in the root.

Locating. We can locate the position in the text of any occurrence of a word (typical 
XPath queries as //book, //@title, etc.) searching its last byte in the corresponding 
XWT node and performing consecutive select operations up to the root. If we
want to locate all the occurrences of a word, this process is repeated for each one.
Since the traversed XWT nodes are the same for each occurrence and these will be
processed consecutively, select operations and thus the whole process, can be sped
up by using pointers to the already found positions in the WT nodes.

Locating phrases. To locate a phrase pattern we start locating the ﬁrst
occurrence of the least frequent word of the pattern in the root node. Then we
check if all the ﬁrst bytes of the codewords of each word of the phrase pattern
match with the previous and next bytes of the root node. If those matches happen,
 we follow validating the rest of the bytes of the corresponding codewords.
But if it is not the case, we save going down into the XWT and we simply locate
the next occurrence of the least frequent word to be processed in a same way.

k
o
o
b
<

...

r
e
v
i
r

...

...

>
k
o
o
b
/
<

...

r
e
v
i
r

...

r
e
v
i
r

...

r
e
v
i
r

...

r
e
v
i
r

...

k
o
o
b
<

r
e
v
i
r

...

...

>
k
o
o
b
/
<

k
o
o
b
<

...

...

>
k
o
o
b
/
<

k
o
o
b
<

...

...

r
e
v
i
r

...

>
k
o
o
b
/
<

...

QUERY: //book [contains(., river)]

… b4 …b5 … b4 … b5 … b5 … b5 …b5 …b4…b5 …b4… b4… b4 …b4…b5 … b4 ...

SYMBOL CODE

<book
</book>
river

b4b2
b4b3
b5b4b1

>
k
o
o
b
<

/

k
o
o
b
<

...

k
o
o
b
<

...

...

>
k
o
o
b
/
<

k
o
o
b
<

...

>
k
o
o
b
/
<

k
o
o
b
<

...

>
k
o
o
b
/
<

...

B4

B5

...

…b2 b3 … b2…b3 …b2 b3 …b2 b3…

...

...

...

B5B4

r
e
v
i
r

r
e
v
i
r

r
e
v
i
r

r
e
v
i
r

r
e
v
i
r

r
e
v
i
r

r
e
v
i
r

...

...

...

...

… b1 b1 b1 … b1 b1 b1 ... b1...

Fig. 3. Example of searching pairs of start-end tags containing a word

A Compressed Self-indexed Representation of XML Documents

281

Searching pairs of start-end tags containing a word. In XPath, a predicate
is a ﬁlter applied to a set of XML nodes. For simplicity, here we have chosen
predicates over text: //tag name [contains(., wordtext)]. That is, we are interested 
in reporting the pairs of start-end tags that fulﬁll (cid:3)tag name(cid:4) . . . wordtext
. . . (cid:3)/tag name(cid:4). For example: //book [contains(., river)] (see Fig. 3).

We begin locating the ﬁrst occurrence of the desired word (river, in the ex-
ample) in the root node. Then, by counting the number of occurrences of the desired 
start-tag ((cid:3)book in Fig. 3) placed before that position and that of the desired
end-tag ((cid:3)/book(cid:4)) we will know how many of the element nodes we are looking
for contain that occurrence of the word. We can easily ﬁgure out those number of
occurrences dealing only with the branches of the XWT storing the tags. In the
example, we locate the ﬁrst occurrence of river which is surrounded by the ﬁrst
occurrences of (cid:3)book and (cid:3)/book(cid:4). Therefore they are reported as a hit.

Now, instead of performing the same process with the next occurrence of
the word (in the example, the 2nd occurrence of river), we can skip some text
looking for the ﬁrst occurrence of the desired start-tag placed after the position
of the just located occurrence of the word. That is, in the example, we locate the
second occurrence of (cid:3)book and its corresponding end-tag, and then we look for an
occurrence of river between their positions. Given that there is one occurrence
(the 6th occurrence of river), the 2nd occurrence of the element node book is
also reported as a hit. By doing this we skip the occurrences of river that could
be before the second occurrence of (cid:3)book, and which are not interesting for the
search (those occurrences of river surrounded by a striped rectangle in Fig. 3).
After that, we proceed in one of the two ways. If the XML element node we
are searching allows self nesting, we take the ﬁrst occurrence of the word placed
after the position of the desired start-tag just located (the 2nd occurrence of
(cid:3)book). If not, we take the next occurrence of the word after its corresponding
end-tag (it is the case of the example, so we take the 7th occurrence of river).
In both cases, we repeat the whole procedure. Again, this allows skipping those
occurrences of the element node that could not contain any occurrence of the
word searched (in Fig. 3 we skip the 3th occurrence of book).

Although we have explained the algorithm for the particular case of XML element 
nodes and words being part of their content, it can be generalized to predicates 
over other element nodes. That is, queries like //tag name1[//tag name2]
but also //tag name1//tag name2.

Searching attributes values. Another important query in XPath is to ﬁnd
all the occurrences of an attribute having a given value, being it a simple word
or a phrase. That is, queries like @att name = “att value”.

Whatever the case of the value, the algorithm to ﬁnd out those attributes
is that aimed at searching phrase patterns. That is, we will ﬁnd all the phrase
patterns given by the phrase built from the name of the attribute and its value:
att_name="att_value".

Other queries. We have just explained a common subset of the XPath queries.
However, any other one can be answered using the representation we have

282

N.R. Brisaboa, A. Cerdeira-Pena, and G. Navarro

presented. Some other queries like, for example, //tag name [position() = i] or
//tag name [position() <= n] can be solved by simple locating the ith occurrence 
or the n-ﬁrst occurrences of the tag, respectively, instead of locating all as
we have seen. If we want to cope with queries involving parent XPath axis,
/, it is not hard to imagine how to incorporate it from the discussion about
//tag name1[//tag name2].

5 Experimental Results
An isolated Intel R(cid:2)
Pentium R(cid:2)Core 2 Duo 2.13 GHz system, with 2 GB dual-channel
DDR-667Mhz RAM was used in our tests. It ran Ubuntu 8.04 GNU/Linux (kernel 
version 2.6.24.23). The compiler used was gcc version 4.2.4 and -O9 compiler
optimizations were set. Time results measure cpu user time in seconds.
The four diﬀerent XML documents used to run our experiments are:

– 0.5d and 9d : ﬁles generated with xmlgen, an XML data generator developed

inside XMark Project (http://monetdb.cwi.nl/xml/).

– dblp : ﬁle corresponding to the revision of April 16, 2008.
– psd7003 : ﬁle of the public proteins database, Integrated Protein Informatics
Resource for Genomic and Proteomic Research (http://pir.georgetown.edu/).

Table 1. Description of the documents used and compression properties

XML doc.
0.5d
dblp
psd7003
9d

size

EN MD VT VNT

#T

#NT

R1

R2

CT

DT

832
55,32
282,42
6,928
683,64 21,305
1007,12 15,040

12 148

85

1,665
70 1,750 13,856

9,468
6
61,649
7 128 3,142 42,611 106,621
743 30,080 171,595

12 148

0.66
4.16
31.82 29.06
3.68
41.50 37.32 28.84
41.29 40.35 60.43
6.84
31.28 28.57 69.61 12.24

On the one hand, Table 1 presents the name of the XML documents used, their
size in MBytes, their number of XML element nodes (EN)(x103), their maximum
depth level (MD), the number of diﬀerent words in tag words (VT) and text words
(VNT)(x103) vocabularies, and the number of tag words (#T) and text words
(#NT) that compose each document (x103). On the other hand, the last four
columns of Table 1 also show, respectively, the compression ratios (in %) obtained
by XWT (R1) and the (s,c)-DC compressor (R2) over each XML document, as
well as the compression (CT) and decompression (DT) times (in seconds) using
XWT. Notice that XWT represents each XML ﬁle using about 30%-40% of its
original size and, which is more striking, XWT only uses 3% more space than the
needed to compress the documents with (s,c)-DC. That is, the powerful indexing
capabilities of XWT only need 3% of extra space over the compressed text.

In Table 2 we can see the times obtained to answer the diﬀerent common
XPath operations explained in Section 4.2. The results presented are obtained
using a XWT implementation with a waste of 3% of extra space for the structures 
of the partial counters used to speed up rank and select operations. From
column 1 through column 12 we present the times obtained for count all the

A Compressed Self-indexed Representation of XML Documents

283

Table 2. Searching operations

1000 < f ≤ 10000

100 < f ≤ 1000

1 ≤ f ≤ 100

snip. count ﬁrst
(ms)

all snip. count ﬁrst

all
(ms)

count ﬁrst
(µs) (µs)
3.33 4.44 3.39 65.39
3.55 5.42 5.09 68.31
3.04 6.64 6.06 55.65
3.47 4.41 13.84 214.94

0.5d
dblp
psd7003
9d

(µs) (ms) (ms)
(µs)
3.59 4.16 3.30 19.77
2.92 10.84 2.58 11.04
3.40 6.33 2.06
7.27
3.19 8.26 2.97 11.38

all snip. TCW ATT
(ms) (ms)

(µs) (ms) (ms)
(µs)
0.74 8.19 0.04 0.23
8.78 0.04
0.22 20.71 0.03 0.06 21.83 0.13
0.41 15.80 0.04 0.10 62.08 0.02
0.52 8.98 0.04 0.12 80.13 0.04

occurrences, locate the ﬁrst position, locate all the positions, and extract all the
10-words snippets of a word. We distinguish 3 groups of words depending on their
frequency f : i) 1000 < f ≤ 10000, ii) 100 < f ≤ 1000 and iii) 1 ≤ f ≤ 100 and
show the average time of searching for 100 distinct words (skipping stopwords)
randomly chosen from the two vocabularies in each group.

In turn, columns 13 and 14 of Table 2 show, respectively, the average times obtained 
to locate all the occurrences of a certain pair of start-end tags containing
a word (TCW) and to locate all the occurrences of an att name = “att value”
pattern (ATT). In the ﬁrst case, we have randomly chosen 100 tags and 100
text words from their respective vocabularies and have performed the algorithm.
For the second operation, we used 100 randomly chosen pairs of the diﬀerent
att name = “att value” pairs with frequency between 1 and 100 existing in each
XML document. Notice that here the search times of locate all the occurrences
of a certain att name = “att value” pattern depend also on the number of words
that form the “att value”. The greater the number of words, the fewer the number 
of false positives we ﬁnd in the root of the XWT that will spend time being
processed down in the XWT. Moreover, it also depends on the frequency of
the least frequent word of the att name = “att value” pattern. The greater the
frequency, the greater the number of possible candidates we will check.

To properly valuate these data we need to take into account that, long ago [12],
it has been clearly established beyond doubts that any kind of word or phrase
search over the uncompressed text takes up to 8 times more time than to perform 
the same search over the compressed text, due to the fact that processing
the uncompressed text imply to process around three times more bytes. Therefore,
 it only makes sense to compare our data, about searches to answer the diﬀerent 
XPath queries, with those that could be obtained using a compressed version
of the text. But in [4] it was experimental tested the performance of WT against
compressed text. Diﬀerent compressors were used to create the compressed text
and to obtain the codewords for the WT. In all the cases the WT was dramatically
faster to perform any kind of search, thanks to the self-indexing properties.

As consequence, it is more interesting to compare our results against those
that can be obtained using a compressed and indexed version of the XML documents.
 In [4] the performance of WT was compared against inverted indexes to
blocks of text (not to individual words occurrences). Diﬀerent block sizes in the
inverted index and diﬀerent number of partial counters in the WT were used in
order to compare the eﬃciency of both approaches when using diﬀerent amounts
of space. Results clearly proved the superior eﬃciency of the WT in searching

284

N.R. Brisaboa, A. Cerdeira-Pena, and G. Navarro

words and phrases. The WT was superior even in recovering snippets when the
amount of used space was inferior to the 40% of the original text size.

In our case, where not only we need to ﬁnd a word, but also to process the text
around it to know if that word is between some speciﬁc pair of start-end tags, or if
it is an attribute value, etc. the use of our XWT will be even more advantageous.

6 Conclusions and Future Work

In this paper we introduce a strategy for compressing XML documents to about
35% of their size giving them, furthermore, self-indexing properties. This strategy
is based on the use of a data structure we called XML Wavelet Tree (XWT).
XWT is a new approach to the problem of storing, processing and querying
XML documents in a time and space eﬃcient way. Although our results are
promising, more research must be done to improve the self-indexing properties.
This is especially important for the tags representation, because most XPath
queries imply the use of the document structure that the tags provide. On the
other hand a systematic experimental evaluation of our XWT must be done
comparing its performance with some of the other eﬃcient XML representations.

References

1. Xml 1.0, W3C Recommendation of Extensible Markup Language (XML) Version

1.0, 5th edn., http://www.w3.org/TR/REC-xml

2. Xpath 2.0, W3C Recommendation of XML Path Language (XPath) Version 2.0,

http://www.w3.org/TR/xpath20

3. Bordogna, G., Pasi, G.: Personalised indexing and retrieval of heterogeneous structured 
documents. Inf. Retr. 8(2), 301–318 (2005)

4. Brisaboa, N.R., Fari˜na, A., Ladra, S., Navarro, G.: Reorganizing compressed text.

In: SIGIR 2008, pp. 139–146 (2008)

5. Brisaboa, N.R., Fari˜na, A., Navarro, G., Param´a, J.R.: (s, c)-dense coding: An
optimized compression code for natural language text databases. In: Nascimento,
M.A., de Moura, E.S., Oliveira, A.L. (eds.) SPIRE 2003. LNCS, vol. 2857, pp.
122–136. Springer, Heidelberg (2003)

6. Brisaboa, N.R., Fari˜na, A., Navarro, G., Param´a, J.R.: Lightweight natural language 
text compression. Inf. Retr. 10, 1–33 (2007)

7. Brisaboa, N.R., Fari˜na, A., Navarro, G., Places, A.S., L´opez, E.R.: Self-indexing
natural language. In: Amir, A., Turpin, A., Moﬀat, A. (eds.) SPIRE 2008. LNCS,
vol. 5280, pp. 121–132. Springer, Heidelberg (2008)

8. Culpepper, J.S., Moﬀat, A.: Enhanced byte codes with restricted preﬁx properties.
In: Consens, M.P., Navarro, G. (eds.) SPIRE 2005. LNCS, vol. 3772, pp. 1–12.
Springer, Heidelberg (2005)

9. Fuhr, N., Grobjohann, K.: Xirql: A query language for information retrieval in

XML documents. In: SIGIR 2001, pp. 172–180 (2001)

10. Li, H.-G., Aghili, S.A., Agrawal, D., Abbadi, A.E.: Flux: fuzzy content and structure 
matching of XML range queries. In: WWW 2006, pp. 1081–1082 (2006)

11. Manber, U., Myers, G.: Suﬃx arrays: a new method for on-line string searches.

SIAM Journal on Computing 22(5), 935–948 (1993)

12. Moura, E., Navarro, G., Ziviani, N., Baeza-Yates, R.: Fast and ﬂexible word searching 
on compressed text. TOIS 18(2), 113–139 (2000)

