Sorted Range Reporting(cid:2)

Yakov Nekrich and Gonzalo Navarro

Department of Computer Science, University of Chile

yakov.nekrich@googlemail.com, gnavarro@dcc.uchile.cl

Abstract. We consider a variant of the orthogonal range reporting
problem when all points should be reported in the sorted order of their
x-coordinates. We show that reporting two-dimensional points with this
additional condition can be organized (almost) as eﬃciently as the standard 
range reporting. Moreover, our results generalize and improve the
previously known results for the orthogonal range successor problem and
can be used to obtain better solutions for some stringology problems.

1

Introduction

An orthogonal range reporting query Q on a set of d-dimensional points S asks
for all points p ∈ S that belong to the query rectangle Q =
i=1[ai, bi]. The
orthogonal range reporting problem, that is, the problem of constructing a data
structure that supports such queries, was studied extensively; see for example [1].
In this paper we consider a variant of the two-dimensional range reporting in
which reported points must be sorted by one of their coordinates. Moreover,
our data structures can also work in the online modus: the query answering
procedure reports all points from S ∩ Q in increasing x-coordinate order until
the procedure is terminated or all points in S ∩ Q are output.1

(cid:2)d

Some simple database queries can be represented as orthogonal range reporting 
queries. For instance, identifying all company employees who are between
20 and 40 years old and whose salary is in the range [r1, r2] is equivalent to
answering a range reporting query Q = [r1, r2] × [20, 40] on a set of points with

coordinates (salary, age). Then reporting employees with the salary-age range Q
sorted by their salary is equivalent to a sorted range reporting query.

Furthermore, the sorted reporting problem is a generalization of the orthogonal 
range successor problem (also known as the range next-value prob-
lem) [15,8,14,7,21]. The answer to an orthogonal range successor query Q =
[a, +∞] × [c, d] is the point with smallest x-coordinate2 among all points that
are in the rectangle Q. The best previously known O(n) space data structure 
for the range successor queries uses O(n) space and supports queries in

(cid:2) Partially funded by Millennium Nucleus Information and Coordination in Networks

ICM/FIC P10-024F, Chile.

1 We can get increasing/decreasing x/y-coordinate ordering via coordinate changes.
2 Previous works (e.g., [8,21]) use slightly diﬀerent deﬁnitions, but all of them are
equivalent up to a simple change of coordinate system or reduction to rank space [11].

F.V. Fomin and P. Kaski (Eds.): SWAT 2012, LNCS 7357, pp. 271–282, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012

272

Y. Nekrich and G. Navarro

O(log n/ log log n) time [21]. The fastest previously described structure supports
range successor queries in O(log log n) time but needs O(n log n) space. In this
paper we show that these results can be signiﬁcantly improved.

In Section 3 we describe two data structures for range successor queries. The
ε n) time; henceﬁrst 
structure needs O(n) space and answers queries in O(log
forth ε denotes an arbitrarily small positive constant. The second structure needs
O(n log log n) space and supports queries in O((log log n)2) time. Both data strucε 
n) and O((k+
tures can be used to answer sorted reporting queries in O((k+1) log
1)(log log n)2) time, respectively, where k is the number of reported points. In Sections 
4 and 5 we further improve the query time and describe a data structure that
ε n) space and supports sorted reporting queries in O(log log n + k)
uses O(n log
time. As follows from the reduction of [17] and the lower bound of [19], any data
O(1) n) space needs Ω(log log n+k) time to answer (unstructure 
that uses O(n log
sorted) orthogonal range reporting queries. Thus we achieve optimal query time
for the sorted range reporting problem. We observe that the currently best data
ε n)
structure for unsorted range reporting in optimal time [5] also uses O(n log
space. In Section 6 we discuss applications of sorted reporting queries to some
problems related to text indexing and some geometric problems.

Our results are valid in the word RAM model. Unless speciﬁed otherwise, we
measure the space usage in words of log n bits. We denote by p.x and p.y the
coordinates of a point p. We assume that points lie on an n × n grid, i.e., that
point coordinates are integers integers in [1, n]. We can reduce the more general
case to this one by reduction to rank space [11]. The space usage will not change
and the query time would increase by an additive factor pred(n), where pred(n)
is the time needed to search in a one-dimensional set of integers [20,19].

2 Compact Range Trees

The range tree is a handbook data structure frequently used for various orthogonal 
range reporting problems. Its leaves contain the x-coordinates of points; a
set S(v) associated with each node v contains all points whose x-coordinates are
stored in the subtree rooted at v. We will assume that points of S(v) are sorted
by their y-coordinates. S(v)[i] will denote the i-th point in S(v); S(v)[i..j] will
denote the sorted list of points S(v)[i], S(v)[i + 1], . . . , S(v)[j].

A standard range tree uses O(n log n) space, but this can be reduced by storing 
compact representations of sets S(v). We will need to support the following 
two operations on compact range trees. Given a range [c, d] and a node v,
noderange(c, d, v) ﬁnds the range [cv, dv] such that p.y ∈ [c, d] if and only if
p ∈ S(v)[cv..dv] for any p ∈ S(v). Given an index i and a node v, point(v, i)
returns the coordinates of point S(v)[i].

Lemma 1. [6,5] There exists a compact range tree that uses O(nf (n)) space and
supports operations point(v, i) and noderange(c, d, v) in O(g(n)) and O(g(n) +
ε n); (ii)
log log n) time, respectively, for (i) f (n) = O(1) and g(n) = O(log
ε n) and g(n) =
f (n) = O(log log n) and g(n) = O(log log n); (iii) f (n) = O(log
O(1).

Sorted Range Reporting

273

Proof : We can support point(v, i) in O(g(n)) time using O(nf (n)) space as in
variants (i) and (iii) using a result from Chazelle [6]; we can support point(v, i)
in O(log log n) time and O(n log log n) space using a result from Chan et al. [5].
In the same paper [5, Lemma 2.4], the authors also showed how to support
noderange(c, d, i) in O(g(n) + log log n) time and O(n) additional space using a
(cid:2)
data structure that supports point(v, i) in O(g(n)) time.

3 Sorted Reporting in Linear Space
In this section we show how a range successor query Q = [a, +∞] × [c, d] can be
answered eﬃciently. We combine the recursive approach of the van Emde Boas
structure [20] with compact structures for range maxima queries. A combination
of succinct range minima structures and range trees was also used in [5]. A novel
idea that distinguishes our data structure from the range reporting structure
in [5], as well as from the previous range successor structures, is binary search on
tree levels originally designed for one-dimensional searching [20]. We essentially
perform a one-dimensional search for the successor of a and answer range maxima
queries at each step. Let Tx denote the compact range tree on the x-coordinates
of points. Tx is implemented as in variant (i) of Lemma 1; hence, we can ﬁnd
ε n) time. We also store a compact
the interval [cv, dv] for any node v in O(log
structure for range maximum queries M (v) in every node v: given a range [i, j],
M (v) returns the index i ≤ t ≤ j of the point p with the greatest x-coordinate in
(v). M (v) and
S(v)[i..j]. We also store a structure for range minimum queries M
(v) use O(n) bits and answer queries in O(1) time [9]. Hence all M (u) and
M
(u) for u ∈ Tx use O(n) space. Finally, an O(n) space level ancestor structure
M
enables us to ﬁnd the depth-d ancestor of any node u ∈ Tx in O(1) time [2].
Let π denote the search path for a in the tree Tx: π connects the root of Tx
with the leaf that contains the smallest value ax ≥ a. Our procedure looks for
the lowest node vf on π such that S(v) ∩ Q (cid:7)= ∅. For simplicity we assume that
the length of π is a power of 2. We initialize vl to the leaf that contains ax; we
initialize vu to the root node. The node vf is found by a binary search on π.
We say that a node w is the middle node between u and v if w is on the path
from u to v and the length of the path from u to w equals to the length of the
path from w to v. We set the node vm to be the middle node between vu and
vl. Then we ﬁnd the index tm of the maximal element in S(vm)[cvm..dvm ] and
the point pm = S(vm)[tm]. If pm.x ≥ a, then vf is either vm or its descendant;
hence, we set vu = vm. If pm.x < a, then vf is an ancestor of vm; hence, we set
vl = vm. The search procedure continues until vu is the parent of vm. Finally,
we test nodes vu and vl and identify vf (if such vf exists).

(cid:3)
(cid:3)

(cid:3)

Fact 1. If the child v

(cid:3)

of vf belongs to π, then v

(cid:3)

is the left child of vf .

(cid:3)

Proof : Suppose that v
By deﬁnition of vf , Q ∩ S(v
(cid:3)
p.x < a for all points p ∈ S(v
we obtain a contradiction.

is the right child of vf and let v
)∪ S(v

) = ∅. Since v
(cid:3)(cid:3)
). Since S(vf ) = S(v

belongs to π and v

(cid:3)(cid:3)

(cid:3)

(cid:3)

(cid:3)(cid:3)

(cid:3)

(cid:3)(cid:3)

be the sibling of v
.
is the left child,
), Q∩ S(vf ) = ∅ and
(cid:2)

274

Y. Nekrich and G. Navarro

(cid:3) ∈ π is the left child of vf , p.x ≥ a for all p ∈ S(v

Since v
Moreover, p.x < a for all points p ∈ S(v
the range successor is the point with minimal x-coordinate in S(v

of v.
)[cv(cid:2) , dv(cid:2) ] by deﬁnition of vf . Therefore

) for the sibling v

(cid:3)

(cid:3)(cid:3)

(cid:3)(cid:3)

(cid:3)(cid:3)

)[cv(cid:2)(cid:2) ..dv(cid:2)(cid:2) ].
ε n) time in
< ε

(cid:3)

The search procedure visits O(log log n) nodes and spends O(log

each node, thus the total query time is O(log
in the above construction, we obtain the following result.

ε n log log n). By replacing ε

Lemma 2. There exists a data structure that uses O(n) space and answers orthogonal 
range successor queries in O(log

ε n) time.

If we use the compact tree that needs Θ(n log log n) space, then g(n) = log log n.
Using the same structure as in the proof of Lemma 2, we obtain the following.

Lemma 3. There exists a data structure that uses O(n log log n) space and answers 
orthogonal range successor queries in O((log log n)2) time.

Sorted Reporting Queries. We can answer sorted reporting queries by answering
a sequence of range successor queries. Consider a query Q = [a, b] × [c, d]. Let
p1 be the answer to the range successor query Q1 = [a, +∞] × [c, d]. For i ≥ 2,
let pi be the answer to the query Qi = [pi−1.x, +∞] × [c, d]. The sequence of
points p1, . . . pk is the sequence of k leftmost points in [a, b]×[c, d] sorted by their
x-coordinates. We observe that our procedure also works in the online modus
when k is not known in advance. That is, we can output the points of Q ∩ S in
the left-to-right order until the procedure is stopped by the user or all points in
Q ∩ S are reported.
Theorem 1. There exist a data structures that uses O(n) space and anε 
n) time, and that use
swer sorted range reporting queries in O((k + 1) log
O(n log log n) space and answer those queries in O((k + 1)(log log n)2) time.

4 Three-Sided Reporting in Optimal Time

In this section we present optimal time data structures for two special cases of
sorted two-dimensional queries. In the ﬁrst part of this section we describe a
data structure that answers sorted one-sided queries: for a query c we report all
points p, p.y ≤ c, sorted in increasing order of their x-coordinates. Then we will
show how to answer three-sided queries, i.e., to report all points p, a ≤ p.x ≤ b
and p.y ≤ c, sorted in increasing order by their x-coordinates.

One-Sided Sorted Reporting. We start by describing a data structure that answers 
queries in O(log n + k) time; our solution is based on a standard range tree
decomposition of the query interval [1, c] into O(log n) intervals. Then we show
how to reduce the query time to O(k + log log n). This improvement uses an
additional data structure for the case when k ≤ log n points must be reported.
We construct a range tree on the y-coordinates. For every node v ∈ T , the list
L(v) contains all points that belong to v sorted by their x-coordinates. Suppose
that we want to return k points p with smallest x-coordinates such that p.y ≤ c.

Sorted Range Reporting

275

(cid:3)

that follows p in L(vi) and insert p

We can represent the interval [1, c] as a union of O(log n) node ranges for nodes
vi ∈ T . The search procedure visits each vi and ﬁnds the leftmost point (that is,
the ﬁrst point) in every list L(vi). Those points are kept in a data structure D.
Then we repeat the following step k times: We ﬁnd the leftmost point p stored in
D, output p and remove it from D. If p belongs to a list L(vi), we ﬁnd the point
(cid:3)
p
into D. As D contains O(log n) points,
we support updates and ﬁnd the leftmost point in D in O(1) time [10]. Hence,
we can initialize D in O(log n) time and then report k points in O(k) time.
We can reduce the query time to O(k + log log n) by constructing additional
data structures. If k ≥ log n the data structure described above already answers
a query in O(k + log n) = O(k) time. The case k ≤ log n can be handled as
(cid:3) ∈ S such that
follows. We store for each p ∈ S a list V (p). Among all points p
.y ≤ p.y the list V (p) contains log n points with the smallest x-coordinates.
(cid:3)
p
Points in V (p) are sorted in increasing order by their x-coordinates. To ﬁnd k
leftmost points in [1, c] for k < log n, we identify the highest point pc ∈ S such
that pc.y ≤ c and report the ﬁrst k points in V (pc). The point pc can be found
in O(log log n) time using the van Emde Boas data structure [20]. If pc is known,
then a query can be answered in O(k) time for any value of k.
One last improvement will be important for the data structure of Lemma 5.
Let Sm denote the set of (cid:10)log log n(cid:11) lowest points in S. We store the y-coordinates
of p ∈ Sm in the q-heap F. Using F , we can ﬁnd the highest pm ∈ Sm, such that
pm.y ≤ c, in O(1) time [10]. Let nc = |{ p ∈ S | p.y ≤ c}|. If nc ≤ log log n, then
pm = pc. As described above, we can answer a query in O(k) time when pc is
known. Hence, a query can be answered in O(k) time if nc ≤ log log n.
Lemma 4. There exists an O(n log n) space data structure that supports onesided 
sorted range reporting queries in O(log log n + k) time. If the highest point
p with p.y ≤ c is known, then one-sided sorted queries can be supported in O(k)
time. If |{ p ∈ S | p.y ≤ c}| ≤ log log n, a sorted range reporting query [1, c] can
be answered in O(k) time.

(cid:3)

(cid:3)

−

(cid:3)

−

) for each v

belongs to π

Three-Sided Sorted Queries. We construct a range tree on x-coordinates of
points. For any node v, the data structure D(v) of Lemma 4 supports onesided 
queries on S(v) as described above. For each root-to-leaf path π we store
two data structures, R1(π) and R2(π). Let π+ and π
be deﬁned as follows. If
(cid:3)
v belongs to a path π and v is the left child of its parent, then its sibling v
belongs to π+. If v belongs to π and v is the right child of its parent, then its
sibling v
. The data structure R1(π) contains the lowest point in
(cid:3) ∈ π+; if v ∈ π is a leaf, R1(π) also contains the point stored in
S(v
(cid:3) ∈ π
−
v. The data structure R2(π) contains the lowest point in S(v
if v ∈ π is a leaf, R2(π) also contains the point stored in v. Let lev(v) denote the
level of a node v (the level of a node v is the length of the path from the root
to v). If a point p ∈ Ri(π), i = 1, 2, comes from a node v, then lev(p) = lev(v).
For a given query (c, l) the data structure R1(π) (R2(π)) reports points p such
that p.y ≤ c and lev(p) ≥ l sorted in decreasing (increasing) order by lev(p).
Since a data structure Ri(π), i = 1, 2, contain O(log n) points, the point with
the k-th largest (smallest) value of lev(p) among all p with p.y ≤ c can be found

) for each v

;

276

Y. Nekrich and G. Navarro

the k leftmost points p

(cid:3)

a and lev(v) > l or v ∈ π

in O(1) time. The implementation of structures Ri(π) is based on standard bit
techniques and will be described in the full version.
Consider a query Q = [a, b] × [1, c]. Let πa and πb be the paths from the root
to a and b respectively. Suppose that the lowest node v ∈ πa ∩ πb is situated on
level lev(v) = l. Then all points p such that p.x ∈ [a, b] belong to some node v
such that v ∈ π+
−
b and lev(v) > l. We start by ﬁnding
the leftmost point p in R1(πa) such that lev(p) > l and p.y ≤ c. Since the xcoordinates 
of points in R1(πa) decrease as lev(p) increases, this is equivalent
to ﬁnding the point p1 ∈ R1(πa) such that p1.y ≤ c and lev(p1) is maximal. If
lev(p1) > l, we visit the node v1 ∈ π+
a that contains p1; using D(v1), we report
.y ≤ c. Then, we ﬁnd the point p2
with the next largest value of lev(p) among all p ∈ R1(πa) such that p.y ≤ c; we
visit the node v2 ∈ π+
a that contains p2 and proceed as above. The procedure
continues until k points are output or there are no more points p ∈ R1(πa),
lev(p) > l and p.y ≤ c. If k
u ∈ π
Let ki denote the number of reported points from the set S(vi) and let mi =
Q ∩ S(vi). We spend O(ki) time in a visited node vi if ki ≥ log log n or mi <
log log n. If kj < log log n and mj ≥ log log n, then we spend O(log log n + kj)
time in the respective node vj. Thus we spend O(log log n + kj) time in a node
vj only if mj > kj, i.e., only if not all points from S(vj) ∩ Q are reported. Since
at most one such node vj is visited, the total time needed to answer all one-sided
queries is O(

b and report remaining k − k
−

< k points were reported, we visit selected nodes

(cid:3) ∈ S(v1) such that p

points using a symmetric procedure.

i ki + log log n) = O(log log n + k).

(cid:3)

(cid:3)

(cid:3)

Lemma 5. There exists an O(n log2 n) space data structure that answers threesided 
sorted reporting queries in O(log log n + k) time.

Online queries. We assumed in Lemmas 4 and 5 that parameter k is ﬁxed and
given with the query. Our data structures can also support queries in the online
modus using the method originally described in [3]. The main idea is that we ﬁnd
roughly Θ(ki) leftmost points from the query range for ki = 2i and i = 1, 2, . . .;
while ki points are reported, we simultaneously compute the following Θ(ki+1)
points in the background. For a more extensive description, refer to [18, Section
4.1], where the same method for a slightly diﬀerent problem is described.

5 Two-Dimensional Range Reporting in Optimal Time

We store points in a compact range tree Ty on y-coordinates. We use the variant
ε n) space and retrieves the coordinates of the
(iii) of Lemma 1 that uses O(n log
r-th point from S(v) in O(1) time. Moreover, the sets S(v), v ∈ Ty, are divided
into groups Gi(v). Each Gi(v), except of the last one, contains (cid:10)log3 n(cid:11) points.
For i < j, each point assigned to Gi(v) has smaller x-coordinate than any point
in Gj(v). The set S
(v) contains selected elements from S(v). If v is the right child
(v) contains (cid:10)log log n(cid:11) points with smallest y-coordinates
(cid:3)
of its parent, then S
from each group Gi(v); structure D
(v) supports three-sided sorted queries of the
form [a, b]× [0, c] on points of S
(v)

(v). If v is the left child of its parent, then S

(cid:3)

(cid:3)

(cid:3)

(cid:3)

Sorted Range Reporting

277

(cid:3)

contains (cid:10)log log n(cid:11) points with largest y-coordinates from each group Gi(v); data
(v) supports three-sided sorted queries of the form [a, b] × [c, +∞]
structure D
(cid:3)
on points of S
(v) we store the index i of the group
Gi(v) that contains p. We also store the point with the largest x-coordinate from
each Gi(v) in a structure E(v) that supports O(log log n) time searches [20].

(v). For each point p

(cid:3) ∈ S

(cid:3)

For all points in each group Gi(v) we store an array Ai(v) that contains
points sorted by their y-coordinates. Each point is speciﬁed by the rank of its
x-coordinate in Gi(v); so each entry uses O(log log n) bits of space.
To answer a query Q = [a, b] × [c, d], we ﬁnd the lowest common ancestor
vc of the leaves that contain c and d. Let vl and vr be the left and the right
children of vc. All points in Q ∩ S belong to either ([a, b] × [c, +∞]) ∩ S(vl)
or ([a, b] × [0, d]) ∩ S(vr). We generate the sorted list of k leftmost points in
Q ∩ S by merging the lists of k leftmost points in ([a, b] × [c, +∞]) ∩ S(vl)
and ([a, b] × [0, d]) ∩ S(vr). Thus it suﬃces to answer sorted three-sided queries
([a, b] × [c, +∞]) and ([a, b] × [0, d]) in nodes vl and vr respectively.
We consider a query ([a, b] × [0, d]) ∩ S(vr); query [a, b] × [c, +∞] is answered
symmetrically. Assume [a, b] ﬁts into one group Gi(vr), i.e., all points p such that
a ≤ p.x ≤ b belong to one group Gi(vr). We can ﬁnd the y-rank dr of the highest
point p ∈ Gi(vr), such that p.y ≤ d in O(lg lg n) time by binary search in Ai(vr).
Let ar and br be the ranks of a and b in Gi(vr). We can ﬁnd the positions of k
leftmost points in ([ar, br]×[0, dr])∩Gi(vr) using a data structure Hi(vr). Hi(vr)
contains the y-ranks and x-ranks of points in Gi(vr) and answers sorted threesided 
queries on Gi(vr). By Lemma 5, Hi(vr) uses O(|Gi(vr)|(log log n)3) bits
and supports queries in O(log log log n+k) time. Actual coordinates of points can
be obtained from their ranks in Gi(vr) in O(1) time per point: if the x-rank of
a point is known, we can compute its position in S(vr); we obtain x-coordinates
of the i-th point in S(vr) using variant (iii) of Lemma 1.

Now assume [a, b] spans several groups Gi(vr), . . . , Gj(vr) for i < j. That is,
the x-coordinates of all points in groups Gi+1(vr), . . . , Gj−1(vr) belong to [a, b];
the x-coordinate of at least one point in Gi(vr) (Gj(vr)) is smaller than a (larger
than b) but the x-coordinate of at least one point in Gi(vr) and Gj (vr) belongs
to [a, b]. Indices i and j are found in O(log log n) time using E(vr). We report
at most k leftmost points in ([a, b] × [0, d]) ∩ Gi(vr) just as described above.

Let k1 = |([a, b]× [0, d])∩ Gi(vr)|; if k1 ≥ k, the query is answered. Otherwise,
= k−k1 leftmost points in ([a, b]×[0, d])∩(Gi+1(vr)∪. . .∪Gj−1(vr))

we report k
be the minimal and the maximal xusing 
the following method. Let a
coordinates of points in Gi+1(vr) and Gj−1(vr), respectively. The main idea is
to answer the query Q
(vr) in the online modus using
(vr). If some group Gt(vr), i < t < j, contains less than
the data structure D
(cid:10)log log n(cid:11) points p with p.y ≤ d, then all such p belong to S
(vr) and will be
reported by D
(vr) reported log log n points that belong to
the same group Gt(vr). Then we ﬁnd the rank dt of d among the y-coordinates of
points in Gt(vr). Using Ht(vr), we report the positions of all points p ∈ Gt(vr),
such that the rank of p.y in Gt(vr) is at most dt, in the left-to right order; we
can also identify the coordinates of every such p in O(1) time per point. The

] × [0, d]) ∩ S

(vr). Suppose that D

and b

= ([a

, b

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3)

278

Y. Nekrich and G. Navarro

query to Ht(vr) is terminated when all such points are reported or when the
total number of reported points is k.
We need O(log log n + kt) time to answer a query on Ht(vr), where kt denotes
(cid:3) ∩ Gt(vr)| If Gt is the
the number of reported points from Gt(vr). Let mt = |Q
last examined group, then kt ≤ mt; otherwise kt = mt. We send a query to
Gt(vr) only if Gt(vr) contains at least log log n points from Q
. Hence, a query
to Gt(vr) takes O(log log n+kt) = O(kt) time, unless Gt(vr) is the last examined
group. Thus all necessary queries to Gt(vr) for i<t<j take O(log log n + k) time.
Finally, if the total number of points in ([a, b]×[0, d])∩(Gi(vr)∪. . .∪Gj−1(vr))
is smaller than k, we also report the remaining points from ([a, b]×[0, d])∩Gj(vr).
(v)
(v)| log2 n log log n) = O(|S(v)| log log n/ log n) words of space. Since
uses O(|S
all sets S(v), v ∈ Ty, contain O(n log n) points, all D
(v) use O(n log log n)
words of space. A data structure for a group Gi(v) uses O(|Gi(v)|(log log n)3)
bits. Since all Gi(v) for all v ∈ Ty contain O(n log n) elements, data structures
for all groups Gi(v) use O(n(log log n)3) words of log n bits.

ε n) words of space. A data structure D

(cid:3)

The compact tree Ty uses O(n log

(cid:3)

(cid:3)

(cid:3)

Theorem 2. There exists a O(n log
dimensional sorted reporting queries in O(log log n + k) time.

ε n) space data structure that answers two6 
Applications

In this section we will describe data structures for several indexing and computational 
geometry problems. A text (string) T of length n is pre-processed and
stored in a data structure so that certain queries concerning some substrings of
T can be answered eﬃciently.
Preliminaries. In a suﬃx tree T for a text T , every leaf of T is associated
with a suﬃx of T . If the leaves of T are listed from left to right, then the
corresponding suﬃxes of T are lexicographically sorted. For any pattern P , we
can ﬁnd in O(|P|) time the special node v ∈ T , called the locus of P . The
starting position of every suﬃx in the subtree of v = locus(P ) is the location
of an occurrence of P . We deﬁne the rank of a suﬃx Suf as the number of T ’s
suﬃxes that are lexicographically smaller than or equal to Suf. The ranks of all
suﬃxes in v = locus(P ) belong to an interval [left (P ), right (P )], where left (P )
and right (P ) denote the ranks of the leftmost and the rightmost suﬃxes in the
subtree of v. Thus for any pattern P there is a unique range [left (P ), right (P )];
pattern P occurs at position i in T if and only if the rank of suﬃx T [i..n] belongs
to [left (P ), right (P )]. Refer to [13] for a more extensive description of suﬃx trees
and related concepts.

We will frequently use a special set of points, further called the position set
for T . Every point p in the position set corresponds to a unique suﬃx Suf of a
string T ; the y-coordinate of p equals to the rank of Suf and the x-coordinate of
p equals to the starting position of Suf in T .

Successive List Indexing. In this problem a query consists of a pattern P and an
index j, 1 ≤ j ≤ n. We want to ﬁnd the ﬁrst (leftmost) occurrence of P at position

Sorted Range Reporting

279

i ≥ j. A successive list indexing query (P, j) is equivalent to ﬁnding the point p
from the position set such that p belongs to the range [j, n] × [lef t(P ), right(P )]
and the x-coordinate of p is minimal. Thus a list indexing query is equivalent to
a range successor query on the position set. Using Theorems 1 and 2 to answer
range successor queries, we obtain the following result.
Corollary 1. We can store a string T in an O(nf (n)) space data structure,
so that for any pattern P and any index j, 1 ≤ j ≤ n, the leftmost occurrence
of P at position i ≥ j can be found in O(g(n)) time for (i) f (n) = O(1) and
ε n); (ii) f (n) = O(log log n) and g(n) = O((log log n)2); (iii)
g(n) = O(log
ε
f (n) = O(log
n) and g(n) = O(log log n).

Range Non-Overlapping Indexing. In the string statistics problem we want to
ﬁnd the maximum number of non-overlapping occurrences of a pattern P . In [14]
the range non-overlapping indexing problem was introduced: instead of just computing 
the maximum number of occurrences we want to ﬁnd the longest sequence 
of non-overlapping occurrences of P . It was shown [14] that the range
non-overlapping indexing problem can be solved via k successive list indexing
queries; here k denotes the maximal number of non-overlapping occurrences.

Corollary 2. The range non-overlapping indexing problem can be solved in
O(|P| + kg(n)) time with an O(nf (n)) space data structure, where g(n) and
f (n) are deﬁned as in Corollary 1.

Other, more far-fetched applications, are described next.

(cid:3)m
i=1

6.1 Pattern Matching with Variable-Length Don’t Cares
We must determine whether a query pattern P = P1 ∗ P2 ∗ P3 . . . ∗ Pm occurs
in T . The special symbol ∗ is the Kleene star symbol; it corresponds to an
arbitrary sequence of (zero or more) characters from the original alphabet of T .
The parameter m can be speciﬁed at query time. In [22] the authors showed
|Pi|) and O(n) space in the case when
how to answer such queries in O(
O(1) n. In this paper we describe a data structure for
the alphabet size is log
an arbitrarily large alphabet. Using the approach of [22], we can reduce such a
query for P to answering m successive list indexing queries. First, we identify the
leftmost occurrence of P1 in T by answering the successive list indexing query
(P1, 1). Let j1 denote the leftmost position of P1. P1 ∗ P2 ∗ P3 . . . ∗ Pm occurs in
T if and only if P2 ∗ P3 . . . ∗ Pm occurs at position i ≥ j1 + |P1|. We ﬁnd the
leftmost occurrence j2 ≥ j1 + |P1| of P2 by answering the query (P2, j1 + |P1|).
P2 ∗ P3 . . . ∗ Pm occurs in T at position i2 ≥ j1 + |P1| if and only if P3 ∗ Pm
occurs at position i3 ≥ j2 +|P2|. Proceeding in the same way we ﬁnd the leftmost
possible positions for P4 ∗ . . . ∗ Pm. Thus we answer m successive list indexing
queries (Pt, it), t = 1, . . . , m; here i1 = 1, it = jt−1 + |Pi−1| for t ≥ 2, and jt−1
denotes the answer to the (t − 1)-th query.
Corollary 3. We can determine whether a text T contains a substring P =
P1 ∗ . . . Pm−1 ∗ Pm in O(
|Pi| + mg(n)) time using an O(nf (n)) space data

structure, where g(n) and f (n) are deﬁned as in Corollaries 1 and 2.

(cid:3)m
i=1

280

Y. Nekrich and G. Navarro

6.2 Ordered Substring Searching

Suppose that a data structure contains a text T and we want to report occurrences 
of a query pattern P in the left-to-right order, i.e., in the same order as
they appear in T ; in some case we may want to ﬁnd only the k leftmost occurrences.
 In this section we describe two solutions for this problem. Then we show
how sorted range reporting can be used to solve the position-restricted variant
of this problem. We denote by occ the number of P ’s occurrences in T that are
reported when a query is answered.

Data Structure with Optimal Query Time. Such queries can be answered in
O(|P| + occ) time and O(n) space using the suﬃx tree and the data structure
of Brodal et al. [3]. Positions of suﬃxes are stored in lexicographic order in the
suﬃx array A; the k-th entry A[k] contains the starting position of the k-th
suﬃx in the lexicographic order. In [3] the authors described an O(n) space data
structure that answers online sorted range reporting queries: for any i ≥ j, we
can report in O(j − i + 1) time all entries A[t], i ≤ t ≤ j, sorted in increasing
order by their values. Occurrences of a pattern P can be reported in the left-toright 
order as follows. Using a suﬃx tree, we ﬁnd left (P ) and right (P ) in O(|P|)
time. Then we report all suﬃxes in the interval [left (P ), right (P )] sorted by their
starting positions using the data structure of [3] on A.
Corollary 4. We can answer a sorted substring matching query in O(|P| + occ)
time using a O(n) space data structure.

Succinct Data Structure. The space usage of a data structure for sorted pattern
matching can be further reduced. We store a compressed suﬃx array for T and a
succinct data structure for range minimum queries. We use the implementation
of the compressed suﬃx array described in [12] that needs (1 + 1/ε)nHk + o(n)
O(1) n, where σ denotes the alphabet size and Hk is the k-th
bits for σ = log
order entropy. Using the results of [12], we can ﬁnd the position of the i-th
ε n) time. We can also ﬁnd left (P ) and
lexicographically smallest suﬃx in O(log
right (P ) for any P in O(|P|) time. We also store the range minimum data
structure [9] for the array A deﬁned above. For any i ≤ j, we can ﬁnd such
k = rmq(i, j) that A[k] ≤ A[t] for any i ≤ t ≤ j. Observe that A itself is not
stored; we only store the structure from [9] that uses O(n) bits of space. Now
occurrences of P are reported as follows. An initially empty queue Q contains
suﬃx positions; with every suﬃx position p we also store an interval [lp, rp]
and the rank ip of the suﬃx that starts at position p. Let l = left (P ) and
r = right (P ). We ﬁnd if = rmq(l, r) and the position pf of the suﬃx with rank
if . The position pf with its rank if and the associated interval [l, r] is inserted
into Q. We repeat the following steps until Q is empty. The item with the minimal
value of pt is extracted from Q. Let it and [lt, rt] denote the rank and interval
= rmq(it + 1, rt)
stored with pt. We answer queries i
(cid:3)
of suﬃxes with ranks i
, p
and identify the positions p
. Finally, we insert
, [lt, it − 1]) and (p
(cid:3)(cid:3)
(cid:3)(cid:3)
items (p
, [it + 1, rt]) into Q. Using the van Emde Boas
data structure, we can implement each operation on Q in O(log log n) time. We

= rmq(lt, it − 1) and i
(cid:3)(cid:3)
, i

, i

(cid:3)(cid:3)

(cid:3)

(cid:3)

, i

(cid:3)

(cid:3)(cid:3)

(cid:3)

Sorted Range Reporting

281

ε n) time. Thus the total
can ﬁnd the position of a suﬃx with rank i in O(log
time that we need to answer a query is O(|P| + occ log
ε n). Our data structure
uses (1 + 1/ε)nHk + O(n) bits. We observe however that we need O(occ log n)
additional bits at the time when a query is answered.

Corollary 5. If the alphabet size σ = log
substring searching query in O(|P|+occ log
bit data structure.

O(1) n, then we can answer an ordered
ε n) time using a (1+1/ε)nHk+O(n)-

Position-Restricted Ordered Substring Searching. The position restricted substring 
searching problem was introduced by M¨akinen and Navarro in [16]. Given
a range [i, j] we want to report all occurrences of P that start at position t,
i ≤ t ≤ j. If we want to report occurrences of P at positions from [i, j] in the
sorted order, then this is equivalent to answering a sorted range reporting query
[i, j] × [left (P ), right (P )]. Hence, we can obtain the same time-space trade-oﬀs
as in Theorems 1 and 2.

6.3 Maximal Points in a 2D Range and Rectangular Visibility
A point p dominates another point q if p.x ≥ q.x and p.y ≥ q.y. A point p ∈ S
is a maximal point if p is not dominated by any other point q ∈ S. In a twodimensional 
maximal points range query, we must ﬁnd all maximal points in Q∩S
for a query rectangle Q. We refer to [4] and references therein for description of
previous results.

We can answer such queries using orthogonal range successor queries. For
simplicity, we assume that all points have diﬀerent xand 
y-coordinates. Suppose
that maximal points in the range Q = [a, b] × [c, d] must be listed. For i ≥ 1, we
report a point pi such that pi.x ≥ p.x for any p ∈ Qi−1 ∩ S, where Q0 = Q and
Qj = [a, pi.x] × [pi.y, d] for j ≥ 1. Our reporting procedure is completed when
Qi ∩ S = ∅. Clearly, ﬁnding a point pi or determining that no such pi exists is
equivalent to answering a range successor query for Qi−1. Thus we can ﬁnd k
maximal points in O(kg(n)) time using an O(nf (n)) space data structure, where
g(n) and f (n) are again deﬁned as in Corollary 1.
A point p ∈ S is rectangularly visible from a point q if Qpq ∩ S = ∅, where
Qpq is the rectangle with points p and q at its opposite corners. In the rectangle
visibility problem, we must determine all points p ∈ S that are visible from a
query point q. Rectangular visibility problem is equivalent to ﬁnding maximal
points in Q∩ S for Q = [0, q.x]× [0, q.y]. Hence, we can ﬁnd points rectangularly
visible from q in O(kg(n)) time using an O(nf (n)) space data structure.

References

1. Agarwal, P., Erickson, J.: Geometric range searching and its relatives. Contemporary 
Mathematics 223, 1–56 (1999)

2. Bender, M.A., Farach-Colton, M.: The level ancestor problem simpliﬁed. Theor.

Comput. Sci. 321(1), 5–12 (2004)

282

Y. Nekrich and G. Navarro

3. Brodal, G.S., Fagerberg, R., Greve, M., L´opez-Ortiz, A.: Online Sorted Range
Reporting. In: Dong, Y., Du, D.-Z., Ibarra, O. (eds.) ISAAC 2009. LNCS, vol. 5878,
pp. 173–182. Springer, Heidelberg (2009)

4. Brodal, G.S., Tsakalidis, K.: Dynamic Planar Range Maxima Queries. In: Aceto,
L., Henzinger, M., Sgall, J. (eds.) ICALP 2011, Part I. LNCS, vol. 6755, pp. 256–
267. Springer, Heidelberg (2011)

5. Chan, T.M., Larsen, K.G., Patrascu, M.: Orthogonal range searching on the RAM,

revisited. In: Proc. 27th SoCG, pp. 1–10 (2011)

6. Chazelle, B.: A functional approach to data structures and its use in multidimensional 
searching. SIAM J. Comput. 17(3), 427–462 (1988)

7. Crochemore, M., Iliopoulos, C.S., Kubica, M., Rahman, M.S., Walen, T.: Improved 
algorithms for the range next value problem and applications. In: Proc.
25th STACS, pp. 205–216 (2008)

8. Crochemore, M., Iliopoulos, C.S., Rahman, M.S.: Finding Patterns in Given Intervals.
 In: Kuˇcera, L., Kuˇcera, A. (eds.) MFCS 2007. LNCS, vol. 4708, pp. 645–656.
Springer, Heidelberg (2007)

9. Fischer, J.: Optimal Succinctness for Range Minimum Queries. In: L´opez-Ortiz, A.

(ed.) LATIN 2010. LNCS, vol. 6034, pp. 158–169. Springer, Heidelberg (2010)

10. Fredman, M.L., Willard, D.E.: Trans-dichotomous algorithms for minimum spanning 
trees and shortest paths. J. Comput. Syst. Sci. 48(3), 533–551 (1994)

11. Gabow, H.N., Bentley, J.L., Tarjan, R.E.: Scaling and related techniques for geometry 
problems. In: Proc. 16th STOC, pp. 135–143 (1984)

12. Grossi, R., Gupta, A., Vitter, J.S.: High-order entropy-compressed text indexes.

In: Proc. 14th SODA, pp. 841–850 (2003)

13. Gusﬁeld, D.: Algorithms on Strings, Trees, and Sequences - Computer Science and

Computational Biology. Cambridge University Press (1997)

14. Keller, O., Kopelowitz, T., Lewenstein, M.: Range Non-overlapping Indexing and
Successive List Indexing. In: Dehne, F., Sack, J.-R., Zeh, N. (eds.) WADS 2007.
LNCS, vol. 4619, pp. 625–636. Springer, Heidelberg (2007)

15. Lenhof, H.-P., Smid, M.H.M.: Using persistent data structures for adding range restrictions 
to searching problems. RAIRO Theor. Inf. and Appl. 28(1), 25–49 (1994)
16. M¨akinen, V., Navarro, G.: Rank and select revisited and extended. Theor. Comput.

Sci. 387(3), 332–347 (2007)

17. Miltersen, P.B., Nisan, N., Safra, S., Wigderson, A.: On data structures and asymmetric 
communication complexity. J. Comput. Syst. Sci. 57(1), 37–49 (1998)

18. Navarro, G., Nekrich, Y.: Top-k document retrieval in optimal time and linear

space. In: Proc. 22nd SODA, pp. 1066–1077 (2012)

19. P˘atra¸scu, M., Thorup, M.: Time-space trade-oﬀs for predecessor search. In: Proc.

38th STOC, pp. 232–240 (2006)

20. van Emde Boas, P., Kaas, R., Zijlstra, E.: Design and implementation of an eﬃcient

priority queue. Math. Sys. Theory 10, 99–127 (1977)

21. Yu, C.-C., Hon, W.-K., Wang, B.-F.: Improved data structures for the orthogonal

range successor problem. Comput. Geom. Theory Appl. 44, 148–159 (2011)

22. Yu, C.-C., Wang, B.-F., Kuo, C.-C.: Eﬃcient Indexes for the Positional Pattern
Matching Problem and Two Related Problems over Small Alphabets. In: Cheong,
O., Chwa, K.-Y., Park, K. (eds.) ISAAC 2010, Part II. LNCS, vol. 6507, pp. 13–24.
Springer, Heidelberg (2010)

