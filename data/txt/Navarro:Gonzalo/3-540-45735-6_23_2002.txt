Fully Dynamic Spatial Approximation Trees(cid:1)

Gonzalo Navarro1 and Nora Reyes2

1 Center for Web Research, Dept. of Computer Science, University of Chile

Blanco Encalada 2120, Santiago, Chile

2 Depto. de Inform´atica, Universidad Nacional de San Luis

gnavarro@dcc.uchile.cl

Ej´ercito de los Andes 950, San Luis, Argentina

nreyes@unsl.edu.ar

Abstract. The Spatial Approximation Tree (sa-tree) is a recently proposed 
data structure for searching in metric spaces. It has been shown
that it compares favorably against alternative data structures in spaces
of high dimension or queries with low selectivity. Its main drawbacks are:
costly construction time, poor performance in low dimensional spaces or
queries with high selectivity, and the fact of being a static data structure,
that is, once built, one cannot add or delete elements. These facts rule
it out for many interesting applications.
In this paper we overcome these weaknesses. We present a dynamic version 
of the sa-tree that handles insertions and deletions, showing experimentally 
that the price of adding dynamism is rather low. This is
remarkable by itself since very few data structures for metric spaces are
fully dynamic. In addition, we show how to obtain large improvements in
construction and search time for low dimensional spaces or highly selective 
queries. The outcome is a much more practical data structure that
can be useful in a wide range of applications.

1 Introduction

The concept of “approximate” searching has applications in a vast number of
ﬁelds. Some examples are non-traditional databases (e.g. storing images, ﬁngerprints 
or audio clips, where the concept of exact search is of no use and we
search instead for similar objects); text searching (to ﬁnd words and phrases in
a text database allowing a small number of typographical or spelling errors);
information retrieval (to look for documents that are similar to a given query
or document); machine learning and classiﬁcation (to classify a new element according 
to its closest representative); image quantization and compression (where
only some vectors can be represented and we code the others as their closest representable 
point); computational biology (to ﬁnd a DNA or protein sequence in
a database allowing some errors due to mutations); and function prediction (to

(cid:1) This work has been partially supported CYTED VII.19 RIBIDI Project (both au-
thors) and Millenium Nucleus Center for Web Research, Grant P01-029-F, Mideplan,
Chile (ﬁrst author).

A.H.F. Laender and A.L. Oliveira (Eds.): SPIRE 2002, LNCS 2476, pp. 254–270, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002

Fully Dynamic Spatial Approximation Trees

255

search for the most similar behavior of a function in the past so as to predict its
probable future behavior).
All those applications have some common characteristics. There is a universe
U of objects, and a nonnegative distance function d : U × U −→ R+ deﬁned
among them. This distance may (and ideally does) satisfy the three axioms
that make the set a metric space: strict positiveness (d(x, y) = 0 ⇔ x = y),
symmetry (d(x, y) = d(y, x)) and triangle inequality (d(x, z) ≤ d(x, y) + d(y, z)).
The smaller the distance between two objects, the more “similar” they are. We
have a ﬁnite database S ⊆ U, which is a subset of the universe of objects and
can be preprocessed (to build an index, for example). Later, given a new object
from the universe (a query q), we must retrieve all similar elements found in the
database. There are two typical queries of this kind:
Range query: Retrieve all elements within distance r to q in S. This is, {x ∈

S , d(x, q) ≤ r}.
Nearest neighbor query (k-NN): Retrieve the k closest elements to q in S.
That is, a set A ⊆ S such that |A| = k and ∀x ∈ A, y ∈ S − A, d(x, q) ≤
d(y, q).

The distance is considered expensive to compute (think, for instance, in comparing 
two ﬁngerprints). Hence, it is customary to deﬁne the complexity of the
search as the number of distance evaluations performed, disregarding other components 
such as CPU time for side computations, and even I/O time. Given a
database of |S| = n objects, queries can be trivially answered by performing n
distance evaluations. The goal is to structure the database such that we perform
less distance evaluations.

A particular case of this problem arises when the space is a set of Ddimensional 
points and the distance belongs to the Minkowski Lp family: Lp =
(cid:1)
1≤i≤D |xi − yi|p)1/p. For example p = 2 yields Euclidean distance. There
(
are eﬀective methods to search in D-dimensional spaces [4, 1]. However, for
roughly 20 dimensions or more those structures cease to work well. We focus in
this paper on general metric spaces, although the solutions are well suited also
for D-dimensional spaces. It is interesting to notice that the concept of “dimen-
sionality” can be translated to metric spaces as well: the typical feature in high
dimensional spaces with Lp distances is that the probability distribution of distances 
among elements has a very concentrated histogram (with larger mean as
the dimension grows), making the work of any similarity search algorithm more
diﬃcult [2, 3]. We say that a general metric space is high dimensional when its
histogram of distances is concentrated.

For general metric spaces, there exist a number of methods to preprocess the
database in order to reduce the number of distance evaluations [3]. All those
structures work on the basis of discarding elements using the triangle inequality,
and most use the classical divide-and-conquer approach (which is not speciﬁc of
metric space searching).

The Spatial Approximation Tree (sa-tree) is a recently proposed data structure 
of this kind [5, 6], based on a novel concept: rather than dividing the search

