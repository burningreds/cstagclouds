Regular Expression Searching over Ziv{Lempel

Compressed Text

Gonzalo Navarro?

Dept. of Computer Science, University of Chile

Blanco Encalada 2120, Santiago, Chile

gnavarro@dcc.uchile.cl

Abstract. We present a solution to the problem of regular expression
searching on compressed text. The format we choose is the Ziv{Lempel
family, speci(cid:12)cally the LZ78 and LZW variants. Given a text of length u
compressed into length n, and a pattern of length m, we report all the R
occurrences of the pattern in the text in O(2m + mn + Rm log m) worst
case time. On average this drops to O(m2 + (n + R) log m) or O(m2 +
n + Ru=n) for most regular expressions. This is the (cid:12)rst nontrivial result
for this problem. The experimental results show that our compressed
search algorithm needs half the time necessary for decompression plus
searching, which is currently the only alternative.

1 Introduction

The need to search for regular expressions arises in many text-based applications,
such as text retrieval, text editing and computational biology, to name a few.
A regular expression is a generalized pattern composed of (i) basic strings, (ii)
union, concatenation and Kleene closure of other regular expressions [1]. The
problem of regular expression searching is quite old and has received continuous
attention since the sixties until our days (see Section 2.1).

A particularly interesting case of text searching arises when the text is compressed.
 Text compression [6] exploits the redundancies of the text to represent 
it using less space. There are many di(cid:11)erent compression schemes, among
which the Ziv{Lempel family [32,33] is one of the best in practice because of
its good compression ratios combined with e(cid:14)cient compression and decompression 
times. The compressed matching problem consists of searching a pattern
on a compressed text without uncompressing it. Its main goal is to search the
compressed text faster than the trivial approach of decompressing it and then
searching. This problem is important in practice. Today’s textual databases are
an excellent example of applications where both problems are crucial: the texts
should be kept compressed to save space and I/O time, and they should be e(cid:14)-
ciently searched. Surprisingly, these two combined requirements are not easy to
achieve together, as the only solution before the 90’s was to process queries by
uncompressing the texts and then searching into them.
? Partially supported by Fondecyt grant 1-990627.

A. Amir and G.M. Landau (Eds.): CPM 2001, LNCS 2089, pp. 1{17, 2001.
c(cid:13) Springer-Verlag Berlin Heidelberg 2001

2

Gonzalo Navarro

Since then, a lot of research has been conducted on the problem. A wealth of
solutions have been proposed (see Section 2.2) to deal with simple, multiple and,
very recently, approximate compressed pattern matching. Regular expression
searching on compressed text seems to be the last goal which still de(cid:12)es the
existence of any nontrivial solution.

This is the problem we solve in this paper: we present the (cid:12)rst solution
for compressed regular expression searching. The format we choose is the Ziv{
Lempel family, focusing in the LZ78 and LZW variants [33,29]. Given a text
of length u compressed into length n, we are able to (cid:12)nd the R occurrences of
a regular expression of length m in O(2m + mn + Rm log m) worst case time,
needing O(2m + mn) space. We also propose two modi(cid:12)cations which achieve
O(m2 +(n + R) log m) or O(m2 + n + Ru=n) average case time and, respectively,
O(m+n log m) or O(m+n) space, for \admissible" regular expressions, i.e. those
whose automaton runs out of active states after reading O(1) text characters.
These results are achieved using bit-parallelism and are valid for short enough
patterns, otherwise the search times have to be multiplied by dm=we, where w
is the number of bits in the computer word.

We have implemented our algorithm on LZW and compared it against the
best existing algorithms on uncompressed text, showing that we can search the
compressed text twice as fast as the naive approach of uncompressing and then
searching.

2 Related Work

2.1 Regular Expression Searching

The traditional technique [26] to search a regular expression of length m (which
means m letters, not counting the special operators such as "*", "|", etc.) in
a text of length u is to convert the expression into a nondeterministic (cid:12)nite
automaton (NFA) with O(m) nodes. Then, it is possible to search the text using
the automaton at O(mu) worst case time. The cost comes from the fact that
more than one state of the NFA may be active at each step, and therefore all
may need to be updated.

On top of the basic algorithm for converting a regular expression into an
NFA, we have to add a self-loop at the initial state which guarantees that it
keeps always active, so it is able to detect a match starting anywhere in the
text. At each text position where a (cid:12)nal state gets active we signal the end point
of an occurrence.

A more e(cid:14)cient choice [1] is to convert the NFA into a deterministic (cid:12)nite
automaton (DFA), which has only one active state at a time and therefore allows
searching the text at O(u) cost, which is worst-case optimal. The cost of this
approach is that the DFA may have O(2m) states, which implies a preprocessing
cost and extra space exponential in m.

An easy way to obtain a DFA from an NFA is via bit-parallelism, which is
a technique to code many elements in the bits of a single computer word and

