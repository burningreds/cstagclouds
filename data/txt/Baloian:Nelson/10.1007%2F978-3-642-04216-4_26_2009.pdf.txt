Cooperative Model Reconstruction for Cryptographic 

Protocols Using Visual Languages 

Benjamin Weyers1, Wolfram Luther1, and Nelson Baloian2 

1 University of Duisburg-Essen, INKO, Lotharstr. 65, Duisburg, Germany 

2 U. de Chile, Department of Computer Science, Blanco Encalada 2120, Santiago, Chile 

nbaloian@dcc.uchile.cl, {luther,weyers}@inf.uni-due.de 

Abstract. Cooperative work in learning environments has been shown to be a 
successful extension to traditional learning systems due to the great impact of 
cooperation on students’ motivation and learning success. In this paper we describe 
a new approach to cooperative construction of cryptographic protocols. 
Using an appropriate visual language (VL), students describe a protocol step by 
step, modeling subsequent situations and alternating this with the creation of a 
concept  keyboard  (CK)  describing  the  operations  in  the  protocol.  The  system 
automatically generates a colored Petri subnet that is matched against an existing 
 action  logic  specifying  the  protocol.  Finally,  the  learners  implement  roledependent 
CKs in a cooperative workflow and perform a role-play simulation.  

Keywords:  Cooperative  construction,  cryptographic  algorithm,  learning  environment,
 dialog and interaction logic modeling. 

1   Introduction 

Teaching  algorithms  is  a  central  part  of  computer  science  studies.  Cryptographic 
algorithms and protocols are of special interest for distributed learning environments 
because  of  their  strong  formal  requirements  as  well  as  the  communication  partners 
involved and their widely divergent roles. The protocols deal mainly with the private 
exchange  of  information  between  two  or  more  parties;  that  is,  they  enable  two  or 
more parties to share specific information without other parties who use the environment 
 being  able  to  access  that  information.  Earlier  research  and  development  produced 
a system called CoBo [1], implementing a distributed learning environment for 
teaching  cryptographic  algorithms  supporting  a  component  for  algorithm  visualization.
  Evaluation  of  students’  success  demonstrated  the  efficacy  of  this  distributed 
learning system [2], resulting in a collaborative extension described in [3].  

In the latter paper, we introduced a workflow for the cooperative creation of concept 
 keyboards  (CK)  in  distributed  learning  environments.  The  touch-sensitive  surface 
of the CK detects a finger tip on the sheet of paper lying on it. The sheet of paper 
is totally flexible and can be redesigned in any way. The workflow presented is motivated 
by the fact that, if students are involved in the keyboard creation, they are motivated 
to analyze the algorithm and to build a mental model of the underlying action 
logic [1]. They have to understand the algorithm and then find an individual solution 
for  a  usable  keyboard  mirroring  their  own  parts  in  the  cooperative  human-machine 
dialog and matching the computational and mental process model. 

L. Carriço, N. Baloian, and B. Fonseca (Eds.): CRIWG 2009, LNCS 5784, pp. 311–318, 2009. 
© Springer-Verlag Berlin Heidelberg 2009 

312 

B. Weyers, W. Luther, and N. Baloian 

However, the development of a mental  model of the process flow  was addressed 
only implicitly by creating input interfaces. CK creation fails to represent the context 
in which the operations on the keyboard must be accomplished, which motivates the 
addition of a further cooperative introduction phase to the protocol. It will start with 
an initial theoretical instruction by the teacher, followed by a description of the subsequent 
situations and actions of the protocol which is created by the students step by 
step,  using  predefined  expressive  icons  and  textual  help  or  an  interactive  helpdesk 
system, like the one implemented in CoBo. By combining this creation of a situation 
in  the  protocol  paired  with  the  creation  of  a  CK  with  buttons  representing  actions 
appropriate  to  the  current  situation,  the  student  can  incrementally  build  a  complete 
formal and cognitive model of the entire protocol. Contribution of the presented work 
is  therefore  that  this  creative  task  completely  involves  students  in  the  construction 
process of the protocol, which results in deeper understanding. 

The cooperative reconstruction takes place in two phases. The first —on the stu-
dents’  side  (described  above)—consists  of  characterizing  a  certain  situation  using  a 
visual language (VL) and adding an appropriate operation to a keyboard to launch it. 
The  second  phase—on  the  computer’s  side—matches  the  logic  just  created  to  an 
existing  action  logic  specifying  the  protocol.  The  students  receive  direct  feedback 
letting them know whether their created solution is correct or not. If needed, they can 
consult the helpdesk system to find the correct solution or parts of it. This process is 
comparable to a model checking approach based on Petri nets (PN). 

In an extended scenario [4], an intruder is involved in a communication intended to 
take place between only two communication partners. The exercise for the students is 
to modify the algorithm in such a way that the intruder is completely locked out. Because 
of the flexibility of a VL in describing the protocol situation, it is possible to 
introduce  new  steps  into  the  protocol,  extending  its  basic  action  logic.  This  can  be 
done  with  rule-based  transformations  of  PNs  [5]  created  by  the  process  described 
above.  Automatically  checking  those  dynamically  created  extensions  of  the  former 
algorithm against a formal description is more complex than the simple model checking 
 approach  presented  in  this  paper.  Nevertheless,  we  are  convinced  that  the  approach 
 presented  in  this  paper  can  serve  as  a  basis  for  the  complete  generation  or 
dynamic  extension  of  cryptographic  protocols  and  even  more  complex  processes 
through rule-based transformations of PNs.  

2   Recent Work 

Collaborative learning has shown group work to have an important impact on achieving 
learning  success [6, 7]. Small  group  work presents opportunities  for students to 
share insights [8] and observe the strategies of others [9], which is helpful in the context 
 of  algorithm  learning.  Since  1988  many  algorithm  visualization  (AV)  systems 
have been developed (see Stasko et al. [10] and Diehl et al. [11]). Various repositories 
exist  all  over  the  Web  for  AV,  such  as  [12].  The  AV  of  cryptographic  protocols  is 
addressed in Cattaneo et al. [13]. Kerren, Müldner and Shakshuki describe solutions 
for AV and explanation systems [14] as well as for Web environments based on hypertext 
languages [15]. Basic research has also been conducted by Eisenberg [16] and 
others on algorithm visualization.  

 

Cooperative Model Reconstruction for Cryptographic Protocols 

313 

Archer [17] describes how human beings use visual artifacts and languages to materialize 
their cognitive thoughts and worlds. This is particularly important for learning 
environments that focus on the reflection of learned knowledge and therefore the 
materialization of abstract concepts and mental models [18].  

Several  tools  are  implemented  for  modeling  PNs  interactively  (see  [19]).  Formal 
modeling of dynamic systems and controlled model adaptation via Petri net transformations 
are described by Ehrig et al. [5, 20]. This is done with a stepwise development or 
replacement  of  place/transition  nets  in  a  well-defined  context  following  established 
rules.  

Earlier research [1, 21] and evaluation [2] was conducted in our group to investigate 
 problems  with  cryptographic  algorithms  in  distributed  learning  environments. 
This  research  found  that  students  need  and  want  an  initiation  phase  in  the  learning 
process where they are introduced to the protocol and become involved in its execution 
before they begin a free exploration phase. In [3] we introduce a new collaborative 
design of CKs in the learning process to meet this requirement. 

3   Construction of Cryptographic Protocols 

This section will describe how protocol reengineering can be implemented using two 
different formal approaches. The first subsection will provide a brief introduction to 
the formal definition of VLs followed by a concrete example of a cryptographic protocol.
  The  second  subsection  will  give  a  short  description  of  the  PN  type  used  and 
describe  a  special  graph  transformation  for  PNs.  The  last  subsection  introduces  the 
transformation from a VL to PNs. 

Visual Languages: Chang [22] defines a VL as a set of elementary icons and a set of 
operations  that  creates  complex  icons  using  the  elementary  ones.  Every  icon  has  a 
physical  part,  the  image,  and  a  logical  part,  the  meaning.  The  physical  part  is  described 
as a scalable vector graphic (SVG) and the meaning can be described formally 
as ontology (such as concept graphs or the Web Ontology Language). An iconic system 
defines a hierarchical structure of icons with its head icon as root—a whole sentence 
or a complex icon. An operation on the set of icons defines a physical operation 
(e.g.,  the  direction-dependent  combination  of  physical  parts  of  icons)  and  a  logical 
operation describing how to create the new meaning of the resulting complex icon.  

A well-known cryptographic protocol for key sharing (NSP) was introduced by R. 
M. Needham and M. D. Schroeder in [23]. The aim of this protocol is the secure sharing 
of a session key between two participants A and B using an unsafe communication 
channel. The characteristic property is the use of a Trusted Third Party (TTP) that 
has  already  previously  shared  keys  with  A  and  B.  Icons  for  visually  describing  the 
protocol situations are shown in Figure 1. A specific characteristic of this algorithm is 
the  problem  of  a  man-in-the-middle  attack,  which  leads  to  a  cooperative  extension 
scenario for reconstructing cryptographic protocols.  

Petri  Nets:  A  Petri  Net  [24]  is  a  directed  graph  with  two  different  types  of  nodes: 
transitions  and  places  that  are  mutually  connected  by  (possibly  weighted)  edges. 
Every  place  can  hold  tokens.  These  tokens  can  be  consumed  or  generated  by  connected 
transitions depending on incoming (consuming) or outgoing (creating) edges. 
A transition is enabled if enough tokens are on its incoming places (depending on the 

314 

B. Weyers, W. Luther, and N. Baloian 

weight  of  the  edges)  and  if  there  is  enough  free  space  for  generated  tokens  on  the 
outgoing places. A net has an initial marking, which is a vector of natural numbers in 
which every element describes the number of tokens held by a certain place as indicated 
by the position of the number in the vector. 

Jensen [25] introduced colored PNs with additional features. Every token is allocated 
an individual color which represent simple or complex data types. Special types 
of places and transitions are introduced, namely, fusion places allowing for synchronization 
of places and transitions containing programming code, guard functions and 
time delays. Edges are extended by attributing complex conditions. 

Formal Conversion of Visual Sentences to PN-Based Action Logic: De Rosis et al. 
[26]  describe  the  transformation  of  a  user’s  mental  model  of  problem  solving  to  a 
usable interface employing PN transformation based on formal definition of physical 
and logical relations.  Combining de Rosis’s concepts and  Chang’s  formal VLs [22] 
we have developed a new approach to describe cryptographic protocols in a cooperative 
environment. By converting visual designed context paired with a designed CK to 
a  Petri  subnet  and  matching  it  to  the  existing  action  logic  of  the  protocol  using  a 
model tracer, this approach is embedded in a cooperative learning workflow, which is 
described in the next section.  

Figure  1  shows  the  cooperative  interface  for  reconstruction  of  the  NSP.  The  left 
side shows the situation where Alice has received an encrypted message from the TTP 
and now wants to send it to Bob. The students’ task is first (1.) to select an appropriate 
operation that matches the current situation (in the context of the NSP) and then 
(2.) to model a changed situation that results from the appliance of the operation.  

Thus, they must first add the “send” button to the CK and then move the message 
icon from the Alice icon to the Bob icon, which results in the situation shown on the 
right in Figure 1. The second step consists in an icon operation supported by the cooperative 
environment and the VL.  

 

 

A1  Operation (cid:86) transition

A2 Analysis of op. parameters

2 participants (cid:86) 2 places
1 message:knowledge (cid:86)  1 token

A3 IF( CR(param.type) typeof place ) 
  

  INSCRIPT places with type
IF( CR(param.type) typeof token )
  INSCRIPT edges with type

  

d
n
e
s

d
n
e
s

d
n
e
s

participant

message

participant

message

Alice

send

CK

send
1.

<operation name=“send“>
  <input>
    <param type=“message“/>
    <param type=“participant“/>
    <param type=“participant“/>
  </input>
  ...
  <output/>
</operation>

Alice

send 2.

CK

<context name=“NSP“>
  <participant name=“Alice“>
    <knowledge>
      <key type=“A_TTP“/>
      <message>
DEL
        ...
      </message>
    </knowledge>
  </participant>
  <participant name=“Bob“>
    <knowledge>
      <message>
ADD
        ...
      </message>
      <key type=“B_TTP“/>
    </knowledge>
  </participant>
  ...
</context>

 

B1 Context A DIV Context B 
identifying icon operations

B2 Matching of involved 

objects and conversion of 
identified icon operations

B3 Marking

Initial marking derived from Context A:

Final marking derived from Context B:

DEL message from Alice (cid:86) token consuming 
ADD message to Bob  (cid:86) token creation 

Alice:participant

Bob:participant

message

d
d
n
n
e
e
s
s

message

new token m = encrypted_message:message

Alice:participant

Bob:participant

m

message

Alice:participant

message

d
d
n
n
e
e
s
s

d
d
n
n
e
e
s
s

message

Bob:participant

message

m

participant  (cid:86) place
knowledge (cid:86) token
operation  (cid:86) transition

 

R
C
n
o
c
I

.

p
O
n
o
c
I

R
C

DEL  (cid:86) consuming
ADD  (cid:86) creation

i

n
o
s
r
e
v
n
o
C
 
n
o
i
t
a
r
e
p
O

i

n
o
s
r
e
v
n
o
C

 
t
x
e
t
n
o
C

R
C

 

Fig.  1.  Reconstruction  of  a  cryptographic 
protocol 

Fig. 2. Conversion Algorithm to convert a VL to 
a PN-based representation 

 

 

Cooperative Model Reconstruction for Cryptographic Protocols 

315 

To  realize  this reconstruction,  we  have  developed  the  following  three-part  system 
(shown in Figure 3). The Icon Interpreter automates syntactic and semantic analysis of 
an iconic system by generating XML descriptions from the visually designed situation 
of  the  protocol  as  shown  in  Figure  1.  This  generation  is  based  on  the  implemented 
XML-based parser and interpreter engine in CoBo. (How to replace this simple way of 
interpreting a VL that certainly does not meet the requirements of a classical compiler 
is the subject of further research.) 

CK

Situation

VL  

ICON

INTERPRETER

XML

VL2PN

CONVERTER
subnet

CR

The second part is the VL2PN-converter, which converts the 
XML description resulting from the Icon Interpreter to a Petri 
subnet, using the algorithm  shown in Figure 2. The algorithm 
employs  a  set  of  conversion  rules  (CR)  stored  in  the  CR 
database (shown in the lower part of Figure 2) and is split into 
two  phases.  The  CR  has  to  be  implemented  by  experts  or  is 
automatically generated concerning specifications of the VL.  

MODEL
TRACER

Action
Logic

 

Feedback

Fig. 3. Architecture 

During the first phase, the XML description of the selected 
operation  (resulting  from  (1.)  in  Figure  1)  is  interpreted.  In 
step A1, the operation icon (physically displayed as a button) 
is  converted  to  a  transition  using  a  rule  in  the  set  of  icon 
conversion rules (Icon CR). In step A2, the logical part described in XML is analyzed 
to produce the number of involved items, like places and tokens, again using the CR. 
Resolved places are connected by undirected edges to the transition. The direction is 
resolved by the context analysis in the second phase. The information about tokens (a 
message token in the example) is stored for a later conversion step. The last step, A3, 
resolves the inscriptions for the edges and places in the basic topology of the subnet. 
The edge inscription defines the token types that can be consumed or generated by the 
connected transition. The place inscription is  semantic and  will be instantiated later 
with the names of the participants in the protocol. 

A B
TTP

Verification

Reconstruction
Reconstruction

Evaluation

Try again &

Consult help desk

and 

Distributed
Simulation

Cooperative

Reconstruction

Cooperative Protocol 
Cooperative Protocol 

Classroom 
Introduction

Cooperative
CK-Creation

The  second  phase  of 
the  algorithm  (indicated 
by  a  capital  B)  uses  the 
XML  description  of  the 
context  A 
the 
resulting situation (context 
B).  The  first  step,  B1, 
calculates  the  difference 
between  context  A  and 
Fig.  4.  Workflow  for  cooperative  reconstruction  of  cryptocontext 
 B.  The  result  is  a 
graphic protocols 
DEL  and  an  ADD  icon 
operation.  These  operations  are  converted  using  the  Icon  Operation  Conversion  Rules 
(Icon Operation CR) in the CR database. The deletion operation (DEL) is interpreted as 
the consuming of a token, and the addition operation (ADD) as the creating of a token. 
Therefore, in step B2, the participants are first instantiated, which means the place inscriptions 
are extended by the concrete participants in the situation (Alice and Bob). Secondly, 
the edges can be changed to direct ones, creating the time context for the DEL operation 
on Alice’s knowledge (consuming) and the ADD operation in Bob’s knowledge (creat-
ing). Also, the token found in step A2 can be instantiated by the message, which is initially 
part of Alice’s knowledge. In the last step, B3, the marking is resolved from context A and 

Cooperative Concept 
Keyboard Creation

316 

B. Weyers, W. Luther, and N. Baloian 

context B by converting the parts of the knowledge extracted from the XML description to 
the PN. 

The  last  system  component  (the  model  tracer)  matches  the  subnet  resulting  from 
the conversion algorithm to the original action logic, modeled as PN. Executing the 
matching  in  a  step-by-step  reconstruction  of  the  protocol, the  PN  acquires  a  certain 
marking,  depending  on  the  situation  represented.  In  the  next  step,  the  operation  is 
mapped to a transition in the existing PN, and the new marking has to be calculated 
before the marking of the subnet is matched. If the new marking of the given action 
logic matches this one of the subnet, the reconstruction step was correct.  

4   Cooperative Construction 

The workflow for the cooperative construction of cryptographic algorithms is shown 
in Figure 4. After a short introduction to the protocol in the classroom, students are 
split into several groups, each working on one instance of the system using one physical 
 interface.  The  following  reconstruction  is  solved  cooperatively  in  this  interface. 
The students receive a set of operations in the form of buttons as well as a set of icons 
to describe the situation in which the operation should be selected. First, the students 
create the initial protocol situation showing the three communication partners. Next, 
they choose an operation adapted to this situation. The system checks this constellation 
by applying the conversion algorithm described above and matching it against the 
existing action logic, which is followed by a discussion-and-decision phase on what to 
do next. A solution check can yield the following outcomes: 

1.  The subsequent marking of the action logic cannot be calculated: The applied 

2. 

3. 

operation is incorrect, and the students must choose another one. 
If the converted subnet does not match the subsequent marking of the action 
logic, the situation created by the students is incorrect. 
If  the  marking  of  the  subnet  matches  the  subsequent  marking  of  the  action 
logic, the solution is correct, and the students can continue with the cooperative 
reconstruction.  

This process will be iterated until the final situation is reached (that is, a session key is 
shared). 

The  second  phase  of  the  workflow  is  subsequent  cooperative  creation  of  roledependent 
keyboards using the cooperative system detailed in our previous paper [3] 
and  summarized  above.  Finally,  the  group  simulates  the  protocol  in  a  distributed 
manner, in which each student embodies one role in the protocol using his/her individual 
keyboard. Possible errors in the creation phase can then be fixed  in the  next 
step, reconfiguration of the individual keyboard, which is followed by a new simulation 
phase.  

Through  the  combination  of  both  approaches  in  one  cooperative  workflow,  students 
 learning  algorithms  at  differing  proficiency  levels  are  optimally  supported  by 
the  system,  Thus,  to  become  familiar  with  the  protocol,  beginners  proceed  step-bystep 
 with  the  keys  organized  in  the  right  order  on  the  keyboard,  whereas  advanced 
students use a self-configured keyboard that allows them to explore an algorithm and 
learn from their mistakes. We are confident that this approach represents a solution to 

 

Cooperative Model Reconstruction for Cryptographic Protocols 

317 

the problems diagnosed in the evaluation of CoBo [2]. A new evaluation will be conducted 
in June 2009 to confirm this claim.  

5   Conclusion and Future Work 

We  have  described  an  approach  to  a  cooperative  reconstruction  of  a  step-by-step 
simulation of cryptographic protocols. This is still a  work  in progress; nevertheless, 
what we have accomplished so far represents a significant contribution to our further 
work. The CoBo system implements all basic components, including algorithm visualization 
for the VL and a configurator for the CKs. The action logic is implemented 
for four  well-known protocols using colored PNs and can  be used for the  matching 
process described above.  

What remains to be completed is the implementation of the system providing the 
visual interface and data structures described in Section 3. The entire workflow also 
has to be evaluated to identify shortcomings and future work. 

There are many possible extensions of this basic approach. The use of a completely 
flexible  icon  interpreter  as  described  in  [27]  offers  the  opportunity  to  avoid  hardcoding 
 any  syntactic  or  semantic  interpretation  of  a  VL.  Such  interpreters  can  be 
generated  using  new  approaches  for  the  interactive  compiler-compiler  techniques 
proposed  in  [28]  and  [29],  enabling  extended  learning  scenarios,  like  the  NSP  with 
intruder.  The  idea  is  to  completely  generate  the  action  logic  by  using  only  the  described 
approach based on VLs in combination with CKs. The action logic will not be 
matched against the existing action logic but be analyzed by more complex methods 
described in recent papers on graph transformation and rewriting. 

Another  workflow including  a VL compiler and a completely flexible  generation 
of action logic can be used to describe the role-dependent parts of a protocol and then, 
in  a  second  cooperative  step,  to  bring  those  partial  solutions  together  to  form  one 
coherent PN using graph transformation operations and tools [20]. Once the solution 
is automatically checked for correctness, the distributed simulation can follow. 

This approach and suitable extensions can be used for other algorithms resulting in 
more complex scenarios. Tools like ConKAV developed in our group [30] were created 
for simulating complex data structures like AVL trees. Those applications are not 
as linear and deterministic as cryptographic protocols are. Considerations during the 
simulation phase are more complex because of the variety of solution methods, which 
can be better or worse for certain initial values than the standard solution. 

References 

1.  Baloian, N., Breuer, H., Luther, W.: Concept keyboards in the animation of standard algorithms.
 Journal of Visual Languages and Computing 6, 652–674 (2008) 

2.  Baloian, N., Luther, W.: Cooperative visualization of cryptographic protocols using concept 
keyboards. To appear in International Journal of Engineering Education (2009)  

3.  Weyers, B., Baloian, N., Luther, W.: Cooperative Creation of Concept Keyboards in Distributed 
Learning Environments. In: Proc. of 13th Int. Conf. on CSCW in Design, pp. 534–
539. IEEE, Santiago de Chile (2009) 

4.  Kovácová,  A.:  Implementierung  des  Needham-Schroeder  Protokolls  in  einer  verteilten 

Simulationsumgebung für kryptografische Standardverfahren, Duisburg (2008) 

318 

B. Weyers, W. Luther, and N. Baloian 

5.  Ehrig, H., Hoffmann, K., Padberg, J.: Transformations of Petri Nets. Electronic Notes in 

Theoretical Computer Science 148, 151–172 (2006) 

6.  Nickerson, R.R.: On the distribution of cognition: some reflections. Distributed cognitions, 

229–259 (1997) 

7.  Webb, N.M.: Peer interaction and learning in small groups. International Journal of Education 
Research 13, 21–39 (1986) 

8.  Bos, M.C.: Experimental study of productive collaboration. Acta Psych. 3, 315–426 (1937) 
9.  Azmitia,  M.:  Peer  Interaction  and  Problem  Solving:  When  Are  Two  Heads  Better  Than 

One? Child Development 1, 87–96 (1988) 

10.  Stasko, J.: Software visualization. MIT Press, Cambridge (1998) 
11.  Diehl, S.: Software visualization. In: Proceedings of the 27th international conference on 

Software engineering, pp. 718–719 (2005) 

12.  Crescenzi, P., Faltin, N., Fleischer, R., Hundhausen, C., Näher, S., Rössling, G., Stasko, J., 
Sutinen, E.: The Algorithm Animation Repository. In: Proceedings of the 2nd International 
Program Visualization Workshop, vol. 1, pp. 14–16 (2002) 

13.  Cattaneo, G., Santis, A., de Ferraro Petrillo, U.: Visualization of cryptographic protocols 

with GRACE. Journal of Visual Languages & Computing 19, 258–290 (2008) 

14.  Kerren, A., Müldner, T., Shakshuki, E.: Novel algorithm explanation techniques for improving 
algorithm teaching. In: Proc. of the 2006 ACM Symposium on Soft. Vis., pp. 175–176 (2006) 
15.  Shakshuki, E., Kerren, A., Muldner, T.: Web-based Structured Hypermedia Algorithm Explanation 
system. International Journal of Web Information Systems 3, 179–197 (2007) 

16.  Eisenberg, M.: The Thin Glass Line: Designing Interfaces to Algorithms. In: Proceedings 

of the SIGCHI Conference on Human factors in computing systems, pp. 181–188 (1996) 

17.  Archer, B.: Design as a discipline. Design Studies 1, 17–20 (1979) 
18.  Meyer, H.: Unterrichts-Methoden. Cornelsen Scriptor, Frankfurt am Main (2008) 
19.  Petri Nets World,  

http://www.informatik.uni-hamburg.de/TGI/PetriNets/tools/ 
quick.html 

20.  Ehrig,  H.,  Hoffmann,  K.,  Padberg,  J.,  Ermel,  C.,  Prange,  U.,  Biermann,  E.,  Modica,  T.: 

Petri Net Transformations. Petri Net, Theory and Applications, 534–550 (2008) 

21.  Baloian, N., Luther, W.: Algorithm Explanation Using Multimodal Interfaces. In: Proceedings 
 of  the  XXV  International  Conference  on  the  Chilean  Computer  Science  Society, 
vol. 21 (2005) 

22.  Chang, S.-K.: Iconic Visual Languages (1997), 

http://www.cs.pitt.edu/~chang/365/sk1.html 

23.  Needham, R.M., Schroeder, M.D.: Using encryption for authentication in large networks 

of computers. Communications of the ACM 21, 993–999 (1978) 

24.  Baumgarten, B.: Petri-Netze. Spektrum Akademischer Verlag, Heidelberg (1996) 
25.  Jensen, K.: Coloured petri nets. Springer, Berlin (1997) 
26.  de  Rosis,  F.,  Pizzutilo,  S.,  De  Carolis,  B.:  Formal  description  and  evaluation  of  useradapted 
interfaces. International Journal of Human-Computer Studies 2, 95–120 (1998) 

27.  Chang, S.-K.: Syntactic Analysis of Visual Sentences, 

http://www.cs.pitt.edu/~chang/365/sk2.html 

28.  Costagliola, G., Deufemia, V., Polese, G.: Visual language implementation through standard 
compiler–compiler techniques. Journal of VLs & Computing 18, 165–226 (2006) 

29.  Pereira, M.J.V., Mernik, M., da Cruz, D., Henriques, P.R.: VisualLISA: A Visual Interface 

for an Attribute Grammar–based Compiler-Compiler. In: CoRTA 2008 (2008) 

30.  Baloian, N., Breuer, H., Luther, W.: Algorithm visualization using concept keyboards. In: 

Proceedings of ACM SoftVis 2005, pp. 7–16 (2005) 

