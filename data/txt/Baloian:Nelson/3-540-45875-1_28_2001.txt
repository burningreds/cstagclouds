Visualization for the Mind’s Eye

Nelson Baloian and Wolfram Luther

Institut für Informatik und Interaktive Systeme der GMU Duisburg,
Lotharstraße 65, 47057 Duisburg, Germany
{Baloian, Luther}@informatik.uni-duisburg.de

Abstract.

Software visualization has been almost exclusively tackled from the visual point of view; this
means visualization occurs exclusively through the visual channel. This approach has its limitations.
  Considering  previous  work  for  blind  people  we  propose  that  complementing  usual  approaches 
with those techniques used to develop interfaces for non-sighted people can enhance
user  awareness  of  logical  structures  or  data  types  using  different  perception  channels.  To
achieve better comprehension, we deal with new or augmented interfaces built on top of standard 
 systems  for  data  visualization  and  algorithm  animation.  The  notion  of  specific  concept
keyboards  is  introduced.  As  a  consequence,  modern  information  and  learning  systems  can  be
designed  in  such  a  way  that  not  only  sighted  but  also  blind  users  can  navigate  within  these
systems.

1   Value and Problems of Software Visualization

Software  visualization  deals  with  the  animation  of  algorithms,  including  numerical,
geometric,  graphic,  and  graph  algorithms,  as  well  as  the  visualization  of  data  structures 
 in  information  systems  or  in  the  computer’s  memory  while  certain  complex
processes are performed. One of its main goals is to achieve a better understanding of
complex programs, processes, and data structures by means of showing complex digitized 
 images  displayed  on  a  CRTor 
 LCD-monitor  or  a  printing  device.  Through
these images transmitted by the visual channel, users should generate planar or spatial
structures with dynamic objects in their minds.

 The  visual  channel  permits  a  rapid  overview  of  structures  after  an  adequate  abstraction 
process, a separation of important objects from less important ones whenever
the  former  are  distinguishable  by  graphic  attributes,  and  a  real  time  processing  of
dynamic  process  data  output  -  furthermore,  a  strong  data  compression  in  the  mind
accompanies  the  high-band  wide  reception  process.  However,  the  visualization  approach 
 has  several  remarkable  consequences:  Multidimensional  structures  are  projected 
 to  a  plane  which  results  in  numerous  design  problems  and  higher  data  structures;
 parallel processes are serialized leading to nested screens or dialogues. Here, we

S. Diehl (Ed.): Software Visualization, LNCS 2269, pp. 354–367, 2002.
© Springer-Verlag Berlin Heidelberg 2002

Visualization for the Mind’s Eye         355

 will  not  contribute  to  the  ‘Layout  Creation  and  Adjustment  Problem’  for  graphs  in
visualization and animation systems [9].

Too often, the resulting graphic outcome is highly complex if we consider rasterized 
 animated  sequences  and  is  strongly  compressed  during  the  reception  process.
Only a few details remain in memory. This fact is widely discussed in the literature. J.
Norseen [18] deals with the conversion of 2D retinal visual sensory information signals 
into 3D semiotic mental representations and describes a visual semiotic language
built from a finite alphabet of basic images: In constructing mental images certain left
occipital areas of the human  brain  seem  to  perform  the  same  neurological  functions
while the so-called Broca-Wernicke area does the conversion of aural sensory signals
into a finite set  of  sound  types  producing  neurolinguistic  patterns.  Norseen  suggests
that only about forty sound types and thirty images form the basis of expressed aural
and visual languages.

Consequently, it would seem to be of interest to bypass, or better still, to complement 
 standard  graphic  displays  and  search  for  alternative  ways  to  provide  logical
structures using different perception channels to human minds provoking equivalent or
alternative impressions and images.

The paper begins with a discussion of parallel reception modes and introduces the
notion of concept keyboards. Then different ways for implementing an enhanced perception 
are discussed; this is followed by a case study. We formulate some ideas on
the  automatic  generation  of  concept  keyboards,  look  at  recent  work  in  the  area  and
finish with some conclusions.

2   Parallel Reception Modes

Our working hypothesis will be that not only sighted but  also  blind  users  should  be
able  to  use  and  navigate  within  systems  implementing  new  or  augmented  interfaces
using enhanced perception tools to achieve software visualization for the mind’s eye
[16]. Thus, we do not intend to develop a system for blind people only, on the contrary,
 we claim that by proposing complementary perception channels and navigating
facilities there will be a real enhancement for “normal users” when systems are navigable 
and usable for people with disabilities.  It is reported in [17] that blind people
develop  special  forms  of  navigating  within  an  unknown  environment  and  represent
spatial structures with cognitive difficulty. This is true not only for  the real world but
also  in  virtual  computer  based  environments.  Certain  evidence  of  this  is  given  by
experiences done according to the HOMER UIMS approach by Savidis and Stephanidis 
[23]; this approach consists of developing dual user interfaces for integrating blind
and sighted people. To achieve this goal standard visualization elements like control
element icons, tool menus, short cuts, logical structures with nodes and links, hypertext,
  images  and  animated  sequences  are  enriched  with  acoustic  elements  or  haptic
interfaces, which allow direct interaction of the user with objects of the model used for
the computer to represent the problem being explained or presented. To navigate independently 
from the graphic output we introduce the idea of a draft keyboard, which
is realized by redefining keys on a traditional keyboard, by a matrix of small keys on a
graphic tablet or by mapping them with the help of problem-specific hardware.

