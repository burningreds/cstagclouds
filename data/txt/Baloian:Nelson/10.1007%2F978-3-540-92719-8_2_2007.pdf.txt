Supporting the Development of Applications in 

Heterogeneous Ubiquitous Computing Environments  

Nelson Baloian1 and Gustavo Zurita2 

1 Department of Computer Science, Facultad de Cienncias Físicas y Matemáticas 

Universidad de Chile 

nbaloian@dcc.uchile.cl 

2 Department of Information System, Facultad de Economía y Negocios, 

Universidad de Chile 

gzurita@facea.uchile.cl 

Abstract.  Ubiquitous  computing  is  increasingly  becoming  part  of  our  lives. 
Various  computing  devices,  having  different  sizes  and  capabilities,  and  using 
different software platforms are part of our working, leisure and living scenario, 
where mobile devices coexist and communicate with desktop and laptop computers.
 Because of this phenomenon, the need for reliable and efficient mechanisms 
 to  connect  applications  running  on  different  platforms  is  increasing.  In 
this  paper  we  present  a  middleware  which  easies  the  process  of  development 
applications  running  in  different  platforms  in  a  peer-to-peer  computing  environment.
  The  papers  also  present  the  results  of  benchmarking  tests  and  the  
experience of developing different applications with this platform.  

Keywords: Techniques, methods and tools for CSCW in design, Middleware, 
Mobile. 

1   Introduction 

Since  the  early  days  of  distributed,  collaborative  applications  development  many 
authors recognized the need for middleware that could ease the programming of this 
kind of software. Sun’s RPC (Remote Procedure Call) [18] schema and the CORBA 
[21] architecture are among the first and most known platforms.  

Many  other  platforms  followed,  each  one  fulfilling  different  requirements  [14]. 
They  differ  in  the  distribution  schemes  of  the  shared  data,  communication  mechanisms,
  and  application  architecture  they  support  [11].  Rendezvous  [8]  and  Suite  [6] 
are groupware platforms, which use a central distribution scheme for the data of collaborative 
applications. GroupKit [16], and DECAF [19] use a replicated distribution 
scheme. DSC [9] is a p2p Groupware System with decentralized topology for supporting 
Synchronous Collaborations based on JXTA.  

The last years have witnessed an explosion of new collaborative systems for mobile 
 devices  that  incorporate und  utilize  their  communication  capabilities  to  support 
collaborative  work  in  ways  that  were  not  conceived  before  or  were  impossible  to 
implement with desktop computers. Applications allowing users to collaborate in real 

W. Shen et al. (Eds.): CSCWD 2007, LNCS 5236, pp. 11–22, 2008. 
© Springer-Verlag Berlin Heidelberg 2008 

12 

N. Baloian and G. Zurita 

time over wireless connected mobile devices building ad-hoc networks have attracted 
the  attention  of  many  authors.  Some  of  the  scenarios  for  which  these  applications 
have been developed are the following:  
•  Rescue efforts can be more easily coordinated in emergency situations and disaster 
areas where a wired infrastructure is not available. 

•  Group of people attending a meeting can share ideas and data by means of their 

mobile devices [23]. 

•  Military  intelligence  and  strike  teams  can  coordinate  more  easily  in  order  to  

provide quicker response time. 

•  Support  for  field  survey  operations  in  remote  areas  with  no  fixed  infrastructure 

can be provided. 

•  A team of construction  workers or garden designers on a site without a network 

infrastructure can share blueprints and schematics [22]. 

•  Educational  activities  involving  group  of  students  and  teachers  in  collaborative 

room environments [15] [5] [10] [2]. 

All  these  scenarios  share  some  common  requirements:  high  mobility,  dynamic  user 
group  configuration,  easy  input  procedures,  data  sharing,  etc.  However,  the  use  of 
mobile  devices  which  can  provide  the  needed  computing  support  for  the  scenarios 
already  mentioned  changes  the  requirements  for  the  distributed  applications  implementing 
them, since mobile devices have still some problems  which are not present 
on desktop computers. Some of them are described by [12] and [4] and are:  
•  Low-bandwidth  and  high  latency  -  Network  connectivity  of  mobile  devices  depends 
on radio frequency technologies to exchange data. As a result, wireless networks 
generally exhibit low bandwidth, high latency, and high packet loss rate [7]. 
•  Low  processor  power  -  Processor  power  becomes  a  limited  resource,  as  mobile 
devices are designed to be portable and the weight and size of the system must be 
kept to a minimum. 

•  Small display size – Most of the mobile devices are equipped with small displays 
that  are  not  suitable  for  displaying  large  amount  of  information  or  sophisticated 
user interface.  

•  Short battery life - The power necessary for operation, easily obtainable and virtually 
limitless in a stationary device, is a scarce resource for most mobile devices.  
•  Limited input methods - The possible methods of data input currently available on 
the market include keyboard, pen-based, and voice. Some devices support varying 
combination of these methods to give the user the most flexibility [22], although 
they are still limited compared to their desktop counterparts. 

This new environment also imposes new restrictions and requirements to the software 
which runs on them. Novel collaborative paradigms need to be developed to take into 
account the variability in device capabilities, dynamic configuration of working teams 
and the unreliable network connectivity. Accordingly, new middleware supporting the 
development of distributed communications was necessary.  

Nowadays,  ubiquitous  computing  is  getting  more  and  more  prominent  and  there 
are many situations which can benefit of the interaction between mobile devices and 
desktop  computers.  One  example  is  people  engaged  in  brainstorming-like  meeting 
activities,  where  they  use  their  handheld  devices  to  input  ideas  which  are  collected 

 

Supporting the Development of Applications 

13 

and displayed by an electronic board [17]. Another interesting example is the use of 
combined technology (mobile-desktop) in classroom learning activities [7].  

Computer technology has made its way into classrooms in a very sound way and 
nowadays it is not uncommon to see teachers using computers or electronic boards to 
enhance  their  presentations,  and  students  using  laptops  or  other  mobile  devices  to 
search  data,  receive  and  manipulate  multimedia-based  learning  material  and  work 
collaboratively [1].  

The authors of this paper have been engaged in developing software supporting inclass 
synchronous collaborative learning since more than 10 years using a middleware 
which easies the programming of distributed applications called MatchMaker [20]. As 
mobile devices became an interesting resource to support in-classroom learning,  we 
tried to incorporate them by adapting the Java-based systems originally developed for 
PCs to the new environment. This originated three main problems. First, it was necessary 
 to  develop  a  lightweight  version  of  MatchMaker  for  the  handhelds,  since  the 
original one could not run on the Java environment for handhelds. Second, freehand 
writing  and  sketching  input  was  very  uncomfortable  because  the  Java  platform  was 
too slow. A new version of the same software was developed using the C# programming 
 language  was  developed.  It  proved  to  be  much  better  to  use,  enabling  more 
accurate writing and sketches. The third problem was, since Java was designed to be 
platform independent, some of the hardware-dependent features of the handheld were 
not possible to control from the program.  

The first idea we had to solve these problems was to use an approach like the one 
used  by  XMIDDLE  [12],  which  uses  the  object  architecture  as  the  only  interface 
between  different  environments.  However  this  means  that  every  application  should 
implement the conversions between the internal language-dependent object representation 
 and  its  XML  representation.  Another  solution  called  SOMU  [13]  uses  web 
services  for  exchanging  data,  but  this  solution  is  not  lightweight  enough  and  is  too 
slow when implemented across platforms.  

The problem of having applications from different worlds talking to each other is 
certainly becoming a general one. For this reason, it is a good idea to develop a reusable 
solution. Therefore we opted for developing a new middleware in Java and C# 
which  enables  applications  living  in  different  worlds  share  and  synchronize  data 
among them in a very simple yet fast enough way. The next section explains the principles 
used for designing the solution. The following one describes the implementation 
and the Middleware’s API. Since one of our main concerns was the performance 
of  the  distributed  systems,  we  made  some  benchmarking  measurements  in  order  to 
test the usefulness of the solution. Then, the next chapter presents applications developed 
 so  far  with  this  middleware  as  a  proof  of  concept.  Finally  we  present  conclusions 
and future work concerning the middleware. 

2   A Trans-Platform Middleware: Principles 

As we said, the new hardware and scenarios used by mobile computing imposes different 
requirements to the communication architecture to those imposed by desktop computing.
 The main different characteristics of the middleware are: 

14 

N. Baloian and G. Zurita 

Decentralized: In many mobile scenarios, the only available network will be the mobile 
ad-hoc  network  (MANET)  provided  by  the  networking  capabilities  of  the  mobile  devices.
 This means that the communication and data architecture must follow a peer-topeer 
schema avoiding a central server keeping the “master” copy of the data and/or the 
list of active users. A full centralized schema would be too risky for the mobile scenario 
because of the communication problems and the dynamic nature of the groups. In [4] 
and [12] full peer-to-peer middleware for supporting communications in mobile devices 
are proposed. In [16] a mixed environment is presented, where a non-mobile server can 
take a different role. A fully decentralized peer-to-peer schema adapts itself better to the 
fact that connectivity between devices is intermittent and the participants list is dynamic 
(participants may enter or leave the session anytime) because there is no central server 
which  could  leave  the  session  because  of  a  crash  or  an  intermittent  communication 
signal. Other solutions consider one of the peers arbitrarily taking the role of server. If 
the server crashes or disconnects itself from the working session, another peer will take 
automatically this role. This is a possible solution for the scenario we are trying to support 
in this work, but it is certainly more complicated to implement. 

Replicated  Architecture:  In  a  peer-to-peer,  decentralized,  distributed  software  architecture 
 there  is  no  central  server  keeping  a  “master”  copy  of  the  shared  data  and  the 
active users list. Therefore, every application must replicate exactly the data others have 
in order to share a common working environment. This means that mechanisms must be 
implemented in order to synchronize the replicated data.  

State-Based Synchronization: There are mainly two ways to synchronize the data in a 
replicated environment: by event or by state. Synchronization by event means that all 
applications  start  with  exactly  the  same  set  of  data  with  the  same  values.  During  the 
working session, if one data unit (for example an object) changes its status in one application 
due to an event caused by the interaction with the user, the application sends this 
event  to  all  other  connected  applications,  so  they  can  change  the  state  of  their  object 
copy  accordingly.  Synchronizing  by  state  means  every  time  a  data  unit  changes  its 
value, the whole object, and not the event, will be sent to the other applications. If the 
objects in the application are big, the state-based synchronization mechanism may cause 
more network traffic than the event-based one. But in an environment where events may 
not reach all active application or new application instances can join the session at any 
time, the state-based synchronization is the only reliable choice.  

XML-Based Data Exchange: Many of the existing middleware supporting distributed 
application programming for mobile or desktop devices use standard XML description 
for an object (like SOAP) in order to transmit it to another application running on another 
 platform.  Since  different  platforms  use  different  internal  object  representation 
schema this is the most convenient way for transmitting an object across different platforms.
 An XML representation of an object may not only contain the names and values 
of the object variables but also some meta-information describing it, like the class name, 
which  will be used by the other platform to reconstruct the object. Since there are already 
 some  “standards”  defining  the  way  how  an  object  should  be  represented  by  an 
XML description, we will use one of them in our solution. 

 

Supporting the Development of Applications 

15 

3   The Architecture of the Middleware 

The middleware we developed consists of a set of classes implementing an API the 
programmer can use in order to write distributed applications easily. These classes are 
available  in  Java  and  C#  and  implement  the  necessary  mechanisms  for  converting 
data objects from their internal representations into an XML representation, transmit 
them  across  platforms  and  convert  the  XML  representation  into  the  corresponding 
internal one.  They also provide and start the necessary services for discovering partners 
present in the ad-hoc network and establish the necessary connections among the 
different applications in order to synchronize shared data. 

TCP/IP  connections 
to other applications for 
transmitting/receiving 
objects 

Multicast 

UDP 
traffic  for  discovering 
and discarding partners  

TCP/IP 
connections 
manager 

Multicast 
discovery
manager

    Active partners list 

Communication Node 

Fig. 1. The communication node  

 

3.1   Discovering Partners and Establishing the Connections 

In order to have an application join the group of active partners in the ad-hoc network 
it has to instantiate an object of the Node class. The constructor of this node starts a 
service which will send multicast messages at regular intervals to the group in order 
to inform other participants of the presence of a new one. It will also start consuming 
multicast messages from other partners present in the ad-hoc network. This allows the 
application  to  maintain  a  list  of  active  participants  updated.  Every  time  a  multicast 
message of a new participant is received, its ID and IP number are stored in the list 
and a TCP/IP connection is established with that application through which data will 
be shared.  If a certain amount of time has passed without receiving a multicast message 
 from  a  member  of  the  list  of  active  participants,  its  entry  is  deleted  and  the  
connection  to  that  application  closed.  The  Node  class  can  be  extended  in  order  to 
overwrite some methods. For example, there is receiveObject method which is called 
every time the application receives an object. The figure 1 shows the structure of the 
communication node implemented by the Node class. It has a module which manages 
threads for sending and receiving multicast packages used to maintain an active partners 
list. This list is used by another module which is responsible for creating TCP/IP 

16 

N. Baloian and G. Zurita 

connections with the active partners and destroying them for those partners which left 
the group and transmit synchronization data.  

3.2   Sharing Objects 

The data sharing mechanism is based on a “shared objects” principle. A shared object 
is an abstract class which should be extended in order to create an object class whose 
state  will  be  transmitted  to  all  active  participants  when  the  object  changes  its  state, 
this is when one or more variables change their value. The programmer implements a 
shared object by extending the SharedObject abstract class. Apart from declaring the 
field  variables  and  methods  for  this  object,  it  is  often  necessary  to  implement  a 
method called postProcess which will be called every time the object state is updated 
by a remote application. This is a key  mechanism  which allows the updating of the 
application's interface when the data changes. Apart from creating a shared object by 
extending the SharedObject class, programmers have to register it with the communication 
node giving a name to this object, in order to start receiving the updates from 
the partners also having a shared object with the same name.  

The synchronization of the shared objects is achieved by transmitting a copy of it 
to  all  partners  every  time  their  state  is  changed.  For  this,  methods  for  sending  and 
receiving  objects  were  designed  and  implemented.  At  the  beginning  these  methods 
were  private  to  the  middleware,  but  very  soon  we  discovered  that  many  small  yet 
powerful  applications  could  be  implemented  very  easily  based  on  those  methods 
without  having  to  use  the  SharedObject  class.  Therefore  we  made  these  methods  
public to the API.  

 application 

 application 

Communication 

node 

XMLSerializer

C# World 

Communication 

node 

Castor 

Java World 

 

Fig. 2. Serializing and transmitting objects 

As  we  said,  in  order  to  transmit  an  object  across  platforms  we  need  a  common  
language to describe it in a common way. This language will be XML and the representation 
will be generated in a standard way common to both platforms. In C# this 
representation can be generated by the XMLSerializer library and in Java by the Castor 
library, both being  free and open source  software. The fact that the same object 
should exist in both platform restricts the type of the variables an object can contain to 
those  common  to  both  platforms.  In  our  case  there  are  numeric  data  (integer  and 

 

Supporting the Development of Applications 

17 

decimal), characters, booleans, strings and arrays. Figure 2 shows how the object is 
transformed into its XML description transmitted and reconstructed between applications 
 running  in  a  “C#  world”  and  another  in  “Java  World”.  When  the  application 
developed by the middleware’s user must update the state of an object it is passed to 
the Node class. This uses the corresponding serializer for producing the XML representation 
and sends it to the communication node of the other application. The receiving 
 node  uses  its  own  de-serializer  for  transforming  the  XML  representation  in  the 
corresponding internal one.  

3.3   Group Management 

The learning scenario in a Computer-integrated Classroom was the situation that motivated 
us to for developing this middleware because of the need to have applications 
implemented and running in different platforms to share data. In this scenario, we also 
recognized the  need to have the possibility of defining  subgroups of partners inside 
the whole group of active participants. For example, the teacher may want to propose 
a task which should be accomplished by small groups which do interact among them, 
but she wants to keep the possibility of looking what the different groups are doing. 
For  this  we  developed  the  necessary  mechanisms  inside  the  middleware  in  order  to 
have  applications  join  and  leave  certain  groups.  This  information  is  stored  in  the 
communication node and is used when the copy of an updated object has to be distributed 
among participants. Accordingly, we developed the methods which will send 
objects  only  to  applications  belonging  to  a  certain  group.  An  application  can  join 
more than one group, so it can receive updates coming from different groups. We also 
implemented methods for remotely force an application to join and/or leave a group. 
This  was  necessary because in  many cases, the teacher or the  moderator of a group 
was supposed to form smaller working groups. The teacher or moderator can then join 
the various in order to “see” what was happening on all of them. 

Table  1  shows  a  description  of  the  most  important  methods  implemented  by  the 
middleware.  All  they  are  applied  to  the  Communication  Node  of  the  application, 
which is from the Node class or an extended one, except from the last two which are 
applied to an object of a class extended from the SharedObject class. 

4   Benchmarking 

Because  the  performance  of  the  platform  was  one  of  our  first  motivations  for  the 
development of the middleware we wanted to test if our solution was fest enough. By 
fast enough we mean that the time it take an object to be transferred from one application 
to another does not interrupt the flow of the synchronous work. Of course, this is 
more  or  less  a  subjective  evaluation  and  depends  on  the  application  which  is  being 
used. An application making intensive use ob the object transfer mechanism may be 
more sensitive to longer delays than another which sends objects at a slower rate. In 
any  case,  it  was  important  to  see  how  long  this  operation  takes  in  order  to  analyze 
which is the permitted delay  between the sending of an object and its arrival at the 
other end our middleware can still support.  For this we carried out an experiment in 
which we measured the round-trip time required to send and object to another application 
 and  receive  it  back.  We  tested  this  for  objects  of  different  size  and  between  

18 

N. Baloian and G. Zurita 

different  platforms.  We  started  by  sending  and  receiving  objects  of  10  bytes  up  to 
10000  bytes  first  among  two  applications  both  running  in  a  C#  platform.  Then  we 
repeated  it  for  two  applications  both  running  in  a  Java  platform  and  finally  we  repeated 
it for two applications. The results of these experiments depend of course from 
the hardware being used, so we used very standard mobile devices in order to have 
representative results: DELL X50V and DELL X51V. 

The figure 3 presents the results of these experiments. As we expected, the time required 
for the round-trip of objects between applications running in similar platforms 
is  much smaller and almost neglectable compared to the time required for the same 
round-trip between applications running over different platforms.  A very interesting 
and unexpected result was that for all cases, the time is drastically reduced when the 
objects’  size  nears  the  1000  bytes  number.  The  time  remains  almost  the  same  for 
bigger objects. This may be caused by the way the ad-hoc network packs the data in 
an UDP packages and sends it to the network. In any case, this result gives us a hint 
on how to design applications in order to have the best response time: objects being 
shared should contain as  much information as possible and in any case  they  should 
contain at least 1k bytes.  

3500

3000

2500

2000

1500

1000

500

)
s
d
n
o
c
e
s

i
l
i

 

m
n
i
(
 

e
m

i
t
 
p
i
r
t
-
d
n
u
o
r
 
r
e
f
s
n
a
r
t

0

0
1

JAVAJAVA

C#-
JAVA
C# C#

 

0
1
4

0
1
8

0
1
1
3

0
1
1
7

Object size (in bytes)

Fig. 3. Curves of time required for a round-trip of objects of different sizes between two C# applications,
 two Java applications, and a C# and a Java application 

5   Implemented Applications 

With the help of this middleware, we have already implemented some applications for 
mobile  and  desktop  computers.  Some  of  them  make  intensive  use  of  the  transplatform 
feature of the middleware and others were implemented for being run on the 
same platform. The trans-platform  feature  was  mainly  used  when  we  wanted to develop 
 C#  applications  running  on  handheld  devices  communicating  with  existing 
applications on desktop computers developed for the Java platform.  
 

 

Supporting the Development of Applications 

19 

MCsketcher:  MCSketcher  [3]  is  a  system  that  enables  face-to-face  collaborative 
design based on sketches using handheld devices equipped for spontaneous wireless 
peer-to-peer  networking.  It  is  especially  targeted  for  supporting  preliminary,  in-thefield 
work, allowing designers to exchange ideas through sketches on empty sheets or 
over a recently taken photograph of the object being worked on, in a brainstorminglike 
 working  style.  Pen-based  designed  human-computer  interaction  is  the  key  to 
supporting collaborative work. This application was entirely written in C# aimed for 
being used only in a mobile situation.  

Table 1. Description of the most important methods of the middleware’s API 

FOR SENDING/RECEIVING OBJECTS 

multicastIP, 

public  Node(String  nodeID, 
String 
int  
multicastPort) 
public 
receiveObject(Object o) 

void  

public  void  sendObject(String 
partnerID, Object obj) 

public 
void  
sendObject(String[] usrIDList, 
Object obj) 
public 
sendToGroup(String  
groupName, Object o) 

void  

void 

void 

leave(String 

GROUP MANAGEMENT 
join(String 

public 
groupName) 
public 
groupName) 
public 
remoteJoinGroup(String 
groupName, String partnerID) 
public 
void  
remoteLeaveGroup(String 
groupName, String partnerID) 

void  

Creates  a  Node  object  which  starts  the  Multicast 
service for discovering and the TCP/IP server for 
transferring data.  
Used  by  the  communication  node  in  order  to 
receive  the  objects  sent  by  the  partners  and  
synchronize the state of the shared objects.   
Sends an object to a certain partner. If partnerID 
is null the object will be sent to all partners in the 
network 
Sends an object to a list of users 

Sends  an  object  to  all  partners  registered  in  a 
specific group 

Joins the application to a certain group characterized 
by the group’s name 
Detaches the application from the group specified  

Invokes the join  method in a remote application, 
forcing that application to join a group 

Invokes the leave method in a remote application, 
forcing that application to leave a group 

METHOD FOR SHARED OBJECTS 

public void postProcess() 

void 

public 
addSOb-
ject(SharedObject  so,  String 
name) 

Abstract  method  of  the  SharedObjec  class.  Invoked 
when the object is updated 
Registers a shard object  with the communication 
node 

 

20 

N. Baloian and G. Zurita 

Nomad:  Nomad  [22]  is  an  Electronic  Meeting  Support  system  for  handhelds.  The 
design principles applied for developing the system are aimed to help reduce the problems 
associated with having a small size screen to interact with. The human-handheld 
interaction is based only in gestures and freehand writing, avoiding the need of widgets 
and virtual keyboards. The content of the generated documents are organized as 
concept maps, which gives more flexibility to reorganize and merge the contributions 
of the meeting attendees.  The system is based on handhelds interconnected with an 
ad-hoc  wireless  network. This application has a  module  which allows the  use of an 
electronic  board  in  order  to  have  a  common  display  to  show  the  content  being  
produced during the working session.  

Coolmodes:  Coolmodes  [15]  provides  a  uniform  shared  workspace  environment 
which  allows  for  constructing  and  running  models  with  different  formal  representations 
 (Petri  nets,  System  Dynamics,  mathematical  graphs  etc.)  and  also  supports  
semi-formal  argumentation  graphs  and  hand-written  annotations.  This  software  was 
developed for being used on desktop computers over the Java platform with the goal 
of  being  used  collaboratively  in  a  classroom.  Several  students  can  share  a  running 
model  by  synchronizing  their  simulation  environments.  Simulations  are  analyzed  to 
generate hypotheses about the global behavior of systems. For this system, a C# module 
was developed in order to allow students interact with the software from mobile 
devices instead of. 

6   Conclusions 

In this work we presented a middleware to ease the development of distributed applications 
 in  a  peer-to-peer  environment.  Our  major  contribution  is  to  provide  a  full 
peer-to-peer solution across different platforms, which not only solves the problem of 
discovering  the  partners  present  in  the  MANET  and  synchronizing  the  application 
data among them, but this  middleware also provides an easy to use API in order to 
manage  different  working  groups  among  the  members  of  the  MANET.  This  has 
shown to be a very important feature especially when programming applications supporting 
collaborative learning, since in this kind of work, group forming and changing 
the  group  composition  is  present  in  many  learning  best  practices.  According  to  the 
benchmarking results and to the practical experience in using the middleware we can 
conclude that this is in fact an easy to use, flexible, and lightweight middleware for 
developing  distributed  applications  across  platforms.  In  fact,  we  could  see  that  programmers 
could  fast and easily design and program applications. The  shared object 
paradigm was perceived by them as a powerful yet easy to learn and use paradigm. 
Recent  developments  and  testing  have  shown  that  the  system  can  cope  with  a  relatively 
large number of students working at the same time without [24]. In this work, 
up to 25 students were able to work simultaneously without saturating the network.  

As we saw from the benchmarking results, the solution is fast enough to implement 
synchronous applications across platforms. In all the applications implemented so far 
the half a second-delay was not critical for influencing the normal flow of the applications 
we have developed so far with the middleware. We are still working in order to 
make  the  object  transfer  time  between  different  platforms  smaller,  by  making  the 
serializing/deserializing process more efficient.  

 

Supporting the Development of Applications 

21 

Finally, we want to point out that any platform implementing the API could then 
also  communicate  with  applications  implementing  these  two  platforms  using  the 
shared object paradigm. 

Acknowledgments.  This  paper  was  funded  by  Fondecyt  1050601  and  partially  by 
Fondecyt 1085010. 

References 

1.  Baloian,  N.,  Hoppe,  H.U.,  Milrad,  M.,  Hoeksema,  K.:  Technologies  and  educational  activities 
 for  supporting  Challenge-based  Learning.  In:  Education  for  the  21st  CenturyImpact 
of ICT and Digital Resources. IFIP, vol. 210, pp. 7–16. Springer, Boston (2006) 

2.  Baloian, N., Berges, A., Buschmann, S., Gassner, K., Hardings, J., Hoppe, H.U., Luther, 
W.: Document Management ina a Computer-Integrated Classroom. In: Haake, J.M., Pino, 
J.A. (eds.) CRIWG 2002. LNCS, vol. 2440, pp. 35–44. Springer, Heidelberg (2002) 

3.  Breuer, H., Konow, R., Baloian, N., Zutira, G.: Mobile Computing Seamlessly Integrate 
Formal and Informal Learning. In: Proceedings of the 7th IEEE Cof ICALT, Niigata, Japan,
 pp. 589–591 (2007) 

4.  Buszko, D., Lee, W., Helal, A.: Decentralized ad-hoc Groupware API and framework for 
mobile  Collaboration.  In:  Proceedings  of  the  GROUP  2001  Conf.  Boulder,  pp.  5–14 
(2002) 

5.  Chang,  C.Y.,  Sheu,  J.P.,  Chan,  T.W.:  Concept  and  design  of  ad  hoc  and  mobile  classrooms.
 Journal of Assisted Learning 19, 336–346 (2003) 

6.  Dewan, P., Choudhary, R.: A High-level and flexible framework for implementing multiuser 
interfaces. ACM Transactions on Information Systems 10(4), 345–380 (1992) 

7.  Farooq, U., Schafer, W., Rosson, M., Carroll, J.: M-Education: Bridging the gap of mobile 
and desktop computing. In: Proceedings of the WMTE 2002, Vexjö, Sweden, pp. 91–94 
(2002) 

8.  Hill, R., Brinck, T., Rohall, S., Patterson, J., Wilne, W.: The Rendezvous architecture and 
language for constructing multiuser applications. ACM Transactions on Computer-Human 
Interaction 1(2), 81–125 (1994) 

9.  Jianhua, M., Shizuka, M., Lee, J., Huang, R.: A P2P groupware system with decentralized 
topology  for  supporting  synchronous  collaborations.  In:  International  Conf.  on  Cyberworlds,
 Singapore, December 3-5, 2003, pp. 54–61 (2003) 

10.  Liang, J.-L., Liu, H.Y., Chang, B., Deng, Y.C., Yang, J.C., Chou, C.Y., Ko, H.W., Yang, 
S., Chan, T.W.: A few design perspectives on one-on-one digital classroom environment. 
Journal of Assisted Learning 21, 181–189 (2005) 

11.  Lukosch, S.: Adaptive and Transparent data Distribution Support. In: Haake, J.M., Pino, 

J.A. (eds.) CRIWG 2002. LNCS, vol. 2440, pp. 255–274. Springer, Heidelberg (2002) 

12.  Mascolo, C., Capra, L., Zachariadis, S.: XMIDDLE: A data-sharing middleware for mobile 
 computing.  In:  Wireless  Personal  Communications,  vol. 21,  pp.  77–103.  Kluwer, 
Netherlands (2002) 

13.  Neyem, A., Ochoa, S., Pino, J.A.: Supporting Mobile Collaboration with Service-Oriented 
Mobile Units. In: Dimitriadis, Y.A., Zigurs, I., Gómez-Sánchez, E. (eds.) CRIWG 2006. 
LNCS, vol. 4154, pp. 228–245. Springer, Heidelberg (2006) 

14.  Urnes, T., Nejabi, R.: Tools for implementing groupware: Survey and evaluation. Technical 
Report No. CS-94-03, York University (1994) 

22 

N. Baloian and G. Zurita 

15.  Pinkwart, N., Hoppe, U., Milrad, M., Perez, J.: Educational scenarios for cooperative use 

of Personal Digital Assistants. J. of Comp. Assisted Learning 19, 383–391 (2003) 

16.  Roseman, M., Grimberg, S.: Building real.time groupware with GroupKit. ACM Transactions 
on Computer-Human Interaction 3(1), 66–106 (1996) 

17.  Siland, P., Sutinen, E., Tarhio, J.: Mobile Collaborative Concept-Mapping Classroom Activity 
with Simultaneous Field Exploration. In: Proceedings of the WMTE 2004, Tayuan, 
Taiwan, pp. 114–118 (2004) 

18.  Srinivasan,  R.:  RPC:  Remote  Procedure  Call  Protocol  Specification  Version  2.  Internet 

RFC 1831 (1995) 

19.  Storm, R., Banvar, G., Miller, K., Prakash, A., Ward, M.: Concurrency Control and vie notification 
 algorithms  for  collaborative  replicated  objects.  IEEE  Transactions  on  Computers 
47(4), 458–471 (1998) 

20.  Tewissen, F., Baloian, N., Hoppe, H.U., Reimberg, E.: MatchMaker: Synchronising Objects 
in Replicated Software-Architectures. In: Proceedings of the CRIWG 2000, Madeira, 
Portugal, pp. 60–67. IEEE Computer Society Press, Los Alamitos (2000) 

21.  Vogel,  A.,  Duddy,  K.:  Java  Programming  with  CORBA,  2nd  edn.  John  Wiley  &  Sons, 

USA (1998) 

22.  Zurita, G., Baloian, N., Baytelman, F.: A face-to-face system  for supporting mobile collaborative 
design using sketches and pen-.based gestures. In: Proceedings of the CSCWD 
2006, Nanjing, China, pp. 250–255 (2006) 

23.  Zurita, G., Baloian, N., Baytelman, F., Morales, M.: A gestures and freehand writing interaction 
 based  Electronic  Meeting  Support  System  with  handhelds.  In:  COOPIS  2006, 
Montpelier, France, pp. 679–696 (2006) 

24.  Zurita, G., Baloian, N., Baytelman, F., Morales, M.: Using Mobile Devices to Foster Social 
Interactions in the Classroom. In: Proceeding of the CSCWD 2008, XiAn, China, pp. 
1041–1046 (2008) 

